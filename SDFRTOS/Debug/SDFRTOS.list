
SDFRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008808  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08008918  08008918  00018918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a30  08008a30  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08008a30  08008a30  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a30  08008a30  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a30  08008a30  00018a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a34  08008a34  00018a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08008a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001544  20000028  08008a60  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000156c  08008a60  0002156c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b3a  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003852  00000000  00000000  00034b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  000383e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  00039878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a25c  00000000  00000000  0003ab68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182ab  00000000  00000000  00054dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092ddf  00000000  00000000  0006d06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ffe4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054ac  00000000  00000000  000ffea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000028 	.word	0x20000028
 800012c:	00000000 	.word	0x00000000
 8000130:	08008900 	.word	0x08008900

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000002c 	.word	0x2000002c
 800014c:	08008900 	.word	0x08008900

08000150 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000154:	2200      	movs	r2, #0
 8000156:	2110      	movs	r1, #16
 8000158:	4803      	ldr	r0, [pc, #12]	; (8000168 <SELECT+0x18>)
 800015a:	f001 fa4f 	bl	80015fc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800015e:	2001      	movs	r0, #1
 8000160:	f000 ffc4 	bl	80010ec <HAL_Delay>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}
 8000168:	40010800 	.word	0x40010800

0800016c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000170:	2201      	movs	r2, #1
 8000172:	2110      	movs	r1, #16
 8000174:	4803      	ldr	r0, [pc, #12]	; (8000184 <DESELECT+0x18>)
 8000176:	f001 fa41 	bl	80015fc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800017a:	2001      	movs	r0, #1
 800017c:	f000 ffb6 	bl	80010ec <HAL_Delay>
}
 8000180:	bf00      	nop
 8000182:	bd80      	pop	{r7, pc}
 8000184:	40010800 	.word	0x40010800

08000188 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000192:	bf00      	nop
 8000194:	4b08      	ldr	r3, [pc, #32]	; (80001b8 <SPI_TxByte+0x30>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	689b      	ldr	r3, [r3, #8]
 800019a:	f003 0302 	and.w	r3, r3, #2
 800019e:	2b02      	cmp	r3, #2
 80001a0:	d1f8      	bne.n	8000194 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80001a2:	1df9      	adds	r1, r7, #7
 80001a4:	2364      	movs	r3, #100	; 0x64
 80001a6:	2201      	movs	r2, #1
 80001a8:	4803      	ldr	r0, [pc, #12]	; (80001b8 <SPI_TxByte+0x30>)
 80001aa:	f001 fef9 	bl	8001fa0 <HAL_SPI_Transmit>
}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	200002a0 	.word	0x200002a0

080001bc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
 80001c4:	460b      	mov	r3, r1
 80001c6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001c8:	bf00      	nop
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <SPI_TxBuffer+0x30>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	689b      	ldr	r3, [r3, #8]
 80001d0:	f003 0302 	and.w	r3, r3, #2
 80001d4:	2b02      	cmp	r3, #2
 80001d6:	d1f8      	bne.n	80001ca <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80001d8:	887a      	ldrh	r2, [r7, #2]
 80001da:	2364      	movs	r3, #100	; 0x64
 80001dc:	6879      	ldr	r1, [r7, #4]
 80001de:	4803      	ldr	r0, [pc, #12]	; (80001ec <SPI_TxBuffer+0x30>)
 80001e0:	f001 fede 	bl	8001fa0 <HAL_SPI_Transmit>
}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	200002a0 	.word	0x200002a0

080001f0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80001f6:	23ff      	movs	r3, #255	; 0xff
 80001f8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001fa:	bf00      	nop
 80001fc:	4b09      	ldr	r3, [pc, #36]	; (8000224 <SPI_RxByte+0x34>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	689b      	ldr	r3, [r3, #8]
 8000202:	f003 0302 	and.w	r3, r3, #2
 8000206:	2b02      	cmp	r3, #2
 8000208:	d1f8      	bne.n	80001fc <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800020a:	1dba      	adds	r2, r7, #6
 800020c:	1df9      	adds	r1, r7, #7
 800020e:	2364      	movs	r3, #100	; 0x64
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	2301      	movs	r3, #1
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <SPI_RxByte+0x34>)
 8000216:	f001 ffff 	bl	8002218 <HAL_SPI_TransmitReceive>

	return data;
 800021a:	79bb      	ldrb	r3, [r7, #6]
}
 800021c:	4618      	mov	r0, r3
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	200002a0 	.word	0x200002a0

08000228 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000230:	f7ff ffde 	bl	80001f0 <SPI_RxByte>
 8000234:	4603      	mov	r3, r0
 8000236:	461a      	mov	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	701a      	strb	r2, [r3, #0]
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}

08000244 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800024a:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <SD_ReadyWait+0x30>)
 800024c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000250:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000252:	f7ff ffcd 	bl	80001f0 <SPI_RxByte>
 8000256:	4603      	mov	r3, r0
 8000258:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2bff      	cmp	r3, #255	; 0xff
 800025e:	d003      	beq.n	8000268 <SD_ReadyWait+0x24>
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <SD_ReadyWait+0x30>)
 8000262:	881b      	ldrh	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d1f4      	bne.n	8000252 <SD_ReadyWait+0xe>

	return res;
 8000268:	79fb      	ldrb	r3, [r7, #7]
}
 800026a:	4618      	mov	r0, r3
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	20000046 	.word	0x20000046

08000278 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800027e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000282:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000284:	f7ff ff72 	bl	800016c <DESELECT>
	for(int i = 0; i < 10; i++)
 8000288:	2300      	movs	r3, #0
 800028a:	60bb      	str	r3, [r7, #8]
 800028c:	e005      	b.n	800029a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800028e:	20ff      	movs	r0, #255	; 0xff
 8000290:	f7ff ff7a 	bl	8000188 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	3301      	adds	r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	2b09      	cmp	r3, #9
 800029e:	ddf6      	ble.n	800028e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80002a0:	f7ff ff56 	bl	8000150 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80002a4:	2340      	movs	r3, #64	; 0x40
 80002a6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80002b8:	2395      	movs	r3, #149	; 0x95
 80002ba:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80002bc:	463b      	mov	r3, r7
 80002be:	2106      	movs	r1, #6
 80002c0:	4618      	mov	r0, r3
 80002c2:	f7ff ff7b 	bl	80001bc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80002c6:	e002      	b.n	80002ce <SD_PowerOn+0x56>
	{
		cnt--;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	3b01      	subs	r3, #1
 80002cc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80002ce:	f7ff ff8f 	bl	80001f0 <SPI_RxByte>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d002      	beq.n	80002de <SD_PowerOn+0x66>
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d1f4      	bne.n	80002c8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80002de:	f7ff ff45 	bl	800016c <DESELECT>
	SPI_TxByte(0XFF);
 80002e2:	20ff      	movs	r0, #255	; 0xff
 80002e4:	f7ff ff50 	bl	8000188 <SPI_TxByte>

	PowerFlag = 1;
 80002e8:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <SD_PowerOn+0x80>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	701a      	strb	r2, [r3, #0]
}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000049 	.word	0x20000049

080002fc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000300:	4b03      	ldr	r3, [pc, #12]	; (8000310 <SD_PowerOff+0x14>)
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]
}
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	20000049 	.word	0x20000049

08000314 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000318:	4b02      	ldr	r3, [pc, #8]	; (8000324 <SD_CheckPower+0x10>)
 800031a:	781b      	ldrb	r3, [r3, #0]
}
 800031c:	4618      	mov	r0, r3
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr
 8000324:	20000049 	.word	0x20000049

08000328 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <SD_RxDataBlock+0x58>)
 8000334:	22c8      	movs	r2, #200	; 0xc8
 8000336:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000338:	f7ff ff5a 	bl	80001f0 <SPI_RxByte>
 800033c:	4603      	mov	r3, r0
 800033e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	2bff      	cmp	r3, #255	; 0xff
 8000344:	d103      	bne.n	800034e <SD_RxDataBlock+0x26>
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <SD_RxDataBlock+0x58>)
 8000348:	881b      	ldrh	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d1f4      	bne.n	8000338 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	2bfe      	cmp	r3, #254	; 0xfe
 8000352:	d001      	beq.n	8000358 <SD_RxDataBlock+0x30>
 8000354:	2300      	movs	r3, #0
 8000356:	e00f      	b.n	8000378 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	1c5a      	adds	r2, r3, #1
 800035c:	607a      	str	r2, [r7, #4]
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff62 	bl	8000228 <SPI_RxBytePtr>
	} while(len--);
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	1e5a      	subs	r2, r3, #1
 8000368:	603a      	str	r2, [r7, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d1f4      	bne.n	8000358 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800036e:	f7ff ff3f 	bl	80001f0 <SPI_RxByte>
	SPI_RxByte();
 8000372:	f7ff ff3d 	bl	80001f0 <SPI_RxByte>

	return TRUE;
 8000376:	2301      	movs	r3, #1
}
 8000378:	4618      	mov	r0, r3
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20000044 	.word	0x20000044

08000384 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000394:	f7ff ff56 	bl	8000244 <SD_ReadyWait>
 8000398:	4603      	mov	r3, r0
 800039a:	2bff      	cmp	r3, #255	; 0xff
 800039c:	d001      	beq.n	80003a2 <SD_TxDataBlock+0x1e>
 800039e:	2300      	movs	r3, #0
 80003a0:	e02f      	b.n	8000402 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80003a2:	78fb      	ldrb	r3, [r7, #3]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff feef 	bl	8000188 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80003aa:	78fb      	ldrb	r3, [r7, #3]
 80003ac:	2bfd      	cmp	r3, #253	; 0xfd
 80003ae:	d020      	beq.n	80003f2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80003b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b4:	6878      	ldr	r0, [r7, #4]
 80003b6:	f7ff ff01 	bl	80001bc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80003ba:	f7ff ff19 	bl	80001f0 <SPI_RxByte>
		SPI_RxByte();
 80003be:	f7ff ff17 	bl	80001f0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80003c2:	e00b      	b.n	80003dc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80003c4:	f7ff ff14 	bl	80001f0 <SPI_RxByte>
 80003c8:	4603      	mov	r3, r0
 80003ca:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80003cc:	7bfb      	ldrb	r3, [r7, #15]
 80003ce:	f003 031f 	and.w	r3, r3, #31
 80003d2:	2b05      	cmp	r3, #5
 80003d4:	d006      	beq.n	80003e4 <SD_TxDataBlock+0x60>
			i++;
 80003d6:	7bbb      	ldrb	r3, [r7, #14]
 80003d8:	3301      	adds	r3, #1
 80003da:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80003dc:	7bbb      	ldrb	r3, [r7, #14]
 80003de:	2b40      	cmp	r3, #64	; 0x40
 80003e0:	d9f0      	bls.n	80003c4 <SD_TxDataBlock+0x40>
 80003e2:	e000      	b.n	80003e6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80003e4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80003e6:	bf00      	nop
 80003e8:	f7ff ff02 	bl	80001f0 <SPI_RxByte>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0fa      	beq.n	80003e8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80003f2:	7bfb      	ldrb	r3, [r7, #15]
 80003f4:	f003 031f 	and.w	r3, r3, #31
 80003f8:	2b05      	cmp	r3, #5
 80003fa:	d101      	bne.n	8000400 <SD_TxDataBlock+0x7c>
 80003fc:	2301      	movs	r3, #1
 80003fe:	e000      	b.n	8000402 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000400:	2300      	movs	r3, #0
}
 8000402:	4618      	mov	r0, r3
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b084      	sub	sp, #16
 800040e:	af00      	add	r7, sp, #0
 8000410:	4603      	mov	r3, r0
 8000412:	6039      	str	r1, [r7, #0]
 8000414:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000416:	f7ff ff15 	bl	8000244 <SD_ReadyWait>
 800041a:	4603      	mov	r3, r0
 800041c:	2bff      	cmp	r3, #255	; 0xff
 800041e:	d001      	beq.n	8000424 <SD_SendCmd+0x1a>
 8000420:	23ff      	movs	r3, #255	; 0xff
 8000422:	e042      	b.n	80004aa <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff feae 	bl	8000188 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	0e1b      	lsrs	r3, r3, #24
 8000430:	b2db      	uxtb	r3, r3
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff fea8 	bl	8000188 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	0c1b      	lsrs	r3, r3, #16
 800043c:	b2db      	uxtb	r3, r3
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff fea2 	bl	8000188 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	0a1b      	lsrs	r3, r3, #8
 8000448:	b2db      	uxtb	r3, r3
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fe9c 	bl	8000188 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	b2db      	uxtb	r3, r3
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff fe97 	bl	8000188 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	2b40      	cmp	r3, #64	; 0x40
 800045e:	d102      	bne.n	8000466 <SD_SendCmd+0x5c>
 8000460:	2395      	movs	r3, #149	; 0x95
 8000462:	73fb      	strb	r3, [r7, #15]
 8000464:	e007      	b.n	8000476 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	2b48      	cmp	r3, #72	; 0x48
 800046a:	d102      	bne.n	8000472 <SD_SendCmd+0x68>
 800046c:	2387      	movs	r3, #135	; 0x87
 800046e:	73fb      	strb	r3, [r7, #15]
 8000470:	e001      	b.n	8000476 <SD_SendCmd+0x6c>
	else crc = 1;
 8000472:	2301      	movs	r3, #1
 8000474:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff fe85 	bl	8000188 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	2b4c      	cmp	r3, #76	; 0x4c
 8000482:	d101      	bne.n	8000488 <SD_SendCmd+0x7e>
 8000484:	f7ff feb4 	bl	80001f0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000488:	230a      	movs	r3, #10
 800048a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800048c:	f7ff feb0 	bl	80001f0 <SPI_RxByte>
 8000490:	4603      	mov	r3, r0
 8000492:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000494:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000498:	2b00      	cmp	r3, #0
 800049a:	da05      	bge.n	80004a8 <SD_SendCmd+0x9e>
 800049c:	7bbb      	ldrb	r3, [r7, #14]
 800049e:	3b01      	subs	r3, #1
 80004a0:	73bb      	strb	r3, [r7, #14]
 80004a2:	7bbb      	ldrb	r3, [r7, #14]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d1f1      	bne.n	800048c <SD_SendCmd+0x82>

	return res;
 80004a8:	7b7b      	ldrb	r3, [r7, #13]
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3710      	adds	r7, #16
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80004b4:	b590      	push	{r4, r7, lr}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SD_disk_initialize+0x14>
 80004c4:	2301      	movs	r3, #1
 80004c6:	e0d1      	b.n	800066c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80004c8:	4b6a      	ldr	r3, [pc, #424]	; (8000674 <SD_disk_initialize+0x1c0>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	f003 0302 	and.w	r3, r3, #2
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d003      	beq.n	80004de <SD_disk_initialize+0x2a>
 80004d6:	4b67      	ldr	r3, [pc, #412]	; (8000674 <SD_disk_initialize+0x1c0>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	e0c6      	b.n	800066c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80004de:	f7ff fecb 	bl	8000278 <SD_PowerOn>

	/* slave select */
	SELECT();
 80004e2:	f7ff fe35 	bl	8000150 <SELECT>

	/* check disk type */
	type = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80004ea:	2100      	movs	r1, #0
 80004ec:	2040      	movs	r0, #64	; 0x40
 80004ee:	f7ff ff8c 	bl	800040a <SD_SendCmd>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	f040 80a1 	bne.w	800063c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80004fa:	4b5f      	ldr	r3, [pc, #380]	; (8000678 <SD_disk_initialize+0x1c4>)
 80004fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000500:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000502:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000506:	2048      	movs	r0, #72	; 0x48
 8000508:	f7ff ff7f 	bl	800040a <SD_SendCmd>
 800050c:	4603      	mov	r3, r0
 800050e:	2b01      	cmp	r3, #1
 8000510:	d155      	bne.n	80005be <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000512:	2300      	movs	r3, #0
 8000514:	73fb      	strb	r3, [r7, #15]
 8000516:	e00c      	b.n	8000532 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000518:	7bfc      	ldrb	r4, [r7, #15]
 800051a:	f7ff fe69 	bl	80001f0 <SPI_RxByte>
 800051e:	4603      	mov	r3, r0
 8000520:	461a      	mov	r2, r3
 8000522:	f104 0310 	add.w	r3, r4, #16
 8000526:	443b      	add	r3, r7
 8000528:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	3301      	adds	r3, #1
 8000530:	73fb      	strb	r3, [r7, #15]
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	2b03      	cmp	r3, #3
 8000536:	d9ef      	bls.n	8000518 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000538:	7abb      	ldrb	r3, [r7, #10]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d17e      	bne.n	800063c <SD_disk_initialize+0x188>
 800053e:	7afb      	ldrb	r3, [r7, #11]
 8000540:	2baa      	cmp	r3, #170	; 0xaa
 8000542:	d17b      	bne.n	800063c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000544:	2100      	movs	r1, #0
 8000546:	2077      	movs	r0, #119	; 0x77
 8000548:	f7ff ff5f 	bl	800040a <SD_SendCmd>
 800054c:	4603      	mov	r3, r0
 800054e:	2b01      	cmp	r3, #1
 8000550:	d807      	bhi.n	8000562 <SD_disk_initialize+0xae>
 8000552:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000556:	2069      	movs	r0, #105	; 0x69
 8000558:	f7ff ff57 	bl	800040a <SD_SendCmd>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d004      	beq.n	800056c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000562:	4b45      	ldr	r3, [pc, #276]	; (8000678 <SD_disk_initialize+0x1c4>)
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d1ec      	bne.n	8000544 <SD_disk_initialize+0x90>
 800056a:	e000      	b.n	800056e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800056c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800056e:	4b42      	ldr	r3, [pc, #264]	; (8000678 <SD_disk_initialize+0x1c4>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d062      	beq.n	800063c <SD_disk_initialize+0x188>
 8000576:	2100      	movs	r1, #0
 8000578:	207a      	movs	r0, #122	; 0x7a
 800057a:	f7ff ff46 	bl	800040a <SD_SendCmd>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d15b      	bne.n	800063c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000584:	2300      	movs	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]
 8000588:	e00c      	b.n	80005a4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800058a:	7bfc      	ldrb	r4, [r7, #15]
 800058c:	f7ff fe30 	bl	80001f0 <SPI_RxByte>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	f104 0310 	add.w	r3, r4, #16
 8000598:	443b      	add	r3, r7
 800059a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	3301      	adds	r3, #1
 80005a2:	73fb      	strb	r3, [r7, #15]
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d9ef      	bls.n	800058a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80005aa:	7a3b      	ldrb	r3, [r7, #8]
 80005ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SD_disk_initialize+0x104>
 80005b4:	230c      	movs	r3, #12
 80005b6:	e000      	b.n	80005ba <SD_disk_initialize+0x106>
 80005b8:	2304      	movs	r3, #4
 80005ba:	73bb      	strb	r3, [r7, #14]
 80005bc:	e03e      	b.n	800063c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80005be:	2100      	movs	r1, #0
 80005c0:	2077      	movs	r0, #119	; 0x77
 80005c2:	f7ff ff22 	bl	800040a <SD_SendCmd>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d808      	bhi.n	80005de <SD_disk_initialize+0x12a>
 80005cc:	2100      	movs	r1, #0
 80005ce:	2069      	movs	r0, #105	; 0x69
 80005d0:	f7ff ff1b 	bl	800040a <SD_SendCmd>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d801      	bhi.n	80005de <SD_disk_initialize+0x12a>
 80005da:	2302      	movs	r3, #2
 80005dc:	e000      	b.n	80005e0 <SD_disk_initialize+0x12c>
 80005de:	2301      	movs	r3, #1
 80005e0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80005e2:	7bbb      	ldrb	r3, [r7, #14]
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d10e      	bne.n	8000606 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80005e8:	2100      	movs	r1, #0
 80005ea:	2077      	movs	r0, #119	; 0x77
 80005ec:	f7ff ff0d 	bl	800040a <SD_SendCmd>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d80e      	bhi.n	8000614 <SD_disk_initialize+0x160>
 80005f6:	2100      	movs	r1, #0
 80005f8:	2069      	movs	r0, #105	; 0x69
 80005fa:	f7ff ff06 	bl	800040a <SD_SendCmd>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d107      	bne.n	8000614 <SD_disk_initialize+0x160>
 8000604:	e00c      	b.n	8000620 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000606:	2100      	movs	r1, #0
 8000608:	2041      	movs	r0, #65	; 0x41
 800060a:	f7ff fefe 	bl	800040a <SD_SendCmd>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d004      	beq.n	800061e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <SD_disk_initialize+0x1c4>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d1e2      	bne.n	80005e2 <SD_disk_initialize+0x12e>
 800061c:	e000      	b.n	8000620 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800061e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <SD_disk_initialize+0x1c4>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d007      	beq.n	8000638 <SD_disk_initialize+0x184>
 8000628:	f44f 7100 	mov.w	r1, #512	; 0x200
 800062c:	2050      	movs	r0, #80	; 0x50
 800062e:	f7ff feec 	bl	800040a <SD_SendCmd>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SD_disk_initialize+0x188>
 8000638:	2300      	movs	r3, #0
 800063a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800063c:	4a0f      	ldr	r2, [pc, #60]	; (800067c <SD_disk_initialize+0x1c8>)
 800063e:	7bbb      	ldrb	r3, [r7, #14]
 8000640:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000642:	f7ff fd93 	bl	800016c <DESELECT>
	SPI_RxByte();
 8000646:	f7ff fdd3 	bl	80001f0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800064a:	7bbb      	ldrb	r3, [r7, #14]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d008      	beq.n	8000662 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <SD_disk_initialize+0x1c0>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	f023 0301 	bic.w	r3, r3, #1
 800065a:	b2da      	uxtb	r2, r3
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <SD_disk_initialize+0x1c0>)
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	e001      	b.n	8000666 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000662:	f7ff fe4b 	bl	80002fc <SD_PowerOff>
	}

	return Stat;
 8000666:	4b03      	ldr	r3, [pc, #12]	; (8000674 <SD_disk_initialize+0x1c0>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
}
 800066c:	4618      	mov	r0, r3
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	bd90      	pop	{r4, r7, pc}
 8000674:	20000000 	.word	0x20000000
 8000678:	20000044 	.word	0x20000044
 800067c:	20000048 	.word	0x20000048

08000680 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SD_disk_status+0x14>
 8000690:	2301      	movs	r3, #1
 8000692:	e002      	b.n	800069a <SD_disk_status+0x1a>
	return Stat;
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <SD_disk_status+0x24>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2db      	uxtb	r3, r3
}
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	20000000 	.word	0x20000000

080006a8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	4603      	mov	r3, r0
 80006b6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d102      	bne.n	80006c4 <SD_disk_read+0x1c>
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <SD_disk_read+0x20>
 80006c4:	2304      	movs	r3, #4
 80006c6:	e051      	b.n	800076c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80006c8:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <SD_disk_read+0xcc>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SD_disk_read+0x32>
 80006d6:	2303      	movs	r3, #3
 80006d8:	e048      	b.n	800076c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80006da:	4b27      	ldr	r3, [pc, #156]	; (8000778 <SD_disk_read+0xd0>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d102      	bne.n	80006ec <SD_disk_read+0x44>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	025b      	lsls	r3, r3, #9
 80006ea:	607b      	str	r3, [r7, #4]

	SELECT();
 80006ec:	f7ff fd30 	bl	8000150 <SELECT>

	if (count == 1)
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d111      	bne.n	800071a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	2051      	movs	r0, #81	; 0x51
 80006fa:	f7ff fe86 	bl	800040a <SD_SendCmd>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d129      	bne.n	8000758 <SD_disk_read+0xb0>
 8000704:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000708:	68b8      	ldr	r0, [r7, #8]
 800070a:	f7ff fe0d 	bl	8000328 <SD_RxDataBlock>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d021      	beq.n	8000758 <SD_disk_read+0xb0>
 8000714:	2300      	movs	r3, #0
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	e01e      	b.n	8000758 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800071a:	6879      	ldr	r1, [r7, #4]
 800071c:	2052      	movs	r0, #82	; 0x52
 800071e:	f7ff fe74 	bl	800040a <SD_SendCmd>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d117      	bne.n	8000758 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072c:	68b8      	ldr	r0, [r7, #8]
 800072e:	f7ff fdfb 	bl	8000328 <SD_RxDataBlock>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d00a      	beq.n	800074e <SD_disk_read+0xa6>
				buff += 512;
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800073e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	3b01      	subs	r3, #1
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1ed      	bne.n	8000728 <SD_disk_read+0x80>
 800074c:	e000      	b.n	8000750 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800074e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000750:	2100      	movs	r1, #0
 8000752:	204c      	movs	r0, #76	; 0x4c
 8000754:	f7ff fe59 	bl	800040a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000758:	f7ff fd08 	bl	800016c <DESELECT>
	SPI_RxByte();
 800075c:	f7ff fd48 	bl	80001f0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	bf14      	ite	ne
 8000766:	2301      	movne	r3, #1
 8000768:	2300      	moveq	r3, #0
 800076a:	b2db      	uxtb	r3, r3
}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000000 	.word	0x20000000
 8000778:	20000048 	.word	0x20000048

0800077c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	4603      	mov	r3, r0
 800078a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d102      	bne.n	8000798 <SD_disk_write+0x1c>
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d101      	bne.n	800079c <SD_disk_write+0x20>
 8000798:	2304      	movs	r3, #4
 800079a:	e06b      	b.n	8000874 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800079c:	4b37      	ldr	r3, [pc, #220]	; (800087c <SD_disk_write+0x100>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SD_disk_write+0x32>
 80007aa:	2303      	movs	r3, #3
 80007ac:	e062      	b.n	8000874 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80007ae:	4b33      	ldr	r3, [pc, #204]	; (800087c <SD_disk_write+0x100>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	f003 0304 	and.w	r3, r3, #4
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SD_disk_write+0x44>
 80007bc:	2302      	movs	r3, #2
 80007be:	e059      	b.n	8000874 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80007c0:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <SD_disk_write+0x104>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d102      	bne.n	80007d2 <SD_disk_write+0x56>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	025b      	lsls	r3, r3, #9
 80007d0:	607b      	str	r3, [r7, #4]

	SELECT();
 80007d2:	f7ff fcbd 	bl	8000150 <SELECT>

	if (count == 1)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d110      	bne.n	80007fe <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80007dc:	6879      	ldr	r1, [r7, #4]
 80007de:	2058      	movs	r0, #88	; 0x58
 80007e0:	f7ff fe13 	bl	800040a <SD_SendCmd>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d13a      	bne.n	8000860 <SD_disk_write+0xe4>
 80007ea:	21fe      	movs	r1, #254	; 0xfe
 80007ec:	68b8      	ldr	r0, [r7, #8]
 80007ee:	f7ff fdc9 	bl	8000384 <SD_TxDataBlock>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d033      	beq.n	8000860 <SD_disk_write+0xe4>
			count = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	e030      	b.n	8000860 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <SD_disk_write+0x104>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	2b00      	cmp	r3, #0
 8000808:	d007      	beq.n	800081a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800080a:	2100      	movs	r1, #0
 800080c:	2077      	movs	r0, #119	; 0x77
 800080e:	f7ff fdfc 	bl	800040a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000812:	6839      	ldr	r1, [r7, #0]
 8000814:	2057      	movs	r0, #87	; 0x57
 8000816:	f7ff fdf8 	bl	800040a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	2059      	movs	r0, #89	; 0x59
 800081e:	f7ff fdf4 	bl	800040a <SD_SendCmd>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d11b      	bne.n	8000860 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000828:	21fc      	movs	r1, #252	; 0xfc
 800082a:	68b8      	ldr	r0, [r7, #8]
 800082c:	f7ff fdaa 	bl	8000384 <SD_TxDataBlock>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00a      	beq.n	800084c <SD_disk_write+0xd0>
				buff += 512;
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800083c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	3b01      	subs	r3, #1
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1ee      	bne.n	8000828 <SD_disk_write+0xac>
 800084a:	e000      	b.n	800084e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800084c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800084e:	21fd      	movs	r1, #253	; 0xfd
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fd97 	bl	8000384 <SD_TxDataBlock>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d101      	bne.n	8000860 <SD_disk_write+0xe4>
			{
				count = 1;
 800085c:	2301      	movs	r3, #1
 800085e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000860:	f7ff fc84 	bl	800016c <DESELECT>
	SPI_RxByte();
 8000864:	f7ff fcc4 	bl	80001f0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	bf14      	ite	ne
 800086e:	2301      	movne	r3, #1
 8000870:	2300      	moveq	r3, #0
 8000872:	b2db      	uxtb	r3, r3
}
 8000874:	4618      	mov	r0, r3
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000000 	.word	0x20000000
 8000880:	20000048 	.word	0x20000048

08000884 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b08b      	sub	sp, #44	; 0x2c
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	603a      	str	r2, [r7, #0]
 800088e:	71fb      	strb	r3, [r7, #7]
 8000890:	460b      	mov	r3, r1
 8000892:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SD_disk_ioctl+0x1e>
 800089e:	2304      	movs	r3, #4
 80008a0:	e115      	b.n	8000ace <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80008a8:	79bb      	ldrb	r3, [r7, #6]
 80008aa:	2b05      	cmp	r3, #5
 80008ac:	d124      	bne.n	80008f8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80008ae:	6a3b      	ldr	r3, [r7, #32]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d012      	beq.n	80008dc <SD_disk_ioctl+0x58>
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	dc1a      	bgt.n	80008f0 <SD_disk_ioctl+0x6c>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d002      	beq.n	80008c4 <SD_disk_ioctl+0x40>
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d006      	beq.n	80008d0 <SD_disk_ioctl+0x4c>
 80008c2:	e015      	b.n	80008f0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80008c4:	f7ff fd1a 	bl	80002fc <SD_PowerOff>
			res = RES_OK;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008ce:	e0fc      	b.n	8000aca <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80008d0:	f7ff fcd2 	bl	8000278 <SD_PowerOn>
			res = RES_OK;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008da:	e0f6      	b.n	8000aca <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80008dc:	6a3b      	ldr	r3, [r7, #32]
 80008de:	1c5c      	adds	r4, r3, #1
 80008e0:	f7ff fd18 	bl	8000314 <SD_CheckPower>
 80008e4:	4603      	mov	r3, r0
 80008e6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80008e8:	2300      	movs	r3, #0
 80008ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008ee:	e0ec      	b.n	8000aca <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80008f0:	2304      	movs	r3, #4
 80008f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008f6:	e0e8      	b.n	8000aca <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80008f8:	4b77      	ldr	r3, [pc, #476]	; (8000ad8 <SD_disk_ioctl+0x254>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SD_disk_ioctl+0x86>
 8000906:	2303      	movs	r3, #3
 8000908:	e0e1      	b.n	8000ace <SD_disk_ioctl+0x24a>

		SELECT();
 800090a:	f7ff fc21 	bl	8000150 <SELECT>

		switch (ctrl)
 800090e:	79bb      	ldrb	r3, [r7, #6]
 8000910:	2b0d      	cmp	r3, #13
 8000912:	f200 80cb 	bhi.w	8000aac <SD_disk_ioctl+0x228>
 8000916:	a201      	add	r2, pc, #4	; (adr r2, 800091c <SD_disk_ioctl+0x98>)
 8000918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091c:	08000a17 	.word	0x08000a17
 8000920:	08000955 	.word	0x08000955
 8000924:	08000a07 	.word	0x08000a07
 8000928:	08000aad 	.word	0x08000aad
 800092c:	08000aad 	.word	0x08000aad
 8000930:	08000aad 	.word	0x08000aad
 8000934:	08000aad 	.word	0x08000aad
 8000938:	08000aad 	.word	0x08000aad
 800093c:	08000aad 	.word	0x08000aad
 8000940:	08000aad 	.word	0x08000aad
 8000944:	08000aad 	.word	0x08000aad
 8000948:	08000a29 	.word	0x08000a29
 800094c:	08000a4d 	.word	0x08000a4d
 8000950:	08000a71 	.word	0x08000a71
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000954:	2100      	movs	r1, #0
 8000956:	2049      	movs	r0, #73	; 0x49
 8000958:	f7ff fd57 	bl	800040a <SD_SendCmd>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	f040 80a8 	bne.w	8000ab4 <SD_disk_ioctl+0x230>
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2110      	movs	r1, #16
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fcdc 	bl	8000328 <SD_RxDataBlock>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	f000 809e 	beq.w	8000ab4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000978:	7b3b      	ldrb	r3, [r7, #12]
 800097a:	099b      	lsrs	r3, r3, #6
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b01      	cmp	r3, #1
 8000980:	d10e      	bne.n	80009a0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000982:	7d7b      	ldrb	r3, [r7, #21]
 8000984:	b29a      	uxth	r2, r3
 8000986:	7d3b      	ldrb	r3, [r7, #20]
 8000988:	b29b      	uxth	r3, r3
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	b29b      	uxth	r3, r3
 800098e:	4413      	add	r3, r2
 8000990:	b29b      	uxth	r3, r3
 8000992:	3301      	adds	r3, #1
 8000994:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000996:	8bfb      	ldrh	r3, [r7, #30]
 8000998:	029a      	lsls	r2, r3, #10
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	e02e      	b.n	80009fe <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80009a0:	7c7b      	ldrb	r3, [r7, #17]
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	7dbb      	ldrb	r3, [r7, #22]
 80009aa:	09db      	lsrs	r3, r3, #7
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4413      	add	r3, r2
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	7d7b      	ldrb	r3, [r7, #21]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	f003 0306 	and.w	r3, r3, #6
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4413      	add	r3, r2
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	3302      	adds	r3, #2
 80009c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80009c8:	7d3b      	ldrb	r3, [r7, #20]
 80009ca:	099b      	lsrs	r3, r3, #6
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	7cfb      	ldrb	r3, [r7, #19]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	4413      	add	r3, r2
 80009da:	b29a      	uxth	r2, r3
 80009dc:	7cbb      	ldrb	r3, [r7, #18]
 80009de:	029b      	lsls	r3, r3, #10
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	4413      	add	r3, r2
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	3301      	adds	r3, #1
 80009ee:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80009f0:	8bfa      	ldrh	r2, [r7, #30]
 80009f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009f6:	3b09      	subs	r3, #9
 80009f8:	409a      	lsls	r2, r3
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000a04:	e056      	b.n	8000ab4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a0c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a14:	e055      	b.n	8000ac2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000a16:	f7ff fc15 	bl	8000244 <SD_ReadyWait>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2bff      	cmp	r3, #255	; 0xff
 8000a1e:	d14b      	bne.n	8000ab8 <SD_disk_ioctl+0x234>
 8000a20:	2300      	movs	r3, #0
 8000a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a26:	e047      	b.n	8000ab8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2049      	movs	r0, #73	; 0x49
 8000a2c:	f7ff fced 	bl	800040a <SD_SendCmd>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d142      	bne.n	8000abc <SD_disk_ioctl+0x238>
 8000a36:	2110      	movs	r1, #16
 8000a38:	6a38      	ldr	r0, [r7, #32]
 8000a3a:	f7ff fc75 	bl	8000328 <SD_RxDataBlock>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d03b      	beq.n	8000abc <SD_disk_ioctl+0x238>
 8000a44:	2300      	movs	r3, #0
 8000a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a4a:	e037      	b.n	8000abc <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	204a      	movs	r0, #74	; 0x4a
 8000a50:	f7ff fcdb 	bl	800040a <SD_SendCmd>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d132      	bne.n	8000ac0 <SD_disk_ioctl+0x23c>
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	6a38      	ldr	r0, [r7, #32]
 8000a5e:	f7ff fc63 	bl	8000328 <SD_RxDataBlock>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d02b      	beq.n	8000ac0 <SD_disk_ioctl+0x23c>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a6e:	e027      	b.n	8000ac0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000a70:	2100      	movs	r1, #0
 8000a72:	207a      	movs	r0, #122	; 0x7a
 8000a74:	f7ff fcc9 	bl	800040a <SD_SendCmd>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d116      	bne.n	8000aac <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a84:	e00b      	b.n	8000a9e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000a86:	6a3c      	ldr	r4, [r7, #32]
 8000a88:	1c63      	adds	r3, r4, #1
 8000a8a:	623b      	str	r3, [r7, #32]
 8000a8c:	f7ff fbb0 	bl	80001f0 <SPI_RxByte>
 8000a90:	4603      	mov	r3, r0
 8000a92:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000a94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a98:	3301      	adds	r3, #1
 8000a9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d9ef      	bls.n	8000a86 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000aac:	2304      	movs	r3, #4
 8000aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ab2:	e006      	b.n	8000ac2 <SD_disk_ioctl+0x23e>
			break;
 8000ab4:	bf00      	nop
 8000ab6:	e004      	b.n	8000ac2 <SD_disk_ioctl+0x23e>
			break;
 8000ab8:	bf00      	nop
 8000aba:	e002      	b.n	8000ac2 <SD_disk_ioctl+0x23e>
			break;
 8000abc:	bf00      	nop
 8000abe:	e000      	b.n	8000ac2 <SD_disk_ioctl+0x23e>
			break;
 8000ac0:	bf00      	nop
		}

		DESELECT();
 8000ac2:	f7ff fb53 	bl	800016c <DESELECT>
		SPI_RxByte();
 8000ac6:	f7ff fb93 	bl	80001f0 <SPI_RxByte>
	}

	return res;
 8000aca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	372c      	adds	r7, #44	; 0x2c
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000000 	.word	0x20000000

08000adc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <vApplicationGetIdleTaskMemory+0x28>)
 8000aec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <vApplicationGetIdleTaskMemory+0x2c>)
 8000af2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	2000004c 	.word	0x2000004c
 8000b08:	200000a0 	.word	0x200000a0

08000b0c <Escritura_SD>:
char buffer_SD[3];
char escritura_SD[3];
uint8_t lectura_SD;

void Escritura_SD(void *arg)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(escribir)
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <Escritura_SD+0xac>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0fb      	beq.n	8000b14 <Escritura_SD+0x8>
		{
			escribir = 0;
 8000b1c:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <Escritura_SD+0xac>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
			if(f_mount(&fs, "", 0)) lectura_SD = 0; // Si no se monta la SD pedir que se reinicie el sistema
 8000b22:	2200      	movs	r2, #0
 8000b24:	4925      	ldr	r1, [pc, #148]	; (8000bbc <Escritura_SD+0xb0>)
 8000b26:	4826      	ldr	r0, [pc, #152]	; (8000bc0 <Escritura_SD+0xb4>)
 8000b28:	f003 ff46 	bl	80049b8 <f_mount>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <Escritura_SD+0x2c>
 8000b32:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <Escritura_SD+0xb8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]

			if(f_open(&fil, "Sensores.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ)) lectura_SD = 0; // Da error si no hay tarjeta, pantalla error SD
 8000b38:	2213      	movs	r2, #19
 8000b3a:	4923      	ldr	r1, [pc, #140]	; (8000bc8 <Escritura_SD+0xbc>)
 8000b3c:	4823      	ldr	r0, [pc, #140]	; (8000bcc <Escritura_SD+0xc0>)
 8000b3e:	f003 ffa3 	bl	8004a88 <f_open>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <Escritura_SD+0x42>
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <Escritura_SD+0xb8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]

			f_gets(buffer_SD, 4, &fil);
 8000b4e:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <Escritura_SD+0xc0>)
 8000b50:	2104      	movs	r1, #4
 8000b52:	481f      	ldr	r0, [pc, #124]	; (8000bd0 <Escritura_SD+0xc4>)
 8000b54:	f005 fa57 	bl	8006006 <f_gets>

			if(f_truncate(&fil)) lectura_SD = 0;  // Si se desconecto la tarjeta o hay error, mandar a ventana error SD
 8000b58:	481c      	ldr	r0, [pc, #112]	; (8000bcc <Escritura_SD+0xc0>)
 8000b5a:	f005 f98e 	bl	8005e7a <f_truncate>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d002      	beq.n	8000b6a <Escritura_SD+0x5e>
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <Escritura_SD+0xb8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]

			if(f_lseek(&fil, 0)) lectura_SD = 0;  // Si se desconecto la tarjeta o hay error, mandar a ventana error SD
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4817      	ldr	r0, [pc, #92]	; (8000bcc <Escritura_SD+0xc0>)
 8000b6e:	f004 feb5 	bl	80058dc <f_lseek>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <Escritura_SD+0x72>
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <Escritura_SD+0xb8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]

			escritura_SD[0] = 117;
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <Escritura_SD+0xc8>)
 8000b80:	2275      	movs	r2, #117	; 0x75
 8000b82:	701a      	strb	r2, [r3, #0]
			escritura_SD[1] = 119;
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <Escritura_SD+0xc8>)
 8000b86:	2277      	movs	r2, #119	; 0x77
 8000b88:	705a      	strb	r2, [r3, #1]
			escritura_SD[2] = 117;
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <Escritura_SD+0xc8>)
 8000b8c:	2275      	movs	r2, #117	; 0x75
 8000b8e:	709a      	strb	r2, [r3, #2]
			f_puts(escritura_SD, &fil);
 8000b90:	490e      	ldr	r1, [pc, #56]	; (8000bcc <Escritura_SD+0xc0>)
 8000b92:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <Escritura_SD+0xc8>)
 8000b94:	f005 fab1 	bl	80060fa <f_puts>
			if(f_close(&fil)) lectura_SD = 0;  // Si se desconecto la tarjeta o hay error, mandar a ventana error SD}*/
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <Escritura_SD+0xc0>)
 8000b9a:	f004 fe6f 	bl	800587c <f_close>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <Escritura_SD+0x9e>
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <Escritura_SD+0xb8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
			f_mount(NULL, "", 0); //Desmonto la SD
 8000baa:	2200      	movs	r2, #0
 8000bac:	4903      	ldr	r1, [pc, #12]	; (8000bbc <Escritura_SD+0xb0>)
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f003 ff02 	bl	80049b8 <f_mount>
		if(escribir)
 8000bb4:	e7ae      	b.n	8000b14 <Escritura_SD+0x8>
 8000bb6:	bf00      	nop
 8000bb8:	20000001 	.word	0x20000001
 8000bbc:	08008918 	.word	0x08008918
 8000bc0:	20000524 	.word	0x20000524
 8000bc4:	2000075f 	.word	0x2000075f
 8000bc8:	0800891c 	.word	0x0800891c
 8000bcc:	200002f8 	.word	0x200002f8
 8000bd0:	20000758 	.word	0x20000758
 8000bd4:	2000075c 	.word	0x2000075c

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f000 fa53 	bl	8001088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 f81b 	bl	8000c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f000 f895 	bl	8000d14 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bea:	f000 f85d 	bl	8000ca8 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000bee:	f001 ffa5 	bl	8002b3c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8000bf2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bf6:	f000 fa79 	bl	80010ec <HAL_Delay>
  /* definition and creation of defaultTask */
  //osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  //defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(Escritura_SD,"Escritura_SD", 128, NULL, 2, NULL);
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	9301      	str	r3, [sp, #4]
 8000bfe:	2302      	movs	r3, #2
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2300      	movs	r3, #0
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	4903      	ldr	r1, [pc, #12]	; (8000c14 <main+0x3c>)
 8000c08:	4803      	ldr	r0, [pc, #12]	; (8000c18 <main+0x40>)
 8000c0a:	f006 fb01 	bl	8007210 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  //osKernelStart();
  vTaskStartScheduler();
 8000c0e:	f006 fc2d 	bl	800746c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <main+0x3a>
 8000c14:	0800892c 	.word	0x0800892c
 8000c18:	08000b0d 	.word	0x08000b0d

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b090      	sub	sp, #64	; 0x40
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 0318 	add.w	r3, r7, #24
 8000c26:	2228      	movs	r2, #40	; 0x28
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f007 fe60 	bl	80088f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c50:	2302      	movs	r3, #2
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c5a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c60:	f107 0318 	add.w	r3, r7, #24
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fce1 	bl	800162c <HAL_RCC_OscConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c70:	f000 f8a0 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c74:	230f      	movs	r3, #15
 8000c76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 ff4e 	bl	8001b30 <HAL_RCC_ClockConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c9a:	f000 f88b 	bl	8000db4 <Error_Handler>
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3740      	adds	r7, #64	; 0x40
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cae:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <MX_SPI1_Init+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cdc:	2220      	movs	r2, #32
 8000cde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cf4:	220a      	movs	r2, #10
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_SPI1_Init+0x64>)
 8000cfa:	f001 f8cd 	bl	8001e98 <HAL_SPI_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d04:	f000 f856 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200002a0 	.word	0x200002a0
 8000d10:	40013000 	.word	0x40013000

08000d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <MX_GPIO_Init+0x74>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a16      	ldr	r2, [pc, #88]	; (8000d88 <MX_GPIO_Init+0x74>)
 8000d2e:	f043 0320 	orr.w	r3, r3, #32
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_GPIO_Init+0x74>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0320 	and.w	r3, r3, #32
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_GPIO_Init+0x74>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <MX_GPIO_Init+0x74>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_GPIO_Init+0x74>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	480b      	ldr	r0, [pc, #44]	; (8000d8c <MX_GPIO_Init+0x78>)
 8000d5e:	f000 fc4d 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d62:	2310      	movs	r3, #16
 8000d64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	4619      	mov	r1, r3
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_GPIO_Init+0x78>)
 8000d7a:	f000 fabb 	bl	80012f4 <HAL_GPIO_Init>

}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010800 	.word	0x40010800

08000d90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d101      	bne.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000da2:	f000 f987 	bl	80010b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40000800 	.word	0x40000800

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <Error_Handler+0x8>
	...

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_MspInit+0x68>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <HAL_MspInit+0x68>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6193      	str	r3, [r2, #24]
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_MspInit+0x68>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_MspInit+0x68>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	4a11      	ldr	r2, [pc, #68]	; (8000e28 <HAL_MspInit+0x68>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	61d3      	str	r3, [r2, #28]
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_MspInit+0x68>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	210f      	movs	r1, #15
 8000dfa:	f06f 0001 	mvn.w	r0, #1
 8000dfe:	f000 fa4e 	bl	800129e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_MspInit+0x6c>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_MspInit+0x6c>)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010000 	.word	0x40010000

08000e30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <HAL_SPI_MspInit+0x88>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d12f      	bne.n	8000eb0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e50:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_SPI_MspInit+0x8c>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_SPI_MspInit+0x8c>)
 8000e56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_SPI_MspInit+0x8c>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_SPI_MspInit+0x8c>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <HAL_SPI_MspInit+0x8c>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_SPI_MspInit+0x8c>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e80:	23a0      	movs	r3, #160	; 0xa0
 8000e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <HAL_SPI_MspInit+0x90>)
 8000e94:	f000 fa2e 	bl	80012f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e98:	2340      	movs	r3, #64	; 0x40
 8000e9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_SPI_MspInit+0x90>)
 8000eac:	f000 fa22 	bl	80012f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3720      	adds	r7, #32
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40013000 	.word	0x40013000
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010800 	.word	0x40010800

08000ec4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08e      	sub	sp, #56	; 0x38
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000eda:	4b34      	ldr	r3, [pc, #208]	; (8000fac <HAL_InitTick+0xe8>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4a33      	ldr	r2, [pc, #204]	; (8000fac <HAL_InitTick+0xe8>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	61d3      	str	r3, [r2, #28]
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <HAL_InitTick+0xe8>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef2:	f107 0210 	add.w	r2, r7, #16
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 ff7d 	bl	8001dfc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f02:	6a3b      	ldr	r3, [r7, #32]
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d103      	bne.n	8000f14 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f0c:	f000 ff62 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8000f10:	6378      	str	r0, [r7, #52]	; 0x34
 8000f12:	e004      	b.n	8000f1e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f14:	f000 ff5e 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f20:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <HAL_InitTick+0xec>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	0c9b      	lsrs	r3, r3, #18
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <HAL_InitTick+0xf0>)
 8000f2e:	4a22      	ldr	r2, [pc, #136]	; (8000fb8 <HAL_InitTick+0xf4>)
 8000f30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <HAL_InitTick+0xf0>)
 8000f34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f38:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000f3a:	4a1e      	ldr	r2, [pc, #120]	; (8000fb4 <HAL_InitTick+0xf0>)
 8000f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000f40:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <HAL_InitTick+0xf0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <HAL_InitTick+0xf0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <HAL_InitTick+0xf0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000f52:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <HAL_InitTick+0xf0>)
 8000f54:	f001 fba8 	bl	80026a8 <HAL_TIM_Base_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d11b      	bne.n	8000f9e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000f66:	4813      	ldr	r0, [pc, #76]	; (8000fb4 <HAL_InitTick+0xf0>)
 8000f68:	f001 fbf6 	bl	8002758 <HAL_TIM_Base_Start_IT>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d111      	bne.n	8000f9e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f7a:	201e      	movs	r0, #30
 8000f7c:	f000 f9ab 	bl	80012d6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	d808      	bhi.n	8000f98 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000f86:	2200      	movs	r2, #0
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	201e      	movs	r0, #30
 8000f8c:	f000 f987 	bl	800129e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_InitTick+0xf8>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e002      	b.n	8000f9e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3738      	adds	r7, #56	; 0x38
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	431bde83 	.word	0x431bde83
 8000fb4:	20000760 	.word	0x20000760
 8000fb8:	40000800 	.word	0x40000800
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
	...

08000fec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if(Timer1 > 0)
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <TIM4_IRQHandler+0x38>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <TIM4_IRQHandler+0x18>
		Timer1--;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <TIM4_IRQHandler+0x38>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <TIM4_IRQHandler+0x38>)
 8001002:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <TIM4_IRQHandler+0x3c>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <TIM4_IRQHandler+0x2c>
		Timer2--;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <TIM4_IRQHandler+0x3c>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	3b01      	subs	r3, #1
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <TIM4_IRQHandler+0x3c>)
 8001016:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <TIM4_IRQHandler+0x40>)
 800101a:	f001 fbef 	bl	80027fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000044 	.word	0x20000044
 8001028:	20000046 	.word	0x20000046
 800102c:	20000760 	.word	0x20000760

08001030 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800103e:	490d      	ldr	r1, [pc, #52]	; (8001074 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001054:	4c0a      	ldr	r4, [pc, #40]	; (8001080 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001062:	f7ff ffe5 	bl	8001030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001066:	f007 fc11 	bl	800888c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800106a:	f7ff fdb5 	bl	8000bd8 <main>
  bx lr
 800106e:	4770      	bx	lr
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001074:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001078:	08008a38 	.word	0x08008a38
  ldr r2, =_sbss
 800107c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001080:	2000156c 	.word	0x2000156c

08001084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC1_2_IRQHandler>
	...

08001088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x28>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x28>)
 8001092:	f043 0310 	orr.w	r3, r3, #16
 8001096:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 f8f5 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	200f      	movs	r0, #15
 80010a0:	f7ff ff10 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff fe8c 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40022000 	.word	0x40022000

080010b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_IncTick+0x1c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_IncTick+0x20>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a03      	ldr	r2, [pc, #12]	; (80010d4 <HAL_IncTick+0x20>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	2000000c 	.word	0x2000000c
 80010d4:	200007a8 	.word	0x200007a8

080010d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b02      	ldr	r3, [pc, #8]	; (80010e8 <HAL_GetTick+0x10>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	200007a8 	.word	0x200007a8

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff fff0 	bl	80010d8 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_Delay+0x44>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffe0 	bl	80010d8 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000000c 	.word	0x2000000c

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800115c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4906      	ldr	r1, [pc, #24]	; (80011cc <__NVIC_EnableIRQ+0x34>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	; (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	; (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	; 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff4f 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b0:	f7ff ff64 	bl	800117c <__NVIC_GetPriorityGrouping>
 80012b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff ffb2 	bl	8001224 <NVIC_EncodePriority>
 80012c0:	4602      	mov	r2, r0
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff81 	bl	80011d0 <__NVIC_SetPriority>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff57 	bl	8001198 <__NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b08b      	sub	sp, #44	; 0x2c
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001306:	e169      	b.n	80015dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001308:	2201      	movs	r2, #1
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	69fa      	ldr	r2, [r7, #28]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	429a      	cmp	r2, r3
 8001322:	f040 8158 	bne.w	80015d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4a9a      	ldr	r2, [pc, #616]	; (8001594 <HAL_GPIO_Init+0x2a0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d05e      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
 8001330:	4a98      	ldr	r2, [pc, #608]	; (8001594 <HAL_GPIO_Init+0x2a0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d875      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 8001336:	4a98      	ldr	r2, [pc, #608]	; (8001598 <HAL_GPIO_Init+0x2a4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d058      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
 800133c:	4a96      	ldr	r2, [pc, #600]	; (8001598 <HAL_GPIO_Init+0x2a4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d86f      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 8001342:	4a96      	ldr	r2, [pc, #600]	; (800159c <HAL_GPIO_Init+0x2a8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d052      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
 8001348:	4a94      	ldr	r2, [pc, #592]	; (800159c <HAL_GPIO_Init+0x2a8>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d869      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 800134e:	4a94      	ldr	r2, [pc, #592]	; (80015a0 <HAL_GPIO_Init+0x2ac>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d04c      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
 8001354:	4a92      	ldr	r2, [pc, #584]	; (80015a0 <HAL_GPIO_Init+0x2ac>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d863      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 800135a:	4a92      	ldr	r2, [pc, #584]	; (80015a4 <HAL_GPIO_Init+0x2b0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d046      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
 8001360:	4a90      	ldr	r2, [pc, #576]	; (80015a4 <HAL_GPIO_Init+0x2b0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d85d      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 8001366:	2b12      	cmp	r3, #18
 8001368:	d82a      	bhi.n	80013c0 <HAL_GPIO_Init+0xcc>
 800136a:	2b12      	cmp	r3, #18
 800136c:	d859      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 800136e:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <HAL_GPIO_Init+0x80>)
 8001370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001374:	080013ef 	.word	0x080013ef
 8001378:	080013c9 	.word	0x080013c9
 800137c:	080013db 	.word	0x080013db
 8001380:	0800141d 	.word	0x0800141d
 8001384:	08001423 	.word	0x08001423
 8001388:	08001423 	.word	0x08001423
 800138c:	08001423 	.word	0x08001423
 8001390:	08001423 	.word	0x08001423
 8001394:	08001423 	.word	0x08001423
 8001398:	08001423 	.word	0x08001423
 800139c:	08001423 	.word	0x08001423
 80013a0:	08001423 	.word	0x08001423
 80013a4:	08001423 	.word	0x08001423
 80013a8:	08001423 	.word	0x08001423
 80013ac:	08001423 	.word	0x08001423
 80013b0:	08001423 	.word	0x08001423
 80013b4:	08001423 	.word	0x08001423
 80013b8:	080013d1 	.word	0x080013d1
 80013bc:	080013e5 	.word	0x080013e5
 80013c0:	4a79      	ldr	r2, [pc, #484]	; (80015a8 <HAL_GPIO_Init+0x2b4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d013      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013c6:	e02c      	b.n	8001422 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	623b      	str	r3, [r7, #32]
          break;
 80013ce:	e029      	b.n	8001424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	3304      	adds	r3, #4
 80013d6:	623b      	str	r3, [r7, #32]
          break;
 80013d8:	e024      	b.n	8001424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	3308      	adds	r3, #8
 80013e0:	623b      	str	r3, [r7, #32]
          break;
 80013e2:	e01f      	b.n	8001424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	330c      	adds	r3, #12
 80013ea:	623b      	str	r3, [r7, #32]
          break;
 80013ec:	e01a      	b.n	8001424 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d102      	bne.n	80013fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013f6:	2304      	movs	r3, #4
 80013f8:	623b      	str	r3, [r7, #32]
          break;
 80013fa:	e013      	b.n	8001424 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d105      	bne.n	8001410 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001404:	2308      	movs	r3, #8
 8001406:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69fa      	ldr	r2, [r7, #28]
 800140c:	611a      	str	r2, [r3, #16]
          break;
 800140e:	e009      	b.n	8001424 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001410:	2308      	movs	r3, #8
 8001412:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	615a      	str	r2, [r3, #20]
          break;
 800141a:	e003      	b.n	8001424 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
          break;
 8001420:	e000      	b.n	8001424 <HAL_GPIO_Init+0x130>
          break;
 8001422:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	2bff      	cmp	r3, #255	; 0xff
 8001428:	d801      	bhi.n	800142e <HAL_GPIO_Init+0x13a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	e001      	b.n	8001432 <HAL_GPIO_Init+0x13e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3304      	adds	r3, #4
 8001432:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2bff      	cmp	r3, #255	; 0xff
 8001438:	d802      	bhi.n	8001440 <HAL_GPIO_Init+0x14c>
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	e002      	b.n	8001446 <HAL_GPIO_Init+0x152>
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	3b08      	subs	r3, #8
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	210f      	movs	r1, #15
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	fa01 f303 	lsl.w	r3, r1, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	401a      	ands	r2, r3
 8001458:	6a39      	ldr	r1, [r7, #32]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	431a      	orrs	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 80b1 	beq.w	80015d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001474:	4b4d      	ldr	r3, [pc, #308]	; (80015ac <HAL_GPIO_Init+0x2b8>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a4c      	ldr	r2, [pc, #304]	; (80015ac <HAL_GPIO_Init+0x2b8>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b4a      	ldr	r3, [pc, #296]	; (80015ac <HAL_GPIO_Init+0x2b8>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800148c:	4a48      	ldr	r2, [pc, #288]	; (80015b0 <HAL_GPIO_Init+0x2bc>)
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3302      	adds	r3, #2
 8001494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001498:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4013      	ands	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a40      	ldr	r2, [pc, #256]	; (80015b4 <HAL_GPIO_Init+0x2c0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d013      	beq.n	80014e0 <HAL_GPIO_Init+0x1ec>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a3f      	ldr	r2, [pc, #252]	; (80015b8 <HAL_GPIO_Init+0x2c4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d00d      	beq.n	80014dc <HAL_GPIO_Init+0x1e8>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a3e      	ldr	r2, [pc, #248]	; (80015bc <HAL_GPIO_Init+0x2c8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d007      	beq.n	80014d8 <HAL_GPIO_Init+0x1e4>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a3d      	ldr	r2, [pc, #244]	; (80015c0 <HAL_GPIO_Init+0x2cc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d101      	bne.n	80014d4 <HAL_GPIO_Init+0x1e0>
 80014d0:	2303      	movs	r3, #3
 80014d2:	e006      	b.n	80014e2 <HAL_GPIO_Init+0x1ee>
 80014d4:	2304      	movs	r3, #4
 80014d6:	e004      	b.n	80014e2 <HAL_GPIO_Init+0x1ee>
 80014d8:	2302      	movs	r3, #2
 80014da:	e002      	b.n	80014e2 <HAL_GPIO_Init+0x1ee>
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <HAL_GPIO_Init+0x1ee>
 80014e0:	2300      	movs	r3, #0
 80014e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e4:	f002 0203 	and.w	r2, r2, #3
 80014e8:	0092      	lsls	r2, r2, #2
 80014ea:	4093      	lsls	r3, r2
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014f2:	492f      	ldr	r1, [pc, #188]	; (80015b0 <HAL_GPIO_Init+0x2bc>)
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	3302      	adds	r3, #2
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d006      	beq.n	800151a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800150c:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <HAL_GPIO_Init+0x2d0>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	492c      	ldr	r1, [pc, #176]	; (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800151a:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <HAL_GPIO_Init+0x2d0>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	43db      	mvns	r3, r3
 8001522:	4928      	ldr	r1, [pc, #160]	; (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001524:	4013      	ands	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001534:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4922      	ldr	r1, [pc, #136]	; (80015c4 <HAL_GPIO_Init+0x2d0>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
 8001540:	e006      	b.n	8001550 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001542:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	43db      	mvns	r3, r3
 800154a:	491e      	ldr	r1, [pc, #120]	; (80015c4 <HAL_GPIO_Init+0x2d0>)
 800154c:	4013      	ands	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_GPIO_Init+0x2d0>)
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	4918      	ldr	r1, [pc, #96]	; (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	608b      	str	r3, [r1, #8]
 8001568:	e006      	b.n	8001578 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_GPIO_Init+0x2d0>)
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	43db      	mvns	r3, r3
 8001572:	4914      	ldr	r1, [pc, #80]	; (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001574:	4013      	ands	r3, r2
 8001576:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d021      	beq.n	80015c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	490e      	ldr	r1, [pc, #56]	; (80015c4 <HAL_GPIO_Init+0x2d0>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	60cb      	str	r3, [r1, #12]
 8001590:	e021      	b.n	80015d6 <HAL_GPIO_Init+0x2e2>
 8001592:	bf00      	nop
 8001594:	10320000 	.word	0x10320000
 8001598:	10310000 	.word	0x10310000
 800159c:	10220000 	.word	0x10220000
 80015a0:	10210000 	.word	0x10210000
 80015a4:	10120000 	.word	0x10120000
 80015a8:	10110000 	.word	0x10110000
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010000 	.word	0x40010000
 80015b4:	40010800 	.word	0x40010800
 80015b8:	40010c00 	.word	0x40010c00
 80015bc:	40011000 	.word	0x40011000
 80015c0:	40011400 	.word	0x40011400
 80015c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_GPIO_Init+0x304>)
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	4909      	ldr	r1, [pc, #36]	; (80015f8 <HAL_GPIO_Init+0x304>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	3301      	adds	r3, #1
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	fa22 f303 	lsr.w	r3, r2, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f47f ae8e 	bne.w	8001308 <HAL_GPIO_Init+0x14>
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	372c      	adds	r7, #44	; 0x2c
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	40010400 	.word	0x40010400

080015fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001618:	e003      	b.n	8001622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	041a      	lsls	r2, r3, #16
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	611a      	str	r2, [r3, #16]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e272      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 8087 	beq.w	800175a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800164c:	4b92      	ldr	r3, [pc, #584]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 030c 	and.w	r3, r3, #12
 8001654:	2b04      	cmp	r3, #4
 8001656:	d00c      	beq.n	8001672 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001658:	4b8f      	ldr	r3, [pc, #572]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 030c 	and.w	r3, r3, #12
 8001660:	2b08      	cmp	r3, #8
 8001662:	d112      	bne.n	800168a <HAL_RCC_OscConfig+0x5e>
 8001664:	4b8c      	ldr	r3, [pc, #560]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001670:	d10b      	bne.n	800168a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001672:	4b89      	ldr	r3, [pc, #548]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d06c      	beq.n	8001758 <HAL_RCC_OscConfig+0x12c>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d168      	bne.n	8001758 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e24c      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001692:	d106      	bne.n	80016a2 <HAL_RCC_OscConfig+0x76>
 8001694:	4b80      	ldr	r3, [pc, #512]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a7f      	ldr	r2, [pc, #508]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 800169a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	e02e      	b.n	8001700 <HAL_RCC_OscConfig+0xd4>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x98>
 80016aa:	4b7b      	ldr	r3, [pc, #492]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a7a      	ldr	r2, [pc, #488]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b78      	ldr	r3, [pc, #480]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a77      	ldr	r2, [pc, #476]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e01d      	b.n	8001700 <HAL_RCC_OscConfig+0xd4>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0xbc>
 80016ce:	4b72      	ldr	r3, [pc, #456]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a71      	ldr	r2, [pc, #452]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b6f      	ldr	r3, [pc, #444]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a6e      	ldr	r2, [pc, #440]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e00b      	b.n	8001700 <HAL_RCC_OscConfig+0xd4>
 80016e8:	4b6b      	ldr	r3, [pc, #428]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a6a      	ldr	r2, [pc, #424]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	4b68      	ldr	r3, [pc, #416]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a67      	ldr	r2, [pc, #412]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d013      	beq.n	8001730 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fce6 	bl	80010d8 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fce2 	bl	80010d8 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	; 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e200      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	4b5d      	ldr	r3, [pc, #372]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0xe4>
 800172e:	e014      	b.n	800175a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fcd2 	bl	80010d8 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fcce 	bl	80010d8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	; 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e1ec      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	4b53      	ldr	r3, [pc, #332]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x10c>
 8001756:	e000      	b.n	800175a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d063      	beq.n	800182e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001766:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00b      	beq.n	800178a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001772:	4b49      	ldr	r3, [pc, #292]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b08      	cmp	r3, #8
 800177c:	d11c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x18c>
 800177e:	4b46      	ldr	r3, [pc, #280]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d116      	bne.n	80017b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178a:	4b43      	ldr	r3, [pc, #268]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <HAL_RCC_OscConfig+0x176>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e1c0      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a2:	4b3d      	ldr	r3, [pc, #244]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4939      	ldr	r1, [pc, #228]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b6:	e03a      	b.n	800182e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c0:	4b36      	ldr	r3, [pc, #216]	; (800189c <HAL_RCC_OscConfig+0x270>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fc87 	bl	80010d8 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ce:	f7ff fc83 	bl	80010d8 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e1a1      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e0:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ec:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4927      	ldr	r1, [pc, #156]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]
 8001800:	e015      	b.n	800182e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_RCC_OscConfig+0x270>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff fc66 	bl	80010d8 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001810:	f7ff fc62 	bl	80010d8 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e180      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d03a      	beq.n	80018b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d019      	beq.n	8001876 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <HAL_RCC_OscConfig+0x274>)
 8001844:	2201      	movs	r2, #1
 8001846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001848:	f7ff fc46 	bl	80010d8 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001850:	f7ff fc42 	bl	80010d8 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e160      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800186e:	2001      	movs	r0, #1
 8001870:	f000 faf4 	bl	8001e5c <RCC_Delay>
 8001874:	e01c      	b.n	80018b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_RCC_OscConfig+0x274>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187c:	f7ff fc2c 	bl	80010d8 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001882:	e00f      	b.n	80018a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff fc28 	bl	80010d8 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d908      	bls.n	80018a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e146      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	42420000 	.word	0x42420000
 80018a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a4:	4b92      	ldr	r3, [pc, #584]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1e9      	bne.n	8001884 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80a6 	beq.w	8001a0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018c2:	4b8b      	ldr	r3, [pc, #556]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10d      	bne.n	80018ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4b88      	ldr	r3, [pc, #544]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a87      	ldr	r2, [pc, #540]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	61d3      	str	r3, [r2, #28]
 80018da:	4b85      	ldr	r3, [pc, #532]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e6:	2301      	movs	r3, #1
 80018e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	4b82      	ldr	r3, [pc, #520]	; (8001af4 <HAL_RCC_OscConfig+0x4c8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d118      	bne.n	8001928 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f6:	4b7f      	ldr	r3, [pc, #508]	; (8001af4 <HAL_RCC_OscConfig+0x4c8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a7e      	ldr	r2, [pc, #504]	; (8001af4 <HAL_RCC_OscConfig+0x4c8>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001902:	f7ff fbe9 	bl	80010d8 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190a:	f7ff fbe5 	bl	80010d8 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b64      	cmp	r3, #100	; 0x64
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e103      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191c:	4b75      	ldr	r3, [pc, #468]	; (8001af4 <HAL_RCC_OscConfig+0x4c8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d106      	bne.n	800193e <HAL_RCC_OscConfig+0x312>
 8001930:	4b6f      	ldr	r3, [pc, #444]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	4a6e      	ldr	r2, [pc, #440]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6213      	str	r3, [r2, #32]
 800193c:	e02d      	b.n	800199a <HAL_RCC_OscConfig+0x36e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0x334>
 8001946:	4b6a      	ldr	r3, [pc, #424]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4a69      	ldr	r2, [pc, #420]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	6213      	str	r3, [r2, #32]
 8001952:	4b67      	ldr	r3, [pc, #412]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	4a66      	ldr	r2, [pc, #408]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	6213      	str	r3, [r2, #32]
 800195e:	e01c      	b.n	800199a <HAL_RCC_OscConfig+0x36e>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b05      	cmp	r3, #5
 8001966:	d10c      	bne.n	8001982 <HAL_RCC_OscConfig+0x356>
 8001968:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4a60      	ldr	r2, [pc, #384]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6213      	str	r3, [r2, #32]
 8001974:	4b5e      	ldr	r3, [pc, #376]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4a5d      	ldr	r2, [pc, #372]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6213      	str	r3, [r2, #32]
 8001980:	e00b      	b.n	800199a <HAL_RCC_OscConfig+0x36e>
 8001982:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4a5a      	ldr	r2, [pc, #360]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6213      	str	r3, [r2, #32]
 800198e:	4b58      	ldr	r3, [pc, #352]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4a57      	ldr	r2, [pc, #348]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	f023 0304 	bic.w	r3, r3, #4
 8001998:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d015      	beq.n	80019ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a2:	f7ff fb99 	bl	80010d8 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019aa:	f7ff fb95 	bl	80010d8 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e0b1      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c0:	4b4b      	ldr	r3, [pc, #300]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0ee      	beq.n	80019aa <HAL_RCC_OscConfig+0x37e>
 80019cc:	e014      	b.n	80019f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ce:	f7ff fb83 	bl	80010d8 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d4:	e00a      	b.n	80019ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7ff fb7f 	bl	80010d8 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e09b      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ec:	4b40      	ldr	r3, [pc, #256]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1ee      	bne.n	80019d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d105      	bne.n	8001a0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fe:	4b3c      	ldr	r3, [pc, #240]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a3b      	ldr	r2, [pc, #236]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8087 	beq.w	8001b22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a14:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d061      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d146      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a28:	4b33      	ldr	r3, [pc, #204]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fb53 	bl	80010d8 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff fb4f 	bl	80010d8 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e06d      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a48:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f0      	bne.n	8001a36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5c:	d108      	bne.n	8001a70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	4921      	ldr	r1, [pc, #132]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a19      	ldr	r1, [r3, #32]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	430b      	orrs	r3, r1
 8001a82:	491b      	ldr	r1, [pc, #108]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fb23 	bl	80010d8 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff fb1f 	bl	80010d8 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e03d      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x46a>
 8001ab4:	e035      	b.n	8001b22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fb0c 	bl	80010d8 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff fb08 	bl	80010d8 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e026      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x498>
 8001ae2:	e01e      	b.n	8001b22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e019      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40007000 	.word	0x40007000
 8001af8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_RCC_OscConfig+0x500>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d106      	bne.n	8001b1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d001      	beq.n	8001b22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000

08001b30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0d0      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b44:	4b6a      	ldr	r3, [pc, #424]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d910      	bls.n	8001b74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b67      	ldr	r3, [pc, #412]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 0207 	bic.w	r2, r3, #7
 8001b5a:	4965      	ldr	r1, [pc, #404]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b62:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0b8      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d020      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b8c:	4b59      	ldr	r3, [pc, #356]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	4a58      	ldr	r2, [pc, #352]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba4:	4b53      	ldr	r3, [pc, #332]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	4a52      	ldr	r2, [pc, #328]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb0:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	494d      	ldr	r1, [pc, #308]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d040      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	4b47      	ldr	r3, [pc, #284]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d115      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e07f      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bee:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d109      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e073      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e06b      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c0e:	4b39      	ldr	r3, [pc, #228]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f023 0203 	bic.w	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	4936      	ldr	r1, [pc, #216]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c20:	f7ff fa5a 	bl	80010d8 <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c28:	f7ff fa56 	bl	80010d8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e053      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 020c 	and.w	r2, r3, #12
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d1eb      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c50:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d210      	bcs.n	8001c80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 0207 	bic.w	r2, r3, #7
 8001c66:	4922      	ldr	r1, [pc, #136]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6e:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e032      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4916      	ldr	r1, [pc, #88]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	490e      	ldr	r1, [pc, #56]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cbe:	f000 f821 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	490a      	ldr	r1, [pc, #40]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd0:	5ccb      	ldrb	r3, [r1, r3]
 8001cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd6:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <HAL_RCC_ClockConfig+0x1cc>)
 8001cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_RCC_ClockConfig+0x1d0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff f8f0 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40022000 	.word	0x40022000
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	08008998 	.word	0x08008998
 8001cfc:	20000004 	.word	0x20000004
 8001d00:	20000008 	.word	0x20000008

08001d04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d04:	b490      	push	{r4, r7}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d0a:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d0c:	1d3c      	adds	r4, r7, #4
 8001d0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d14:	f240 2301 	movw	r3, #513	; 0x201
 8001d18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d2e:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d002      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x40>
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d003      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0x46>
 8001d42:	e02b      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d44:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d46:	623b      	str	r3, [r7, #32]
      break;
 8001d48:	e02b      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	0c9b      	lsrs	r3, r3, #18
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3328      	adds	r3, #40	; 0x28
 8001d54:	443b      	add	r3, r7
 8001d56:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d5a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d012      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d66:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	0c5b      	lsrs	r3, r3, #17
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	3328      	adds	r3, #40	; 0x28
 8001d72:	443b      	add	r3, r7
 8001d74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d7e:	fb03 f202 	mul.w	r2, r3, r2
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8a:	e004      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	; (8001dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d90:	fb02 f303 	mul.w	r3, r2, r3
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	623b      	str	r3, [r7, #32]
      break;
 8001d9a:	e002      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d9e:	623b      	str	r3, [r7, #32]
      break;
 8001da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da2:	6a3b      	ldr	r3, [r7, #32]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3728      	adds	r7, #40	; 0x28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc90      	pop	{r4, r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	0800893c 	.word	0x0800893c
 8001db4:	40021000 	.word	0x40021000
 8001db8:	007a1200 	.word	0x007a1200
 8001dbc:	003d0900 	.word	0x003d0900

08001dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc4:	4b02      	ldr	r3, [pc, #8]	; (8001dd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dd8:	f7ff fff2 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	4903      	ldr	r1, [pc, #12]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dea:	5ccb      	ldrb	r3, [r1, r3]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	080089a8 	.word	0x080089a8

08001dfc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	220f      	movs	r2, #15
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_RCC_GetClockConfig+0x58>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0203 	and.w	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_RCC_GetClockConfig+0x58>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_RCC_GetClockConfig+0x58>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HAL_RCC_GetClockConfig+0x58>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	08db      	lsrs	r3, r3, #3
 8001e36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_RCC_GetClockConfig+0x5c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0207 	and.w	r2, r3, #7
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40022000 	.word	0x40022000

08001e5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <RCC_Delay+0x34>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <RCC_Delay+0x38>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	0a5b      	lsrs	r3, r3, #9
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e78:	bf00      	nop
  }
  while (Delay --);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1e5a      	subs	r2, r3, #1
 8001e7e:	60fa      	str	r2, [r7, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f9      	bne.n	8001e78 <RCC_Delay+0x1c>
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	20000004 	.word	0x20000004
 8001e94:	10624dd3 	.word	0x10624dd3

08001e98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e076      	b.n	8001f98 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d108      	bne.n	8001ec4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eba:	d009      	beq.n	8001ed0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
 8001ec2:	e005      	b.n	8001ed0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7fe ffa0 	bl	8000e30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f54:	ea42 0103 	orr.w	r1, r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	0c1a      	lsrs	r2, r3, #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f002 0204 	and.w	r2, r2, #4
 8001f76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	69da      	ldr	r2, [r3, #28]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	4613      	mov	r3, r2
 8001fae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_SPI_Transmit+0x22>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e126      	b.n	8002210 <HAL_SPI_Transmit+0x270>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fca:	f7ff f885 	bl	80010d8 <HAL_GetTick>
 8001fce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d002      	beq.n	8001fe6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fe4:	e10b      	b.n	80021fe <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_SPI_Transmit+0x52>
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d102      	bne.n	8001ff8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ff6:	e102      	b.n	80021fe <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	88fa      	ldrh	r2, [r7, #6]
 8002010:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	88fa      	ldrh	r2, [r7, #6]
 8002016:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800203e:	d10f      	bne.n	8002060 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800204e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800205e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206a:	2b40      	cmp	r3, #64	; 0x40
 800206c:	d007      	beq.n	800207e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800207c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002086:	d14b      	bne.n	8002120 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <HAL_SPI_Transmit+0xf6>
 8002090:	8afb      	ldrh	r3, [r7, #22]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d13e      	bne.n	8002114 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	881a      	ldrh	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	1c9a      	adds	r2, r3, #2
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020ba:	e02b      	b.n	8002114 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d112      	bne.n	80020f0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	881a      	ldrh	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	1c9a      	adds	r2, r3, #2
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80020ee:	e011      	b.n	8002114 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020f0:	f7fe fff2 	bl	80010d8 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d803      	bhi.n	8002108 <HAL_SPI_Transmit+0x168>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002106:	d102      	bne.n	800210e <HAL_SPI_Transmit+0x16e>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d102      	bne.n	8002114 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002112:	e074      	b.n	80021fe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ce      	bne.n	80020bc <HAL_SPI_Transmit+0x11c>
 800211e:	e04c      	b.n	80021ba <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HAL_SPI_Transmit+0x18e>
 8002128:	8afb      	ldrh	r3, [r7, #22]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d140      	bne.n	80021b0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	330c      	adds	r3, #12
 8002138:	7812      	ldrb	r2, [r2, #0]
 800213a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002154:	e02c      	b.n	80021b0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b02      	cmp	r3, #2
 8002162:	d113      	bne.n	800218c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	330c      	adds	r3, #12
 800216e:	7812      	ldrb	r2, [r2, #0]
 8002170:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002180:	b29b      	uxth	r3, r3
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	86da      	strh	r2, [r3, #54]	; 0x36
 800218a:	e011      	b.n	80021b0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800218c:	f7fe ffa4 	bl	80010d8 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d803      	bhi.n	80021a4 <HAL_SPI_Transmit+0x204>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a2:	d102      	bne.n	80021aa <HAL_SPI_Transmit+0x20a>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021ae:	e026      	b.n	80021fe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1cd      	bne.n	8002156 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	6839      	ldr	r1, [r7, #0]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fa54 	bl	800266c <SPI_EndRxTxTransaction>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2220      	movs	r2, #32
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10a      	bne.n	80021ee <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	77fb      	strb	r3, [r7, #31]
 80021fa:	e000      	b.n	80021fe <HAL_SPI_Transmit+0x25e>
  }

error:
 80021fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800220e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3720      	adds	r7, #32
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08c      	sub	sp, #48	; 0x30
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002226:	2301      	movs	r3, #1
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_SPI_TransmitReceive+0x26>
 800223a:	2302      	movs	r3, #2
 800223c:	e18a      	b.n	8002554 <HAL_SPI_TransmitReceive+0x33c>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002246:	f7fe ff47 	bl	80010d8 <HAL_GetTick>
 800224a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002260:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002264:	2b01      	cmp	r3, #1
 8002266:	d00f      	beq.n	8002288 <HAL_SPI_TransmitReceive+0x70>
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800226e:	d107      	bne.n	8002280 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d103      	bne.n	8002280 <HAL_SPI_TransmitReceive+0x68>
 8002278:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800227c:	2b04      	cmp	r3, #4
 800227e:	d003      	beq.n	8002288 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002280:	2302      	movs	r3, #2
 8002282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002286:	e15b      	b.n	8002540 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_SPI_TransmitReceive+0x82>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <HAL_SPI_TransmitReceive+0x82>
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d103      	bne.n	80022a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022a0:	e14e      	b.n	8002540 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d003      	beq.n	80022b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2205      	movs	r2, #5
 80022b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	887a      	ldrh	r2, [r7, #2]
 80022c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	887a      	ldrh	r2, [r7, #2]
 80022d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	887a      	ldrh	r2, [r7, #2]
 80022de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	2b40      	cmp	r3, #64	; 0x40
 80022f8:	d007      	beq.n	800230a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002308:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002312:	d178      	bne.n	8002406 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_SPI_TransmitReceive+0x10a>
 800231c:	8b7b      	ldrh	r3, [r7, #26]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d166      	bne.n	80023f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	881a      	ldrh	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	1c9a      	adds	r2, r3, #2
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002346:	e053      	b.n	80023f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d11b      	bne.n	800238e <HAL_SPI_TransmitReceive+0x176>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d016      	beq.n	800238e <HAL_SPI_TransmitReceive+0x176>
 8002360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002362:	2b01      	cmp	r3, #1
 8002364:	d113      	bne.n	800238e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	881a      	ldrh	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	1c9a      	adds	r2, r3, #2
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d119      	bne.n	80023d0 <HAL_SPI_TransmitReceive+0x1b8>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d014      	beq.n	80023d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	b292      	uxth	r2, r2
 80023b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b8:	1c9a      	adds	r2, r3, #2
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023cc:	2301      	movs	r3, #1
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023d0:	f7fe fe82 	bl	80010d8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023dc:	429a      	cmp	r2, r3
 80023de:	d807      	bhi.n	80023f0 <HAL_SPI_TransmitReceive+0x1d8>
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e6:	d003      	beq.n	80023f0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023ee:	e0a7      	b.n	8002540 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1a6      	bne.n	8002348 <HAL_SPI_TransmitReceive+0x130>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1a1      	bne.n	8002348 <HAL_SPI_TransmitReceive+0x130>
 8002404:	e07c      	b.n	8002500 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_SPI_TransmitReceive+0x1fc>
 800240e:	8b7b      	ldrh	r3, [r7, #26]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d16b      	bne.n	80024ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	330c      	adds	r3, #12
 800241e:	7812      	ldrb	r2, [r2, #0]
 8002420:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800243a:	e057      	b.n	80024ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b02      	cmp	r3, #2
 8002448:	d11c      	bne.n	8002484 <HAL_SPI_TransmitReceive+0x26c>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d017      	beq.n	8002484 <HAL_SPI_TransmitReceive+0x26c>
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	2b01      	cmp	r3, #1
 8002458:	d114      	bne.n	8002484 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	330c      	adds	r3, #12
 8002464:	7812      	ldrb	r2, [r2, #0]
 8002466:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d119      	bne.n	80024c6 <HAL_SPI_TransmitReceive+0x2ae>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d014      	beq.n	80024c6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024c2:	2301      	movs	r3, #1
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024c6:	f7fe fe07 	bl	80010d8 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d803      	bhi.n	80024de <HAL_SPI_TransmitReceive+0x2c6>
 80024d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024dc:	d102      	bne.n	80024e4 <HAL_SPI_TransmitReceive+0x2cc>
 80024de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d103      	bne.n	80024ec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024ea:	e029      	b.n	8002540 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1a2      	bne.n	800243c <HAL_SPI_TransmitReceive+0x224>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d19d      	bne.n	800243c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002502:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f8b1 	bl	800266c <SPI_EndRxTxTransaction>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800251c:	e010      	b.n	8002540 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10b      	bne.n	800253e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	e000      	b.n	8002540 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800253e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002550:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002554:	4618      	mov	r0, r3
 8002556:	3730      	adds	r7, #48	; 0x30
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800256c:	f7fe fdb4 	bl	80010d8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	4413      	add	r3, r2
 800257a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800257c:	f7fe fdac 	bl	80010d8 <HAL_GetTick>
 8002580:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002582:	4b39      	ldr	r3, [pc, #228]	; (8002668 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	015b      	lsls	r3, r3, #5
 8002588:	0d1b      	lsrs	r3, r3, #20
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002592:	e054      	b.n	800263e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259a:	d050      	beq.n	800263e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800259c:	f7fe fd9c 	bl	80010d8 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d902      	bls.n	80025b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d13d      	bne.n	800262e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ca:	d111      	bne.n	80025f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d4:	d004      	beq.n	80025e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025de:	d107      	bne.n	80025f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f8:	d10f      	bne.n	800261a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002618:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e017      	b.n	800265e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3b01      	subs	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4013      	ands	r3, r2
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	429a      	cmp	r2, r3
 800264c:	bf0c      	ite	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	2300      	movne	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	429a      	cmp	r2, r3
 800265a:	d19b      	bne.n	8002594 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3720      	adds	r7, #32
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000004 	.word	0x20000004

0800266c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2200      	movs	r2, #0
 8002680:	2180      	movs	r1, #128	; 0x80
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f7ff ff6a 	bl	800255c <SPI_WaitFlagStateUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d007      	beq.n	800269e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	f043 0220 	orr.w	r2, r3, #32
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e000      	b.n	80026a0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e041      	b.n	800273e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f839 	bl	8002746 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3304      	adds	r3, #4
 80026e4:	4619      	mov	r1, r3
 80026e6:	4610      	mov	r0, r2
 80026e8:	f000 f9b4 	bl	8002a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b01      	cmp	r3, #1
 800276a:	d001      	beq.n	8002770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e03a      	b.n	80027e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <HAL_TIM_Base_Start_IT+0x98>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00e      	beq.n	80027b0 <HAL_TIM_Base_Start_IT+0x58>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279a:	d009      	beq.n	80027b0 <HAL_TIM_Base_Start_IT+0x58>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_TIM_Base_Start_IT+0x58>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a13      	ldr	r2, [pc, #76]	; (80027f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d111      	bne.n	80027d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d010      	beq.n	80027e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d2:	e007      	b.n	80027e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	40012c00 	.word	0x40012c00
 80027f4:	40000400 	.word	0x40000400
 80027f8:	40000800 	.word	0x40000800

080027fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b02      	cmp	r3, #2
 8002810:	d122      	bne.n	8002858 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b02      	cmp	r3, #2
 800281e:	d11b      	bne.n	8002858 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0202 	mvn.w	r2, #2
 8002828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f8ed 	bl	8002a1e <HAL_TIM_IC_CaptureCallback>
 8002844:	e005      	b.n	8002852 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f8e0 	bl	8002a0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f8ef 	bl	8002a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b04      	cmp	r3, #4
 8002864:	d122      	bne.n	80028ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b04      	cmp	r3, #4
 8002872:	d11b      	bne.n	80028ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0204 	mvn.w	r2, #4
 800287c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2202      	movs	r2, #2
 8002882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f8c3 	bl	8002a1e <HAL_TIM_IC_CaptureCallback>
 8002898:	e005      	b.n	80028a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f8b6 	bl	8002a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f8c5 	bl	8002a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d122      	bne.n	8002900 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d11b      	bne.n	8002900 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f06f 0208 	mvn.w	r2, #8
 80028d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2204      	movs	r2, #4
 80028d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f899 	bl	8002a1e <HAL_TIM_IC_CaptureCallback>
 80028ec:	e005      	b.n	80028fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f88c 	bl	8002a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f89b 	bl	8002a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b10      	cmp	r3, #16
 800290c:	d122      	bne.n	8002954 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b10      	cmp	r3, #16
 800291a:	d11b      	bne.n	8002954 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0210 	mvn.w	r2, #16
 8002924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2208      	movs	r2, #8
 800292a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f86f 	bl	8002a1e <HAL_TIM_IC_CaptureCallback>
 8002940:	e005      	b.n	800294e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f862 	bl	8002a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f871 	bl	8002a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10e      	bne.n	8002980 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d107      	bne.n	8002980 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0201 	mvn.w	r2, #1
 8002978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe fa08 	bl	8000d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298a:	2b80      	cmp	r3, #128	; 0x80
 800298c:	d10e      	bne.n	80029ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002998:	2b80      	cmp	r3, #128	; 0x80
 800299a:	d107      	bne.n	80029ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f8bf 	bl	8002b2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d10e      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b40      	cmp	r3, #64	; 0x40
 80029c6:	d107      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f835 	bl	8002a42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d10e      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d107      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0220 	mvn.w	r2, #32
 80029fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f88a 	bl	8002b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a29      	ldr	r2, [pc, #164]	; (8002b0c <TIM_Base_SetConfig+0xb8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00b      	beq.n	8002a84 <TIM_Base_SetConfig+0x30>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a72:	d007      	beq.n	8002a84 <TIM_Base_SetConfig+0x30>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a26      	ldr	r2, [pc, #152]	; (8002b10 <TIM_Base_SetConfig+0xbc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d003      	beq.n	8002a84 <TIM_Base_SetConfig+0x30>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a25      	ldr	r2, [pc, #148]	; (8002b14 <TIM_Base_SetConfig+0xc0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d108      	bne.n	8002a96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <TIM_Base_SetConfig+0xb8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00b      	beq.n	8002ab6 <TIM_Base_SetConfig+0x62>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d007      	beq.n	8002ab6 <TIM_Base_SetConfig+0x62>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a19      	ldr	r2, [pc, #100]	; (8002b10 <TIM_Base_SetConfig+0xbc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d003      	beq.n	8002ab6 <TIM_Base_SetConfig+0x62>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a18      	ldr	r2, [pc, #96]	; (8002b14 <TIM_Base_SetConfig+0xc0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d108      	bne.n	8002ac8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <TIM_Base_SetConfig+0xb8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d103      	bne.n	8002afc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	615a      	str	r2, [r3, #20]
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	40012c00 	.word	0x40012c00
 8002b10:	40000400 	.word	0x40000400
 8002b14:	40000800 	.word	0x40000800

08002b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002b40:	4904      	ldr	r1, [pc, #16]	; (8002b54 <MX_FATFS_Init+0x18>)
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <MX_FATFS_Init+0x1c>)
 8002b44:	f003 fb5c 	bl	8006200 <FATFS_LinkDriver>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <MX_FATFS_Init+0x20>)
 8002b4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002b50:	bf00      	nop
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	200007b0 	.word	0x200007b0
 8002b58:	20000010 	.word	0x20000010
 8002b5c:	200007ac 	.word	0x200007ac

08002b60 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002b64:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_initialize(pdrv);
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd fc9a 	bl	80004b4 <SD_disk_initialize>
 8002b80:	4603      	mov	r3, r0
 8002b82:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_status(pdrv);
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fd71 	bl	8000680 <SD_disk_status>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    // return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8002bba:	7bf8      	ldrb	r0, [r7, #15]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	f7fd fd71 	bl	80006a8 <SD_disk_read>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
 8002bde:	4603      	mov	r3, r0
 8002be0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8002be2:	7bf8      	ldrb	r0, [r7, #15]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	f7fd fdc7 	bl	800077c <SD_disk_write>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	603a      	str	r2, [r7, #0]
 8002c04:	71fb      	strb	r3, [r7, #7]
 8002c06:	460b      	mov	r3, r1
 8002c08:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
    return SD_disk_ioctl(pdrv, cmd, buff);
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	79b9      	ldrb	r1, [r7, #6]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd fe37 	bl	8000884 <SD_disk_ioctl>
 8002c16:	4603      	mov	r3, r0
 8002c18:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	4a08      	ldr	r2, [pc, #32]	; (8002c54 <disk_status+0x30>)
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	79fa      	ldrb	r2, [r7, #7]
 8002c3c:	4905      	ldr	r1, [pc, #20]	; (8002c54 <disk_status+0x30>)
 8002c3e:	440a      	add	r2, r1
 8002c40:	7a12      	ldrb	r2, [r2, #8]
 8002c42:	4610      	mov	r0, r2
 8002c44:	4798      	blx	r3
 8002c46:	4603      	mov	r3, r0
 8002c48:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	200007d4 	.word	0x200007d4

08002c58 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <disk_initialize+0x48>)
 8002c6a:	5cd3      	ldrb	r3, [r2, r3]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d111      	bne.n	8002c94 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <disk_initialize+0x48>)
 8002c74:	2101      	movs	r1, #1
 8002c76:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <disk_initialize+0x48>)
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	79fa      	ldrb	r2, [r7, #7]
 8002c86:	4906      	ldr	r1, [pc, #24]	; (8002ca0 <disk_initialize+0x48>)
 8002c88:	440a      	add	r2, r1
 8002c8a:	7a12      	ldrb	r2, [r2, #8]
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4798      	blx	r3
 8002c90:	4603      	mov	r3, r0
 8002c92:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200007d4 	.word	0x200007d4

08002ca4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <disk_read+0x3c>)
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	689c      	ldr	r4, [r3, #8]
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <disk_read+0x3c>)
 8002cc4:	4413      	add	r3, r2
 8002cc6:	7a18      	ldrb	r0, [r3, #8]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	47a0      	blx	r4
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd90      	pop	{r4, r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200007d4 	.word	0x200007d4

08002ce4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <disk_write+0x3c>)
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	68dc      	ldr	r4, [r3, #12]
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	4a07      	ldr	r2, [pc, #28]	; (8002d20 <disk_write+0x3c>)
 8002d04:	4413      	add	r3, r2
 8002d06:	7a18      	ldrb	r0, [r3, #8]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	47a0      	blx	r4
 8002d10:	4603      	mov	r3, r0
 8002d12:	75fb      	strb	r3, [r7, #23]
  return res;
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd90      	pop	{r4, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200007d4 	.word	0x200007d4

08002d24 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	603a      	str	r2, [r7, #0]
 8002d2e:	71fb      	strb	r3, [r7, #7]
 8002d30:	460b      	mov	r3, r1
 8002d32:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <disk_ioctl+0x38>)
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	79fa      	ldrb	r2, [r7, #7]
 8002d42:	4906      	ldr	r1, [pc, #24]	; (8002d5c <disk_ioctl+0x38>)
 8002d44:	440a      	add	r2, r1
 8002d46:	7a10      	ldrb	r0, [r2, #8]
 8002d48:	79b9      	ldrb	r1, [r7, #6]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4798      	blx	r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	73fb      	strb	r3, [r7, #15]
  return res;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	200007d4 	.word	0x200007d4

08002d60 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8002d74:	e007      	b.n	8002d86 <mem_cpy+0x26>
		*d++ = *s++;
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	1c53      	adds	r3, r2, #1
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	1c59      	adds	r1, r3, #1
 8002d80:	6179      	str	r1, [r7, #20]
 8002d82:	7812      	ldrb	r2, [r2, #0]
 8002d84:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	1e5a      	subs	r2, r3, #1
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f2      	bne.n	8002d76 <mem_cpy+0x16>
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr

08002d9c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8002dac:	e005      	b.n	8002dba <mem_set+0x1e>
		*d++ = (BYTE)val;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	617a      	str	r2, [r7, #20]
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	1e5a      	subs	r2, r3, #1
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1f4      	bne.n	8002dae <mem_set+0x12>
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8002de8:	bf00      	nop
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	1e5a      	subs	r2, r3, #1
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00d      	beq.n	8002e10 <mem_cmp+0x40>
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	61fa      	str	r2, [r7, #28]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	61ba      	str	r2, [r7, #24]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	1acb      	subs	r3, r1, r3
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0ec      	beq.n	8002dea <mem_cmp+0x1a>
	return r;
 8002e10:	697b      	ldr	r3, [r7, #20]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002e26:	e002      	b.n	8002e2e <chk_chr+0x12>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <chk_chr+0x26>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d1f2      	bne.n	8002e28 <chk_chr+0xc>
	return *str;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	781b      	ldrb	r3, [r3, #0]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 fa09 	bl	8006276 <ff_req_grant>
 8002e64:	4603      	mov	r3, r0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	460b      	mov	r3, r1
 8002e78:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d011      	beq.n	8002ea4 <unlock_fs+0x36>
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	d00e      	beq.n	8002ea4 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	2b0b      	cmp	r3, #11
 8002e8a:	d00b      	beq.n	8002ea4 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	2b09      	cmp	r3, #9
 8002e90:	d008      	beq.n	8002ea4 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	2b0f      	cmp	r3, #15
 8002e96:	d005      	beq.n	8002ea4 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f003 f9fe 	bl	80062a0 <ff_rel_grant>
	}
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	e038      	b.n	8002f32 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8002ec0:	492f      	ldr	r1, [pc, #188]	; (8002f80 <chk_lock+0xd4>)
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d029      	beq.n	8002f28 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002ed4:	492a      	ldr	r1, [pc, #168]	; (8002f80 <chk_lock+0xd4>)
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d11e      	bne.n	8002f2c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8002eee:	4924      	ldr	r1, [pc, #144]	; (8002f80 <chk_lock+0xd4>)
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3304      	adds	r3, #4
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d110      	bne.n	8002f2c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8002f0a:	491d      	ldr	r1, [pc, #116]	; (8002f80 <chk_lock+0xd4>)
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	3308      	adds	r3, #8
 8002f1a:	881a      	ldrh	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d102      	bne.n	8002f2c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8002f26:	e007      	b.n	8002f38 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d9c3      	bls.n	8002ec0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d109      	bne.n	8002f52 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <chk_lock+0x9e>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d101      	bne.n	8002f4e <chk_lock+0xa2>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e013      	b.n	8002f76 <chk_lock+0xca>
 8002f4e:	2312      	movs	r3, #18
 8002f50:	e011      	b.n	8002f76 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10b      	bne.n	8002f70 <chk_lock+0xc4>
 8002f58:	4909      	ldr	r1, [pc, #36]	; (8002f80 <chk_lock+0xd4>)
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	330a      	adds	r3, #10
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6e:	d101      	bne.n	8002f74 <chk_lock+0xc8>
 8002f70:	2310      	movs	r3, #16
 8002f72:	e000      	b.n	8002f76 <chk_lock+0xca>
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	200007bc 	.word	0x200007bc

08002f84 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	e002      	b.n	8002f96 <enq_lock+0x12>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3301      	adds	r3, #1
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d809      	bhi.n	8002fb0 <enq_lock+0x2c>
 8002f9c:	490a      	ldr	r1, [pc, #40]	; (8002fc8 <enq_lock+0x44>)
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ef      	bne.n	8002f90 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	bf14      	ite	ne
 8002fb6:	2301      	movne	r3, #1
 8002fb8:	2300      	moveq	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	200007bc 	.word	0x200007bc

08002fcc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	e02b      	b.n	8003034 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8002fdc:	4955      	ldr	r1, [pc, #340]	; (8003134 <inc_lock+0x168>)
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d11b      	bne.n	800302e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8002ff6:	494f      	ldr	r1, [pc, #316]	; (8003134 <inc_lock+0x168>)
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	3304      	adds	r3, #4
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800300e:	429a      	cmp	r2, r3
 8003010:	d10d      	bne.n	800302e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8003012:	4948      	ldr	r1, [pc, #288]	; (8003134 <inc_lock+0x168>)
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4613      	mov	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	3308      	adds	r3, #8
 8003022:	881a      	ldrh	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800302a:	429a      	cmp	r2, r3
 800302c:	d006      	beq.n	800303c <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	3301      	adds	r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d9d0      	bls.n	8002fdc <inc_lock+0x10>
 800303a:	e000      	b.n	800303e <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800303c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d145      	bne.n	80030d0 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e002      	b.n	8003050 <inc_lock+0x84>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3301      	adds	r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d809      	bhi.n	800306a <inc_lock+0x9e>
 8003056:	4937      	ldr	r1, [pc, #220]	; (8003134 <inc_lock+0x168>)
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4613      	mov	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1ef      	bne.n	800304a <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d101      	bne.n	8003074 <inc_lock+0xa8>
 8003070:	2300      	movs	r3, #0
 8003072:	e05a      	b.n	800312a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800307a:	482e      	ldr	r0, [pc, #184]	; (8003134 <inc_lock+0x168>)
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4403      	add	r3, r0
 8003088:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8003090:	4828      	ldr	r0, [pc, #160]	; (8003134 <inc_lock+0x168>)
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4403      	add	r3, r0
 800309e:	3304      	adds	r3, #4
 80030a0:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80030a8:	4922      	ldr	r1, [pc, #136]	; (8003134 <inc_lock+0x168>)
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	3308      	adds	r3, #8
 80030b8:	4602      	mov	r2, r0
 80030ba:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80030bc:	491d      	ldr	r1, [pc, #116]	; (8003134 <inc_lock+0x168>)
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	330a      	adds	r3, #10
 80030cc:	2200      	movs	r2, #0
 80030ce:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00c      	beq.n	80030f0 <inc_lock+0x124>
 80030d6:	4917      	ldr	r1, [pc, #92]	; (8003134 <inc_lock+0x168>)
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	330a      	adds	r3, #10
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <inc_lock+0x124>
 80030ec:	2300      	movs	r3, #0
 80030ee:	e01c      	b.n	800312a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10b      	bne.n	800310e <inc_lock+0x142>
 80030f6:	490f      	ldr	r1, [pc, #60]	; (8003134 <inc_lock+0x168>)
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	330a      	adds	r3, #10
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	3301      	adds	r3, #1
 800310a:	b299      	uxth	r1, r3
 800310c:	e001      	b.n	8003112 <inc_lock+0x146>
 800310e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003112:	4808      	ldr	r0, [pc, #32]	; (8003134 <inc_lock+0x168>)
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4613      	mov	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4403      	add	r3, r0
 8003120:	330a      	adds	r3, #10
 8003122:	460a      	mov	r2, r1
 8003124:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3301      	adds	r3, #1
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr
 8003134:	200007bc 	.word	0x200007bc

08003138 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3b01      	subs	r3, #1
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d82e      	bhi.n	80031aa <dec_lock+0x72>
		n = Files[i].ctr;
 800314c:	491b      	ldr	r1, [pc, #108]	; (80031bc <dec_lock+0x84>)
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	330a      	adds	r3, #10
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003160:	89fb      	ldrh	r3, [r7, #14]
 8003162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003166:	d101      	bne.n	800316c <dec_lock+0x34>
 8003168:	2300      	movs	r3, #0
 800316a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800316c:	89fb      	ldrh	r3, [r7, #14]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <dec_lock+0x40>
 8003172:	89fb      	ldrh	r3, [r7, #14]
 8003174:	3b01      	subs	r3, #1
 8003176:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003178:	4910      	ldr	r1, [pc, #64]	; (80031bc <dec_lock+0x84>)
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	330a      	adds	r3, #10
 8003188:	89fa      	ldrh	r2, [r7, #14]
 800318a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800318c:	89fb      	ldrh	r3, [r7, #14]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d108      	bne.n	80031a4 <dec_lock+0x6c>
 8003192:	490a      	ldr	r1, [pc, #40]	; (80031bc <dec_lock+0x84>)
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	737b      	strb	r3, [r7, #13]
 80031a8:	e001      	b.n	80031ae <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80031aa:	2302      	movs	r3, #2
 80031ac:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80031ae:	7b7b      	ldrb	r3, [r7, #13]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	200007bc 	.word	0x200007bc

080031c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	e016      	b.n	80031fc <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80031ce:	4910      	ldr	r1, [pc, #64]	; (8003210 <clear_lock+0x50>)
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d108      	bne.n	80031f6 <clear_lock+0x36>
 80031e4:	490a      	ldr	r1, [pc, #40]	; (8003210 <clear_lock+0x50>)
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	3301      	adds	r3, #1
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d9e5      	bls.n	80031ce <clear_lock+0xe>
	}
}
 8003202:	bf00      	nop
 8003204:	bf00      	nop
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	200007bc 	.word	0x200007bc

08003214 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8003226:	2b00      	cmp	r3, #0
 8003228:	d038      	beq.n	800329c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8003230:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	2301      	movs	r3, #1
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	f7ff fd51 	bl	8002ce4 <disk_write>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <sync_window+0x3a>
			res = FR_DISK_ERR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
 800324c:	e026      	b.n	800329c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	1ad2      	subs	r2, r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003266:	429a      	cmp	r2, r3
 8003268:	d218      	bcs.n	800329c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	e010      	b.n	8003296 <sync_window+0x82>
					wsect += fs->fsize;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4413      	add	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	2301      	movs	r3, #1
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	f7ff fd2a 	bl	8002ce4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	3b01      	subs	r3, #1
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d8eb      	bhi.n	8003274 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d01b      	beq.n	80032f8 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff ffa7 	bl	8003214 <sync_window>
 80032c6:	4603      	mov	r3, r0
 80032c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d113      	bne.n	80032f8 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	2301      	movs	r3, #1
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	f7ff fce2 	bl	8002ca4 <disk_read>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d004      	beq.n	80032f0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80032e6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ea:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ff82 	bl	8003214 <sync_window>
 8003310:	4603      	mov	r3, r0
 8003312:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	2b00      	cmp	r3, #0
 8003318:	f040 809b 	bne.w	8003452 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003322:	2b03      	cmp	r3, #3
 8003324:	f040 8088 	bne.w	8003438 <sync_fs+0x136>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800332e:	2b01      	cmp	r3, #1
 8003330:	f040 8082 	bne.w	8003438 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333a:	2100      	movs	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fd2d 	bl	8002d9c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2255      	movs	r2, #85	; 0x55
 8003346:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	22aa      	movs	r2, #170	; 0xaa
 800334e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2252      	movs	r2, #82	; 0x52
 8003356:	701a      	strb	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2252      	movs	r2, #82	; 0x52
 800335c:	705a      	strb	r2, [r3, #1]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2261      	movs	r2, #97	; 0x61
 8003362:	709a      	strb	r2, [r3, #2]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2241      	movs	r2, #65	; 0x41
 8003368:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2272      	movs	r2, #114	; 0x72
 800336e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2272      	movs	r2, #114	; 0x72
 8003376:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2241      	movs	r2, #65	; 0x41
 800337e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2261      	movs	r2, #97	; 0x61
 8003386:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003390:	b2da      	uxtb	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800339e:	b29b      	uxth	r3, r3
 80033a0:	0a1b      	lsrs	r3, r3, #8
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80033b2:	0c1b      	lsrs	r3, r3, #16
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80033c2:	0e1b      	lsrs	r3, r3, #24
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	0a1b      	lsrs	r3, r3, #8
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80033f4:	0c1b      	lsrs	r3, r3, #16
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003404:	0e1b      	lsrs	r3, r3, #24
 8003406:	b2da      	uxtb	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800342a:	2301      	movs	r3, #1
 800342c:	f7ff fc5a 	bl	8002ce4 <disk_write>
			fs->fsi_flag = 0;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800343e:	2200      	movs	r2, #0
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fc6e 	bl	8002d24 <disk_ioctl>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003452:	7bfb      	ldrb	r3, [r7, #15]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	3b02      	subs	r3, #2
 800346a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003472:	3b02      	subs	r3, #2
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d301      	bcc.n	800347e <clust2sect+0x22>
 800347a:	2300      	movs	r3, #0
 800347c:	e00a      	b.n	8003494 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003484:	461a      	mov	r2, r3
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	fb03 f202 	mul.w	r2, r3, r2
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8003492:	4413      	add	r3, r2
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr

0800349e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d905      	bls.n	80034ba <get_fat+0x1c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d302      	bcc.n	80034c0 <get_fat+0x22>
		val = 1;	/* Internal error */
 80034ba:	2301      	movs	r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	e0a3      	b.n	8003608 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80034c0:	f04f 33ff 	mov.w	r3, #4294967295
 80034c4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d068      	beq.n	80035a2 <get_fat+0x104>
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	f300 808f 	bgt.w	80035f4 <get_fat+0x156>
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d002      	beq.n	80034e0 <get_fat+0x42>
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d040      	beq.n	8003560 <get_fat+0xc2>
 80034de:	e089      	b.n	80035f4 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	085b      	lsrs	r3, r3, #1
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4413      	add	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	0a5b      	lsrs	r3, r3, #9
 80034f8:	4413      	add	r3, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff fed2 	bl	80032a6 <move_window>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d178      	bne.n	80035fa <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	60fa      	str	r2, [r7, #12]
 800350e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	5cd3      	ldrb	r3, [r2, r3]
 8003516:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	0a5b      	lsrs	r3, r3, #9
 8003522:	4413      	add	r3, r2
 8003524:	4619      	mov	r1, r3
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff febd 	bl	80032a6 <move_window>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d165      	bne.n	80035fe <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	5cd3      	ldrb	r3, [r2, r3]
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	461a      	mov	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4313      	orrs	r3, r2
 8003544:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <get_fat+0xb8>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	e002      	b.n	800355c <get_fat+0xbe>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800355c:	617b      	str	r3, [r7, #20]
			break;
 800355e:	e053      	b.n	8003608 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	0a1b      	lsrs	r3, r3, #8
 800356a:	4413      	add	r3, r2
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff fe99 	bl	80032a6 <move_window>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d143      	bne.n	8003602 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4413      	add	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	3301      	adds	r3, #1
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	b21a      	sxth	r2, r3
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	b21b      	sxth	r3, r3
 8003598:	4313      	orrs	r3, r2
 800359a:	b21b      	sxth	r3, r3
 800359c:	b29b      	uxth	r3, r3
 800359e:	617b      	str	r3, [r7, #20]
			break;
 80035a0:	e032      	b.n	8003608 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	09db      	lsrs	r3, r3, #7
 80035ac:	4413      	add	r3, r2
 80035ae:	4619      	mov	r1, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff fe78 	bl	80032a6 <move_window>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d124      	bne.n	8003606 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	4413      	add	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	3303      	adds	r3, #3
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	061a      	lsls	r2, r3, #24
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	3302      	adds	r3, #2
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	041b      	lsls	r3, r3, #16
 80035da:	4313      	orrs	r3, r2
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	3201      	adds	r2, #1
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	0212      	lsls	r2, r2, #8
 80035e4:	4313      	orrs	r3, r2
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	7812      	ldrb	r2, [r2, #0]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80035f0:	617b      	str	r3, [r7, #20]
			break;
 80035f2:	e009      	b.n	8003608 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 80035f4:	2301      	movs	r3, #1
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e006      	b.n	8003608 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80035fa:	bf00      	nop
 80035fc:	e004      	b.n	8003608 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80035fe:	bf00      	nop
 8003600:	e002      	b.n	8003608 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003606:	bf00      	nop
		}
	}

	return val;
 8003608:	697b      	ldr	r3, [r7, #20]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b088      	sub	sp, #32
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d905      	bls.n	8003630 <put_fat+0x1e>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	429a      	cmp	r2, r3
 800362e:	d302      	bcc.n	8003636 <put_fat+0x24>
		res = FR_INT_ERR;
 8003630:	2302      	movs	r3, #2
 8003632:	77fb      	strb	r3, [r7, #31]
 8003634:	e0f6      	b.n	8003824 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800363c:	2b03      	cmp	r3, #3
 800363e:	f000 809e 	beq.w	800377e <put_fat+0x16c>
 8003642:	2b03      	cmp	r3, #3
 8003644:	f300 80e4 	bgt.w	8003810 <put_fat+0x1fe>
 8003648:	2b01      	cmp	r3, #1
 800364a:	d002      	beq.n	8003652 <put_fat+0x40>
 800364c:	2b02      	cmp	r3, #2
 800364e:	d06f      	beq.n	8003730 <put_fat+0x11e>
 8003650:	e0de      	b.n	8003810 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	085b      	lsrs	r3, r3, #1
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4413      	add	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	0a5b      	lsrs	r3, r3, #9
 800366a:	4413      	add	r3, r2
 800366c:	4619      	mov	r1, r3
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f7ff fe19 	bl	80032a6 <move_window>
 8003674:	4603      	mov	r3, r0
 8003676:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003678:	7ffb      	ldrb	r3, [r7, #31]
 800367a:	2b00      	cmp	r3, #0
 800367c:	f040 80cb 	bne.w	8003816 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	617a      	str	r2, [r7, #20]
 8003686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4413      	add	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00d      	beq.n	80036b6 <put_fat+0xa4>
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	b25b      	sxtb	r3, r3
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	b25a      	sxtb	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	b25b      	sxtb	r3, r3
 80036ae:	4313      	orrs	r3, r2
 80036b0:	b25b      	sxtb	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	e001      	b.n	80036ba <put_fat+0xa8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	0a5b      	lsrs	r3, r3, #9
 80036d0:	4413      	add	r3, r2
 80036d2:	4619      	mov	r1, r3
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff fde6 	bl	80032a6 <move_window>
 80036da:	4603      	mov	r3, r0
 80036dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80036de:	7ffb      	ldrb	r3, [r7, #31]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f040 809a 	bne.w	800381a <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <put_fat+0xf2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e00e      	b.n	8003722 <put_fat+0x110>
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	b25b      	sxtb	r3, r3
 800370a:	f023 030f 	bic.w	r3, r3, #15
 800370e:	b25a      	sxtb	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	b25b      	sxtb	r3, r3
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	b25b      	sxtb	r3, r3
 800371c:	4313      	orrs	r3, r2
 800371e:	b25b      	sxtb	r3, r3
 8003720:	b2db      	uxtb	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800372e:	e079      	b.n	8003824 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	4413      	add	r3, r2
 800373c:	4619      	mov	r1, r3
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f7ff fdb1 	bl	80032a6 <move_window>
 8003744:	4603      	mov	r3, r0
 8003746:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003748:	7ffb      	ldrb	r3, [r7, #31]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d167      	bne.n	800381e <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4413      	add	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	b2da      	uxtb	r2, r3
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	b29b      	uxth	r3, r3
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	b29a      	uxth	r2, r3
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	3301      	adds	r3, #1
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800377c:	e052      	b.n	8003824 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	09db      	lsrs	r3, r3, #7
 8003788:	4413      	add	r3, r2
 800378a:	4619      	mov	r1, r3
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f7ff fd8a 	bl	80032a6 <move_window>
 8003792:	4603      	mov	r3, r0
 8003794:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003796:	7ffb      	ldrb	r3, [r7, #31]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d142      	bne.n	8003822 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	3303      	adds	r3, #3
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	061a      	lsls	r2, r3, #24
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	3302      	adds	r3, #2
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	041b      	lsls	r3, r3, #16
 80037ba:	4313      	orrs	r3, r2
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	3201      	adds	r2, #1
 80037c0:	7812      	ldrb	r2, [r2, #0]
 80037c2:	0212      	lsls	r2, r2, #8
 80037c4:	4313      	orrs	r3, r2
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	7812      	ldrb	r2, [r2, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	0a1b      	lsrs	r3, r3, #8
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	3301      	adds	r3, #1
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	0c1a      	lsrs	r2, r3, #16
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	3302      	adds	r3, #2
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0e1a      	lsrs	r2, r3, #24
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	3303      	adds	r3, #3
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800380e:	e009      	b.n	8003824 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8003810:	2302      	movs	r3, #2
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e006      	b.n	8003824 <put_fat+0x212>
			if (res != FR_OK) break;
 8003816:	bf00      	nop
 8003818:	e004      	b.n	8003824 <put_fat+0x212>
			if (res != FR_OK) break;
 800381a:	bf00      	nop
 800381c:	e002      	b.n	8003824 <put_fat+0x212>
			if (res != FR_OK) break;
 800381e:	bf00      	nop
 8003820:	e000      	b.n	8003824 <put_fat+0x212>
			if (res != FR_OK) break;
 8003822:	bf00      	nop
		}
	}

	return res;
 8003824:	7ffb      	ldrb	r3, [r7, #31]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d905      	bls.n	800384a <remove_chain+0x1c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <remove_chain+0x22>
		res = FR_INT_ERR;
 800384a:	2302      	movs	r3, #2
 800384c:	73fb      	strb	r3, [r7, #15]
 800384e:	e043      	b.n	80038d8 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003854:	e036      	b.n	80038c4 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003856:	6839      	ldr	r1, [r7, #0]
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff fe20 	bl	800349e <get_fat>
 800385e:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d035      	beq.n	80038d2 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d102      	bne.n	8003872 <remove_chain+0x44>
 800386c:	2302      	movs	r3, #2
 800386e:	73fb      	strb	r3, [r7, #15]
 8003870:	e032      	b.n	80038d8 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d102      	bne.n	8003880 <remove_chain+0x52>
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	e02b      	b.n	80038d8 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003880:	2200      	movs	r2, #0
 8003882:	6839      	ldr	r1, [r7, #0]
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff fec4 	bl	8003612 <put_fat>
 800388a:	4603      	mov	r3, r0
 800388c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d120      	bne.n	80038d6 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d00f      	beq.n	80038c0 <remove_chain+0x92>
				fs->free_clust++;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d3c2      	bcc.n	8003856 <remove_chain+0x28>
 80038d0:	e002      	b.n	80038d8 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80038d2:	bf00      	nop
 80038d4:	e000      	b.n	80038d8 <remove_chain+0xaa>
			if (res != FR_OK) break;
 80038d6:	bf00      	nop
		}
	}

	return res;
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10f      	bne.n	8003912 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80038f8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <create_chain+0x2a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	429a      	cmp	r2, r3
 800390a:	d31c      	bcc.n	8003946 <create_chain+0x64>
 800390c:	2301      	movs	r3, #1
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	e019      	b.n	8003946 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003912:	6839      	ldr	r1, [r7, #0]
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff fdc2 	bl	800349e <get_fat>
 800391a:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d801      	bhi.n	8003926 <create_chain+0x44>
 8003922:	2301      	movs	r3, #1
 8003924:	e076      	b.n	8003a14 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d101      	bne.n	8003932 <create_chain+0x50>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	e070      	b.n	8003a14 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	429a      	cmp	r2, r3
 800393c:	d201      	bcs.n	8003942 <create_chain+0x60>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	e068      	b.n	8003a14 <create_chain+0x132>
		scl = clst;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	3301      	adds	r3, #1
 800394e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	429a      	cmp	r2, r3
 800395a:	d307      	bcc.n	800396c <create_chain+0x8a>
			ncl = 2;
 800395c:	2302      	movs	r3, #2
 800395e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	429a      	cmp	r2, r3
 8003966:	d901      	bls.n	800396c <create_chain+0x8a>
 8003968:	2300      	movs	r3, #0
 800396a:	e053      	b.n	8003a14 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800396c:	6979      	ldr	r1, [r7, #20]
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff fd95 	bl	800349e <get_fat>
 8003974:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00e      	beq.n	800399a <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d002      	beq.n	800398a <create_chain+0xa8>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <create_chain+0xac>
			return cs;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	e042      	b.n	8003a14 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	429a      	cmp	r2, r3
 8003994:	d1d9      	bne.n	800394a <create_chain+0x68>
 8003996:	2300      	movs	r3, #0
 8003998:	e03c      	b.n	8003a14 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800399a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800399c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80039a0:	6979      	ldr	r1, [r7, #20]
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff fe35 	bl	8003612 <put_fat>
 80039a8:	4603      	mov	r3, r0
 80039aa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d109      	bne.n	80039c6 <create_chain+0xe4>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d006      	beq.n	80039c6 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	6839      	ldr	r1, [r7, #0]
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff fe28 	bl	8003612 <put_fat>
 80039c2:	4603      	mov	r3, r0
 80039c4:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d11a      	bne.n	8003a02 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039de:	d018      	beq.n	8003a12 <create_chain+0x130>
			fs->free_clust--;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80039e6:	1e5a      	subs	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8003a00:	e007      	b.n	8003a12 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d102      	bne.n	8003a0e <create_chain+0x12c>
 8003a08:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0c:	e000      	b.n	8003a10 <create_chain+0x12e>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003a12:	697b      	ldr	r3, [r7, #20]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	0a5b      	lsrs	r3, r3, #9
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8003a3a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8003a3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1d1a      	adds	r2, r3, #4
 8003a48:	613a      	str	r2, [r7, #16]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <clmt_clust+0x3c>
 8003a54:	2300      	movs	r3, #0
 8003a56:	e010      	b.n	8003a7a <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d307      	bcc.n	8003a70 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003a6e:	e7e9      	b.n	8003a44 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8003a70:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	4413      	add	r3, r2
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr

08003a84 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003a9e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d007      	beq.n	8003ab6 <dir_sdi+0x32>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003aac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d301      	bcc.n	8003aba <dir_sdi+0x36>
		return FR_INT_ERR;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e074      	b.n	8003ba4 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10c      	bne.n	8003ada <dir_sdi+0x56>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ac6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d105      	bne.n	8003ada <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ad4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8003ad8:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d111      	bne.n	8003b04 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ae6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8003aea:	461a      	mov	r2, r3
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d301      	bcc.n	8003af6 <dir_sdi+0x72>
			return FR_INT_ERR;
 8003af2:	2302      	movs	r3, #2
 8003af4:	e056      	b.n	8003ba4 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003afc:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	e032      	b.n	8003b6a <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b0a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8003b12:	e01e      	b.n	8003b52 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b1a:	6979      	ldr	r1, [r7, #20]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fcbe 	bl	800349e <get_fat>
 8003b22:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2a:	d101      	bne.n	8003b30 <dir_sdi+0xac>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e039      	b.n	8003ba4 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d907      	bls.n	8003b46 <dir_sdi+0xc2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b3c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d301      	bcc.n	8003b4a <dir_sdi+0xc6>
				return FR_INT_ERR;
 8003b46:	2302      	movs	r3, #2
 8003b48:	e02c      	b.n	8003ba4 <dir_sdi+0x120>
			idx -= ic;
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d2dc      	bcs.n	8003b14 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b60:	6979      	ldr	r1, [r7, #20]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fc7a 	bl	800345c <clust2sect>
 8003b68:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <dir_sdi+0xf8>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e013      	b.n	8003ba4 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	091a      	lsrs	r2, r3, #4
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	441a      	add	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b90:	461a      	mov	r2, r3
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	015b      	lsls	r3, r3, #5
 8003b9a:	441a      	add	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <dir_next+0x26>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <dir_next+0x2a>
		return FR_NO_FILE;
 8003bd2:	2304      	movs	r3, #4
 8003bd4:	e0dd      	b.n	8003d92 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f040 80c6 	bne.w	8003d6e <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10b      	bne.n	8003c12 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c00:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8003c04:	461a      	mov	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	f0c0 80b0 	bcc.w	8003d6e <dir_next+0x1c2>
				return FR_NO_FILE;
 8003c0e:	2304      	movs	r3, #4
 8003c10:	e0bf      	b.n	8003d92 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8003c1c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8003c20:	3a01      	subs	r2, #1
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f040 80a2 	bne.w	8003d6e <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003c36:	4619      	mov	r1, r3
 8003c38:	4610      	mov	r0, r2
 8003c3a:	f7ff fc30 	bl	800349e <get_fat>
 8003c3e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d801      	bhi.n	8003c4a <dir_next+0x9e>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e0a3      	b.n	8003d92 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d101      	bne.n	8003c56 <dir_next+0xaa>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e09d      	b.n	8003d92 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c5c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d374      	bcc.n	8003d50 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <dir_next+0xc4>
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	e090      	b.n	8003d92 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	f7ff fe2f 	bl	80038e2 <create_chain>
 8003c84:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <dir_next+0xe4>
 8003c8c:	2307      	movs	r3, #7
 8003c8e:	e080      	b.n	8003d92 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <dir_next+0xee>
 8003c96:	2302      	movs	r3, #2
 8003c98:	e07b      	b.n	8003d92 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca0:	d101      	bne.n	8003ca6 <dir_next+0xfa>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e075      	b.n	8003d92 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff fab1 	bl	8003214 <sync_window>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <dir_next+0x110>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e06a      	b.n	8003d92 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff f867 	bl	8002d9c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8003cda:	6979      	ldr	r1, [r7, #20]
 8003cdc:	4610      	mov	r0, r2
 8003cde:	f7ff fbbd 	bl	800345c <clust2sect>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003ce8:	2300      	movs	r3, #0
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	e01b      	b.n	8003d26 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fa87 	bl	8003214 <sync_window>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <dir_next+0x164>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e040      	b.n	8003d92 <dir_next+0x1e6>
						dp->fs->winsect++;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d16:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8003d1a:	3201      	adds	r2, #1
 8003d1c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	3301      	adds	r3, #1
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d2c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003d30:	461a      	mov	r2, r3
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d3da      	bcc.n	8003cee <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d3e:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	1a8a      	subs	r2, r1, r2
 8003d4c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d5e:	6979      	ldr	r1, [r7, #20]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fb7b 	bl	800345c <clust2sect>
 8003d66:	4602      	mov	r2, r0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	015b      	lsls	r3, r3, #5
 8003d88:	441a      	add	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd90      	pop	{r4, r7, pc}

08003d9a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8003da4:	2100      	movs	r1, #0
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fe6c 	bl	8003a84 <dir_sdi>
 8003dac:	4603      	mov	r3, r0
 8003dae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d131      	bne.n	8003e1a <dir_alloc+0x80>
		n = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4610      	mov	r0, r2
 8003dca:	f7ff fa6c 	bl	80032a6 <move_window>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d11f      	bne.n	8003e18 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2be5      	cmp	r3, #229	; 0xe5
 8003de2:	d005      	beq.n	8003df0 <dir_alloc+0x56>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d107      	bne.n	8003e00 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	3301      	adds	r3, #1
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d102      	bne.n	8003e04 <dir_alloc+0x6a>
 8003dfe:	e00c      	b.n	8003e1a <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003e00:	2300      	movs	r3, #0
 8003e02:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8003e04:	2101      	movs	r1, #1
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff fed0 	bl	8003bac <dir_next>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0d1      	beq.n	8003dba <dir_alloc+0x20>
 8003e16:	e000      	b.n	8003e1a <dir_alloc+0x80>
			if (res != FR_OK) break;
 8003e18:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d101      	bne.n	8003e24 <dir_alloc+0x8a>
 8003e20:	2307      	movs	r3, #7
 8003e22:	73fb      	strb	r3, [r7, #15]
	return res;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b085      	sub	sp, #20
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	331b      	adds	r3, #27
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	b21a      	sxth	r2, r3
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	331a      	adds	r3, #26
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	b21b      	sxth	r3, r3
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	b21b      	sxth	r3, r3
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d10f      	bne.n	8003e7c <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	3315      	adds	r3, #21
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	b21a      	sxth	r2, r3
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	3314      	adds	r3, #20
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	b21b      	sxth	r3, r3
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	b21b      	sxth	r3, r3
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	041b      	lsls	r3, r3, #16
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]

	return cl;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	331a      	adds	r3, #26
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	701a      	strb	r2, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	0a1b      	lsrs	r3, r3, #8
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	331b      	adds	r3, #27
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	0c1a      	lsrs	r2, r3, #16
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3314      	adds	r3, #20
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	0c1b      	lsrs	r3, r3, #16
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3315      	adds	r3, #21
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003edc:	2100      	movs	r1, #0
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff fdd0 	bl	8003a84 <dir_sdi>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <dir_find+0x1e>
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	e03b      	b.n	8003f6a <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003efe:	4619      	mov	r1, r3
 8003f00:	4610      	mov	r0, r2
 8003f02:	f7ff f9d0 	bl	80032a6 <move_window>
 8003f06:	4603      	mov	r3, r0
 8003f08:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d128      	bne.n	8003f62 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003f16:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d102      	bne.n	8003f2a <dir_find+0x56>
 8003f24:	2304      	movs	r3, #4
 8003f26:	75fb      	strb	r3, [r7, #23]
 8003f28:	e01e      	b.n	8003f68 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	330b      	adds	r3, #11
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <dir_find+0x7a>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003f3e:	220b      	movs	r2, #11
 8003f40:	4619      	mov	r1, r3
 8003f42:	6938      	ldr	r0, [r7, #16]
 8003f44:	f7fe ff44 	bl	8002dd0 <mem_cmp>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8003f4e:	2100      	movs	r1, #0
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff fe2b 	bl	8003bac <dir_next>
 8003f56:	4603      	mov	r3, r0
 8003f58:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0c8      	beq.n	8003ef2 <dir_find+0x1e>
 8003f60:	e002      	b.n	8003f68 <dir_find+0x94>
		if (res != FR_OK) break;
 8003f62:	bf00      	nop
 8003f64:	e000      	b.n	8003f68 <dir_find+0x94>
			break;
 8003f66:	bf00      	nop

	return res;
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff ff0c 	bl	8003d9a <dir_alloc>
 8003f82:	4603      	mov	r3, r0
 8003f84:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d126      	bne.n	8003fda <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	f7ff f983 	bl	80032a6 <move_window>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d117      	bne.n	8003fda <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fe fef1 	bl	8002d9c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003fc6:	220b      	movs	r2, #11
 8003fc8:	4619      	mov	r1, r3
 8003fca:	f7fe fec9 	bl	8002d60 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e002      	b.n	8003ffc <create_name+0x18>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b2f      	cmp	r3, #47	; 0x2f
 8004002:	d0f8      	beq.n	8003ff6 <create_name+0x12>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b5c      	cmp	r3, #92	; 0x5c
 800400a:	d0f4      	beq.n	8003ff6 <create_name+0x12>
	sfn = dp->fn;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004012:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004014:	220b      	movs	r2, #11
 8004016:	2120      	movs	r1, #32
 8004018:	68b8      	ldr	r0, [r7, #8]
 800401a:	f7fe febf 	bl	8002d9c <mem_set>
	si = i = b = 0; ni = 8;
 800401e:	2300      	movs	r3, #0
 8004020:	77fb      	strb	r3, [r7, #31]
 8004022:	2300      	movs	r3, #0
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	2308      	movs	r3, #8
 800402c:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	617a      	str	r2, [r7, #20]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800403c:	7fbb      	ldrb	r3, [r7, #30]
 800403e:	2b20      	cmp	r3, #32
 8004040:	d953      	bls.n	80040ea <create_name+0x106>
 8004042:	7fbb      	ldrb	r3, [r7, #30]
 8004044:	2b2f      	cmp	r3, #47	; 0x2f
 8004046:	d050      	beq.n	80040ea <create_name+0x106>
 8004048:	7fbb      	ldrb	r3, [r7, #30]
 800404a:	2b5c      	cmp	r3, #92	; 0x5c
 800404c:	d04d      	beq.n	80040ea <create_name+0x106>
		if (c == '.' || i >= ni) {
 800404e:	7fbb      	ldrb	r3, [r7, #30]
 8004050:	2b2e      	cmp	r3, #46	; 0x2e
 8004052:	d003      	beq.n	800405c <create_name+0x78>
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	429a      	cmp	r2, r3
 800405a:	d30f      	bcc.n	800407c <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b08      	cmp	r3, #8
 8004060:	d102      	bne.n	8004068 <create_name+0x84>
 8004062:	7fbb      	ldrb	r3, [r7, #30]
 8004064:	2b2e      	cmp	r3, #46	; 0x2e
 8004066:	d001      	beq.n	800406c <create_name+0x88>
 8004068:	2306      	movs	r3, #6
 800406a:	e073      	b.n	8004154 <create_name+0x170>
			i = 8; ni = 11;
 800406c:	2308      	movs	r3, #8
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	230b      	movs	r3, #11
 8004072:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8004074:	7ffb      	ldrb	r3, [r7, #31]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e035      	b.n	80040e8 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800407c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004080:	2b00      	cmp	r3, #0
 8004082:	da08      	bge.n	8004096 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8004084:	7ffb      	ldrb	r3, [r7, #31]
 8004086:	f043 0303 	orr.w	r3, r3, #3
 800408a:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800408c:	7fbb      	ldrb	r3, [r7, #30]
 800408e:	3b80      	subs	r3, #128	; 0x80
 8004090:	4a32      	ldr	r2, [pc, #200]	; (800415c <create_name+0x178>)
 8004092:	5cd3      	ldrb	r3, [r2, r3]
 8004094:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8004096:	7fbb      	ldrb	r3, [r7, #30]
 8004098:	4619      	mov	r1, r3
 800409a:	4831      	ldr	r0, [pc, #196]	; (8004160 <create_name+0x17c>)
 800409c:	f7fe febe 	bl	8002e1c <chk_chr>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <create_name+0xc6>
				return FR_INVALID_NAME;
 80040a6:	2306      	movs	r3, #6
 80040a8:	e054      	b.n	8004154 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80040aa:	7fbb      	ldrb	r3, [r7, #30]
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d907      	bls.n	80040c0 <create_name+0xdc>
 80040b0:	7fbb      	ldrb	r3, [r7, #30]
 80040b2:	2b5a      	cmp	r3, #90	; 0x5a
 80040b4:	d804      	bhi.n	80040c0 <create_name+0xdc>
				b |= 2;
 80040b6:	7ffb      	ldrb	r3, [r7, #31]
 80040b8:	f043 0302 	orr.w	r3, r3, #2
 80040bc:	77fb      	strb	r3, [r7, #31]
 80040be:	e00c      	b.n	80040da <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80040c0:	7fbb      	ldrb	r3, [r7, #30]
 80040c2:	2b60      	cmp	r3, #96	; 0x60
 80040c4:	d909      	bls.n	80040da <create_name+0xf6>
 80040c6:	7fbb      	ldrb	r3, [r7, #30]
 80040c8:	2b7a      	cmp	r3, #122	; 0x7a
 80040ca:	d806      	bhi.n	80040da <create_name+0xf6>
					b |= 1; c -= 0x20;
 80040cc:	7ffb      	ldrb	r3, [r7, #31]
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	7fbb      	ldrb	r3, [r7, #30]
 80040d6:	3b20      	subs	r3, #32
 80040d8:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	613a      	str	r2, [r7, #16]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	4413      	add	r3, r2
 80040e4:	7fba      	ldrb	r2, [r7, #30]
 80040e6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80040e8:	e7a1      	b.n	800402e <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	441a      	add	r2, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80040f4:	7fbb      	ldrb	r3, [r7, #30]
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d801      	bhi.n	80040fe <create_name+0x11a>
 80040fa:	2304      	movs	r3, #4
 80040fc:	e000      	b.n	8004100 <create_name+0x11c>
 80040fe:	2300      	movs	r3, #0
 8004100:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <create_name+0x128>
 8004108:	2306      	movs	r3, #6
 800410a:	e023      	b.n	8004154 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2be5      	cmp	r3, #229	; 0xe5
 8004112:	d102      	bne.n	800411a <create_name+0x136>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2205      	movs	r2, #5
 8004118:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b08      	cmp	r3, #8
 800411e:	d102      	bne.n	8004126 <create_name+0x142>
 8004120:	7ffb      	ldrb	r3, [r7, #31]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8004126:	7ffb      	ldrb	r3, [r7, #31]
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	2b01      	cmp	r3, #1
 800412e:	d103      	bne.n	8004138 <create_name+0x154>
 8004130:	7fbb      	ldrb	r3, [r7, #30]
 8004132:	f043 0310 	orr.w	r3, r3, #16
 8004136:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8004138:	7ffb      	ldrb	r3, [r7, #31]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b04      	cmp	r3, #4
 8004140:	d103      	bne.n	800414a <create_name+0x166>
 8004142:	7fbb      	ldrb	r3, [r7, #30]
 8004144:	f043 0308 	orr.w	r3, r3, #8
 8004148:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	330b      	adds	r3, #11
 800414e:	7fba      	ldrb	r2, [r7, #30]
 8004150:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004152:	2300      	movs	r3, #0
#endif
}
 8004154:	4618      	mov	r0, r3
 8004156:	3720      	adds	r7, #32
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	080089b0 	.word	0x080089b0
 8004160:	0800894c 	.word	0x0800894c

08004164 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b2f      	cmp	r3, #47	; 0x2f
 8004174:	d003      	beq.n	800417e <follow_path+0x1a>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b5c      	cmp	r3, #92	; 0x5c
 800417c:	d102      	bne.n	8004184 <follow_path+0x20>
		path++;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b1f      	cmp	r3, #31
 8004192:	d80a      	bhi.n	80041aa <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8004194:	2100      	movs	r1, #0
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff fc74 	bl	8003a84 <dir_sdi>
 800419c:	4603      	mov	r3, r0
 800419e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80041a8:	e045      	b.n	8004236 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80041aa:	463b      	mov	r3, r7
 80041ac:	4619      	mov	r1, r3
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff ff18 	bl	8003fe4 <create_name>
 80041b4:	4603      	mov	r3, r0
 80041b6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d136      	bne.n	800422c <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff fe88 	bl	8003ed4 <dir_find>
 80041c4:	4603      	mov	r3, r0
 80041c6:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80041ce:	7adb      	ldrb	r3, [r3, #11]
 80041d0:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d128      	bne.n	8004230 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80041de:	7bbb      	ldrb	r3, [r7, #14]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d123      	bne.n	8004230 <follow_path+0xcc>
 80041e8:	2305      	movs	r3, #5
 80041ea:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80041ec:	e020      	b.n	8004230 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80041ee:	7bbb      	ldrb	r3, [r7, #14]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d11d      	bne.n	8004234 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80041fe:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	330b      	adds	r3, #11
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b00      	cmp	r3, #0
 800420c:	d102      	bne.n	8004214 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800420e:	2305      	movs	r3, #5
 8004210:	73fb      	strb	r3, [r7, #15]
 8004212:	e010      	b.n	8004236 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fe06 	bl	8003e2e <ld_clust>
 8004222:	4602      	mov	r2, r0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800422a:	e7be      	b.n	80041aa <follow_path+0x46>
			if (res != FR_OK) break;
 800422c:	bf00      	nop
 800422e:	e002      	b.n	8004236 <follow_path+0xd2>
				break;
 8004230:	bf00      	nop
 8004232:	e000      	b.n	8004236 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004234:	bf00      	nop
		}
	}

	return res;
 8004236:	7bfb      	ldrb	r3, [r7, #15]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004248:	f04f 33ff 	mov.w	r3, #4294967295
 800424c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d031      	beq.n	80042ba <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	e002      	b.n	8004264 <get_ldnumber+0x24>
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	3301      	adds	r3, #1
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b20      	cmp	r3, #32
 800426a:	d903      	bls.n	8004274 <get_ldnumber+0x34>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b3a      	cmp	r3, #58	; 0x3a
 8004272:	d1f4      	bne.n	800425e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b3a      	cmp	r3, #58	; 0x3a
 800427a:	d11c      	bne.n	80042b6 <get_ldnumber+0x76>
			tp = *path;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	60fa      	str	r2, [r7, #12]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	3b30      	subs	r3, #48	; 0x30
 800428c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b09      	cmp	r3, #9
 8004292:	d80e      	bhi.n	80042b2 <get_ldnumber+0x72>
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	429a      	cmp	r2, r3
 800429a:	d10a      	bne.n	80042b2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d107      	bne.n	80042b2 <get_ldnumber+0x72>
					vol = (int)i;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	3301      	adds	r3, #1
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	e002      	b.n	80042bc <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80042ba:	693b      	ldr	r3, [r7, #16]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
	...

080042c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f04f 32ff 	mov.w	r2, #4294967295
 80042e0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80042e4:	6839      	ldr	r1, [r7, #0]
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fe ffdd 	bl	80032a6 <move_window>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <check_fs+0x2e>
		return 3;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e04a      	b.n	800438c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80042fc:	3301      	adds	r3, #1
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	b21a      	sxth	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800430a:	b21b      	sxth	r3, r3
 800430c:	4313      	orrs	r3, r2
 800430e:	b21b      	sxth	r3, r3
 8004310:	4a20      	ldr	r2, [pc, #128]	; (8004394 <check_fs+0xcc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d001      	beq.n	800431a <check_fs+0x52>
		return 2;
 8004316:	2302      	movs	r3, #2
 8004318:	e038      	b.n	800438c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3336      	adds	r3, #54	; 0x36
 800431e:	3303      	adds	r3, #3
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	061a      	lsls	r2, r3, #24
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3336      	adds	r3, #54	; 0x36
 8004328:	3302      	adds	r3, #2
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	041b      	lsls	r3, r3, #16
 800432e:	4313      	orrs	r3, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	3236      	adds	r2, #54	; 0x36
 8004334:	3201      	adds	r2, #1
 8004336:	7812      	ldrb	r2, [r2, #0]
 8004338:	0212      	lsls	r2, r2, #8
 800433a:	4313      	orrs	r3, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004342:	4313      	orrs	r3, r2
 8004344:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004348:	4a13      	ldr	r2, [pc, #76]	; (8004398 <check_fs+0xd0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d101      	bne.n	8004352 <check_fs+0x8a>
		return 0;
 800434e:	2300      	movs	r3, #0
 8004350:	e01c      	b.n	800438c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3352      	adds	r3, #82	; 0x52
 8004356:	3303      	adds	r3, #3
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	061a      	lsls	r2, r3, #24
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3352      	adds	r3, #82	; 0x52
 8004360:	3302      	adds	r3, #2
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	041b      	lsls	r3, r3, #16
 8004366:	4313      	orrs	r3, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	3252      	adds	r2, #82	; 0x52
 800436c:	3201      	adds	r2, #1
 800436e:	7812      	ldrb	r2, [r2, #0]
 8004370:	0212      	lsls	r2, r2, #8
 8004372:	4313      	orrs	r3, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800437a:	4313      	orrs	r3, r2
 800437c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004380:	4a05      	ldr	r2, [pc, #20]	; (8004398 <check_fs+0xd0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d101      	bne.n	800438a <check_fs+0xc2>
		return 0;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <check_fs+0xc4>

	return 1;
 800438a:	2301      	movs	r3, #1
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	ffffaa55 	.word	0xffffaa55
 8004398:	00544146 	.word	0x00544146

0800439c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b096      	sub	sp, #88	; 0x58
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	4613      	mov	r3, r2
 80043a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80043b0:	68b8      	ldr	r0, [r7, #8]
 80043b2:	f7ff ff45 	bl	8004240 <get_ldnumber>
 80043b6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80043b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da01      	bge.n	80043c2 <find_volume+0x26>
 80043be:	230b      	movs	r3, #11
 80043c0:	e2b0      	b.n	8004924 <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80043c2:	4aa1      	ldr	r2, [pc, #644]	; (8004648 <find_volume+0x2ac>)
 80043c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80043cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <find_volume+0x3a>
 80043d2:	230c      	movs	r3, #12
 80043d4:	e2a6      	b.n	8004924 <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 80043d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80043d8:	f7fe fd3a 	bl	8002e50 <lock_fs>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <find_volume+0x4a>
 80043e2:	230f      	movs	r3, #15
 80043e4:	e29e      	b.n	8004924 <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ea:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80043ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d01b      	beq.n	800442e <find_volume+0x92>
		stat = disk_status(fs->drv);
 80043f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f8:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fe fc11 	bl	8002c24 <disk_status>
 8004402:	4603      	mov	r3, r0
 8004404:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004408:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10c      	bne.n	800442e <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <find_volume+0x8e>
 800441a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 8004426:	230a      	movs	r3, #10
 8004428:	e27c      	b.n	8004924 <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 800442a:	2300      	movs	r3, #0
 800442c:	e27a      	b.n	8004924 <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800442e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004438:	b2da      	uxtb	r2, r3
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004442:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe fc06 	bl	8002c58 <disk_initialize>
 800444c:	4603      	mov	r3, r0
 800444e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004452:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800445e:	2303      	movs	r3, #3
 8004460:	e260      	b.n	8004924 <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d007      	beq.n	8004478 <find_volume+0xdc>
 8004468:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8004474:	230a      	movs	r3, #10
 8004476:	e255      	b.n	8004924 <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004478:	2300      	movs	r3, #0
 800447a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800447c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800447e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004480:	f7ff ff22 	bl	80042c8 <check_fs>
 8004484:	4603      	mov	r3, r0
 8004486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800448a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800448e:	2b01      	cmp	r3, #1
 8004490:	d153      	bne.n	800453a <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004492:	2300      	movs	r3, #0
 8004494:	643b      	str	r3, [r7, #64]	; 0x40
 8004496:	e028      	b.n	80044ea <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8004498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800449a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80044a2:	4413      	add	r3, r2
 80044a4:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	3304      	adds	r3, #4
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d012      	beq.n	80044d6 <find_volume+0x13a>
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	330b      	adds	r3, #11
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	061a      	lsls	r2, r3, #24
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	330a      	adds	r3, #10
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	4313      	orrs	r3, r2
 80044c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c4:	3209      	adds	r2, #9
 80044c6:	7812      	ldrb	r2, [r2, #0]
 80044c8:	0212      	lsls	r2, r2, #8
 80044ca:	4313      	orrs	r3, r2
 80044cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ce:	3208      	adds	r2, #8
 80044d0:	7812      	ldrb	r2, [r2, #0]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	e000      	b.n	80044d8 <find_volume+0x13c>
 80044d6:	2200      	movs	r2, #0
 80044d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	3358      	adds	r3, #88	; 0x58
 80044de:	443b      	add	r3, r7
 80044e0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80044e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e6:	3301      	adds	r3, #1
 80044e8:	643b      	str	r3, [r7, #64]	; 0x40
 80044ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d9d3      	bls.n	8004498 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80044f0:	2300      	movs	r3, #0
 80044f2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80044f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <find_volume+0x164>
 80044fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044fc:	3b01      	subs	r3, #1
 80044fe:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8004500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	3358      	adds	r3, #88	; 0x58
 8004506:	443b      	add	r3, r7
 8004508:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800450c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800450e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <find_volume+0x184>
 8004514:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004516:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004518:	f7ff fed6 	bl	80042c8 <check_fs>
 800451c:	4603      	mov	r3, r0
 800451e:	e000      	b.n	8004522 <find_volume+0x186>
 8004520:	2302      	movs	r3, #2
 8004522:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004526:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <find_volume+0x19e>
 800452e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004530:	3301      	adds	r3, #1
 8004532:	643b      	str	r3, [r7, #64]	; 0x40
 8004534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004536:	2b03      	cmp	r3, #3
 8004538:	d9e2      	bls.n	8004500 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800453a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800453e:	2b03      	cmp	r3, #3
 8004540:	d101      	bne.n	8004546 <find_volume+0x1aa>
 8004542:	2301      	movs	r3, #1
 8004544:	e1ee      	b.n	8004924 <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004546:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <find_volume+0x1b6>
 800454e:	230d      	movs	r3, #13
 8004550:	e1e8      	b.n	8004924 <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004554:	7b1b      	ldrb	r3, [r3, #12]
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	b21a      	sxth	r2, r3
 800455a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455c:	7adb      	ldrb	r3, [r3, #11]
 800455e:	b21b      	sxth	r3, r3
 8004560:	4313      	orrs	r3, r2
 8004562:	b21b      	sxth	r3, r3
 8004564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004568:	d001      	beq.n	800456e <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 800456a:	230d      	movs	r3, #13
 800456c:	e1da      	b.n	8004924 <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004570:	7ddb      	ldrb	r3, [r3, #23]
 8004572:	021b      	lsls	r3, r3, #8
 8004574:	b21a      	sxth	r2, r3
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004578:	7d9b      	ldrb	r3, [r3, #22]
 800457a:	b21b      	sxth	r3, r3
 800457c:	4313      	orrs	r3, r2
 800457e:	b21b      	sxth	r3, r3
 8004580:	b29b      	uxth	r3, r3
 8004582:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d112      	bne.n	80045b0 <find_volume+0x214>
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004590:	061a      	lsls	r2, r3, #24
 8004592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004594:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004598:	041b      	lsls	r3, r3, #16
 800459a:	4313      	orrs	r3, r2
 800459c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800459e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80045a2:	0212      	lsls	r2, r2, #8
 80045a4:	4313      	orrs	r3, r2
 80045a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045a8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80045ac:	4313      	orrs	r3, r2
 80045ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80045b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045b4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	7c1a      	ldrb	r2, [r3, #16]
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80045c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d006      	beq.n	80045da <find_volume+0x23e>
 80045cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ce:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d001      	beq.n	80045da <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 80045d6:	230d      	movs	r3, #13
 80045d8:	e1a4      	b.n	8004924 <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80045e0:	461a      	mov	r2, r3
 80045e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e4:	fb02 f303 	mul.w	r3, r2, r3
 80045e8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80045ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ec:	7b5a      	ldrb	r2, [r3, #13]
 80045ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80045f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <find_volume+0x278>
 80045fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004600:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004604:	461a      	mov	r2, r3
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800460c:	3b01      	subs	r3, #1
 800460e:	4013      	ands	r3, r2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 8004614:	230d      	movs	r3, #13
 8004616:	e185      	b.n	8004924 <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461a:	7c9b      	ldrb	r3, [r3, #18]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	b21a      	sxth	r2, r3
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	7c5b      	ldrb	r3, [r3, #17]
 8004624:	b21b      	sxth	r3, r3
 8004626:	4313      	orrs	r3, r2
 8004628:	b21b      	sxth	r3, r3
 800462a:	b29a      	uxth	r2, r3
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004634:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d004      	beq.n	800464c <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 8004642:	230d      	movs	r3, #13
 8004644:	e16e      	b.n	8004924 <find_volume+0x588>
 8004646:	bf00      	nop
 8004648:	200007b4 	.word	0x200007b4

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800464c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464e:	7d1b      	ldrb	r3, [r3, #20]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	b21a      	sxth	r2, r3
 8004654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004656:	7cdb      	ldrb	r3, [r3, #19]
 8004658:	b21b      	sxth	r3, r3
 800465a:	4313      	orrs	r3, r2
 800465c:	b21b      	sxth	r3, r3
 800465e:	b29b      	uxth	r3, r3
 8004660:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8004662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004664:	2b00      	cmp	r3, #0
 8004666:	d112      	bne.n	800468e <find_volume+0x2f2>
 8004668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800466e:	061a      	lsls	r2, r3, #24
 8004670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004672:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004676:	041b      	lsls	r3, r3, #16
 8004678:	4313      	orrs	r3, r2
 800467a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800467c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8004680:	0212      	lsls	r2, r2, #8
 8004682:	4313      	orrs	r3, r2
 8004684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004686:	f892 2020 	ldrb.w	r2, [r2, #32]
 800468a:	4313      	orrs	r3, r2
 800468c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800468e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004690:	7bdb      	ldrb	r3, [r3, #15]
 8004692:	021b      	lsls	r3, r3, #8
 8004694:	b21a      	sxth	r2, r3
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	7b9b      	ldrb	r3, [r3, #14]
 800469a:	b21b      	sxth	r3, r3
 800469c:	4313      	orrs	r3, r2
 800469e:	b21b      	sxth	r3, r3
 80046a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80046a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <find_volume+0x310>
 80046a8:	230d      	movs	r3, #13
 80046aa:	e13b      	b.n	8004924 <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80046ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80046ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b0:	4413      	add	r3, r2
 80046b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046b4:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 80046b8:	0912      	lsrs	r2, r2, #4
 80046ba:	b292      	uxth	r2, r2
 80046bc:	4413      	add	r3, r2
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80046c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d201      	bcs.n	80046cc <find_volume+0x330>
 80046c8:	230d      	movs	r3, #13
 80046ca:	e12b      	b.n	8004924 <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80046cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046d4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80046d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <find_volume+0x34c>
 80046e4:	230d      	movs	r3, #13
 80046e6:	e11d      	b.n	8004924 <find_volume+0x588>
	fmt = FS_FAT12;
 80046e8:	2301      	movs	r3, #1
 80046ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d902      	bls.n	80046fe <find_volume+0x362>
 80046f8:	2302      	movs	r3, #2
 80046fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004704:	4293      	cmp	r3, r2
 8004706:	d902      	bls.n	800470e <find_volume+0x372>
 8004708:	2303      	movs	r3, #3
 800470a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	1c9a      	adds	r2, r3, #2
 8004712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004714:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8004718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800471c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004720:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004724:	441a      	add	r2, r3
 8004726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004728:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 800472c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004730:	441a      	add	r2, r3
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 8004738:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800473c:	2b03      	cmp	r3, #3
 800473e:	d121      	bne.n	8004784 <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004742:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <find_volume+0x3b2>
 800474a:	230d      	movs	r3, #13
 800474c:	e0ea      	b.n	8004924 <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004754:	061a      	lsls	r2, r3, #24
 8004756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004758:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800475c:	041b      	lsls	r3, r3, #16
 800475e:	4313      	orrs	r3, r2
 8004760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004762:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8004766:	0212      	lsls	r2, r2, #8
 8004768:	4313      	orrs	r3, r2
 800476a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800476c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8004770:	431a      	orrs	r2, r3
 8004772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004774:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	647b      	str	r3, [r7, #68]	; 0x44
 8004782:	e025      	b.n	80047d0 <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004786:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <find_volume+0x3f6>
 800478e:	230d      	movs	r3, #13
 8004790:	e0c8      	b.n	8004924 <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8004798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800479a:	441a      	add	r2, r3
 800479c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80047a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d104      	bne.n	80047b4 <find_volume+0x418>
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	e00c      	b.n	80047ce <find_volume+0x432>
 80047b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80047ba:	4613      	mov	r3, r2
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	4413      	add	r3, r2
 80047c0:	085a      	lsrs	r2, r3, #1
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80047ce:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80047d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80047d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80047dc:	0a5b      	lsrs	r3, r3, #9
 80047de:	429a      	cmp	r2, r3
 80047e0:	d201      	bcs.n	80047e6 <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 80047e2:	230d      	movs	r3, #13
 80047e4:	e09e      	b.n	8004924 <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e8:	f04f 32ff 	mov.w	r2, #4294967295
 80047ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80047f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	2280      	movs	r2, #128	; 0x80
 8004800:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004808:	2b03      	cmp	r3, #3
 800480a:	d177      	bne.n	80048fc <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	b21a      	sxth	r2, r3
 8004816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004818:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800481c:	b21b      	sxth	r3, r3
 800481e:	4313      	orrs	r3, r2
 8004820:	b21b      	sxth	r3, r3
 8004822:	2b01      	cmp	r3, #1
 8004824:	d16a      	bne.n	80048fc <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 8004826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004828:	3301      	adds	r3, #1
 800482a:	4619      	mov	r1, r3
 800482c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800482e:	f7fe fd3a 	bl	80032a6 <move_window>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d161      	bne.n	80048fc <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 8004838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004842:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	b21a      	sxth	r2, r3
 800484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004850:	b21b      	sxth	r3, r3
 8004852:	4313      	orrs	r3, r2
 8004854:	b21b      	sxth	r3, r3
 8004856:	4a35      	ldr	r2, [pc, #212]	; (800492c <find_volume+0x590>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d14f      	bne.n	80048fc <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485e:	78db      	ldrb	r3, [r3, #3]
 8004860:	061a      	lsls	r2, r3, #24
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	789b      	ldrb	r3, [r3, #2]
 8004866:	041b      	lsls	r3, r3, #16
 8004868:	4313      	orrs	r3, r2
 800486a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800486c:	7852      	ldrb	r2, [r2, #1]
 800486e:	0212      	lsls	r2, r2, #8
 8004870:	4313      	orrs	r3, r2
 8004872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004874:	7812      	ldrb	r2, [r2, #0]
 8004876:	4313      	orrs	r3, r2
 8004878:	4a2d      	ldr	r2, [pc, #180]	; (8004930 <find_volume+0x594>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d13e      	bne.n	80048fc <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004880:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8004884:	061a      	lsls	r2, r3, #24
 8004886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004888:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800488c:	041b      	lsls	r3, r3, #16
 800488e:	4313      	orrs	r3, r2
 8004890:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004892:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8004896:	0212      	lsls	r2, r2, #8
 8004898:	4313      	orrs	r3, r2
 800489a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800489c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80048a0:	4313      	orrs	r3, r2
 80048a2:	4a24      	ldr	r2, [pc, #144]	; (8004934 <find_volume+0x598>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d129      	bne.n	80048fc <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80048a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048aa:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80048ae:	061a      	lsls	r2, r3, #24
 80048b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b2:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80048b6:	041b      	lsls	r3, r3, #16
 80048b8:	4313      	orrs	r3, r2
 80048ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048bc:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80048c0:	0212      	lsls	r2, r2, #8
 80048c2:	4313      	orrs	r3, r2
 80048c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048c6:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80048ca:	431a      	orrs	r2, r3
 80048cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80048d8:	061a      	lsls	r2, r3, #24
 80048da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048dc:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80048e0:	041b      	lsls	r3, r3, #16
 80048e2:	4313      	orrs	r3, r2
 80048e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048e6:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80048ea:	0212      	lsls	r2, r2, #8
 80048ec:	4313      	orrs	r3, r2
 80048ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048f0:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80048f4:	431a      	orrs	r2, r3
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80048fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004902:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8004906:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <find_volume+0x59c>)
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	3301      	adds	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <find_volume+0x59c>)
 8004910:	801a      	strh	r2, [r3, #0]
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <find_volume+0x59c>)
 8004914:	881a      	ldrh	r2, [r3, #0]
 8004916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004918:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800491c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800491e:	f7fe fc4f 	bl	80031c0 <clear_lock>
#endif

	return FR_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3758      	adds	r7, #88	; 0x58
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	ffffaa55 	.word	0xffffaa55
 8004930:	41615252 	.word	0x41615252
 8004934:	61417272 	.word	0x61417272
 8004938:	200007b8 	.word	0x200007b8

0800493c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d022      	beq.n	8004994 <validate+0x58>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01d      	beq.n	8004994 <validate+0x58>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800495e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004962:	2b00      	cmp	r3, #0
 8004964:	d016      	beq.n	8004994 <validate+0x58>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800496c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8004976:	429a      	cmp	r2, r3
 8004978:	d10c      	bne.n	8004994 <validate+0x58>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004980:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe f94d 	bl	8002c24 <disk_status>
 800498a:	4603      	mov	r3, r0
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8004994:	2309      	movs	r3, #9
 8004996:	e00b      	b.n	80049b0 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fe fa56 	bl	8002e50 <lock_fs>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <validate+0x72>
 80049aa:	230f      	movs	r3, #15
 80049ac:	e000      	b.n	80049b0 <validate+0x74>

	return FR_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	4613      	mov	r3, r2
 80049c4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80049ca:	f107 0310 	add.w	r3, r7, #16
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff fc36 	bl	8004240 <get_ldnumber>
 80049d4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	da01      	bge.n	80049e0 <f_mount+0x28>
 80049dc:	230b      	movs	r3, #11
 80049de:	e04c      	b.n	8004a7a <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80049e0:	4a28      	ldr	r2, [pc, #160]	; (8004a84 <f_mount+0xcc>)
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d011      	beq.n	8004a14 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 80049f0:	69b8      	ldr	r0, [r7, #24]
 80049f2:	f7fe fbe5 	bl	80031c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80049fc:	4618      	mov	r0, r3
 80049fe:	f001 fc2e 	bl	800625e <ff_del_syncobj>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <f_mount+0x54>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e036      	b.n	8004a7a <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d011      	beq.n	8004a3e <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f001 fbf5 	bl	800621e <ff_cre_syncobj>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <f_mount+0x86>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e01d      	b.n	8004a7a <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4910      	ldr	r1, [pc, #64]	; (8004a84 <f_mount+0xcc>)
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <f_mount+0x9c>
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d001      	beq.n	8004a58 <f_mount+0xa0>
 8004a54:	2300      	movs	r3, #0
 8004a56:	e010      	b.n	8004a7a <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8004a58:	f107 0108 	add.w	r1, r7, #8
 8004a5c:	f107 030c 	add.w	r3, r7, #12
 8004a60:	2200      	movs	r2, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fc9a 	bl	800439c <find_volume>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	7dfa      	ldrb	r2, [r7, #23]
 8004a70:	4611      	mov	r1, r2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe f9fb 	bl	8002e6e <unlock_fs>
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	200007b4 	.word	0x200007b4

08004a88 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004a94:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004a98:	6018      	str	r0, [r3, #0]
 8004a9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004a9e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8004aa2:	6019      	str	r1, [r3, #0]
 8004aa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004aa8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8004aac:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8004aae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004ab2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <f_open+0x38>
 8004abc:	2309      	movs	r3, #9
 8004abe:	e263      	b.n	8004f88 <f_open+0x500>
	fp->fs = 0;			/* Clear file object */
 8004ac0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004ac4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8004ad0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004ad4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8004ad8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8004adc:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8004ae0:	7812      	ldrb	r2, [r2, #0]
 8004ae2:	f002 021f 	and.w	r2, r2, #31
 8004ae6:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8004ae8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004aec:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	f023 0301 	bic.w	r3, r3, #1
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	f107 0108 	add.w	r1, r7, #8
 8004afc:	f107 0320 	add.w	r3, r7, #32
 8004b00:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff fc49 	bl	800439c <find_volume>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8004b10:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f040 8229 	bne.w	8004f6c <f_open+0x4e4>
		INIT_BUF(dj);
 8004b1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004b1e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004b22:	f107 0214 	add.w	r2, r7, #20
 8004b26:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8004b2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004b2e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	f107 0320 	add.w	r3, r7, #32
 8004b38:	4611      	mov	r1, r2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fb12 	bl	8004164 <follow_path>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8004b46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004b4a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004b4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b52:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004b56:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d11d      	bne.n	8004b9a <f_open+0x112>
			if (!dir)	/* Default directory itself */
 8004b5e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d103      	bne.n	8004b6e <f_open+0xe6>
				res = FR_INVALID_NAME;
 8004b66:	2306      	movs	r3, #6
 8004b68:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8004b6c:	e015      	b.n	8004b9a <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004b6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004b72:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	bf14      	ite	ne
 8004b80:	2301      	movne	r3, #1
 8004b82:	2300      	moveq	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	461a      	mov	r2, r3
 8004b88:	f107 0320 	add.w	r3, r7, #32
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe f98c 	bl	8002eac <chk_lock>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004b9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004b9e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	f003 031c 	and.w	r3, r3, #28
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80e6 	beq.w	8004d7a <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8004bae:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d027      	beq.n	8004c06 <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8004bb6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d10e      	bne.n	8004bdc <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004bbe:	f7fe f9e1 	bl	8002f84 <enq_lock>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <f_open+0x14e>
 8004bc8:	f107 0320 	add.w	r3, r7, #32
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff f9d0 	bl	8003f72 <dir_register>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	e000      	b.n	8004bd8 <f_open+0x150>
 8004bd6:	2312      	movs	r3, #18
 8004bd8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004bdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004be0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8004be4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8004be8:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8004bec:	7812      	ldrb	r2, [r2, #0]
 8004bee:	f042 0208 	orr.w	r2, r2, #8
 8004bf2:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8004bf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004bf8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004bfc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c00:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8004c04:	e017      	b.n	8004c36 <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004c06:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004c0a:	330b      	adds	r3, #11
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	f003 0311 	and.w	r3, r3, #17
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <f_open+0x196>
					res = FR_DENIED;
 8004c16:	2307      	movs	r3, #7
 8004c18:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8004c1c:	e00b      	b.n	8004c36 <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8004c1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004c22:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <f_open+0x1ae>
						res = FR_EXIST;
 8004c30:	2308      	movs	r3, #8
 8004c32:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004c36:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f040 80c1 	bne.w	8004dc2 <f_open+0x33a>
 8004c40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004c44:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80b7 	beq.w	8004dc2 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8004c54:	f7fd ff84 	bl	8002b60 <get_fattime>
 8004c58:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8004c5c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004c60:	330e      	adds	r3, #14
 8004c62:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	0a1b      	lsrs	r3, r3, #8
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004c78:	330f      	adds	r3, #15
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004c82:	0c1a      	lsrs	r2, r3, #16
 8004c84:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004c88:	3310      	adds	r3, #16
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004c92:	0e1a      	lsrs	r2, r3, #24
 8004c94:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004c98:	3311      	adds	r3, #17
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8004c9e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004ca2:	330b      	adds	r3, #11
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8004ca8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004cac:	331c      	adds	r3, #28
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004cb6:	331d      	adds	r3, #29
 8004cb8:	2200      	movs	r2, #0
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004cc0:	331e      	adds	r3, #30
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004cca:	331f      	adds	r3, #31
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8004cd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004cd4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004cd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004cdc:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff f8a4 	bl	8003e2e <ld_clust>
 8004ce6:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8004cea:	2100      	movs	r1, #0
 8004cec:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8004cf0:	f7ff f8ca 	bl	8003e88 <st_clust>
				dj.fs->wflag = 1;
 8004cf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004cf8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004cfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8004d06:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d059      	beq.n	8004dc2 <f_open+0x33a>
					dw = dj.fs->winsect;
 8004d0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004d12:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004d16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d1a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8004d1e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8004d22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004d26:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004d2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d2e:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe fd7b 	bl	800382e <remove_chain>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8004d3e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d13d      	bne.n	8004dc2 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8004d46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004d4a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004d4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d52:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8004d56:	3a01      	subs	r2, #1
 8004d58:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 8004d5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004d60:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004d64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d68:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fe fa9a 	bl	80032a6 <move_window>
 8004d72:	4603      	mov	r3, r0
 8004d74:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8004d78:	e023      	b.n	8004dc2 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8004d7a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d11f      	bne.n	8004dc2 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8004d82:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004d86:	330b      	adds	r3, #11
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	f003 0310 	and.w	r3, r3, #16
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <f_open+0x312>
					res = FR_NO_FILE;
 8004d92:	2304      	movs	r3, #4
 8004d94:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8004d98:	e013      	b.n	8004dc2 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8004d9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004d9e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <f_open+0x33a>
 8004dac:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004db0:	330b      	adds	r3, #11
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <f_open+0x33a>
						res = FR_DENIED;
 8004dbc:	2307      	movs	r3, #7
 8004dbe:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8004dc2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d153      	bne.n	8004e72 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004dca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004dce:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00b      	beq.n	8004df4 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8004ddc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004de0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8004de4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8004de8:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8004dec:	7812      	ldrb	r2, [r2, #0]
 8004dee:	f042 0220 	orr.w	r2, r2, #32
 8004df2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8004df4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004df8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004dfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e00:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8004e04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004e08:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8004e12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004e16:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8004e20:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004e24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004e28:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	f023 0301 	bic.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	bf14      	ite	ne
 8004e36:	2301      	movne	r3, #1
 8004e38:	2300      	moveq	r3, #0
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f107 0320 	add.w	r3, r7, #32
 8004e42:	4611      	mov	r1, r2
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fe f8c1 	bl	8002fcc <inc_lock>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004e50:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8004e5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004e5e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <f_open+0x3ea>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8004e72:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d178      	bne.n	8004f6c <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 8004e7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004e7e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8004e88:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8004e8c:	7812      	ldrb	r2, [r2, #0]
 8004e8e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8004e92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004e96:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8004ea2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004ea6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004eaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004eae:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe ffbb 	bl	8003e2e <ld_clust>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004ebe:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8004ec8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004ecc:	331f      	adds	r3, #31
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	061a      	lsls	r2, r3, #24
 8004ed2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8004ed6:	331e      	adds	r3, #30
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	041b      	lsls	r3, r3, #16
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8004ee2:	321d      	adds	r2, #29
 8004ee4:	7812      	ldrb	r2, [r2, #0]
 8004ee6:	0212      	lsls	r2, r2, #8
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8004eee:	321c      	adds	r2, #28
 8004ef0:	7812      	ldrb	r2, [r2, #0]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004ef8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8004f02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004f06:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8004f12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004f16:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8004f22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004f26:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8004f32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004f36:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004f3a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004f3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004f42:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8004f4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004f50:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f5a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8004f5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004f62:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8004f6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004f70:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f78:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fd ff75 	bl	8002e6e <unlock_fs>
 8004f84:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b08c      	sub	sp, #48	; 0x30
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
 8004f9e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f7ff fcc6 	bl	800493c <validate>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8004fb4:	7ffb      	ldrb	r3, [r7, #31]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <f_read+0x3c>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004fc0:	7ffa      	ldrb	r2, [r7, #31]
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fd ff52 	bl	8002e6e <unlock_fs>
 8004fca:	7ffb      	ldrb	r3, [r7, #31]
 8004fcc:	e192      	b.n	80052f4 <f_read+0x362>
	if (fp->err)								/* Check error */
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00d      	beq.n	8004ff4 <f_read+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f7fd ff41 	bl	8002e6e <unlock_fs>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8004ff2:	e17f      	b.n	80052f4 <f_read+0x362>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d108      	bne.n	8005014 <f_read+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005008:	2107      	movs	r1, #7
 800500a:	4618      	mov	r0, r3
 800500c:	f7fd ff2f 	bl	8002e6e <unlock_fs>
 8005010:	2307      	movs	r3, #7
 8005012:	e16f      	b.n	80052f4 <f_read+0x362>
	remain = fp->fsize - fp->fptr;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	429a      	cmp	r2, r3
 800502a:	f240 8157 	bls.w	80052dc <f_read+0x34a>
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005032:	e153      	b.n	80052dc <f_read+0x34a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800503a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503e:	2b00      	cmp	r3, #0
 8005040:	f040 811c 	bne.w	800527c <f_read+0x2ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800504a:	0a5b      	lsrs	r3, r3, #9
 800504c:	b2da      	uxtb	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005054:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005058:	3b01      	subs	r3, #1
 800505a:	b2db      	uxtb	r3, r3
 800505c:	4013      	ands	r3, r2
 800505e:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d147      	bne.n	80050f6 <f_read+0x164>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800506c:	2b00      	cmp	r3, #0
 800506e:	d104      	bne.n	800507a <f_read+0xe8>
					clst = fp->sclust;			/* Follow from the origin */
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005078:	e018      	b.n	80050ac <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <f_read+0x104>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800508a:	4619      	mov	r1, r3
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7fe fcc5 	bl	8003a1c <clmt_clust>
 8005092:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005094:	e00a      	b.n	80050ac <f_read+0x11a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80050a2:	4619      	mov	r1, r3
 80050a4:	4610      	mov	r0, r2
 80050a6:	f7fe f9fa 	bl	800349e <get_fat>
 80050aa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80050ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d80c      	bhi.n	80050cc <f_read+0x13a>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2202      	movs	r2, #2
 80050b6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050c0:	2102      	movs	r1, #2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fd fed3 	bl	8002e6e <unlock_fs>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e113      	b.n	80052f4 <f_read+0x362>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d2:	d10c      	bne.n	80050ee <f_read+0x15c>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050e2:	2101      	movs	r1, #1
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fd fec2 	bl	8002e6e <unlock_fs>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e102      	b.n	80052f4 <f_read+0x362>
				fp->clust = clst;				/* Update current cluster */
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005102:	4619      	mov	r1, r3
 8005104:	4610      	mov	r0, r2
 8005106:	f7fe f9a9 	bl	800345c <clust2sect>
 800510a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10c      	bne.n	800512c <f_read+0x19a>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2202      	movs	r2, #2
 8005116:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005120:	2102      	movs	r1, #2
 8005122:	4618      	mov	r0, r3
 8005124:	f7fd fea3 	bl	8002e6e <unlock_fs>
 8005128:	2302      	movs	r3, #2
 800512a:	e0e3      	b.n	80052f4 <f_read+0x362>
			sect += csect;
 800512c:	7dfb      	ldrb	r3, [r7, #23]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4413      	add	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	0a5b      	lsrs	r3, r3, #9
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	d04d      	beq.n	80051dc <f_read+0x24a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005140:	7dfa      	ldrb	r2, [r7, #23]
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	4413      	add	r3, r2
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800514c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005150:	4293      	cmp	r3, r2
 8005152:	d908      	bls.n	8005166 <f_read+0x1d4>
					cc = fp->fs->csize - csect;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800515a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800515e:	461a      	mov	r2, r3
 8005160:	7dfb      	ldrb	r3, [r7, #23]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800516c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	6a39      	ldr	r1, [r7, #32]
 8005176:	f7fd fd95 	bl	8002ca4 <disk_read>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00c      	beq.n	800519a <f_read+0x208>
					ABORT(fp->fs, FR_DISK_ERR);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800518e:	2101      	movs	r1, #1
 8005190:	4618      	mov	r0, r3
 8005192:	f7fd fe6c 	bl	8002e6e <unlock_fs>
 8005196:	2301      	movs	r3, #1
 8005198:	e0ac      	b.n	80052f4 <f_read+0x362>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80051a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d015      	beq.n	80051d4 <f_read+0x242>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d90d      	bls.n	80051d4 <f_read+0x242>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	025b      	lsls	r3, r3, #9
 80051c4:	6a3a      	ldr	r2, [r7, #32]
 80051c6:	4413      	add	r3, r2
 80051c8:	68f9      	ldr	r1, [r7, #12]
 80051ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fd fdc6 	bl	8002d60 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	025b      	lsls	r3, r3, #9
 80051d8:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80051da:	e069      	b.n	80052b0 <f_read+0x31e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d045      	beq.n	8005274 <f_read+0x2e2>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80051ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d024      	beq.n	8005240 <f_read+0x2ae>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80051fc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005200:	68f9      	ldr	r1, [r7, #12]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005208:	2301      	movs	r3, #1
 800520a:	f7fd fd6b 	bl	8002ce4 <disk_write>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00c      	beq.n	800522e <f_read+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005222:	2101      	movs	r1, #1
 8005224:	4618      	mov	r0, r3
 8005226:	f7fd fe22 	bl	8002e6e <unlock_fs>
 800522a:	2301      	movs	r3, #1
 800522c:	e062      	b.n	80052f4 <f_read+0x362>
					fp->flag &= ~FA__DIRTY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005246:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800524a:	68f9      	ldr	r1, [r7, #12]
 800524c:	2301      	movs	r3, #1
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	f7fd fd28 	bl	8002ca4 <disk_read>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00c      	beq.n	8005274 <f_read+0x2e2>
					ABORT(fp->fs, FR_DISK_ERR);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005268:	2101      	movs	r1, #1
 800526a:	4618      	mov	r0, r3
 800526c:	f7fd fdff 	bl	8002e6e <unlock_fs>
 8005270:	2301      	movs	r3, #1
 8005272:	e03f      	b.n	80052f4 <f_read+0x362>
			}
#endif
			fp->dsect = sect;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005286:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800528c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	d901      	bls.n	8005298 <f_read+0x306>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800529e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4413      	add	r3, r2
 80052a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052a8:	4619      	mov	r1, r3
 80052aa:	6a38      	ldr	r0, [r7, #32]
 80052ac:	f7fd fd58 	bl	8002d60 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80052b0:	6a3a      	ldr	r2, [r7, #32]
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	4413      	add	r3, r2
 80052b6:	623b      	str	r3, [r7, #32]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	441a      	add	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	441a      	add	r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f47f aea8 	bne.w	8005034 <f_read+0xa2>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052ea:	2100      	movs	r1, #0
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7fd fdbe 	bl	8002e6e <unlock_fs>
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3730      	adds	r7, #48	; 0x30
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08a      	sub	sp, #40	; 0x28
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7ff fb11 	bl	800493c <validate>
 800531a:	4603      	mov	r3, r0
 800531c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800531e:	7dfb      	ldrb	r3, [r7, #23]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d009      	beq.n	8005338 <f_write+0x3c>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800532a:	7dfa      	ldrb	r2, [r7, #23]
 800532c:	4611      	mov	r1, r2
 800532e:	4618      	mov	r0, r3
 8005330:	f7fd fd9d 	bl	8002e6e <unlock_fs>
 8005334:	7dfb      	ldrb	r3, [r7, #23]
 8005336:	e1d4      	b.n	80056e2 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00d      	beq.n	800535e <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f7fd fd8c 	bl	8002e6e <unlock_fs>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800535c:	e1c1      	b.n	80056e2 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d108      	bne.n	800537e <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005372:	2107      	movs	r1, #7
 8005374:	4618      	mov	r0, r3
 8005376:	f7fd fd7a 	bl	8002e6e <unlock_fs>
 800537a:	2307      	movs	r3, #7
 800537c:	e1b1      	b.n	80056e2 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	441a      	add	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800538e:	429a      	cmp	r2, r3
 8005390:	f080 8182 	bcs.w	8005698 <f_write+0x39c>
 8005394:	2300      	movs	r3, #0
 8005396:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005398:	e17e      	b.n	8005698 <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80053a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f040 813e 	bne.w	8005626 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80053b0:	0a5b      	lsrs	r3, r3, #9
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053ba:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80053be:	3b01      	subs	r3, #1
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	4013      	ands	r3, r2
 80053c4:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80053c6:	7dbb      	ldrb	r3, [r7, #22]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d15f      	bne.n	800548c <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10f      	bne.n	80053f6 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d121      	bne.n	8005428 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053ea:	2100      	movs	r1, #0
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fe fa78 	bl	80038e2 <create_chain>
 80053f2:	6278      	str	r0, [r7, #36]	; 0x24
 80053f4:	e018      	b.n	8005428 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005406:	4619      	mov	r1, r3
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f7fe fb07 	bl	8003a1c <clmt_clust>
 800540e:	6278      	str	r0, [r7, #36]	; 0x24
 8005410:	e00a      	b.n	8005428 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800541e:	4619      	mov	r1, r3
 8005420:	4610      	mov	r0, r2
 8005422:	f7fe fa5e 	bl	80038e2 <create_chain>
 8005426:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 8139 	beq.w	80056a2 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	2b01      	cmp	r3, #1
 8005434:	d10c      	bne.n	8005450 <f_write+0x154>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2202      	movs	r2, #2
 800543a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005444:	2102      	movs	r1, #2
 8005446:	4618      	mov	r0, r3
 8005448:	f7fd fd11 	bl	8002e6e <unlock_fs>
 800544c:	2302      	movs	r3, #2
 800544e:	e148      	b.n	80056e2 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005456:	d10c      	bne.n	8005472 <f_write+0x176>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005466:	2101      	movs	r1, #1
 8005468:	4618      	mov	r0, r3
 800546a:	f7fd fd00 	bl	8002e6e <unlock_fs>
 800546e:	2301      	movs	r3, #1
 8005470:	e137      	b.n	80056e2 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005476:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005480:	2b00      	cmp	r3, #0
 8005482:	d103      	bne.n	800548c <f_write+0x190>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005488:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d024      	beq.n	80054e4 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054a0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80054a4:	68f9      	ldr	r1, [r7, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80054ac:	2301      	movs	r3, #1
 80054ae:	f7fd fc19 	bl	8002ce4 <disk_write>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00c      	beq.n	80054d2 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054c6:	2101      	movs	r1, #1
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fd fcd0 	bl	8002e6e <unlock_fs>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e107      	b.n	80056e2 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80054d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80054f0:	4619      	mov	r1, r3
 80054f2:	4610      	mov	r0, r2
 80054f4:	f7fd ffb2 	bl	800345c <clust2sect>
 80054f8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10c      	bne.n	800551a <f_write+0x21e>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800550e:	2102      	movs	r1, #2
 8005510:	4618      	mov	r0, r3
 8005512:	f7fd fcac 	bl	8002e6e <unlock_fs>
 8005516:	2302      	movs	r3, #2
 8005518:	e0e3      	b.n	80056e2 <f_write+0x3e6>
			sect += csect;
 800551a:	7dbb      	ldrb	r3, [r7, #22]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4413      	add	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	0a5b      	lsrs	r3, r3, #9
 8005526:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d04f      	beq.n	80055ce <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800552e:	7dba      	ldrb	r2, [r7, #22]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	4413      	add	r3, r2
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800553a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800553e:	4293      	cmp	r3, r2
 8005540:	d908      	bls.n	8005554 <f_write+0x258>
					cc = fp->fs->csize - csect;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005548:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800554c:	461a      	mov	r2, r3
 800554e:	7dbb      	ldrb	r3, [r7, #22]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800555a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	69b9      	ldr	r1, [r7, #24]
 8005564:	f7fd fbbe 	bl	8002ce4 <disk_write>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00c      	beq.n	8005588 <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800557c:	2101      	movs	r1, #1
 800557e:	4618      	mov	r0, r3
 8005580:	f7fd fc75 	bl	8002e6e <unlock_fs>
 8005584:	2301      	movs	r3, #1
 8005586:	e0ac      	b.n	80056e2 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	429a      	cmp	r2, r3
 8005596:	d916      	bls.n	80055c6 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	025b      	lsls	r3, r3, #9
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4413      	add	r3, r2
 80055aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ae:	4619      	mov	r1, r3
 80055b0:	f7fd fbd6 	bl	8002d60 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80055ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	025b      	lsls	r3, r3, #9
 80055ca:	623b      	str	r3, [r7, #32]
				continue;
 80055cc:	e04e      	b.n	800566c <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d021      	beq.n	800561e <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d219      	bcs.n	800561e <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055f0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80055f4:	68f9      	ldr	r1, [r7, #12]
 80055f6:	2301      	movs	r3, #1
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	f7fd fb53 	bl	8002ca4 <disk_read>
 80055fe:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00c      	beq.n	800561e <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005612:	2101      	movs	r1, #1
 8005614:	4618      	mov	r0, r3
 8005616:	f7fd fc2a 	bl	8002e6e <unlock_fs>
 800561a:	2301      	movs	r3, #1
 800561c:	e061      	b.n	80056e2 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800562c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005630:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005634:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8005636:	6a3a      	ldr	r2, [r7, #32]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	429a      	cmp	r2, r3
 800563c:	d901      	bls.n	8005642 <f_write+0x346>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	6a3a      	ldr	r2, [r7, #32]
 8005652:	69b9      	ldr	r1, [r7, #24]
 8005654:	4618      	mov	r0, r3
 8005656:	f7fd fb83 	bl	8002d60 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005664:	b2da      	uxtb	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	4413      	add	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	441a      	add	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	441a      	add	r2, r3
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	f47f ae7d 	bne.w	800539a <f_write+0x9e>
 80056a0:	e000      	b.n	80056a4 <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80056a2:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d905      	bls.n	80056c0 <f_write+0x3c4>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80056c6:	f043 0320 	orr.w	r3, r3, #32
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056d8:	2100      	movs	r1, #0
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fd fbc7 	bl	8002e6e <unlock_fs>
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3728      	adds	r7, #40	; 0x28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b086      	sub	sp, #24
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff f922 	bl	800493c <validate>
 80056f8:	4603      	mov	r3, r0
 80056fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80056fc:	7dfb      	ldrb	r3, [r7, #23]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f040 80af 	bne.w	8005862 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 80a7 	beq.w	8005862 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d020      	beq.n	8005764 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005728:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005734:	2301      	movs	r3, #1
 8005736:	f7fd fad5 	bl	8002ce4 <disk_write>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d008      	beq.n	8005752 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005746:	2101      	movs	r1, #1
 8005748:	4618      	mov	r0, r3
 800574a:	f7fd fb90 	bl	8002e6e <unlock_fs>
 800574e:	2301      	movs	r3, #1
 8005750:	e090      	b.n	8005874 <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800575c:	b2da      	uxtb	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005770:	4619      	mov	r1, r3
 8005772:	4610      	mov	r0, r2
 8005774:	f7fd fd97 	bl	80032a6 <move_window>
 8005778:	4603      	mov	r3, r0
 800577a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800577c:	7dfb      	ldrb	r3, [r7, #23]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d16f      	bne.n	8005862 <f_sync+0x178>
				dir = fp->dir_ptr;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005788:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	330b      	adds	r3, #11
 800578e:	781a      	ldrb	r2, [r3, #0]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	330b      	adds	r3, #11
 8005794:	f042 0220 	orr.w	r2, r2, #32
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	331c      	adds	r3, #28
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	0a1b      	lsrs	r3, r3, #8
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	331d      	adds	r3, #29
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80057c4:	0c1a      	lsrs	r2, r3, #16
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	331e      	adds	r3, #30
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80057d4:	0e1a      	lsrs	r2, r3, #24
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	331f      	adds	r3, #31
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80057e4:	4619      	mov	r1, r3
 80057e6:	6938      	ldr	r0, [r7, #16]
 80057e8:	f7fe fb4e 	bl	8003e88 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80057ec:	f7fd f9b8 	bl	8002b60 <get_fattime>
 80057f0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	3316      	adds	r3, #22
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	0a1b      	lsrs	r3, r3, #8
 8005802:	b29a      	uxth	r2, r3
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	3317      	adds	r3, #23
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	0c1a      	lsrs	r2, r3, #16
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	3318      	adds	r3, #24
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	0e1a      	lsrs	r2, r3, #24
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	3319      	adds	r3, #25
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	3312      	adds	r3, #18
 8005828:	2200      	movs	r2, #0
 800582a:	701a      	strb	r2, [r3, #0]
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	3313      	adds	r3, #19
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800583a:	f023 0320 	bic.w	r3, r3, #32
 800583e:	b2da      	uxtb	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005858:	4618      	mov	r0, r3
 800585a:	f7fd fd52 	bl	8003302 <sync_fs>
 800585e:	4603      	mov	r3, r0
 8005860:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005868:	7dfa      	ldrb	r2, [r7, #23]
 800586a:	4611      	mov	r1, r2
 800586c:	4618      	mov	r0, r3
 800586e:	f7fd fafe 	bl	8002e6e <unlock_fs>
 8005872:	7dfb      	ldrb	r3, [r7, #23]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff ff30 	bl	80056ea <f_sync>
 800588a:	4603      	mov	r3, r0
 800588c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d11e      	bne.n	80058d2 <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff f851 	bl	800493c <validate>
 800589a:	4603      	mov	r3, r0
 800589c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d116      	bne.n	80058d2 <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058aa:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fd fc40 	bl	8003138 <dec_lock>
 80058b8:	4603      	mov	r3, r0
 80058ba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d103      	bne.n	80058ca <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80058ca:	2100      	movs	r1, #0
 80058cc:	68b8      	ldr	r0, [r7, #8]
 80058ce:	f7fd face 	bl	8002e6e <unlock_fs>
#endif
		}
	}
	return res;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b090      	sub	sp, #64	; 0x40
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff f828 	bl	800493c <validate>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80058f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00b      	beq.n	8005912 <f_lseek+0x36>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005900:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005904:	4611      	mov	r1, r2
 8005906:	4618      	mov	r0, r3
 8005908:	f7fd fab1 	bl	8002e6e <unlock_fs>
 800590c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005910:	e2af      	b.n	8005e72 <f_lseek+0x596>
	if (fp->err)						/* Check error */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00d      	beq.n	8005938 <f_lseek+0x5c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005928:	4619      	mov	r1, r3
 800592a:	4610      	mov	r0, r2
 800592c:	f7fd fa9f 	bl	8002e6e <unlock_fs>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005936:	e29c      	b.n	8005e72 <f_lseek+0x596>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 8115 	beq.w	8005b6e <f_lseek+0x292>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594a:	d172      	bne.n	8005a32 <f_lseek+0x156>
			tbl = fp->cltbl;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	1d1a      	adds	r2, r3, #4
 8005958:	627a      	str	r2, [r7, #36]	; 0x24
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	2302      	movs	r3, #2
 8005960:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005968:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	2b00      	cmp	r3, #0
 800596e:	d04f      	beq.n	8005a10 <f_lseek+0x134>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	2300      	movs	r3, #0
 8005976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	3302      	adds	r3, #2
 800597c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	3301      	adds	r3, #1
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800598e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005990:	4618      	mov	r0, r3
 8005992:	f7fd fd84 	bl	800349e <get_fat>
 8005996:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	2b01      	cmp	r3, #1
 800599c:	d80c      	bhi.n	80059b8 <f_lseek+0xdc>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059ac:	2102      	movs	r1, #2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fd fa5d 	bl	8002e6e <unlock_fs>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e25c      	b.n	8005e72 <f_lseek+0x596>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059be:	d10c      	bne.n	80059da <f_lseek+0xfe>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059ce:	2101      	movs	r1, #1
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fd fa4c 	bl	8002e6e <unlock_fs>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e24b      	b.n	8005e72 <f_lseek+0x596>
					} while (cl == pcl + 1);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3301      	adds	r3, #1
 80059de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d0cc      	beq.n	800597e <f_lseek+0xa2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80059e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d809      	bhi.n	8005a00 <f_lseek+0x124>
						*tbl++ = ncl; *tbl++ = tcl;
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	1d1a      	adds	r2, r3, #4
 80059f0:	627a      	str	r2, [r7, #36]	; 0x24
 80059f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	1d1a      	adds	r2, r3, #4
 80059fa:	627a      	str	r2, [r7, #36]	; 0x24
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d3af      	bcc.n	8005970 <f_lseek+0x94>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a18:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8005a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d803      	bhi.n	8005a2a <f_lseek+0x14e>
				*tbl = 0;		/* Terminate table */
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	e218      	b.n	8005e5c <f_lseek+0x580>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8005a2a:	2311      	movs	r3, #17
 8005a2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005a30:	e214      	b.n	8005e5c <f_lseek+0x580>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d903      	bls.n	8005a46 <f_lseek+0x16a>
				ofs = fp->fsize;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005a44:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8203 	beq.w	8005e5c <f_lseek+0x580>
				fp->clust = clmt_clust(fp, ofs - 1);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7fd ffdd 	bl	8003a1c <clmt_clust>
 8005a62:	4602      	mov	r2, r0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a76:	4619      	mov	r1, r3
 8005a78:	4610      	mov	r0, r2
 8005a7a:	f7fd fcef 	bl	800345c <clust2sect>
 8005a7e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10c      	bne.n	8005aa0 <f_lseek+0x1c4>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a94:	2102      	movs	r1, #2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fd f9e9 	bl	8002e6e <unlock_fs>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e1e8      	b.n	8005e72 <f_lseek+0x596>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	0a5b      	lsrs	r3, r3, #9
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005aac:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005ab0:	3a01      	subs	r2, #1
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 81c9 	beq.w	8005e5c <f_lseek+0x580>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	f000 81c2 	beq.w	8005e5c <f_lseek+0x580>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d024      	beq.n	8005b30 <f_lseek+0x254>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005aec:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005af8:	2301      	movs	r3, #1
 8005afa:	f7fd f8f3 	bl	8002ce4 <disk_write>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00c      	beq.n	8005b1e <f_lseek+0x242>
							ABORT(fp->fs, FR_DISK_ERR);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b12:	2101      	movs	r1, #1
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fd f9aa 	bl	8002e6e <unlock_fs>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e1a9      	b.n	8005e72 <f_lseek+0x596>
						fp->flag &= ~FA__DIRTY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b36:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	f7fd f8b0 	bl	8002ca4 <disk_read>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00c      	beq.n	8005b64 <f_lseek+0x288>
						ABORT(fp->fs, FR_DISK_ERR);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b58:	2101      	movs	r1, #1
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fd f987 	bl	8002e6e <unlock_fs>
 8005b60:	2301      	movs	r3, #1
 8005b62:	e186      	b.n	8005e72 <f_lseek+0x596>
#endif
					fp->dsect = dsc;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8005b6c:	e176      	b.n	8005e5c <f_lseek+0x580>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d90a      	bls.n	8005b90 <f_lseek+0x2b4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d103      	bne.n	8005b90 <f_lseek+0x2b4>
#endif
			) ofs = fp->fsize;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005b8e:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005b96:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ba0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 80ea 	beq.w	8005d80 <f_lseek+0x4a4>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bb2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005bb6:	025b      	lsls	r3, r3, #9
 8005bb8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01e      	beq.n	8005bfe <f_lseek+0x322>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	1e5a      	subs	r2, r3, #1
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	1e59      	subs	r1, r3, #1
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d312      	bcc.n	8005bfe <f_lseek+0x322>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	1e5a      	subs	r2, r3, #1
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	425b      	negs	r3, r3
 8005be0:	401a      	ands	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bfc:	e037      	b.n	8005c6e <f_lseek+0x392>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c04:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8005c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d12c      	bne.n	8005c66 <f_lseek+0x38a>
					clst = create_chain(fp->fs, 0);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c12:	2100      	movs	r1, #0
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fd fe64 	bl	80038e2 <create_chain>
 8005c1a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d10c      	bne.n	8005c3c <f_lseek+0x360>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2202      	movs	r2, #2
 8005c26:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c30:	2102      	movs	r1, #2
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fd f91b 	bl	8002e6e <unlock_fs>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e11a      	b.n	8005e72 <f_lseek+0x596>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c42:	d10c      	bne.n	8005c5e <f_lseek+0x382>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c52:	2101      	movs	r1, #1
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fd f90a 	bl	8002e6e <unlock_fs>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e109      	b.n	8005e72 <f_lseek+0x596>
					fp->sclust = clst;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 8085 	beq.w	8005d80 <f_lseek+0x4a4>
				while (ofs > bcs) {						/* Cluster following loop */
 8005c76:	e055      	b.n	8005d24 <f_lseek+0x448>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00d      	beq.n	8005ca2 <f_lseek+0x3c6>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fd fe27 	bl	80038e2 <create_chain>
 8005c94:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10a      	bne.n	8005cb2 <f_lseek+0x3d6>
							ofs = bcs; break;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	e044      	b.n	8005d2c <f_lseek+0x450>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ca8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fd fbf7 	bl	800349e <get_fat>
 8005cb0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb8:	d10c      	bne.n	8005cd4 <f_lseek+0x3f8>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cc8:	2101      	movs	r1, #1
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fd f8cf 	bl	8002e6e <unlock_fs>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0ce      	b.n	8005e72 <f_lseek+0x596>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d907      	bls.n	8005cea <f_lseek+0x40e>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ce0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d30c      	bcc.n	8005d04 <f_lseek+0x428>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2202      	movs	r2, #2
 8005cee:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cf8:	2102      	movs	r1, #2
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fd f8b7 	bl	8002e6e <unlock_fs>
 8005d00:	2302      	movs	r3, #2
 8005d02:	e0b6      	b.n	8005e72 <f_lseek+0x596>
					fp->clust = clst;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	441a      	add	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d8a5      	bhi.n	8005c78 <f_lseek+0x39c>
				}
				fp->fptr += ofs;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	441a      	add	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d01c      	beq.n	8005d80 <f_lseek+0x4a4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fd fb84 	bl	800345c <clust2sect>
 8005d54:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8005d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10c      	bne.n	8005d76 <f_lseek+0x49a>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d6a:	2102      	movs	r1, #2
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fd f87e 	bl	8002e6e <unlock_fs>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e07d      	b.n	8005e72 <f_lseek+0x596>
					nsect += ofs / SS(fp->fs);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	0a5b      	lsrs	r3, r3, #9
 8005d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d7c:	4413      	add	r3, r2
 8005d7e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d04f      	beq.n	8005e2e <f_lseek+0x552>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005d94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d049      	beq.n	8005e2e <f_lseek+0x552>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d024      	beq.n	8005df2 <f_lseek+0x516>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005dae:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f7fc ff92 	bl	8002ce4 <disk_write>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00c      	beq.n	8005de0 <f_lseek+0x504>
					ABORT(fp->fs, FR_DISK_ERR);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fd f849 	bl	8002e6e <unlock_fs>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e048      	b.n	8005e72 <f_lseek+0x596>
				fp->flag &= ~FA__DIRTY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005df8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	2301      	movs	r3, #1
 8005e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e02:	f7fc ff4f 	bl	8002ca4 <disk_read>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00c      	beq.n	8005e26 <f_lseek+0x54a>
				ABORT(fp->fs, FR_DISK_ERR);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fd f826 	bl	8002e6e <unlock_fs>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e025      	b.n	8005e72 <f_lseek+0x596>
#endif
			fp->dsect = nsect;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e2a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d90e      	bls.n	8005e5c <f_lseek+0x580>
			fp->fsize = fp->fptr;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005e50:	f043 0320 	orr.w	r3, r3, #32
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e62:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005e66:	4611      	mov	r1, r2
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fd f800 	bl	8002e6e <unlock_fs>
 8005e6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3740      	adds	r7, #64	; 0x40
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD ncl;


	res = validate(fp);						/* Check validity of the object */
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fe fd5a 	bl	800493c <validate>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d112      	bne.n	8005eb8 <f_truncate+0x3e>
		if (fp->err) {						/* Check error */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d004      	beq.n	8005ea6 <f_truncate+0x2c>
			res = (FRESULT)fp->err;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005ea2:	73fb      	strb	r3, [r7, #15]
 8005ea4:	e008      	b.n	8005eb8 <f_truncate+0x3e>
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <f_truncate+0x3e>
				res = FR_DENIED;
 8005eb4:	2307      	movs	r3, #7
 8005eb6:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (res == FR_OK) {
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f040 8096 	bne.w	8005fec <f_truncate+0x172>
		if (fp->fsize > fp->fptr) {
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	f240 8086 	bls.w	8005fde <f_truncate+0x164>
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005ee4:	f043 0320 	orr.w	r3, r3, #32
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d110      	bne.n	8005f1c <f_truncate+0xa2>
				res = remove_chain(fp->fs, fp->sclust);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f06:	4619      	mov	r1, r3
 8005f08:	4610      	mov	r0, r2
 8005f0a:	f7fd fc90 	bl	800382e <remove_chain>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	73fb      	strb	r3, [r7, #15]
				fp->sclust = 0;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8005f1a:	e03b      	b.n	8005f94 <f_truncate+0x11a>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	f7fd fab7 	bl	800349e <get_fat>
 8005f30:	60b8      	str	r0, [r7, #8]
				res = FR_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	73fb      	strb	r3, [r7, #15]
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d101      	bne.n	8005f42 <f_truncate+0xc8>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	73fb      	strb	r3, [r7, #15]
				if (ncl == 1) res = FR_INT_ERR;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <f_truncate+0xd2>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d120      	bne.n	8005f94 <f_truncate+0x11a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f58:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d218      	bcs.n	8005f94 <f_truncate+0x11a>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f6e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005f72:	4619      	mov	r1, r3
 8005f74:	f7fd fb4d 	bl	8003612 <put_fat>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	73fb      	strb	r3, [r7, #15]
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d108      	bne.n	8005f94 <f_truncate+0x11a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fd fc4f 	bl	800382e <remove_chain>
 8005f90:	4603      	mov	r3, r0
 8005f92:	73fb      	strb	r3, [r7, #15]
				}
			}
#if !_FS_TINY
			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d121      	bne.n	8005fde <f_truncate+0x164>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01a      	beq.n	8005fde <f_truncate+0x164>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005fae:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f7fc fe92 	bl	8002ce4 <disk_write>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <f_truncate+0x152>
					res = FR_DISK_ERR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	73fb      	strb	r3, [r7, #15]
 8005fca:	e008      	b.n	8005fde <f_truncate+0x164>
				else
					fp->flag &= ~FA__DIRTY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
		}
		if (res != FR_OK) fp->err = (FRESULT)res;
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <f_truncate+0x172>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	7bfa      	ldrb	r2, [r7, #15]
 8005fe8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
	}

	LEAVE_FF(fp->fs, res);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ff2:	7bfa      	ldrb	r2, [r7, #15]
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fc ff39 	bl	8002e6e <unlock_fs>
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b088      	sub	sp, #32
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006012:	2300      	movs	r3, #0
 8006014:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800601a:	e01b      	b.n	8006054 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800601c:	f107 0310 	add.w	r3, r7, #16
 8006020:	f107 0114 	add.w	r1, r7, #20
 8006024:	2201      	movs	r2, #1
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7fe ffb3 	bl	8004f92 <f_read>
		if (rc != 1) break;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d116      	bne.n	8006060 <f_gets+0x5a>
		c = s[0];
 8006032:	7d3b      	ldrb	r3, [r7, #20]
 8006034:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006036:	7dfb      	ldrb	r3, [r7, #23]
 8006038:	2b0d      	cmp	r3, #13
 800603a:	d100      	bne.n	800603e <f_gets+0x38>
 800603c:	e00a      	b.n	8006054 <f_gets+0x4e>
		*p++ = c;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	61ba      	str	r2, [r7, #24]
 8006044:	7dfa      	ldrb	r2, [r7, #23]
 8006046:	701a      	strb	r2, [r3, #0]
		n++;
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	3301      	adds	r3, #1
 800604c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800604e:	7dfb      	ldrb	r3, [r7, #23]
 8006050:	2b0a      	cmp	r3, #10
 8006052:	d007      	beq.n	8006064 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	3b01      	subs	r3, #1
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	429a      	cmp	r2, r3
 800605c:	dbde      	blt.n	800601c <f_gets+0x16>
 800605e:	e002      	b.n	8006066 <f_gets+0x60>
		if (rc != 1) break;
 8006060:	bf00      	nop
 8006062:	e000      	b.n	8006066 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006064:	bf00      	nop
	}
	*p = 0;
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	2200      	movs	r2, #0
 800606a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <f_gets+0x70>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	e000      	b.n	8006078 <f_gets+0x72>
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3720      	adds	r7, #32
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	2b0a      	cmp	r3, #10
 8006090:	d103      	bne.n	800609a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006092:	210d      	movs	r1, #13
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff fff3 	bl	8006080 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	db25      	blt.n	80060f2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	60fa      	str	r2, [r7, #12]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	4413      	add	r3, r2
 80060b0:	78fa      	ldrb	r2, [r7, #3]
 80060b2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b3c      	cmp	r3, #60	; 0x3c
 80060b8:	dd12      	ble.n	80060e0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6818      	ldr	r0, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f103 010c 	add.w	r1, r3, #12
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	f107 0308 	add.w	r3, r7, #8
 80060ca:	f7ff f917 	bl	80052fc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d101      	bne.n	80060da <putc_bfd+0x5a>
 80060d6:	2300      	movs	r3, #0
 80060d8:	e001      	b.n	80060de <putc_bfd+0x5e>
 80060da:	f04f 33ff 	mov.w	r3, #4294967295
 80060de:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	609a      	str	r2, [r3, #8]
 80060f0:	e000      	b.n	80060f4 <putc_bfd+0x74>
	if (i < 0) return;
 80060f2:	bf00      	nop
}
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80060fa:	b590      	push	{r4, r7, lr}
 80060fc:	b097      	sub	sp, #92	; 0x5c
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8006110:	e009      	b.n	8006126 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	781a      	ldrb	r2, [r3, #0]
 800611a:	f107 030c 	add.w	r3, r7, #12
 800611e:	4611      	mov	r1, r2
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff ffad 	bl	8006080 <putc_bfd>
	while (*str)			/* Put the string */
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1f1      	bne.n	8006112 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	db15      	blt.n	8006160 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	461c      	mov	r4, r3
 800613a:	f107 0208 	add.w	r2, r7, #8
 800613e:	f107 030c 	add.w	r3, r7, #12
 8006142:	f103 010c 	add.w	r1, r3, #12
 8006146:	4613      	mov	r3, r2
 8006148:	4622      	mov	r2, r4
 800614a:	f7ff f8d7 	bl	80052fc <f_write>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d105      	bne.n	8006160 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	4293      	cmp	r3, r2
 800615a:	d101      	bne.n	8006160 <f_puts+0x66>
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	e001      	b.n	8006164 <f_puts+0x6a>
	return EOF;
 8006160:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006164:	4618      	mov	r0, r3
 8006166:	375c      	adds	r7, #92	; 0x5c
 8006168:	46bd      	mov	sp, r7
 800616a:	bd90      	pop	{r4, r7, pc}

0800616c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	4613      	mov	r3, r2
 8006178:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800617a:	2301      	movs	r3, #1
 800617c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800617e:	2300      	movs	r3, #0
 8006180:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006182:	4b1e      	ldr	r3, [pc, #120]	; (80061fc <FATFS_LinkDriverEx+0x90>)
 8006184:	7a5b      	ldrb	r3, [r3, #9]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	d831      	bhi.n	80061f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800618c:	4b1b      	ldr	r3, [pc, #108]	; (80061fc <FATFS_LinkDriverEx+0x90>)
 800618e:	7a5b      	ldrb	r3, [r3, #9]
 8006190:	b2db      	uxtb	r3, r3
 8006192:	461a      	mov	r2, r3
 8006194:	4b19      	ldr	r3, [pc, #100]	; (80061fc <FATFS_LinkDriverEx+0x90>)
 8006196:	2100      	movs	r1, #0
 8006198:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800619a:	4b18      	ldr	r3, [pc, #96]	; (80061fc <FATFS_LinkDriverEx+0x90>)
 800619c:	7a5b      	ldrb	r3, [r3, #9]
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	4a16      	ldr	r2, [pc, #88]	; (80061fc <FATFS_LinkDriverEx+0x90>)
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80061aa:	4b14      	ldr	r3, [pc, #80]	; (80061fc <FATFS_LinkDriverEx+0x90>)
 80061ac:	7a5b      	ldrb	r3, [r3, #9]
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	4b12      	ldr	r3, [pc, #72]	; (80061fc <FATFS_LinkDriverEx+0x90>)
 80061b4:	4413      	add	r3, r2
 80061b6:	79fa      	ldrb	r2, [r7, #7]
 80061b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80061ba:	4b10      	ldr	r3, [pc, #64]	; (80061fc <FATFS_LinkDriverEx+0x90>)
 80061bc:	7a5b      	ldrb	r3, [r3, #9]
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	b2d1      	uxtb	r1, r2
 80061c4:	4a0d      	ldr	r2, [pc, #52]	; (80061fc <FATFS_LinkDriverEx+0x90>)
 80061c6:	7251      	strb	r1, [r2, #9]
 80061c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80061ca:	7dbb      	ldrb	r3, [r7, #22]
 80061cc:	3330      	adds	r3, #48	; 0x30
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	3301      	adds	r3, #1
 80061d8:	223a      	movs	r2, #58	; 0x3a
 80061da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	3302      	adds	r3, #2
 80061e0:	222f      	movs	r2, #47	; 0x2f
 80061e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	3303      	adds	r3, #3
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80061ec:	2300      	movs	r3, #0
 80061ee:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80061f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	371c      	adds	r7, #28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr
 80061fc:	200007d4 	.word	0x200007d4

08006200 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800620a:	2200      	movs	r2, #0
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff ffac 	bl	800616c <FATFS_LinkDriverEx>
 8006214:	4603      	mov	r3, r0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b086      	sub	sp, #24
 8006222:	af00      	add	r7, sp, #0
 8006224:	4603      	mov	r3, r0
 8006226:	6039      	str	r1, [r7, #0]
 8006228:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	2300      	movs	r3, #0
 8006230:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 8006232:	f107 030c 	add.w	r3, r7, #12
 8006236:	2101      	movs	r1, #1
 8006238:	4618      	mov	r0, r3
 800623a:	f000 f84d 	bl	80062d8 <osSemaphoreCreate>
 800623e:	4602      	mov	r2, r0
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	bf14      	ite	ne
 800624c:	2301      	movne	r3, #1
 800624e:	2300      	moveq	r3, #0
 8006250:	b2db      	uxtb	r3, r3
 8006252:	617b      	str	r3, [r7, #20]
  
  return ret;
 8006254:	697b      	ldr	r3, [r7, #20]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f8ec 	bl	8006444 <osSemaphoreDelete>
  return 1;
 800626c:	2301      	movs	r3, #1
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8006282:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f858 	bl	800633c <osSemaphoreWait>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <ff_req_grant+0x20>
  {
    ret = 1;
 8006292:	2301      	movs	r3, #1
 8006294:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8006296:	68fb      	ldr	r3, [r7, #12]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f895 	bl	80063d8 <osSemaphoreRelease>
}
 80062ae:	bf00      	nop
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062bc:	f3ef 8305 	mrs	r3, IPSR
 80062c0:	607b      	str	r3, [r7, #4]
  return(result);
 80062c2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	bf14      	ite	ne
 80062c8:	2301      	movne	r3, #1
 80062ca:	2300      	moveq	r3, #0
 80062cc:	b2db      	uxtb	r3, r3
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bc80      	pop	{r7}
 80062d6:	4770      	bx	lr

080062d8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af02      	add	r7, sp, #8
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00f      	beq.n	800630a <osSemaphoreCreate+0x32>
    if (count == 1) {
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d10a      	bne.n	8006306 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2203      	movs	r2, #3
 80062f6:	9200      	str	r2, [sp, #0]
 80062f8:	2200      	movs	r2, #0
 80062fa:	2100      	movs	r1, #0
 80062fc:	2001      	movs	r0, #1
 80062fe:	f000 f9cb 	bl	8006698 <xQueueGenericCreateStatic>
 8006302:	4603      	mov	r3, r0
 8006304:	e016      	b.n	8006334 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	e014      	b.n	8006334 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d110      	bne.n	8006332 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006310:	2203      	movs	r2, #3
 8006312:	2100      	movs	r1, #0
 8006314:	2001      	movs	r0, #1
 8006316:	f000 fa36 	bl	8006786 <xQueueGenericCreate>
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <osSemaphoreCreate+0x56>
 8006322:	2300      	movs	r3, #0
 8006324:	2200      	movs	r2, #0
 8006326:	2100      	movs	r1, #0
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 fa89 	bl	8006840 <xQueueGenericSend>
      return sema;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	e000      	b.n	8006334 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006332:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006346:	2300      	movs	r3, #0
 8006348:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006350:	2380      	movs	r3, #128	; 0x80
 8006352:	e03a      	b.n	80063ca <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006354:	2300      	movs	r3, #0
 8006356:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d103      	bne.n	8006368 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006360:	f04f 33ff 	mov.w	r3, #4294967295
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	e009      	b.n	800637c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d006      	beq.n	800637c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <osSemaphoreWait+0x40>
      ticks = 1;
 8006378:	2301      	movs	r3, #1
 800637a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800637c:	f7ff ff9b 	bl	80062b6 <inHandlerMode>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d017      	beq.n	80063b6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006386:	f107 0308 	add.w	r3, r7, #8
 800638a:	461a      	mov	r2, r3
 800638c:	2100      	movs	r1, #0
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fcee 	bl	8006d70 <xQueueReceiveFromISR>
 8006394:	4603      	mov	r3, r0
 8006396:	2b01      	cmp	r3, #1
 8006398:	d001      	beq.n	800639e <osSemaphoreWait+0x62>
      return osErrorOS;
 800639a:	23ff      	movs	r3, #255	; 0xff
 800639c:	e015      	b.n	80063ca <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d011      	beq.n	80063c8 <osSemaphoreWait+0x8c>
 80063a4:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <osSemaphoreWait+0x98>)
 80063a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	e008      	b.n	80063c8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80063b6:	68f9      	ldr	r1, [r7, #12]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fbcd 	bl	8006b58 <xQueueSemaphoreTake>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d001      	beq.n	80063c8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80063c4:	23ff      	movs	r3, #255	; 0xff
 80063c6:	e000      	b.n	80063ca <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	e000ed04 	.word	0xe000ed04

080063d8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80063e8:	f7ff ff65 	bl	80062b6 <inHandlerMode>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d016      	beq.n	8006420 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80063f2:	f107 0308 	add.w	r3, r7, #8
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fb1f 	bl	8006a3c <xQueueGiveFromISR>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b01      	cmp	r3, #1
 8006402:	d001      	beq.n	8006408 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006404:	23ff      	movs	r3, #255	; 0xff
 8006406:	e017      	b.n	8006438 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d013      	beq.n	8006436 <osSemaphoreRelease+0x5e>
 800640e:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <osSemaphoreRelease+0x68>)
 8006410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	e00a      	b.n	8006436 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006420:	2300      	movs	r3, #0
 8006422:	2200      	movs	r2, #0
 8006424:	2100      	movs	r1, #0
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fa0a 	bl	8006840 <xQueueGenericSend>
 800642c:	4603      	mov	r3, r0
 800642e:	2b01      	cmp	r3, #1
 8006430:	d001      	beq.n	8006436 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006432:	23ff      	movs	r3, #255	; 0xff
 8006434:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006436:	68fb      	ldr	r3, [r7, #12]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	e000ed04 	.word	0xe000ed04

08006444 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800644c:	f7ff ff33 	bl	80062b6 <inHandlerMode>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8006456:	2382      	movs	r3, #130	; 0x82
 8006458:	e003      	b.n	8006462 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fd08 	bl	8006e70 <vQueueDelete>

  return osOK; 
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f103 0208 	add.w	r2, r3, #8
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f04f 32ff 	mov.w	r2, #4294967295
 8006482:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f103 0208 	add.w	r2, r3, #8
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f103 0208 	add.w	r2, r3, #8
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bc80      	pop	{r7}
 80064a6:	4770      	bx	lr

080064a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr

080064c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	601a      	str	r2, [r3, #0]
}
 80064fc:	bf00      	nop
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr

08006506 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006506:	b480      	push	{r7}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651c:	d103      	bne.n	8006526 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	e00c      	b.n	8006540 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3308      	adds	r3, #8
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	e002      	b.n	8006534 <vListInsert+0x2e>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	429a      	cmp	r2, r3
 800653e:	d2f6      	bcs.n	800652e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	601a      	str	r2, [r3, #0]
}
 800656c:	bf00      	nop
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	bc80      	pop	{r7}
 8006574:	4770      	bx	lr

08006576 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006576:	b480      	push	{r7}
 8006578:	b085      	sub	sp, #20
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6892      	ldr	r2, [r2, #8]
 800658c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6852      	ldr	r2, [r2, #4]
 8006596:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d103      	bne.n	80065aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	1e5a      	subs	r2, r3, #1
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr

080065c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80065f2:	f001 fe73 	bl	80082dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fe:	68f9      	ldr	r1, [r7, #12]
 8006600:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006602:	fb01 f303 	mul.w	r3, r1, r3
 8006606:	441a      	add	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006622:	3b01      	subs	r3, #1
 8006624:	68f9      	ldr	r1, [r7, #12]
 8006626:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006628:	fb01 f303 	mul.w	r3, r1, r3
 800662c:	441a      	add	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	22ff      	movs	r2, #255	; 0xff
 8006636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	22ff      	movs	r2, #255	; 0xff
 800663e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d114      	bne.n	8006672 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01a      	beq.n	8006686 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	3310      	adds	r3, #16
 8006654:	4618      	mov	r0, r3
 8006656:	f001 f94f 	bl	80078f8 <xTaskRemoveFromEventList>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d012      	beq.n	8006686 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006660:	4b0c      	ldr	r3, [pc, #48]	; (8006694 <xQueueGenericReset+0xcc>)
 8006662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	e009      	b.n	8006686 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3310      	adds	r3, #16
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff fef7 	bl	800646a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3324      	adds	r3, #36	; 0x24
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff fef2 	bl	800646a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006686:	f001 fe59 	bl	800833c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800668a:	2301      	movs	r3, #1
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	e000ed04 	.word	0xe000ed04

08006698 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08e      	sub	sp, #56	; 0x38
 800669c:	af02      	add	r7, sp, #8
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10a      	bne.n	80066c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066be:	bf00      	nop
 80066c0:	e7fe      	b.n	80066c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <xQueueGenericCreateStatic+0x52>
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <xQueueGenericCreateStatic+0x56>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <xQueueGenericCreateStatic+0x58>
 80066ee:	2300      	movs	r3, #0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	623b      	str	r3, [r7, #32]
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d102      	bne.n	8006716 <xQueueGenericCreateStatic+0x7e>
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <xQueueGenericCreateStatic+0x82>
 8006716:	2301      	movs	r3, #1
 8006718:	e000      	b.n	800671c <xQueueGenericCreateStatic+0x84>
 800671a:	2300      	movs	r3, #0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	61fb      	str	r3, [r7, #28]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006736:	2348      	movs	r3, #72	; 0x48
 8006738:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b48      	cmp	r3, #72	; 0x48
 800673e:	d00a      	beq.n	8006756 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	61bb      	str	r3, [r7, #24]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00d      	beq.n	800677c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006768:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800676c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	4613      	mov	r3, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f843 	bl	8006802 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800677e:	4618      	mov	r0, r3
 8006780:	3730      	adds	r7, #48	; 0x30
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006786:	b580      	push	{r7, lr}
 8006788:	b08a      	sub	sp, #40	; 0x28
 800678a:	af02      	add	r7, sp, #8
 800678c:	60f8      	str	r0, [r7, #12]
 800678e:	60b9      	str	r1, [r7, #8]
 8006790:	4613      	mov	r3, r2
 8006792:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10a      	bne.n	80067b0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	613b      	str	r3, [r7, #16]
}
 80067ac:	bf00      	nop
 80067ae:	e7fe      	b.n	80067ae <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d102      	bne.n	80067bc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61fb      	str	r3, [r7, #28]
 80067ba:	e004      	b.n	80067c6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	fb02 f303 	mul.w	r3, r2, r3
 80067c4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	3348      	adds	r3, #72	; 0x48
 80067ca:	4618      	mov	r0, r3
 80067cc:	f001 fe86 	bl	80084dc <pvPortMalloc>
 80067d0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00f      	beq.n	80067f8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	3348      	adds	r3, #72	; 0x48
 80067dc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067e6:	79fa      	ldrb	r2, [r7, #7]
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	4613      	mov	r3, r2
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 f805 	bl	8006802 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80067f8:	69bb      	ldr	r3, [r7, #24]
	}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3720      	adds	r7, #32
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
 800680e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d103      	bne.n	800681e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	e002      	b.n	8006824 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006830:	2101      	movs	r1, #1
 8006832:	69b8      	ldr	r0, [r7, #24]
 8006834:	f7ff fec8 	bl	80065c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08e      	sub	sp, #56	; 0x38
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800684e:	2300      	movs	r3, #0
 8006850:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <xQueueGenericSend+0x32>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d103      	bne.n	8006880 <xQueueGenericSend+0x40>
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <xQueueGenericSend+0x44>
 8006880:	2301      	movs	r3, #1
 8006882:	e000      	b.n	8006886 <xQueueGenericSend+0x46>
 8006884:	2300      	movs	r3, #0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10a      	bne.n	80068a0 <xQueueGenericSend+0x60>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800689c:	bf00      	nop
 800689e:	e7fe      	b.n	800689e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d103      	bne.n	80068ae <xQueueGenericSend+0x6e>
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <xQueueGenericSend+0x72>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <xQueueGenericSend+0x74>
 80068b2:	2300      	movs	r3, #0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10a      	bne.n	80068ce <xQueueGenericSend+0x8e>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	623b      	str	r3, [r7, #32]
}
 80068ca:	bf00      	nop
 80068cc:	e7fe      	b.n	80068cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068ce:	f001 f9d3 	bl	8007c78 <xTaskGetSchedulerState>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d102      	bne.n	80068de <xQueueGenericSend+0x9e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <xQueueGenericSend+0xa2>
 80068de:	2301      	movs	r3, #1
 80068e0:	e000      	b.n	80068e4 <xQueueGenericSend+0xa4>
 80068e2:	2300      	movs	r3, #0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <xQueueGenericSend+0xbe>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	61fb      	str	r3, [r7, #28]
}
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068fe:	f001 fced 	bl	80082dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690a:	429a      	cmp	r2, r3
 800690c:	d302      	bcc.n	8006914 <xQueueGenericSend+0xd4>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d129      	bne.n	8006968 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800691a:	f000 fae3 	bl	8006ee4 <prvCopyDataToQueue>
 800691e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	2b00      	cmp	r3, #0
 8006926:	d010      	beq.n	800694a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	3324      	adds	r3, #36	; 0x24
 800692c:	4618      	mov	r0, r3
 800692e:	f000 ffe3 	bl	80078f8 <xTaskRemoveFromEventList>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d013      	beq.n	8006960 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006938:	4b3f      	ldr	r3, [pc, #252]	; (8006a38 <xQueueGenericSend+0x1f8>)
 800693a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	e00a      	b.n	8006960 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800694a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694c:	2b00      	cmp	r3, #0
 800694e:	d007      	beq.n	8006960 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006950:	4b39      	ldr	r3, [pc, #228]	; (8006a38 <xQueueGenericSend+0x1f8>)
 8006952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006960:	f001 fcec 	bl	800833c <vPortExitCritical>
				return pdPASS;
 8006964:	2301      	movs	r3, #1
 8006966:	e063      	b.n	8006a30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d103      	bne.n	8006976 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800696e:	f001 fce5 	bl	800833c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006972:	2300      	movs	r3, #0
 8006974:	e05c      	b.n	8006a30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006978:	2b00      	cmp	r3, #0
 800697a:	d106      	bne.n	800698a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800697c:	f107 0314 	add.w	r3, r7, #20
 8006980:	4618      	mov	r0, r3
 8006982:	f001 f81b 	bl	80079bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006986:	2301      	movs	r3, #1
 8006988:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800698a:	f001 fcd7 	bl	800833c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800698e:	f000 fdcd 	bl	800752c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006992:	f001 fca3 	bl	80082dc <vPortEnterCritical>
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800699c:	b25b      	sxtb	r3, r3
 800699e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a2:	d103      	bne.n	80069ac <xQueueGenericSend+0x16c>
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069b2:	b25b      	sxtb	r3, r3
 80069b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b8:	d103      	bne.n	80069c2 <xQueueGenericSend+0x182>
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069c2:	f001 fcbb 	bl	800833c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069c6:	1d3a      	adds	r2, r7, #4
 80069c8:	f107 0314 	add.w	r3, r7, #20
 80069cc:	4611      	mov	r1, r2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f001 f80a 	bl	80079e8 <xTaskCheckForTimeOut>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d124      	bne.n	8006a24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069dc:	f000 fb7a 	bl	80070d4 <prvIsQueueFull>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d018      	beq.n	8006a18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	3310      	adds	r3, #16
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4611      	mov	r1, r2
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 ff5e 	bl	80078b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069f6:	f000 fb05 	bl	8007004 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069fa:	f000 fda5 	bl	8007548 <xTaskResumeAll>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f47f af7c 	bne.w	80068fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006a06:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <xQueueGenericSend+0x1f8>)
 8006a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	e772      	b.n	80068fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a1a:	f000 faf3 	bl	8007004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a1e:	f000 fd93 	bl	8007548 <xTaskResumeAll>
 8006a22:	e76c      	b.n	80068fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a26:	f000 faed 	bl	8007004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a2a:	f000 fd8d 	bl	8007548 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a2e:	2300      	movs	r3, #0
		}
	}
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3738      	adds	r7, #56	; 0x38
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	e000ed04 	.word	0xe000ed04

08006a3c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08e      	sub	sp, #56	; 0x38
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10a      	bne.n	8006a66 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	623b      	str	r3, [r7, #32]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	61fb      	str	r3, [r7, #28]
}
 8006a80:	bf00      	nop
 8006a82:	e7fe      	b.n	8006a82 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d103      	bne.n	8006a94 <xQueueGiveFromISR+0x58>
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <xQueueGiveFromISR+0x5c>
 8006a94:	2301      	movs	r3, #1
 8006a96:	e000      	b.n	8006a9a <xQueueGiveFromISR+0x5e>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10a      	bne.n	8006ab4 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	61bb      	str	r3, [r7, #24]
}
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ab4:	f001 fcd4 	bl	8008460 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ab8:	f3ef 8211 	mrs	r2, BASEPRI
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	617a      	str	r2, [r7, #20]
 8006ace:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ad0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d22b      	bcs.n	8006b3c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006af6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afe:	d112      	bne.n	8006b26 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d016      	beq.n	8006b36 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0a:	3324      	adds	r3, #36	; 0x24
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fef3 	bl	80078f8 <xTaskRemoveFromEventList>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00e      	beq.n	8006b36 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00b      	beq.n	8006b36 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2201      	movs	r2, #1
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	e007      	b.n	8006b36 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	b25a      	sxtb	r2, r3
 8006b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b36:	2301      	movs	r3, #1
 8006b38:	637b      	str	r3, [r7, #52]	; 0x34
 8006b3a:	e001      	b.n	8006b40 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b42:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3738      	adds	r7, #56	; 0x38
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08e      	sub	sp, #56	; 0x38
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b62:	2300      	movs	r3, #0
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10a      	bne.n	8006b8a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	623b      	str	r3, [r7, #32]
}
 8006b86:	bf00      	nop
 8006b88:	e7fe      	b.n	8006b88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	61fb      	str	r3, [r7, #28]
}
 8006ba4:	bf00      	nop
 8006ba6:	e7fe      	b.n	8006ba6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ba8:	f001 f866 	bl	8007c78 <xTaskGetSchedulerState>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d102      	bne.n	8006bb8 <xQueueSemaphoreTake+0x60>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <xQueueSemaphoreTake+0x64>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <xQueueSemaphoreTake+0x66>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	61bb      	str	r3, [r7, #24]
}
 8006bd4:	bf00      	nop
 8006bd6:	e7fe      	b.n	8006bd6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bd8:	f001 fb80 	bl	80082dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d024      	beq.n	8006c32 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	1e5a      	subs	r2, r3, #1
 8006bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d104      	bne.n	8006c02 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006bf8:	f001 fa08 	bl	800800c <pvTaskIncrementMutexHeldCount>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c00:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00f      	beq.n	8006c2a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0c:	3310      	adds	r3, #16
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fe72 	bl	80078f8 <xTaskRemoveFromEventList>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d007      	beq.n	8006c2a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c1a:	4b54      	ldr	r3, [pc, #336]	; (8006d6c <xQueueSemaphoreTake+0x214>)
 8006c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c2a:	f001 fb87 	bl	800833c <vPortExitCritical>
				return pdPASS;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e097      	b.n	8006d62 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d111      	bne.n	8006c5c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	617b      	str	r3, [r7, #20]
}
 8006c50:	bf00      	nop
 8006c52:	e7fe      	b.n	8006c52 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c54:	f001 fb72 	bl	800833c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	e082      	b.n	8006d62 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d106      	bne.n	8006c70 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c62:	f107 030c 	add.w	r3, r7, #12
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fea8 	bl	80079bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c70:	f001 fb64 	bl	800833c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c74:	f000 fc5a 	bl	800752c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c78:	f001 fb30 	bl	80082dc <vPortEnterCritical>
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c82:	b25b      	sxtb	r3, r3
 8006c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c88:	d103      	bne.n	8006c92 <xQueueSemaphoreTake+0x13a>
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c98:	b25b      	sxtb	r3, r3
 8006c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9e:	d103      	bne.n	8006ca8 <xQueueSemaphoreTake+0x150>
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ca8:	f001 fb48 	bl	800833c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cac:	463a      	mov	r2, r7
 8006cae:	f107 030c 	add.w	r3, r7, #12
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fe97 	bl	80079e8 <xTaskCheckForTimeOut>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d132      	bne.n	8006d26 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cc2:	f000 f9f1 	bl	80070a8 <prvIsQueueEmpty>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d026      	beq.n	8006d1a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d109      	bne.n	8006ce8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006cd4:	f001 fb02 	bl	80082dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 ffe9 	bl	8007cb4 <xTaskPriorityInherit>
 8006ce2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006ce4:	f001 fb2a 	bl	800833c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cea:	3324      	adds	r3, #36	; 0x24
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fddd 	bl	80078b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cf8:	f000 f984 	bl	8007004 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cfc:	f000 fc24 	bl	8007548 <xTaskResumeAll>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f47f af68 	bne.w	8006bd8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006d08:	4b18      	ldr	r3, [pc, #96]	; (8006d6c <xQueueSemaphoreTake+0x214>)
 8006d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	e75e      	b.n	8006bd8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006d1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d1c:	f000 f972 	bl	8007004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d20:	f000 fc12 	bl	8007548 <xTaskResumeAll>
 8006d24:	e758      	b.n	8006bd8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006d26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d28:	f000 f96c 	bl	8007004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d2c:	f000 fc0c 	bl	8007548 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d32:	f000 f9b9 	bl	80070a8 <prvIsQueueEmpty>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f43f af4d 	beq.w	8006bd8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00d      	beq.n	8006d60 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006d44:	f001 faca 	bl	80082dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d4a:	f000 f8b4 	bl	8006eb6 <prvGetDisinheritPriorityAfterTimeout>
 8006d4e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 f8b8 	bl	8007ecc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d5c:	f001 faee 	bl	800833c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3738      	adds	r7, #56	; 0x38
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	e000ed04 	.word	0xe000ed04

08006d70 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08e      	sub	sp, #56	; 0x38
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	623b      	str	r3, [r7, #32]
}
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d103      	bne.n	8006daa <xQueueReceiveFromISR+0x3a>
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <xQueueReceiveFromISR+0x3e>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e000      	b.n	8006db0 <xQueueReceiveFromISR+0x40>
 8006dae:	2300      	movs	r3, #0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10a      	bne.n	8006dca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	61fb      	str	r3, [r7, #28]
}
 8006dc6:	bf00      	nop
 8006dc8:	e7fe      	b.n	8006dc8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dca:	f001 fb49 	bl	8008460 <vPortValidateInterruptPriority>
	__asm volatile
 8006dce:	f3ef 8211 	mrs	r2, BASEPRI
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	61ba      	str	r2, [r7, #24]
 8006de4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006de6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006de8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d02f      	beq.n	8006e56 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e00:	68b9      	ldr	r1, [r7, #8]
 8006e02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e04:	f000 f8d8 	bl	8006fb8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	1e5a      	subs	r2, r3, #1
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006e10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e18:	d112      	bne.n	8006e40 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d016      	beq.n	8006e50 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	3310      	adds	r3, #16
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fd66 	bl	80078f8 <xTaskRemoveFromEventList>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00e      	beq.n	8006e50 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	e007      	b.n	8006e50 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e44:	3301      	adds	r3, #1
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	b25a      	sxtb	r2, r3
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006e50:	2301      	movs	r3, #1
 8006e52:	637b      	str	r3, [r7, #52]	; 0x34
 8006e54:	e001      	b.n	8006e5a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	637b      	str	r3, [r7, #52]	; 0x34
 8006e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f383 8811 	msr	BASEPRI, r3
}
 8006e64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3738      	adds	r7, #56	; 0x38
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10a      	bne.n	8006e98 <vQueueDelete+0x28>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	60bb      	str	r3, [r7, #8]
}
 8006e94:	bf00      	nop
 8006e96:	e7fe      	b.n	8006e96 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 f933 	bl	8007104 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f001 fbdb 	bl	8008664 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006eae:	bf00      	nop
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b085      	sub	sp, #20
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d006      	beq.n	8006ed4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f1c3 0307 	rsb	r3, r3, #7
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	e001      	b.n	8006ed8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
	}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bc80      	pop	{r7}
 8006ee2:	4770      	bx	lr

08006ee4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10d      	bne.n	8006f1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d14d      	bne.n	8006fa6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 ff56 	bl	8007dc0 <xTaskPriorityDisinherit>
 8006f14:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	605a      	str	r2, [r3, #4]
 8006f1c:	e043      	b.n	8006fa6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d119      	bne.n	8006f58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6898      	ldr	r0, [r3, #8]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	68b9      	ldr	r1, [r7, #8]
 8006f30:	f001 fcd0 	bl	80088d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	441a      	add	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	689a      	ldr	r2, [r3, #8]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d32b      	bcc.n	8006fa6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	609a      	str	r2, [r3, #8]
 8006f56:	e026      	b.n	8006fa6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	68d8      	ldr	r0, [r3, #12]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	461a      	mov	r2, r3
 8006f62:	68b9      	ldr	r1, [r7, #8]
 8006f64:	f001 fcb6 	bl	80088d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	68da      	ldr	r2, [r3, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f70:	425b      	negs	r3, r3
 8006f72:	441a      	add	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d207      	bcs.n	8006f94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	425b      	negs	r3, r3
 8006f8e:	441a      	add	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d105      	bne.n	8006fa6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006fae:	697b      	ldr	r3, [r7, #20]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d018      	beq.n	8006ffc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	441a      	add	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d303      	bcc.n	8006fec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68d9      	ldr	r1, [r3, #12]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6838      	ldr	r0, [r7, #0]
 8006ff8:	f001 fc6c 	bl	80088d4 <memcpy>
	}
}
 8006ffc:	bf00      	nop
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800700c:	f001 f966 	bl	80082dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007016:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007018:	e011      	b.n	800703e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	2b00      	cmp	r3, #0
 8007020:	d012      	beq.n	8007048 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3324      	adds	r3, #36	; 0x24
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fc66 	bl	80078f8 <xTaskRemoveFromEventList>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007032:	f000 fd3b 	bl	8007aac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	3b01      	subs	r3, #1
 800703a:	b2db      	uxtb	r3, r3
 800703c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800703e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007042:	2b00      	cmp	r3, #0
 8007044:	dce9      	bgt.n	800701a <prvUnlockQueue+0x16>
 8007046:	e000      	b.n	800704a <prvUnlockQueue+0x46>
					break;
 8007048:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	22ff      	movs	r2, #255	; 0xff
 800704e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007052:	f001 f973 	bl	800833c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007056:	f001 f941 	bl	80082dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007060:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007062:	e011      	b.n	8007088 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d012      	beq.n	8007092 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3310      	adds	r3, #16
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fc41 	bl	80078f8 <xTaskRemoveFromEventList>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800707c:	f000 fd16 	bl	8007aac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	3b01      	subs	r3, #1
 8007084:	b2db      	uxtb	r3, r3
 8007086:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800708c:	2b00      	cmp	r3, #0
 800708e:	dce9      	bgt.n	8007064 <prvUnlockQueue+0x60>
 8007090:	e000      	b.n	8007094 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007092:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	22ff      	movs	r2, #255	; 0xff
 8007098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800709c:	f001 f94e 	bl	800833c <vPortExitCritical>
}
 80070a0:	bf00      	nop
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070b0:	f001 f914 	bl	80082dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d102      	bne.n	80070c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070bc:	2301      	movs	r3, #1
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	e001      	b.n	80070c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070c6:	f001 f939 	bl	800833c <vPortExitCritical>

	return xReturn;
 80070ca:	68fb      	ldr	r3, [r7, #12]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070dc:	f001 f8fe 	bl	80082dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d102      	bne.n	80070f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070ec:	2301      	movs	r3, #1
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	e001      	b.n	80070f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070f6:	f001 f921 	bl	800833c <vPortExitCritical>

	return xReturn;
 80070fa:	68fb      	ldr	r3, [r7, #12]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800710c:	2300      	movs	r3, #0
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	e016      	b.n	8007140 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007112:	4a10      	ldr	r2, [pc, #64]	; (8007154 <vQueueUnregisterQueue+0x50>)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	4413      	add	r3, r2
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	429a      	cmp	r2, r3
 8007120:	d10b      	bne.n	800713a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007122:	4a0c      	ldr	r2, [pc, #48]	; (8007154 <vQueueUnregisterQueue+0x50>)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2100      	movs	r1, #0
 8007128:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800712c:	4a09      	ldr	r2, [pc, #36]	; (8007154 <vQueueUnregisterQueue+0x50>)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	4413      	add	r3, r2
 8007134:	2200      	movs	r2, #0
 8007136:	605a      	str	r2, [r3, #4]
				break;
 8007138:	e006      	b.n	8007148 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3301      	adds	r3, #1
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b07      	cmp	r3, #7
 8007144:	d9e5      	bls.n	8007112 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007146:	bf00      	nop
 8007148:	bf00      	nop
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	bc80      	pop	{r7}
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	200007e0 	.word	0x200007e0

08007158 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08e      	sub	sp, #56	; 0x38
 800715c:	af04      	add	r7, sp, #16
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10a      	bne.n	8007182 <xTaskCreateStatic+0x2a>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	623b      	str	r3, [r7, #32]
}
 800717e:	bf00      	nop
 8007180:	e7fe      	b.n	8007180 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10a      	bne.n	800719e <xTaskCreateStatic+0x46>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	61fb      	str	r3, [r7, #28]
}
 800719a:	bf00      	nop
 800719c:	e7fe      	b.n	800719c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800719e:	2354      	movs	r3, #84	; 0x54
 80071a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2b54      	cmp	r3, #84	; 0x54
 80071a6:	d00a      	beq.n	80071be <xTaskCreateStatic+0x66>
	__asm volatile
 80071a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	61bb      	str	r3, [r7, #24]
}
 80071ba:	bf00      	nop
 80071bc:	e7fe      	b.n	80071bc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d01e      	beq.n	8007202 <xTaskCreateStatic+0xaa>
 80071c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d01b      	beq.n	8007202 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071dc:	2300      	movs	r3, #0
 80071de:	9303      	str	r3, [sp, #12]
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	9302      	str	r3, [sp, #8]
 80071e4:	f107 0314 	add.w	r3, r7, #20
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	68b9      	ldr	r1, [r7, #8]
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 f850 	bl	800729a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071fc:	f000 f8cc 	bl	8007398 <prvAddNewTaskToReadyList>
 8007200:	e001      	b.n	8007206 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007202:	2300      	movs	r3, #0
 8007204:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007206:	697b      	ldr	r3, [r7, #20]
	}
 8007208:	4618      	mov	r0, r3
 800720a:	3728      	adds	r7, #40	; 0x28
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08c      	sub	sp, #48	; 0x30
 8007214:	af04      	add	r7, sp, #16
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	603b      	str	r3, [r7, #0]
 800721c:	4613      	mov	r3, r2
 800721e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007220:	88fb      	ldrh	r3, [r7, #6]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4618      	mov	r0, r3
 8007226:	f001 f959 	bl	80084dc <pvPortMalloc>
 800722a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00e      	beq.n	8007250 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007232:	2054      	movs	r0, #84	; 0x54
 8007234:	f001 f952 	bl	80084dc <pvPortMalloc>
 8007238:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	631a      	str	r2, [r3, #48]	; 0x30
 8007246:	e005      	b.n	8007254 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007248:	6978      	ldr	r0, [r7, #20]
 800724a:	f001 fa0b 	bl	8008664 <vPortFree>
 800724e:	e001      	b.n	8007254 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007250:	2300      	movs	r3, #0
 8007252:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d017      	beq.n	800728a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007262:	88fa      	ldrh	r2, [r7, #6]
 8007264:	2300      	movs	r3, #0
 8007266:	9303      	str	r3, [sp, #12]
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	9302      	str	r3, [sp, #8]
 800726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726e:	9301      	str	r3, [sp, #4]
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	68b9      	ldr	r1, [r7, #8]
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f000 f80e 	bl	800729a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800727e:	69f8      	ldr	r0, [r7, #28]
 8007280:	f000 f88a 	bl	8007398 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007284:	2301      	movs	r3, #1
 8007286:	61bb      	str	r3, [r7, #24]
 8007288:	e002      	b.n	8007290 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800728a:	f04f 33ff 	mov.w	r3, #4294967295
 800728e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007290:	69bb      	ldr	r3, [r7, #24]
	}
 8007292:	4618      	mov	r0, r3
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b088      	sub	sp, #32
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	607a      	str	r2, [r7, #4]
 80072a6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80072a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072b2:	3b01      	subs	r3, #1
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	f023 0307 	bic.w	r3, r3, #7
 80072c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	f003 0307 	and.w	r3, r3, #7
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00a      	beq.n	80072e2 <prvInitialiseNewTask+0x48>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	617b      	str	r3, [r7, #20]
}
 80072de:	bf00      	nop
 80072e0:	e7fe      	b.n	80072e0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072e2:	2300      	movs	r3, #0
 80072e4:	61fb      	str	r3, [r7, #28]
 80072e6:	e012      	b.n	800730e <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	4413      	add	r3, r2
 80072ee:	7819      	ldrb	r1, [r3, #0]
 80072f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	4413      	add	r3, r2
 80072f6:	3334      	adds	r3, #52	; 0x34
 80072f8:	460a      	mov	r2, r1
 80072fa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	4413      	add	r3, r2
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d006      	beq.n	8007316 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	3301      	adds	r3, #1
 800730c:	61fb      	str	r3, [r7, #28]
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	2b0f      	cmp	r3, #15
 8007312:	d9e9      	bls.n	80072e8 <prvInitialiseNewTask+0x4e>
 8007314:	e000      	b.n	8007318 <prvInitialiseNewTask+0x7e>
		{
			break;
 8007316:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	2b06      	cmp	r3, #6
 8007324:	d901      	bls.n	800732a <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007326:	2306      	movs	r3, #6
 8007328:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800732e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007334:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	2200      	movs	r2, #0
 800733a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	3304      	adds	r3, #4
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff f8b1 	bl	80064a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	3318      	adds	r3, #24
 800734a:	4618      	mov	r0, r3
 800734c:	f7ff f8ac 	bl	80064a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007354:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	f1c3 0207 	rsb	r2, r3, #7
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007364:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	2200      	movs	r2, #0
 800736a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	68f9      	ldr	r1, [r7, #12]
 8007378:	69b8      	ldr	r0, [r7, #24]
 800737a:	f000 fec1 	bl	8008100 <pxPortInitialiseStack>
 800737e:	4602      	mov	r2, r0
 8007380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007382:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800738e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007390:	bf00      	nop
 8007392:	3720      	adds	r7, #32
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073a0:	f000 ff9c 	bl	80082dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073a4:	4b2a      	ldr	r3, [pc, #168]	; (8007450 <prvAddNewTaskToReadyList+0xb8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3301      	adds	r3, #1
 80073aa:	4a29      	ldr	r2, [pc, #164]	; (8007450 <prvAddNewTaskToReadyList+0xb8>)
 80073ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073ae:	4b29      	ldr	r3, [pc, #164]	; (8007454 <prvAddNewTaskToReadyList+0xbc>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d109      	bne.n	80073ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073b6:	4a27      	ldr	r2, [pc, #156]	; (8007454 <prvAddNewTaskToReadyList+0xbc>)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073bc:	4b24      	ldr	r3, [pc, #144]	; (8007450 <prvAddNewTaskToReadyList+0xb8>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d110      	bne.n	80073e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073c4:	f000 fb96 	bl	8007af4 <prvInitialiseTaskLists>
 80073c8:	e00d      	b.n	80073e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073ca:	4b23      	ldr	r3, [pc, #140]	; (8007458 <prvAddNewTaskToReadyList+0xc0>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d109      	bne.n	80073e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073d2:	4b20      	ldr	r3, [pc, #128]	; (8007454 <prvAddNewTaskToReadyList+0xbc>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073dc:	429a      	cmp	r2, r3
 80073de:	d802      	bhi.n	80073e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073e0:	4a1c      	ldr	r2, [pc, #112]	; (8007454 <prvAddNewTaskToReadyList+0xbc>)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073e6:	4b1d      	ldr	r3, [pc, #116]	; (800745c <prvAddNewTaskToReadyList+0xc4>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3301      	adds	r3, #1
 80073ec:	4a1b      	ldr	r2, [pc, #108]	; (800745c <prvAddNewTaskToReadyList+0xc4>)
 80073ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f4:	2201      	movs	r2, #1
 80073f6:	409a      	lsls	r2, r3
 80073f8:	4b19      	ldr	r3, [pc, #100]	; (8007460 <prvAddNewTaskToReadyList+0xc8>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	4a18      	ldr	r2, [pc, #96]	; (8007460 <prvAddNewTaskToReadyList+0xc8>)
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007406:	4613      	mov	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4a15      	ldr	r2, [pc, #84]	; (8007464 <prvAddNewTaskToReadyList+0xcc>)
 8007410:	441a      	add	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	3304      	adds	r3, #4
 8007416:	4619      	mov	r1, r3
 8007418:	4610      	mov	r0, r2
 800741a:	f7ff f851 	bl	80064c0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800741e:	f000 ff8d 	bl	800833c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007422:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <prvAddNewTaskToReadyList+0xc0>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00e      	beq.n	8007448 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800742a:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <prvAddNewTaskToReadyList+0xbc>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	429a      	cmp	r2, r3
 8007436:	d207      	bcs.n	8007448 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007438:	4b0b      	ldr	r3, [pc, #44]	; (8007468 <prvAddNewTaskToReadyList+0xd0>)
 800743a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007448:	bf00      	nop
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	20000920 	.word	0x20000920
 8007454:	20000820 	.word	0x20000820
 8007458:	2000092c 	.word	0x2000092c
 800745c:	2000093c 	.word	0x2000093c
 8007460:	20000928 	.word	0x20000928
 8007464:	20000824 	.word	0x20000824
 8007468:	e000ed04 	.word	0xe000ed04

0800746c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08a      	sub	sp, #40	; 0x28
 8007470:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007472:	2300      	movs	r3, #0
 8007474:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007476:	2300      	movs	r3, #0
 8007478:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800747a:	463a      	mov	r2, r7
 800747c:	1d39      	adds	r1, r7, #4
 800747e:	f107 0308 	add.w	r3, r7, #8
 8007482:	4618      	mov	r0, r3
 8007484:	f7f9 fb2a 	bl	8000adc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	9202      	str	r2, [sp, #8]
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	2300      	movs	r3, #0
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	2300      	movs	r3, #0
 8007498:	460a      	mov	r2, r1
 800749a:	491e      	ldr	r1, [pc, #120]	; (8007514 <vTaskStartScheduler+0xa8>)
 800749c:	481e      	ldr	r0, [pc, #120]	; (8007518 <vTaskStartScheduler+0xac>)
 800749e:	f7ff fe5b 	bl	8007158 <xTaskCreateStatic>
 80074a2:	4603      	mov	r3, r0
 80074a4:	4a1d      	ldr	r2, [pc, #116]	; (800751c <vTaskStartScheduler+0xb0>)
 80074a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074a8:	4b1c      	ldr	r3, [pc, #112]	; (800751c <vTaskStartScheduler+0xb0>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074b0:	2301      	movs	r3, #1
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	e001      	b.n	80074ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d116      	bne.n	80074ee <vTaskStartScheduler+0x82>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	613b      	str	r3, [r7, #16]
}
 80074d2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074d4:	4b12      	ldr	r3, [pc, #72]	; (8007520 <vTaskStartScheduler+0xb4>)
 80074d6:	f04f 32ff 	mov.w	r2, #4294967295
 80074da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074dc:	4b11      	ldr	r3, [pc, #68]	; (8007524 <vTaskStartScheduler+0xb8>)
 80074de:	2201      	movs	r2, #1
 80074e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80074e2:	4b11      	ldr	r3, [pc, #68]	; (8007528 <vTaskStartScheduler+0xbc>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074e8:	f000 fe86 	bl	80081f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074ec:	e00e      	b.n	800750c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f4:	d10a      	bne.n	800750c <vTaskStartScheduler+0xa0>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	60fb      	str	r3, [r7, #12]
}
 8007508:	bf00      	nop
 800750a:	e7fe      	b.n	800750a <vTaskStartScheduler+0x9e>
}
 800750c:	bf00      	nop
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	08008990 	.word	0x08008990
 8007518:	08007ac5 	.word	0x08007ac5
 800751c:	20000944 	.word	0x20000944
 8007520:	20000940 	.word	0x20000940
 8007524:	2000092c 	.word	0x2000092c
 8007528:	20000924 	.word	0x20000924

0800752c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007530:	4b04      	ldr	r3, [pc, #16]	; (8007544 <vTaskSuspendAll+0x18>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3301      	adds	r3, #1
 8007536:	4a03      	ldr	r2, [pc, #12]	; (8007544 <vTaskSuspendAll+0x18>)
 8007538:	6013      	str	r3, [r2, #0]
}
 800753a:	bf00      	nop
 800753c:	46bd      	mov	sp, r7
 800753e:	bc80      	pop	{r7}
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20000948 	.word	0x20000948

08007548 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800754e:	2300      	movs	r3, #0
 8007550:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007552:	2300      	movs	r3, #0
 8007554:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007556:	4b41      	ldr	r3, [pc, #260]	; (800765c <xTaskResumeAll+0x114>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <xTaskResumeAll+0x2c>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	603b      	str	r3, [r7, #0]
}
 8007570:	bf00      	nop
 8007572:	e7fe      	b.n	8007572 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007574:	f000 feb2 	bl	80082dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007578:	4b38      	ldr	r3, [pc, #224]	; (800765c <xTaskResumeAll+0x114>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3b01      	subs	r3, #1
 800757e:	4a37      	ldr	r2, [pc, #220]	; (800765c <xTaskResumeAll+0x114>)
 8007580:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007582:	4b36      	ldr	r3, [pc, #216]	; (800765c <xTaskResumeAll+0x114>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d161      	bne.n	800764e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800758a:	4b35      	ldr	r3, [pc, #212]	; (8007660 <xTaskResumeAll+0x118>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d05d      	beq.n	800764e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007592:	e02e      	b.n	80075f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007594:	4b33      	ldr	r3, [pc, #204]	; (8007664 <xTaskResumeAll+0x11c>)
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3318      	adds	r3, #24
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe ffe8 	bl	8006576 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3304      	adds	r3, #4
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fe ffe3 	bl	8006576 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b4:	2201      	movs	r2, #1
 80075b6:	409a      	lsls	r2, r3
 80075b8:	4b2b      	ldr	r3, [pc, #172]	; (8007668 <xTaskResumeAll+0x120>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4313      	orrs	r3, r2
 80075be:	4a2a      	ldr	r2, [pc, #168]	; (8007668 <xTaskResumeAll+0x120>)
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c6:	4613      	mov	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4a27      	ldr	r2, [pc, #156]	; (800766c <xTaskResumeAll+0x124>)
 80075d0:	441a      	add	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3304      	adds	r3, #4
 80075d6:	4619      	mov	r1, r3
 80075d8:	4610      	mov	r0, r2
 80075da:	f7fe ff71 	bl	80064c0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e2:	4b23      	ldr	r3, [pc, #140]	; (8007670 <xTaskResumeAll+0x128>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d302      	bcc.n	80075f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80075ec:	4b21      	ldr	r3, [pc, #132]	; (8007674 <xTaskResumeAll+0x12c>)
 80075ee:	2201      	movs	r2, #1
 80075f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075f2:	4b1c      	ldr	r3, [pc, #112]	; (8007664 <xTaskResumeAll+0x11c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1cc      	bne.n	8007594 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007600:	f000 fb16 	bl	8007c30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007604:	4b1c      	ldr	r3, [pc, #112]	; (8007678 <xTaskResumeAll+0x130>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d010      	beq.n	8007632 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007610:	f000 f836 	bl	8007680 <xTaskIncrementTick>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800761a:	4b16      	ldr	r3, [pc, #88]	; (8007674 <xTaskResumeAll+0x12c>)
 800761c:	2201      	movs	r2, #1
 800761e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3b01      	subs	r3, #1
 8007624:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1f1      	bne.n	8007610 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800762c:	4b12      	ldr	r3, [pc, #72]	; (8007678 <xTaskResumeAll+0x130>)
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007632:	4b10      	ldr	r3, [pc, #64]	; (8007674 <xTaskResumeAll+0x12c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d009      	beq.n	800764e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800763a:	2301      	movs	r3, #1
 800763c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800763e:	4b0f      	ldr	r3, [pc, #60]	; (800767c <xTaskResumeAll+0x134>)
 8007640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007644:	601a      	str	r2, [r3, #0]
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800764e:	f000 fe75 	bl	800833c <vPortExitCritical>

	return xAlreadyYielded;
 8007652:	68bb      	ldr	r3, [r7, #8]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	20000948 	.word	0x20000948
 8007660:	20000920 	.word	0x20000920
 8007664:	200008e0 	.word	0x200008e0
 8007668:	20000928 	.word	0x20000928
 800766c:	20000824 	.word	0x20000824
 8007670:	20000820 	.word	0x20000820
 8007674:	20000934 	.word	0x20000934
 8007678:	20000930 	.word	0x20000930
 800767c:	e000ed04 	.word	0xe000ed04

08007680 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007686:	2300      	movs	r3, #0
 8007688:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800768a:	4b51      	ldr	r3, [pc, #324]	; (80077d0 <xTaskIncrementTick+0x150>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	f040 808d 	bne.w	80077ae <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007694:	4b4f      	ldr	r3, [pc, #316]	; (80077d4 <xTaskIncrementTick+0x154>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3301      	adds	r3, #1
 800769a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800769c:	4a4d      	ldr	r2, [pc, #308]	; (80077d4 <xTaskIncrementTick+0x154>)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d120      	bne.n	80076ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80076a8:	4b4b      	ldr	r3, [pc, #300]	; (80077d8 <xTaskIncrementTick+0x158>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00a      	beq.n	80076c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	603b      	str	r3, [r7, #0]
}
 80076c4:	bf00      	nop
 80076c6:	e7fe      	b.n	80076c6 <xTaskIncrementTick+0x46>
 80076c8:	4b43      	ldr	r3, [pc, #268]	; (80077d8 <xTaskIncrementTick+0x158>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	60fb      	str	r3, [r7, #12]
 80076ce:	4b43      	ldr	r3, [pc, #268]	; (80077dc <xTaskIncrementTick+0x15c>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a41      	ldr	r2, [pc, #260]	; (80077d8 <xTaskIncrementTick+0x158>)
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	4a41      	ldr	r2, [pc, #260]	; (80077dc <xTaskIncrementTick+0x15c>)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6013      	str	r3, [r2, #0]
 80076dc:	4b40      	ldr	r3, [pc, #256]	; (80077e0 <xTaskIncrementTick+0x160>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3301      	adds	r3, #1
 80076e2:	4a3f      	ldr	r2, [pc, #252]	; (80077e0 <xTaskIncrementTick+0x160>)
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	f000 faa3 	bl	8007c30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076ea:	4b3e      	ldr	r3, [pc, #248]	; (80077e4 <xTaskIncrementTick+0x164>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d34d      	bcc.n	8007790 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076f4:	4b38      	ldr	r3, [pc, #224]	; (80077d8 <xTaskIncrementTick+0x158>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <xTaskIncrementTick+0x82>
 80076fe:	2301      	movs	r3, #1
 8007700:	e000      	b.n	8007704 <xTaskIncrementTick+0x84>
 8007702:	2300      	movs	r3, #0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d004      	beq.n	8007712 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007708:	4b36      	ldr	r3, [pc, #216]	; (80077e4 <xTaskIncrementTick+0x164>)
 800770a:	f04f 32ff 	mov.w	r2, #4294967295
 800770e:	601a      	str	r2, [r3, #0]
					break;
 8007710:	e03e      	b.n	8007790 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007712:	4b31      	ldr	r3, [pc, #196]	; (80077d8 <xTaskIncrementTick+0x158>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	429a      	cmp	r2, r3
 8007728:	d203      	bcs.n	8007732 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800772a:	4a2e      	ldr	r2, [pc, #184]	; (80077e4 <xTaskIncrementTick+0x164>)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6013      	str	r3, [r2, #0]
						break;
 8007730:	e02e      	b.n	8007790 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	3304      	adds	r3, #4
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe ff1d 	bl	8006576 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007740:	2b00      	cmp	r3, #0
 8007742:	d004      	beq.n	800774e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	3318      	adds	r3, #24
 8007748:	4618      	mov	r0, r3
 800774a:	f7fe ff14 	bl	8006576 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	2201      	movs	r2, #1
 8007754:	409a      	lsls	r2, r3
 8007756:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <xTaskIncrementTick+0x168>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4313      	orrs	r3, r2
 800775c:	4a22      	ldr	r2, [pc, #136]	; (80077e8 <xTaskIncrementTick+0x168>)
 800775e:	6013      	str	r3, [r2, #0]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007764:	4613      	mov	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4a1f      	ldr	r2, [pc, #124]	; (80077ec <xTaskIncrementTick+0x16c>)
 800776e:	441a      	add	r2, r3
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	3304      	adds	r3, #4
 8007774:	4619      	mov	r1, r3
 8007776:	4610      	mov	r0, r2
 8007778:	f7fe fea2 	bl	80064c0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007780:	4b1b      	ldr	r3, [pc, #108]	; (80077f0 <xTaskIncrementTick+0x170>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007786:	429a      	cmp	r2, r3
 8007788:	d3b4      	bcc.n	80076f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800778a:	2301      	movs	r3, #1
 800778c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800778e:	e7b1      	b.n	80076f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007790:	4b17      	ldr	r3, [pc, #92]	; (80077f0 <xTaskIncrementTick+0x170>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007796:	4915      	ldr	r1, [pc, #84]	; (80077ec <xTaskIncrementTick+0x16c>)
 8007798:	4613      	mov	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	440b      	add	r3, r1
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d907      	bls.n	80077b8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80077a8:	2301      	movs	r3, #1
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	e004      	b.n	80077b8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80077ae:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <xTaskIncrementTick+0x174>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3301      	adds	r3, #1
 80077b4:	4a0f      	ldr	r2, [pc, #60]	; (80077f4 <xTaskIncrementTick+0x174>)
 80077b6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80077b8:	4b0f      	ldr	r3, [pc, #60]	; (80077f8 <xTaskIncrementTick+0x178>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80077c0:	2301      	movs	r3, #1
 80077c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80077c4:	697b      	ldr	r3, [r7, #20]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	20000948 	.word	0x20000948
 80077d4:	20000924 	.word	0x20000924
 80077d8:	200008d8 	.word	0x200008d8
 80077dc:	200008dc 	.word	0x200008dc
 80077e0:	20000938 	.word	0x20000938
 80077e4:	20000940 	.word	0x20000940
 80077e8:	20000928 	.word	0x20000928
 80077ec:	20000824 	.word	0x20000824
 80077f0:	20000820 	.word	0x20000820
 80077f4:	20000930 	.word	0x20000930
 80077f8:	20000934 	.word	0x20000934

080077fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007802:	4b26      	ldr	r3, [pc, #152]	; (800789c <vTaskSwitchContext+0xa0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800780a:	4b25      	ldr	r3, [pc, #148]	; (80078a0 <vTaskSwitchContext+0xa4>)
 800780c:	2201      	movs	r2, #1
 800780e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007810:	e03f      	b.n	8007892 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007812:	4b23      	ldr	r3, [pc, #140]	; (80078a0 <vTaskSwitchContext+0xa4>)
 8007814:	2200      	movs	r2, #0
 8007816:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007818:	4b22      	ldr	r3, [pc, #136]	; (80078a4 <vTaskSwitchContext+0xa8>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	fab3 f383 	clz	r3, r3
 8007824:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007826:	7afb      	ldrb	r3, [r7, #11]
 8007828:	f1c3 031f 	rsb	r3, r3, #31
 800782c:	617b      	str	r3, [r7, #20]
 800782e:	491e      	ldr	r1, [pc, #120]	; (80078a8 <vTaskSwitchContext+0xac>)
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	440b      	add	r3, r1
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10a      	bne.n	8007858 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	607b      	str	r3, [r7, #4]
}
 8007854:	bf00      	nop
 8007856:	e7fe      	b.n	8007856 <vTaskSwitchContext+0x5a>
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	4613      	mov	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4a11      	ldr	r2, [pc, #68]	; (80078a8 <vTaskSwitchContext+0xac>)
 8007864:	4413      	add	r3, r2
 8007866:	613b      	str	r3, [r7, #16]
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	605a      	str	r2, [r3, #4]
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	3308      	adds	r3, #8
 800787a:	429a      	cmp	r2, r3
 800787c:	d104      	bne.n	8007888 <vTaskSwitchContext+0x8c>
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	605a      	str	r2, [r3, #4]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	4a07      	ldr	r2, [pc, #28]	; (80078ac <vTaskSwitchContext+0xb0>)
 8007890:	6013      	str	r3, [r2, #0]
}
 8007892:	bf00      	nop
 8007894:	371c      	adds	r7, #28
 8007896:	46bd      	mov	sp, r7
 8007898:	bc80      	pop	{r7}
 800789a:	4770      	bx	lr
 800789c:	20000948 	.word	0x20000948
 80078a0:	20000934 	.word	0x20000934
 80078a4:	20000928 	.word	0x20000928
 80078a8:	20000824 	.word	0x20000824
 80078ac:	20000820 	.word	0x20000820

080078b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10a      	bne.n	80078d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	60fb      	str	r3, [r7, #12]
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078d6:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <vTaskPlaceOnEventList+0x44>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3318      	adds	r3, #24
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fe fe11 	bl	8006506 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078e4:	2101      	movs	r1, #1
 80078e6:	6838      	ldr	r0, [r7, #0]
 80078e8:	f000 fba4 	bl	8008034 <prvAddCurrentTaskToDelayedList>
}
 80078ec:	bf00      	nop
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	20000820 	.word	0x20000820

080078f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10a      	bne.n	8007924 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	60fb      	str	r3, [r7, #12]
}
 8007920:	bf00      	nop
 8007922:	e7fe      	b.n	8007922 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	3318      	adds	r3, #24
 8007928:	4618      	mov	r0, r3
 800792a:	f7fe fe24 	bl	8006576 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800792e:	4b1d      	ldr	r3, [pc, #116]	; (80079a4 <xTaskRemoveFromEventList+0xac>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d11c      	bne.n	8007970 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	3304      	adds	r3, #4
 800793a:	4618      	mov	r0, r3
 800793c:	f7fe fe1b 	bl	8006576 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	2201      	movs	r2, #1
 8007946:	409a      	lsls	r2, r3
 8007948:	4b17      	ldr	r3, [pc, #92]	; (80079a8 <xTaskRemoveFromEventList+0xb0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4313      	orrs	r3, r2
 800794e:	4a16      	ldr	r2, [pc, #88]	; (80079a8 <xTaskRemoveFromEventList+0xb0>)
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4a13      	ldr	r2, [pc, #76]	; (80079ac <xTaskRemoveFromEventList+0xb4>)
 8007960:	441a      	add	r2, r3
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	3304      	adds	r3, #4
 8007966:	4619      	mov	r1, r3
 8007968:	4610      	mov	r0, r2
 800796a:	f7fe fda9 	bl	80064c0 <vListInsertEnd>
 800796e:	e005      	b.n	800797c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	3318      	adds	r3, #24
 8007974:	4619      	mov	r1, r3
 8007976:	480e      	ldr	r0, [pc, #56]	; (80079b0 <xTaskRemoveFromEventList+0xb8>)
 8007978:	f7fe fda2 	bl	80064c0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007980:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <xTaskRemoveFromEventList+0xbc>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007986:	429a      	cmp	r2, r3
 8007988:	d905      	bls.n	8007996 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800798a:	2301      	movs	r3, #1
 800798c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800798e:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <xTaskRemoveFromEventList+0xc0>)
 8007990:	2201      	movs	r2, #1
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e001      	b.n	800799a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007996:	2300      	movs	r3, #0
 8007998:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800799a:	697b      	ldr	r3, [r7, #20]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	20000948 	.word	0x20000948
 80079a8:	20000928 	.word	0x20000928
 80079ac:	20000824 	.word	0x20000824
 80079b0:	200008e0 	.word	0x200008e0
 80079b4:	20000820 	.word	0x20000820
 80079b8:	20000934 	.word	0x20000934

080079bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079c4:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <vTaskInternalSetTimeOutState+0x24>)
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079cc:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <vTaskInternalSetTimeOutState+0x28>)
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	605a      	str	r2, [r3, #4]
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	bc80      	pop	{r7}
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	20000938 	.word	0x20000938
 80079e4:	20000924 	.word	0x20000924

080079e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b088      	sub	sp, #32
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10a      	bne.n	8007a0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	613b      	str	r3, [r7, #16]
}
 8007a0a:	bf00      	nop
 8007a0c:	e7fe      	b.n	8007a0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10a      	bne.n	8007a2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	60fb      	str	r3, [r7, #12]
}
 8007a26:	bf00      	nop
 8007a28:	e7fe      	b.n	8007a28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007a2a:	f000 fc57 	bl	80082dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a2e:	4b1d      	ldr	r3, [pc, #116]	; (8007aa4 <xTaskCheckForTimeOut+0xbc>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a46:	d102      	bne.n	8007a4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	61fb      	str	r3, [r7, #28]
 8007a4c:	e023      	b.n	8007a96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	4b15      	ldr	r3, [pc, #84]	; (8007aa8 <xTaskCheckForTimeOut+0xc0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d007      	beq.n	8007a6a <xTaskCheckForTimeOut+0x82>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d302      	bcc.n	8007a6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a64:	2301      	movs	r3, #1
 8007a66:	61fb      	str	r3, [r7, #28]
 8007a68:	e015      	b.n	8007a96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d20b      	bcs.n	8007a8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	1ad2      	subs	r2, r2, r3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff ff9b 	bl	80079bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a86:	2300      	movs	r3, #0
 8007a88:	61fb      	str	r3, [r7, #28]
 8007a8a:	e004      	b.n	8007a96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a92:	2301      	movs	r3, #1
 8007a94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a96:	f000 fc51 	bl	800833c <vPortExitCritical>

	return xReturn;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3720      	adds	r7, #32
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20000924 	.word	0x20000924
 8007aa8:	20000938 	.word	0x20000938

08007aac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ab0:	4b03      	ldr	r3, [pc, #12]	; (8007ac0 <vTaskMissedYield+0x14>)
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]
}
 8007ab6:	bf00      	nop
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bc80      	pop	{r7}
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	20000934 	.word	0x20000934

08007ac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007acc:	f000 f852 	bl	8007b74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ad0:	4b06      	ldr	r3, [pc, #24]	; (8007aec <prvIdleTask+0x28>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d9f9      	bls.n	8007acc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ad8:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <prvIdleTask+0x2c>)
 8007ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ae8:	e7f0      	b.n	8007acc <prvIdleTask+0x8>
 8007aea:	bf00      	nop
 8007aec:	20000824 	.word	0x20000824
 8007af0:	e000ed04 	.word	0xe000ed04

08007af4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007afa:	2300      	movs	r3, #0
 8007afc:	607b      	str	r3, [r7, #4]
 8007afe:	e00c      	b.n	8007b1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4a12      	ldr	r2, [pc, #72]	; (8007b54 <prvInitialiseTaskLists+0x60>)
 8007b0c:	4413      	add	r3, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe fcab 	bl	800646a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3301      	adds	r3, #1
 8007b18:	607b      	str	r3, [r7, #4]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b06      	cmp	r3, #6
 8007b1e:	d9ef      	bls.n	8007b00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b20:	480d      	ldr	r0, [pc, #52]	; (8007b58 <prvInitialiseTaskLists+0x64>)
 8007b22:	f7fe fca2 	bl	800646a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b26:	480d      	ldr	r0, [pc, #52]	; (8007b5c <prvInitialiseTaskLists+0x68>)
 8007b28:	f7fe fc9f 	bl	800646a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b2c:	480c      	ldr	r0, [pc, #48]	; (8007b60 <prvInitialiseTaskLists+0x6c>)
 8007b2e:	f7fe fc9c 	bl	800646a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b32:	480c      	ldr	r0, [pc, #48]	; (8007b64 <prvInitialiseTaskLists+0x70>)
 8007b34:	f7fe fc99 	bl	800646a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b38:	480b      	ldr	r0, [pc, #44]	; (8007b68 <prvInitialiseTaskLists+0x74>)
 8007b3a:	f7fe fc96 	bl	800646a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b3e:	4b0b      	ldr	r3, [pc, #44]	; (8007b6c <prvInitialiseTaskLists+0x78>)
 8007b40:	4a05      	ldr	r2, [pc, #20]	; (8007b58 <prvInitialiseTaskLists+0x64>)
 8007b42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b44:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <prvInitialiseTaskLists+0x7c>)
 8007b46:	4a05      	ldr	r2, [pc, #20]	; (8007b5c <prvInitialiseTaskLists+0x68>)
 8007b48:	601a      	str	r2, [r3, #0]
}
 8007b4a:	bf00      	nop
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20000824 	.word	0x20000824
 8007b58:	200008b0 	.word	0x200008b0
 8007b5c:	200008c4 	.word	0x200008c4
 8007b60:	200008e0 	.word	0x200008e0
 8007b64:	200008f4 	.word	0x200008f4
 8007b68:	2000090c 	.word	0x2000090c
 8007b6c:	200008d8 	.word	0x200008d8
 8007b70:	200008dc 	.word	0x200008dc

08007b74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b7a:	e019      	b.n	8007bb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b7c:	f000 fbae 	bl	80082dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007b80:	4b10      	ldr	r3, [pc, #64]	; (8007bc4 <prvCheckTasksWaitingTermination+0x50>)
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe fcf2 	bl	8006576 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b92:	4b0d      	ldr	r3, [pc, #52]	; (8007bc8 <prvCheckTasksWaitingTermination+0x54>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	4a0b      	ldr	r2, [pc, #44]	; (8007bc8 <prvCheckTasksWaitingTermination+0x54>)
 8007b9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b9c:	4b0b      	ldr	r3, [pc, #44]	; (8007bcc <prvCheckTasksWaitingTermination+0x58>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	4a0a      	ldr	r2, [pc, #40]	; (8007bcc <prvCheckTasksWaitingTermination+0x58>)
 8007ba4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ba6:	f000 fbc9 	bl	800833c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f810 	bl	8007bd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bb0:	4b06      	ldr	r3, [pc, #24]	; (8007bcc <prvCheckTasksWaitingTermination+0x58>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e1      	bne.n	8007b7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	200008f4 	.word	0x200008f4
 8007bc8:	20000920 	.word	0x20000920
 8007bcc:	20000908 	.word	0x20000908

08007bd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d108      	bne.n	8007bf4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fd3c 	bl	8008664 <vPortFree>
				vPortFree( pxTCB );
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fd39 	bl	8008664 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bf2:	e018      	b.n	8007c26 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d103      	bne.n	8007c06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fd30 	bl	8008664 <vPortFree>
	}
 8007c04:	e00f      	b.n	8007c26 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d00a      	beq.n	8007c26 <prvDeleteTCB+0x56>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	60fb      	str	r3, [r7, #12]
}
 8007c22:	bf00      	nop
 8007c24:	e7fe      	b.n	8007c24 <prvDeleteTCB+0x54>
	}
 8007c26:	bf00      	nop
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
	...

08007c30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c36:	4b0e      	ldr	r3, [pc, #56]	; (8007c70 <prvResetNextTaskUnblockTime+0x40>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <prvResetNextTaskUnblockTime+0x14>
 8007c40:	2301      	movs	r3, #1
 8007c42:	e000      	b.n	8007c46 <prvResetNextTaskUnblockTime+0x16>
 8007c44:	2300      	movs	r3, #0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d004      	beq.n	8007c54 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c4a:	4b0a      	ldr	r3, [pc, #40]	; (8007c74 <prvResetNextTaskUnblockTime+0x44>)
 8007c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c50:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c52:	e008      	b.n	8007c66 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007c54:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <prvResetNextTaskUnblockTime+0x40>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	4a04      	ldr	r2, [pc, #16]	; (8007c74 <prvResetNextTaskUnblockTime+0x44>)
 8007c64:	6013      	str	r3, [r2, #0]
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bc80      	pop	{r7}
 8007c6e:	4770      	bx	lr
 8007c70:	200008d8 	.word	0x200008d8
 8007c74:	20000940 	.word	0x20000940

08007c78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c7e:	4b0b      	ldr	r3, [pc, #44]	; (8007cac <xTaskGetSchedulerState+0x34>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d102      	bne.n	8007c8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c86:	2301      	movs	r3, #1
 8007c88:	607b      	str	r3, [r7, #4]
 8007c8a:	e008      	b.n	8007c9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c8c:	4b08      	ldr	r3, [pc, #32]	; (8007cb0 <xTaskGetSchedulerState+0x38>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d102      	bne.n	8007c9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c94:	2302      	movs	r3, #2
 8007c96:	607b      	str	r3, [r7, #4]
 8007c98:	e001      	b.n	8007c9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c9e:	687b      	ldr	r3, [r7, #4]
	}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bc80      	pop	{r7}
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	2000092c 	.word	0x2000092c
 8007cb0:	20000948 	.word	0x20000948

08007cb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d06e      	beq.n	8007da8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cce:	4b39      	ldr	r3, [pc, #228]	; (8007db4 <xTaskPriorityInherit+0x100>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d25e      	bcs.n	8007d96 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	db06      	blt.n	8007cee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce0:	4b34      	ldr	r3, [pc, #208]	; (8007db4 <xTaskPriorityInherit+0x100>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce6:	f1c3 0207 	rsb	r2, r3, #7
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	6959      	ldr	r1, [r3, #20]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4a2e      	ldr	r2, [pc, #184]	; (8007db8 <xTaskPriorityInherit+0x104>)
 8007d00:	4413      	add	r3, r2
 8007d02:	4299      	cmp	r1, r3
 8007d04:	d101      	bne.n	8007d0a <xTaskPriorityInherit+0x56>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e000      	b.n	8007d0c <xTaskPriorityInherit+0x58>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d03a      	beq.n	8007d86 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	3304      	adds	r3, #4
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fe fc2e 	bl	8006576 <uxListRemove>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d115      	bne.n	8007d4c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d24:	4924      	ldr	r1, [pc, #144]	; (8007db8 <xTaskPriorityInherit+0x104>)
 8007d26:	4613      	mov	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	440b      	add	r3, r1
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10a      	bne.n	8007d4c <xTaskPriorityInherit+0x98>
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d40:	43da      	mvns	r2, r3
 8007d42:	4b1e      	ldr	r3, [pc, #120]	; (8007dbc <xTaskPriorityInherit+0x108>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4013      	ands	r3, r2
 8007d48:	4a1c      	ldr	r2, [pc, #112]	; (8007dbc <xTaskPriorityInherit+0x108>)
 8007d4a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d4c:	4b19      	ldr	r3, [pc, #100]	; (8007db4 <xTaskPriorityInherit+0x100>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	409a      	lsls	r2, r3
 8007d5e:	4b17      	ldr	r3, [pc, #92]	; (8007dbc <xTaskPriorityInherit+0x108>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	4a15      	ldr	r2, [pc, #84]	; (8007dbc <xTaskPriorityInherit+0x108>)
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4a10      	ldr	r2, [pc, #64]	; (8007db8 <xTaskPriorityInherit+0x104>)
 8007d76:	441a      	add	r2, r3
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	4610      	mov	r0, r2
 8007d80:	f7fe fb9e 	bl	80064c0 <vListInsertEnd>
 8007d84:	e004      	b.n	8007d90 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d86:	4b0b      	ldr	r3, [pc, #44]	; (8007db4 <xTaskPriorityInherit+0x100>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d90:	2301      	movs	r3, #1
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	e008      	b.n	8007da8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d9a:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <xTaskPriorityInherit+0x100>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d201      	bcs.n	8007da8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007da4:	2301      	movs	r3, #1
 8007da6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007da8:	68fb      	ldr	r3, [r7, #12]
	}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	20000820 	.word	0x20000820
 8007db8:	20000824 	.word	0x20000824
 8007dbc:	20000928 	.word	0x20000928

08007dc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d06e      	beq.n	8007eb4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007dd6:	4b3a      	ldr	r3, [pc, #232]	; (8007ec0 <xTaskPriorityDisinherit+0x100>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d00a      	beq.n	8007df6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	60fb      	str	r3, [r7, #12]
}
 8007df2:	bf00      	nop
 8007df4:	e7fe      	b.n	8007df4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10a      	bne.n	8007e14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	60bb      	str	r3, [r7, #8]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e18:	1e5a      	subs	r2, r3, #1
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d044      	beq.n	8007eb4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d140      	bne.n	8007eb4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	3304      	adds	r3, #4
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fe fb9d 	bl	8006576 <uxListRemove>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d115      	bne.n	8007e6e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e46:	491f      	ldr	r1, [pc, #124]	; (8007ec4 <xTaskPriorityDisinherit+0x104>)
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	440b      	add	r3, r1
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10a      	bne.n	8007e6e <xTaskPriorityDisinherit+0xae>
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e62:	43da      	mvns	r2, r3
 8007e64:	4b18      	ldr	r3, [pc, #96]	; (8007ec8 <xTaskPriorityDisinherit+0x108>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	4a17      	ldr	r2, [pc, #92]	; (8007ec8 <xTaskPriorityDisinherit+0x108>)
 8007e6c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7a:	f1c3 0207 	rsb	r2, r3, #7
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e86:	2201      	movs	r2, #1
 8007e88:	409a      	lsls	r2, r3
 8007e8a:	4b0f      	ldr	r3, [pc, #60]	; (8007ec8 <xTaskPriorityDisinherit+0x108>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	4a0d      	ldr	r2, [pc, #52]	; (8007ec8 <xTaskPriorityDisinherit+0x108>)
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e98:	4613      	mov	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4a08      	ldr	r2, [pc, #32]	; (8007ec4 <xTaskPriorityDisinherit+0x104>)
 8007ea2:	441a      	add	r2, r3
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4610      	mov	r0, r2
 8007eac:	f7fe fb08 	bl	80064c0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007eb4:	697b      	ldr	r3, [r7, #20]
	}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20000820 	.word	0x20000820
 8007ec4:	20000824 	.word	0x20000824
 8007ec8:	20000928 	.word	0x20000928

08007ecc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b088      	sub	sp, #32
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007eda:	2301      	movs	r3, #1
 8007edc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 8088 	beq.w	8007ff6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10a      	bne.n	8007f04 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	60fb      	str	r3, [r7, #12]
}
 8007f00:	bf00      	nop
 8007f02:	e7fe      	b.n	8007f02 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d902      	bls.n	8007f14 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	61fb      	str	r3, [r7, #28]
 8007f12:	e002      	b.n	8007f1a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f18:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d068      	beq.n	8007ff6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d163      	bne.n	8007ff6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007f2e:	4b34      	ldr	r3, [pc, #208]	; (8008000 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d10a      	bne.n	8007f4e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	60bb      	str	r3, [r7, #8]
}
 8007f4a:	bf00      	nop
 8007f4c:	e7fe      	b.n	8007f4c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f52:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	69fa      	ldr	r2, [r7, #28]
 8007f58:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	db04      	blt.n	8007f6c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	f1c3 0207 	rsb	r2, r3, #7
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	6959      	ldr	r1, [r3, #20]
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	4613      	mov	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4a22      	ldr	r2, [pc, #136]	; (8008004 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007f7c:	4413      	add	r3, r2
 8007f7e:	4299      	cmp	r1, r3
 8007f80:	d101      	bne.n	8007f86 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e000      	b.n	8007f88 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8007f86:	2300      	movs	r3, #0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d034      	beq.n	8007ff6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	3304      	adds	r3, #4
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fe faf0 	bl	8006576 <uxListRemove>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d115      	bne.n	8007fc8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa0:	4918      	ldr	r1, [pc, #96]	; (8008004 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	440b      	add	r3, r1
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10a      	bne.n	8007fc8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbc:	43da      	mvns	r2, r3
 8007fbe:	4b12      	ldr	r3, [pc, #72]	; (8008008 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	4a10      	ldr	r2, [pc, #64]	; (8008008 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007fc6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fcc:	2201      	movs	r2, #1
 8007fce:	409a      	lsls	r2, r3
 8007fd0:	4b0d      	ldr	r3, [pc, #52]	; (8008008 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	4a0c      	ldr	r2, [pc, #48]	; (8008008 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007fd8:	6013      	str	r3, [r2, #0]
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4a07      	ldr	r2, [pc, #28]	; (8008004 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007fe8:	441a      	add	r2, r3
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	3304      	adds	r3, #4
 8007fee:	4619      	mov	r1, r3
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	f7fe fa65 	bl	80064c0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ff6:	bf00      	nop
 8007ff8:	3720      	adds	r7, #32
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	20000820 	.word	0x20000820
 8008004:	20000824 	.word	0x20000824
 8008008:	20000928 	.word	0x20000928

0800800c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800800c:	b480      	push	{r7}
 800800e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008010:	4b07      	ldr	r3, [pc, #28]	; (8008030 <pvTaskIncrementMutexHeldCount+0x24>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d004      	beq.n	8008022 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008018:	4b05      	ldr	r3, [pc, #20]	; (8008030 <pvTaskIncrementMutexHeldCount+0x24>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800801e:	3201      	adds	r2, #1
 8008020:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008022:	4b03      	ldr	r3, [pc, #12]	; (8008030 <pvTaskIncrementMutexHeldCount+0x24>)
 8008024:	681b      	ldr	r3, [r3, #0]
	}
 8008026:	4618      	mov	r0, r3
 8008028:	46bd      	mov	sp, r7
 800802a:	bc80      	pop	{r7}
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20000820 	.word	0x20000820

08008034 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800803e:	4b29      	ldr	r3, [pc, #164]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008044:	4b28      	ldr	r3, [pc, #160]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3304      	adds	r3, #4
 800804a:	4618      	mov	r0, r3
 800804c:	f7fe fa93 	bl	8006576 <uxListRemove>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10b      	bne.n	800806e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008056:	4b24      	ldr	r3, [pc, #144]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	2201      	movs	r2, #1
 800805e:	fa02 f303 	lsl.w	r3, r2, r3
 8008062:	43da      	mvns	r2, r3
 8008064:	4b21      	ldr	r3, [pc, #132]	; (80080ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4013      	ands	r3, r2
 800806a:	4a20      	ldr	r2, [pc, #128]	; (80080ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800806c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008074:	d10a      	bne.n	800808c <prvAddCurrentTaskToDelayedList+0x58>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d007      	beq.n	800808c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800807c:	4b1a      	ldr	r3, [pc, #104]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3304      	adds	r3, #4
 8008082:	4619      	mov	r1, r3
 8008084:	481a      	ldr	r0, [pc, #104]	; (80080f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008086:	f7fe fa1b 	bl	80064c0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800808a:	e026      	b.n	80080da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4413      	add	r3, r2
 8008092:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008094:	4b14      	ldr	r3, [pc, #80]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d209      	bcs.n	80080b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080a4:	4b13      	ldr	r3, [pc, #76]	; (80080f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	4b0f      	ldr	r3, [pc, #60]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3304      	adds	r3, #4
 80080ae:	4619      	mov	r1, r3
 80080b0:	4610      	mov	r0, r2
 80080b2:	f7fe fa28 	bl	8006506 <vListInsert>
}
 80080b6:	e010      	b.n	80080da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080b8:	4b0f      	ldr	r3, [pc, #60]	; (80080f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3304      	adds	r3, #4
 80080c2:	4619      	mov	r1, r3
 80080c4:	4610      	mov	r0, r2
 80080c6:	f7fe fa1e 	bl	8006506 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080ca:	4b0c      	ldr	r3, [pc, #48]	; (80080fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d202      	bcs.n	80080da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80080d4:	4a09      	ldr	r2, [pc, #36]	; (80080fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	6013      	str	r3, [r2, #0]
}
 80080da:	bf00      	nop
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	20000924 	.word	0x20000924
 80080e8:	20000820 	.word	0x20000820
 80080ec:	20000928 	.word	0x20000928
 80080f0:	2000090c 	.word	0x2000090c
 80080f4:	200008dc 	.word	0x200008dc
 80080f8:	200008d8 	.word	0x200008d8
 80080fc:	20000940 	.word	0x20000940

08008100 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	3b04      	subs	r3, #4
 8008110:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3b04      	subs	r3, #4
 800811e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	f023 0201 	bic.w	r2, r3, #1
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3b04      	subs	r3, #4
 800812e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008130:	4a08      	ldr	r2, [pc, #32]	; (8008154 <pxPortInitialiseStack+0x54>)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3b14      	subs	r3, #20
 800813a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3b20      	subs	r3, #32
 8008146:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008148:	68fb      	ldr	r3, [r7, #12]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	bc80      	pop	{r7}
 8008152:	4770      	bx	lr
 8008154:	08008159 	.word	0x08008159

08008158 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800815e:	2300      	movs	r3, #0
 8008160:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008162:	4b12      	ldr	r3, [pc, #72]	; (80081ac <prvTaskExitError+0x54>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816a:	d00a      	beq.n	8008182 <prvTaskExitError+0x2a>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	60fb      	str	r3, [r7, #12]
}
 800817e:	bf00      	nop
 8008180:	e7fe      	b.n	8008180 <prvTaskExitError+0x28>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	60bb      	str	r3, [r7, #8]
}
 8008194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008196:	bf00      	nop
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0fc      	beq.n	8008198 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800819e:	bf00      	nop
 80081a0:	bf00      	nop
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc80      	pop	{r7}
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	20000024 	.word	0x20000024

080081b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081b0:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <pxCurrentTCBConst2>)
 80081b2:	6819      	ldr	r1, [r3, #0]
 80081b4:	6808      	ldr	r0, [r1, #0]
 80081b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80081ba:	f380 8809 	msr	PSP, r0
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f380 8811 	msr	BASEPRI, r0
 80081ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80081ce:	4770      	bx	lr

080081d0 <pxCurrentTCBConst2>:
 80081d0:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop

080081d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80081d8:	4806      	ldr	r0, [pc, #24]	; (80081f4 <prvPortStartFirstTask+0x1c>)
 80081da:	6800      	ldr	r0, [r0, #0]
 80081dc:	6800      	ldr	r0, [r0, #0]
 80081de:	f380 8808 	msr	MSP, r0
 80081e2:	b662      	cpsie	i
 80081e4:	b661      	cpsie	f
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	df00      	svc	0
 80081f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081f2:	bf00      	nop
 80081f4:	e000ed08 	.word	0xe000ed08

080081f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081fe:	4b32      	ldr	r3, [pc, #200]	; (80082c8 <xPortStartScheduler+0xd0>)
 8008200:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	22ff      	movs	r2, #255	; 0xff
 800820e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	b2db      	uxtb	r3, r3
 8008216:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008218:	78fb      	ldrb	r3, [r7, #3]
 800821a:	b2db      	uxtb	r3, r3
 800821c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008220:	b2da      	uxtb	r2, r3
 8008222:	4b2a      	ldr	r3, [pc, #168]	; (80082cc <xPortStartScheduler+0xd4>)
 8008224:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008226:	4b2a      	ldr	r3, [pc, #168]	; (80082d0 <xPortStartScheduler+0xd8>)
 8008228:	2207      	movs	r2, #7
 800822a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800822c:	e009      	b.n	8008242 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800822e:	4b28      	ldr	r3, [pc, #160]	; (80082d0 <xPortStartScheduler+0xd8>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3b01      	subs	r3, #1
 8008234:	4a26      	ldr	r2, [pc, #152]	; (80082d0 <xPortStartScheduler+0xd8>)
 8008236:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	b2db      	uxtb	r3, r3
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	b2db      	uxtb	r3, r3
 8008240:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008242:	78fb      	ldrb	r3, [r7, #3]
 8008244:	b2db      	uxtb	r3, r3
 8008246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824a:	2b80      	cmp	r3, #128	; 0x80
 800824c:	d0ef      	beq.n	800822e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800824e:	4b20      	ldr	r3, [pc, #128]	; (80082d0 <xPortStartScheduler+0xd8>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f1c3 0307 	rsb	r3, r3, #7
 8008256:	2b04      	cmp	r3, #4
 8008258:	d00a      	beq.n	8008270 <xPortStartScheduler+0x78>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	60bb      	str	r3, [r7, #8]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008270:	4b17      	ldr	r3, [pc, #92]	; (80082d0 <xPortStartScheduler+0xd8>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	021b      	lsls	r3, r3, #8
 8008276:	4a16      	ldr	r2, [pc, #88]	; (80082d0 <xPortStartScheduler+0xd8>)
 8008278:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800827a:	4b15      	ldr	r3, [pc, #84]	; (80082d0 <xPortStartScheduler+0xd8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008282:	4a13      	ldr	r2, [pc, #76]	; (80082d0 <xPortStartScheduler+0xd8>)
 8008284:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	b2da      	uxtb	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800828e:	4b11      	ldr	r3, [pc, #68]	; (80082d4 <xPortStartScheduler+0xdc>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a10      	ldr	r2, [pc, #64]	; (80082d4 <xPortStartScheduler+0xdc>)
 8008294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008298:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800829a:	4b0e      	ldr	r3, [pc, #56]	; (80082d4 <xPortStartScheduler+0xdc>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a0d      	ldr	r2, [pc, #52]	; (80082d4 <xPortStartScheduler+0xdc>)
 80082a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082a6:	f000 f8b9 	bl	800841c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082aa:	4b0b      	ldr	r3, [pc, #44]	; (80082d8 <xPortStartScheduler+0xe0>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082b0:	f7ff ff92 	bl	80081d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082b4:	f7ff faa2 	bl	80077fc <vTaskSwitchContext>
	prvTaskExitError();
 80082b8:	f7ff ff4e 	bl	8008158 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	e000e400 	.word	0xe000e400
 80082cc:	2000094c 	.word	0x2000094c
 80082d0:	20000950 	.word	0x20000950
 80082d4:	e000ed20 	.word	0xe000ed20
 80082d8:	20000024 	.word	0x20000024

080082dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
	__asm volatile
 80082e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	607b      	str	r3, [r7, #4]
}
 80082f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082f6:	4b0f      	ldr	r3, [pc, #60]	; (8008334 <vPortEnterCritical+0x58>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3301      	adds	r3, #1
 80082fc:	4a0d      	ldr	r2, [pc, #52]	; (8008334 <vPortEnterCritical+0x58>)
 80082fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008300:	4b0c      	ldr	r3, [pc, #48]	; (8008334 <vPortEnterCritical+0x58>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d10f      	bne.n	8008328 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008308:	4b0b      	ldr	r3, [pc, #44]	; (8008338 <vPortEnterCritical+0x5c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00a      	beq.n	8008328 <vPortEnterCritical+0x4c>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	603b      	str	r3, [r7, #0]
}
 8008324:	bf00      	nop
 8008326:	e7fe      	b.n	8008326 <vPortEnterCritical+0x4a>
	}
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	bc80      	pop	{r7}
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	20000024 	.word	0x20000024
 8008338:	e000ed04 	.word	0xe000ed04

0800833c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008342:	4b11      	ldr	r3, [pc, #68]	; (8008388 <vPortExitCritical+0x4c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10a      	bne.n	8008360 <vPortExitCritical+0x24>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	607b      	str	r3, [r7, #4]
}
 800835c:	bf00      	nop
 800835e:	e7fe      	b.n	800835e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008360:	4b09      	ldr	r3, [pc, #36]	; (8008388 <vPortExitCritical+0x4c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3b01      	subs	r3, #1
 8008366:	4a08      	ldr	r2, [pc, #32]	; (8008388 <vPortExitCritical+0x4c>)
 8008368:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800836a:	4b07      	ldr	r3, [pc, #28]	; (8008388 <vPortExitCritical+0x4c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d105      	bne.n	800837e <vPortExitCritical+0x42>
 8008372:	2300      	movs	r3, #0
 8008374:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	f383 8811 	msr	BASEPRI, r3
}
 800837c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	bc80      	pop	{r7}
 8008386:	4770      	bx	lr
 8008388:	20000024 	.word	0x20000024
 800838c:	00000000 	.word	0x00000000

08008390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008390:	f3ef 8009 	mrs	r0, PSP
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	4b0d      	ldr	r3, [pc, #52]	; (80083d0 <pxCurrentTCBConst>)
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80083a0:	6010      	str	r0, [r2, #0]
 80083a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80083a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80083aa:	f380 8811 	msr	BASEPRI, r0
 80083ae:	f7ff fa25 	bl	80077fc <vTaskSwitchContext>
 80083b2:	f04f 0000 	mov.w	r0, #0
 80083b6:	f380 8811 	msr	BASEPRI, r0
 80083ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80083be:	6819      	ldr	r1, [r3, #0]
 80083c0:	6808      	ldr	r0, [r1, #0]
 80083c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80083c6:	f380 8809 	msr	PSP, r0
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	4770      	bx	lr

080083d0 <pxCurrentTCBConst>:
 80083d0:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop

080083d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	607b      	str	r3, [r7, #4]
}
 80083f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083f2:	f7ff f945 	bl	8007680 <xTaskIncrementTick>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083fc:	4b06      	ldr	r3, [pc, #24]	; (8008418 <SysTick_Handler+0x40>)
 80083fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	2300      	movs	r3, #0
 8008406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	f383 8811 	msr	BASEPRI, r3
}
 800840e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008410:	bf00      	nop
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	e000ed04 	.word	0xe000ed04

0800841c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008420:	4b0a      	ldr	r3, [pc, #40]	; (800844c <vPortSetupTimerInterrupt+0x30>)
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008426:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <vPortSetupTimerInterrupt+0x34>)
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800842c:	4b09      	ldr	r3, [pc, #36]	; (8008454 <vPortSetupTimerInterrupt+0x38>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a09      	ldr	r2, [pc, #36]	; (8008458 <vPortSetupTimerInterrupt+0x3c>)
 8008432:	fba2 2303 	umull	r2, r3, r2, r3
 8008436:	099b      	lsrs	r3, r3, #6
 8008438:	4a08      	ldr	r2, [pc, #32]	; (800845c <vPortSetupTimerInterrupt+0x40>)
 800843a:	3b01      	subs	r3, #1
 800843c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800843e:	4b03      	ldr	r3, [pc, #12]	; (800844c <vPortSetupTimerInterrupt+0x30>)
 8008440:	2207      	movs	r2, #7
 8008442:	601a      	str	r2, [r3, #0]
}
 8008444:	bf00      	nop
 8008446:	46bd      	mov	sp, r7
 8008448:	bc80      	pop	{r7}
 800844a:	4770      	bx	lr
 800844c:	e000e010 	.word	0xe000e010
 8008450:	e000e018 	.word	0xe000e018
 8008454:	20000004 	.word	0x20000004
 8008458:	10624dd3 	.word	0x10624dd3
 800845c:	e000e014 	.word	0xe000e014

08008460 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008466:	f3ef 8305 	mrs	r3, IPSR
 800846a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2b0f      	cmp	r3, #15
 8008470:	d914      	bls.n	800849c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008472:	4a16      	ldr	r2, [pc, #88]	; (80084cc <vPortValidateInterruptPriority+0x6c>)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4413      	add	r3, r2
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800847c:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <vPortValidateInterruptPriority+0x70>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	7afa      	ldrb	r2, [r7, #11]
 8008482:	429a      	cmp	r2, r3
 8008484:	d20a      	bcs.n	800849c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	607b      	str	r3, [r7, #4]
}
 8008498:	bf00      	nop
 800849a:	e7fe      	b.n	800849a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800849c:	4b0d      	ldr	r3, [pc, #52]	; (80084d4 <vPortValidateInterruptPriority+0x74>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80084a4:	4b0c      	ldr	r3, [pc, #48]	; (80084d8 <vPortValidateInterruptPriority+0x78>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d90a      	bls.n	80084c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	603b      	str	r3, [r7, #0]
}
 80084be:	bf00      	nop
 80084c0:	e7fe      	b.n	80084c0 <vPortValidateInterruptPriority+0x60>
	}
 80084c2:	bf00      	nop
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bc80      	pop	{r7}
 80084ca:	4770      	bx	lr
 80084cc:	e000e3f0 	.word	0xe000e3f0
 80084d0:	2000094c 	.word	0x2000094c
 80084d4:	e000ed0c 	.word	0xe000ed0c
 80084d8:	20000950 	.word	0x20000950

080084dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08a      	sub	sp, #40	; 0x28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084e4:	2300      	movs	r3, #0
 80084e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084e8:	f7ff f820 	bl	800752c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084ec:	4b58      	ldr	r3, [pc, #352]	; (8008650 <pvPortMalloc+0x174>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084f4:	f000 f910 	bl	8008718 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084f8:	4b56      	ldr	r3, [pc, #344]	; (8008654 <pvPortMalloc+0x178>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4013      	ands	r3, r2
 8008500:	2b00      	cmp	r3, #0
 8008502:	f040 808e 	bne.w	8008622 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d01d      	beq.n	8008548 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800850c:	2208      	movs	r2, #8
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4413      	add	r3, r2
 8008512:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	2b00      	cmp	r3, #0
 800851c:	d014      	beq.n	8008548 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f023 0307 	bic.w	r3, r3, #7
 8008524:	3308      	adds	r3, #8
 8008526:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f003 0307 	and.w	r3, r3, #7
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00a      	beq.n	8008548 <pvPortMalloc+0x6c>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	617b      	str	r3, [r7, #20]
}
 8008544:	bf00      	nop
 8008546:	e7fe      	b.n	8008546 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d069      	beq.n	8008622 <pvPortMalloc+0x146>
 800854e:	4b42      	ldr	r3, [pc, #264]	; (8008658 <pvPortMalloc+0x17c>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	429a      	cmp	r2, r3
 8008556:	d864      	bhi.n	8008622 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008558:	4b40      	ldr	r3, [pc, #256]	; (800865c <pvPortMalloc+0x180>)
 800855a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800855c:	4b3f      	ldr	r3, [pc, #252]	; (800865c <pvPortMalloc+0x180>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008562:	e004      	b.n	800856e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	429a      	cmp	r2, r3
 8008576:	d903      	bls.n	8008580 <pvPortMalloc+0xa4>
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1f1      	bne.n	8008564 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008580:	4b33      	ldr	r3, [pc, #204]	; (8008650 <pvPortMalloc+0x174>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008586:	429a      	cmp	r2, r3
 8008588:	d04b      	beq.n	8008622 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2208      	movs	r2, #8
 8008590:	4413      	add	r3, r2
 8008592:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	1ad2      	subs	r2, r2, r3
 80085a4:	2308      	movs	r3, #8
 80085a6:	005b      	lsls	r3, r3, #1
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d91f      	bls.n	80085ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4413      	add	r3, r2
 80085b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <pvPortMalloc+0xf8>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	613b      	str	r3, [r7, #16]
}
 80085d0:	bf00      	nop
 80085d2:	e7fe      	b.n	80085d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	1ad2      	subs	r2, r2, r3
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085e6:	69b8      	ldr	r0, [r7, #24]
 80085e8:	f000 f8f8 	bl	80087dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085ec:	4b1a      	ldr	r3, [pc, #104]	; (8008658 <pvPortMalloc+0x17c>)
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	4a18      	ldr	r2, [pc, #96]	; (8008658 <pvPortMalloc+0x17c>)
 80085f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085fa:	4b17      	ldr	r3, [pc, #92]	; (8008658 <pvPortMalloc+0x17c>)
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	4b18      	ldr	r3, [pc, #96]	; (8008660 <pvPortMalloc+0x184>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	429a      	cmp	r2, r3
 8008604:	d203      	bcs.n	800860e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008606:	4b14      	ldr	r3, [pc, #80]	; (8008658 <pvPortMalloc+0x17c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a15      	ldr	r2, [pc, #84]	; (8008660 <pvPortMalloc+0x184>)
 800860c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	685a      	ldr	r2, [r3, #4]
 8008612:	4b10      	ldr	r3, [pc, #64]	; (8008654 <pvPortMalloc+0x178>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	431a      	orrs	r2, r3
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	2200      	movs	r2, #0
 8008620:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008622:	f7fe ff91 	bl	8007548 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	f003 0307 	and.w	r3, r3, #7
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00a      	beq.n	8008646 <pvPortMalloc+0x16a>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	60fb      	str	r3, [r7, #12]
}
 8008642:	bf00      	nop
 8008644:	e7fe      	b.n	8008644 <pvPortMalloc+0x168>
	return pvReturn;
 8008646:	69fb      	ldr	r3, [r7, #28]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3728      	adds	r7, #40	; 0x28
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	2000155c 	.word	0x2000155c
 8008654:	20001568 	.word	0x20001568
 8008658:	20001560 	.word	0x20001560
 800865c:	20001554 	.word	0x20001554
 8008660:	20001564 	.word	0x20001564

08008664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d048      	beq.n	8008708 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008676:	2308      	movs	r3, #8
 8008678:	425b      	negs	r3, r3
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	4413      	add	r3, r2
 800867e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	4b21      	ldr	r3, [pc, #132]	; (8008710 <vPortFree+0xac>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4013      	ands	r3, r2
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10a      	bne.n	80086a8 <vPortFree+0x44>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	60fb      	str	r3, [r7, #12]
}
 80086a4:	bf00      	nop
 80086a6:	e7fe      	b.n	80086a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00a      	beq.n	80086c6 <vPortFree+0x62>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	60bb      	str	r3, [r7, #8]
}
 80086c2:	bf00      	nop
 80086c4:	e7fe      	b.n	80086c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	4b11      	ldr	r3, [pc, #68]	; (8008710 <vPortFree+0xac>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4013      	ands	r3, r2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d019      	beq.n	8008708 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d115      	bne.n	8008708 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <vPortFree+0xac>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	43db      	mvns	r3, r3
 80086e6:	401a      	ands	r2, r3
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086ec:	f7fe ff1e 	bl	800752c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	4b07      	ldr	r3, [pc, #28]	; (8008714 <vPortFree+0xb0>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4413      	add	r3, r2
 80086fa:	4a06      	ldr	r2, [pc, #24]	; (8008714 <vPortFree+0xb0>)
 80086fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086fe:	6938      	ldr	r0, [r7, #16]
 8008700:	f000 f86c 	bl	80087dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008704:	f7fe ff20 	bl	8007548 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008708:	bf00      	nop
 800870a:	3718      	adds	r7, #24
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20001568 	.word	0x20001568
 8008714:	20001560 	.word	0x20001560

08008718 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800871e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008722:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008724:	4b27      	ldr	r3, [pc, #156]	; (80087c4 <prvHeapInit+0xac>)
 8008726:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f003 0307 	and.w	r3, r3, #7
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00c      	beq.n	800874c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3307      	adds	r3, #7
 8008736:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 0307 	bic.w	r3, r3, #7
 800873e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	4a1f      	ldr	r2, [pc, #124]	; (80087c4 <prvHeapInit+0xac>)
 8008748:	4413      	add	r3, r2
 800874a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008750:	4a1d      	ldr	r2, [pc, #116]	; (80087c8 <prvHeapInit+0xb0>)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008756:	4b1c      	ldr	r3, [pc, #112]	; (80087c8 <prvHeapInit+0xb0>)
 8008758:	2200      	movs	r2, #0
 800875a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	4413      	add	r3, r2
 8008762:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008764:	2208      	movs	r2, #8
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	1a9b      	subs	r3, r3, r2
 800876a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 0307 	bic.w	r3, r3, #7
 8008772:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4a15      	ldr	r2, [pc, #84]	; (80087cc <prvHeapInit+0xb4>)
 8008778:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800877a:	4b14      	ldr	r3, [pc, #80]	; (80087cc <prvHeapInit+0xb4>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2200      	movs	r2, #0
 8008780:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008782:	4b12      	ldr	r3, [pc, #72]	; (80087cc <prvHeapInit+0xb4>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2200      	movs	r2, #0
 8008788:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	1ad2      	subs	r2, r2, r3
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008798:	4b0c      	ldr	r3, [pc, #48]	; (80087cc <prvHeapInit+0xb4>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	4a0a      	ldr	r2, [pc, #40]	; (80087d0 <prvHeapInit+0xb8>)
 80087a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	4a09      	ldr	r2, [pc, #36]	; (80087d4 <prvHeapInit+0xbc>)
 80087ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087b0:	4b09      	ldr	r3, [pc, #36]	; (80087d8 <prvHeapInit+0xc0>)
 80087b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087b6:	601a      	str	r2, [r3, #0]
}
 80087b8:	bf00      	nop
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	20000954 	.word	0x20000954
 80087c8:	20001554 	.word	0x20001554
 80087cc:	2000155c 	.word	0x2000155c
 80087d0:	20001564 	.word	0x20001564
 80087d4:	20001560 	.word	0x20001560
 80087d8:	20001568 	.word	0x20001568

080087dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087e4:	4b27      	ldr	r3, [pc, #156]	; (8008884 <prvInsertBlockIntoFreeList+0xa8>)
 80087e6:	60fb      	str	r3, [r7, #12]
 80087e8:	e002      	b.n	80087f0 <prvInsertBlockIntoFreeList+0x14>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d8f7      	bhi.n	80087ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	4413      	add	r3, r2
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	429a      	cmp	r2, r3
 800880a:	d108      	bne.n	800881e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	441a      	add	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	441a      	add	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d118      	bne.n	8008864 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	4b14      	ldr	r3, [pc, #80]	; (8008888 <prvInsertBlockIntoFreeList+0xac>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	429a      	cmp	r2, r3
 800883c:	d00d      	beq.n	800885a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	441a      	add	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	e008      	b.n	800886c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800885a:	4b0b      	ldr	r3, [pc, #44]	; (8008888 <prvInsertBlockIntoFreeList+0xac>)
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	e003      	b.n	800886c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	429a      	cmp	r2, r3
 8008872:	d002      	beq.n	800887a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800887a:	bf00      	nop
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	bc80      	pop	{r7}
 8008882:	4770      	bx	lr
 8008884:	20001554 	.word	0x20001554
 8008888:	2000155c 	.word	0x2000155c

0800888c <__libc_init_array>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	2600      	movs	r6, #0
 8008890:	4d0c      	ldr	r5, [pc, #48]	; (80088c4 <__libc_init_array+0x38>)
 8008892:	4c0d      	ldr	r4, [pc, #52]	; (80088c8 <__libc_init_array+0x3c>)
 8008894:	1b64      	subs	r4, r4, r5
 8008896:	10a4      	asrs	r4, r4, #2
 8008898:	42a6      	cmp	r6, r4
 800889a:	d109      	bne.n	80088b0 <__libc_init_array+0x24>
 800889c:	f000 f830 	bl	8008900 <_init>
 80088a0:	2600      	movs	r6, #0
 80088a2:	4d0a      	ldr	r5, [pc, #40]	; (80088cc <__libc_init_array+0x40>)
 80088a4:	4c0a      	ldr	r4, [pc, #40]	; (80088d0 <__libc_init_array+0x44>)
 80088a6:	1b64      	subs	r4, r4, r5
 80088a8:	10a4      	asrs	r4, r4, #2
 80088aa:	42a6      	cmp	r6, r4
 80088ac:	d105      	bne.n	80088ba <__libc_init_array+0x2e>
 80088ae:	bd70      	pop	{r4, r5, r6, pc}
 80088b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b4:	4798      	blx	r3
 80088b6:	3601      	adds	r6, #1
 80088b8:	e7ee      	b.n	8008898 <__libc_init_array+0xc>
 80088ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80088be:	4798      	blx	r3
 80088c0:	3601      	adds	r6, #1
 80088c2:	e7f2      	b.n	80088aa <__libc_init_array+0x1e>
 80088c4:	08008a30 	.word	0x08008a30
 80088c8:	08008a30 	.word	0x08008a30
 80088cc:	08008a30 	.word	0x08008a30
 80088d0:	08008a34 	.word	0x08008a34

080088d4 <memcpy>:
 80088d4:	440a      	add	r2, r1
 80088d6:	4291      	cmp	r1, r2
 80088d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80088dc:	d100      	bne.n	80088e0 <memcpy+0xc>
 80088de:	4770      	bx	lr
 80088e0:	b510      	push	{r4, lr}
 80088e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088e6:	4291      	cmp	r1, r2
 80088e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ec:	d1f9      	bne.n	80088e2 <memcpy+0xe>
 80088ee:	bd10      	pop	{r4, pc}

080088f0 <memset>:
 80088f0:	4603      	mov	r3, r0
 80088f2:	4402      	add	r2, r0
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d100      	bne.n	80088fa <memset+0xa>
 80088f8:	4770      	bx	lr
 80088fa:	f803 1b01 	strb.w	r1, [r3], #1
 80088fe:	e7f9      	b.n	80088f4 <memset+0x4>

08008900 <_init>:
 8008900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008902:	bf00      	nop
 8008904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008906:	bc08      	pop	{r3}
 8008908:	469e      	mov	lr, r3
 800890a:	4770      	bx	lr

0800890c <_fini>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	bf00      	nop
 8008910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008912:	bc08      	pop	{r3}
 8008914:	469e      	mov	lr, r3
 8008916:	4770      	bx	lr
