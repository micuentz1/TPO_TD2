
LCDconSENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e10  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08006f20  08006f20  00016f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007168  08007168  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08007168  08007168  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007168  08007168  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007168  08007168  00017168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800716c  0800716c  0001716c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08007170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b8c  2000008c  080071fc  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c18  080071fc  00021c18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b15a  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cf1  00000000  00000000  0003b20f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  0003ef00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001740  00000000  00000000  00040790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a30a  00000000  00000000  00041ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afd8  00000000  00000000  0005c1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097a7c  00000000  00000000  000771b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ec2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c58  00000000  00000000  0010ec80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006f08 	.word	0x08006f08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	08006f08 	.word	0x08006f08

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <USART_ReceiveData>:


char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	685b      	ldr	r3, [r3, #4]
 8000170:	b29b      	uxth	r3, r3
 8000172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000176:	b29b      	uxth	r3, r3
}
 8000178:	4618      	mov	r0, r3
 800017a:	370c      	adds	r7, #12
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr

08000182 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000182:	b480      	push	{r7}
 8000184:	b083      	sub	sp, #12
 8000186:	af00      	add	r7, sp, #0
 8000188:	6078      	str	r0, [r7, #4]
 800018a:	460b      	mov	r3, r1
 800018c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800018e:	887b      	ldrh	r3, [r7, #2]
 8000190:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	605a      	str	r2, [r3, #4]
}
 8000198:	bf00      	nop
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
	...

080001a4 <usart_setup>:


uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 80001ac:	4b15      	ldr	r3, [pc, #84]	; (8000204 <usart_setup+0x60>)
 80001ae:	4a16      	ldr	r2, [pc, #88]	; (8000208 <usart_setup+0x64>)
 80001b0:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 80001b2:	4a14      	ldr	r2, [pc, #80]	; (8000204 <usart_setup+0x60>)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 80001b8:	4b12      	ldr	r3, [pc, #72]	; (8000204 <usart_setup+0x60>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 80001be:	4b11      	ldr	r3, [pc, #68]	; (8000204 <usart_setup+0x60>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 80001c4:	4b0f      	ldr	r3, [pc, #60]	; (8000204 <usart_setup+0x60>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 80001ca:	4b0e      	ldr	r3, [pc, #56]	; (8000204 <usart_setup+0x60>)
 80001cc:	220c      	movs	r2, #12
 80001ce:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <usart_setup+0x60>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 80001d6:	4b0b      	ldr	r3, [pc, #44]	; (8000204 <usart_setup+0x60>)
 80001d8:	2200      	movs	r2, #0
 80001da:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 80001dc:	4809      	ldr	r0, [pc, #36]	; (8000204 <usart_setup+0x60>)
 80001de:	f003 f873 	bl	80032c8 <HAL_HalfDuplex_Init>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d000      	beq.n	80001ea <usart_setup+0x46>
	{
		//	    Error_Handler();
		__asm__("NOP");
 80001e8:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 80001ea:	4b06      	ldr	r3, [pc, #24]	; (8000204 <usart_setup+0x60>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	68da      	ldr	r2, [r3, #12]
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <usart_setup+0x60>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f042 0220 	orr.w	r2, r2, #32
 80001f8:	60da      	str	r2, [r3, #12]
}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	20000160 	.word	0x20000160
 8000208:	40013800 	.word	0x40013800

0800020c <owInit>:

void owInit(OneWire *ow) {
 800020c:	b480      	push	{r7}
 800020e:	b087      	sub	sp, #28
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 8000214:	2300      	movs	r3, #0
 8000216:	617b      	str	r3, [r7, #20]
 8000218:	2300      	movs	r3, #0
 800021a:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 800021c:	e015      	b.n	800024a <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];      
 800021e:	697b      	ldr	r3, [r7, #20]
 8000220:	00db      	lsls	r3, r3, #3
 8000222:	687a      	ldr	r2, [r7, #4]
 8000224:	4413      	add	r3, r2
 8000226:	60fb      	str	r3, [r7, #12]
    k=0;
 8000228:	2300      	movs	r3, #0
 800022a:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 800022c:	e007      	b.n	800023e <owInit+0x32>
    r[k] = 0;
 800022e:	693b      	ldr	r3, [r7, #16]
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	2200      	movs	r2, #0
 8000236:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 8000238:	693b      	ldr	r3, [r7, #16]
 800023a:	3301      	adds	r3, #1
 800023c:	613b      	str	r3, [r7, #16]
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	2b07      	cmp	r3, #7
 8000242:	ddf4      	ble.n	800022e <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8000244:	697b      	ldr	r3, [r7, #20]
 8000246:	3301      	adds	r3, #1
 8000248:	617b      	str	r3, [r7, #20]
 800024a:	697b      	ldr	r3, [r7, #20]
 800024c:	2b01      	cmp	r3, #1
 800024e:	dde6      	ble.n	800021e <owInit+0x12>
  }
  k=0;
 8000250:	2300      	movs	r3, #0
 8000252:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 8000254:	e008      	b.n	8000268 <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 8000256:	687a      	ldr	r2, [r7, #4]
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	4413      	add	r3, r2
 800025c:	3314      	adds	r3, #20
 800025e:	2200      	movs	r2, #0
 8000260:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 8000262:	693b      	ldr	r3, [r7, #16]
 8000264:	3301      	adds	r3, #1
 8000266:	613b      	str	r3, [r7, #16]
 8000268:	693b      	ldr	r3, [r7, #16]
 800026a:	2b07      	cmp	r3, #7
 800026c:	ddf3      	ble.n	8000256 <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2240      	movs	r2, #64	; 0x40
 8000272:	611a      	str	r2, [r3, #16]

}
 8000274:	bf00      	nop
 8000276:	371c      	adds	r7, #28
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
	...

08000280 <owReadHandler>:

void owReadHandler() { //обработчик прерыания USART
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 8000286:	f000 f850 	bl	800032a <getUsartIndex>
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  /* Проверяем, что мы вызвали прерывание из-за RXNE. */
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 800028e:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <owReadHandler+0x70>)
 8000290:	68db      	ldr	r3, [r3, #12]
 8000292:	f003 0320 	and.w	r3, r3, #32
 8000296:	2b00      	cmp	r3, #0
 8000298:	d025      	beq.n	80002e6 <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <owReadHandler+0x70>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d01f      	beq.n	80002e6 <owReadHandler+0x66>

    /* Получаем данные из периферии и сбрасываем флаг*/
		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 80002a6:	bf00      	nop
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <owReadHandler+0x70>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f003 0320 	and.w	r3, r3, #32
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d0f9      	beq.n	80002a8 <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);              
 80002b4:	79fc      	ldrb	r4, [r7, #7]
 80002b6:	480e      	ldr	r0, [pc, #56]	; (80002f0 <owReadHandler+0x70>)
 80002b8:	f7ff ff54 	bl	8000164 <USART_ReceiveData>
 80002bc:	4603      	mov	r3, r0
 80002be:	461a      	mov	r2, r3
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <owReadHandler+0x74>)
 80002c2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);//сбрасываем флаг ответ получен после 
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	2201      	movs	r2, #1
 80002ca:	fa02 f303 	lsl.w	r3, r2, r3
 80002ce:	b25b      	sxtb	r3, r3
 80002d0:	43db      	mvns	r3, r3
 80002d2:	b25a      	sxtb	r2, r3
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <owReadHandler+0x78>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	b25b      	sxtb	r3, r3
 80002dc:	4013      	ands	r3, r2
 80002de:	b25b      	sxtb	r3, r3
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <owReadHandler+0x78>)
 80002e4:	701a      	strb	r2, [r3, #0]
  }
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd90      	pop	{r4, r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40013800 	.word	0x40013800
 80002f4:	200000ac 	.word	0x200000ac
 80002f8:	200000a8 	.word	0x200000a8

080002fc <owResetCmd>:
 *
 * @param N usart -- выбранный для реализации 1wire usart
 * @return Возвращает 1 если на шине кто-то есть и 0 в противном случае
 */

  uint16_t owResetCmd() {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
	uint16_t owPresence;
	
	usart_setup(9600);
 8000302:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000306:	f7ff ff4d 	bl	80001a4 <usart_setup>

  owSend(0xF0); // Send RESET отправляем импуль сброса
 800030a:	20f0      	movs	r0, #240	; 0xf0
 800030c:	f000 f814 	bl	8000338 <owSend>
  owPresence = owEchoRead(); // Ждём PRESENCE на шине и вовзращаем, что есть
 8000310:	f000 f850 	bl	80003b4 <owEchoRead>
 8000314:	4603      	mov	r3, r0
 8000316:	80fb      	strh	r3, [r7, #6]

	usart_setup(115200);// перенастраиваем скорость UART
 8000318:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800031c:	f7ff ff42 	bl	80001a4 <usart_setup>
  return owPresence;
 8000320:	88fb      	ldrh	r3, [r7, #6]
}
 8000322:	4618      	mov	r0, r3
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <getUsartIndex>:

uint8_t getUsartIndex() {// смотрит по номеру UART c каким будет идти работа
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 800032e:	2300      	movs	r3, #0
}
 8000330:	4618      	mov	r0, r3
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr

08000338 <owSend>:

void owSend(uint16_t data) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());//устанавливаем флаг если попадем в обработчик прерывания там он сбросится
 8000342:	f7ff fff2 	bl	800032a <getUsartIndex>
 8000346:	4603      	mov	r3, r0
 8000348:	461a      	mov	r2, r3
 800034a:	2301      	movs	r3, #1
 800034c:	4093      	lsls	r3, r2
 800034e:	b25a      	sxtb	r2, r3
 8000350:	4b0d      	ldr	r3, [pc, #52]	; (8000388 <owSend+0x50>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	b25b      	sxtb	r3, r3
 8000358:	4313      	orrs	r3, r2
 800035a:	b25b      	sxtb	r3, r3
 800035c:	b2da      	uxtb	r2, r3
 800035e:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <owSend+0x50>)
 8000360:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);//отправляем данные
 8000362:	88fb      	ldrh	r3, [r7, #6]
 8000364:	4619      	mov	r1, r3
 8000366:	4809      	ldr	r0, [pc, #36]	; (800038c <owSend+0x54>)
 8000368:	f7ff ff0b 	bl	8000182 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);//ждем пока передача закончится
 800036c:	bf00      	nop
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <owSend+0x58>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000378:	2b40      	cmp	r3, #64	; 0x40
 800037a:	d1f8      	bne.n	800036e <owSend+0x36>
}
 800037c:	bf00      	nop
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	200000a8 	.word	0x200000a8
 800038c:	40013800 	.word	0x40013800
 8000390:	20000160 	.word	0x20000160

08000394 <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {//читаем у нас пришла единица или ноль в ответ
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0; //если пришло 0xFF, то бит = 1, что то другое бит = 0
 800039e:	88fb      	ldrh	r3, [r7, #6]
 80003a0:	2bff      	cmp	r3, #255	; 0xff
 80003a2:	bf0c      	ite	eq
 80003a4:	2301      	moveq	r3, #1
 80003a6:	2300      	movne	r3, #0
 80003a8:	b2db      	uxtb	r3, r3
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <owEchoRead>:

uint16_t owEchoRead() {//
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();//получаем номер USART
 80003ba:	f7ff ffb6 	bl	800032a <getUsartIndex>
 80003be:	4603      	mov	r3, r0
 80003c0:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 80003c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003c6:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);// ждем пока кто-то не ответит но не больше паузы
 80003c8:	bf00      	nop
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <owEchoRead+0x48>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	461a      	mov	r2, r3
 80003d2:	797b      	ldrb	r3, [r7, #5]
 80003d4:	fa42 f303 	asr.w	r3, r2, r3
 80003d8:	f003 0301 	and.w	r3, r3, #1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d004      	beq.n	80003ea <owEchoRead+0x36>
 80003e0:	88fb      	ldrh	r3, [r7, #6]
 80003e2:	1e5a      	subs	r2, r3, #1
 80003e4:	80fa      	strh	r2, [r7, #6]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1ef      	bne.n	80003ca <owEchoRead+0x16>
  return rc_buffer[i];//в зависимости от используемого номера UART 
 80003ea:	797b      	ldrb	r3, [r7, #5]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <owEchoRead+0x4c>)
 80003ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003f2:	b29b      	uxth	r3, r3
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	200000a8 	.word	0x200000a8
 8000400:	200000ac 	.word	0x200000ac

08000404 <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {//разлагаем 1 байт на 8 байт ,кодируем так скасказать в посылку для 1wire
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	6039      	str	r1, [r7, #0]
 800040e:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 8000410:	2300      	movs	r3, #0
 8000412:	73fb      	strb	r3, [r7, #15]
 8000414:	e014      	b.n	8000440 <byteToBits+0x3c>
    if (ow_byte & 0x01) {//если текущий бит в байте ==1 то
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	f003 0301 	and.w	r3, r3, #1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d003      	beq.n	8000428 <byteToBits+0x24>
      *bits = WIRE_1; //заменяем на число которое при передаче по USART для 1wire будет единцией t.e 0xFF
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	22ff      	movs	r2, #255	; 0xff
 8000424:	701a      	strb	r2, [r3, #0]
 8000426:	e002      	b.n	800042e <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;// тоже самое только для 0
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	3301      	adds	r3, #1
 8000432:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1; //сдвигаем обработанный бит
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	085b      	lsrs	r3, r3, #1
 8000438:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	3301      	adds	r3, #1
 800043e:	73fb      	strb	r3, [r7, #15]
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	2b07      	cmp	r3, #7
 8000444:	d9e7      	bls.n	8000416 <byteToBits+0x12>
  }
  return bits; //возвращае массив для передачи 
 8000446:	683b      	ldr	r3, [r7, #0]
}
 8000448:	4618      	mov	r0, r3
 800044a:	3714      	adds	r7, #20
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <owSendByte>:
/**
 * Метод пересылает последовательно 8 байт по одному на каждый бит в data
 * @param usart -- выбранный для эмуляции 1wire UART
 * @param d -- данные
 */
void owSendByte(uint8_t d) {
 8000452:	b580      	push	{r7, lr}
 8000454:	b086      	sub	sp, #24
 8000456:	af00      	add	r7, sp, #0
 8000458:	4603      	mov	r3, r0
 800045a:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);//преобразовываем байт в биты "массив байт для  передачи UART и эмуляции 1WIRE"
 800045c:	f107 020c 	add.w	r2, r7, #12
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	4611      	mov	r1, r2
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff ffcd 	bl	8000404 <byteToBits>
  for (i = 0; i < 8; ++i) {
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	e00b      	b.n	8000488 <owSendByte+0x36>
    owSend(data[i]);
 8000470:	f107 020c 	add.w	r2, r7, #12
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	4413      	add	r3, r2
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	b29b      	uxth	r3, r3
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff5b 	bl	8000338 <owSend>
  for (i = 0; i < 8; ++i) {
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	3301      	adds	r3, #1
 8000486:	617b      	str	r3, [r7, #20]
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	2b07      	cmp	r3, #7
 800048c:	ddf0      	ble.n	8000470 <owSendByte+0x1e>
  }
}
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	3718      	adds	r7, #24
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <owCRC>:
  }
  return target_byte; //возвращаем полученный байт
}

/* Подсчет CRC8 массива mas длиной Len */
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	460b      	mov	r3, r1
 80004a2:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	733b      	strb	r3, [r7, #12]
  crc = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 80004ac:	7b3b      	ldrb	r3, [r7, #12]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 80004b6:	2300      	movs	r3, #0
 80004b8:	73fb      	strb	r3, [r7, #15]
 80004ba:	e018      	b.n	80004ee <owCRC+0x56>
      fb = crc ^ dat;
 80004bc:	7b7a      	ldrb	r2, [r7, #13]
 80004be:	7bbb      	ldrb	r3, [r7, #14]
 80004c0:	4053      	eors	r3, r2
 80004c2:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 80004c4:	7afb      	ldrb	r3, [r7, #11]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 80004cc:	7b7b      	ldrb	r3, [r7, #13]
 80004ce:	085b      	lsrs	r3, r3, #1
 80004d0:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 80004d2:	7bbb      	ldrb	r3, [r7, #14]
 80004d4:	085b      	lsrs	r3, r3, #1
 80004d6:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c; // полином
 80004d8:	7afb      	ldrb	r3, [r7, #11]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d104      	bne.n	80004e8 <owCRC+0x50>
 80004de:	7b7b      	ldrb	r3, [r7, #13]
 80004e0:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80004e4:	43db      	mvns	r3, r3
 80004e6:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	3301      	adds	r3, #1
 80004ec:	73fb      	strb	r3, [r7, #15]
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	2b07      	cmp	r3, #7
 80004f2:	d9e3      	bls.n	80004bc <owCRC+0x24>
    }
    st_byt++;
 80004f4:	7b3b      	ldrb	r3, [r7, #12]
 80004f6:	3301      	adds	r3, #1
 80004f8:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len); // счетчик байтов в массиве
 80004fa:	7b3a      	ldrb	r2, [r7, #12]
 80004fc:	78fb      	ldrb	r3, [r7, #3]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d3d4      	bcc.n	80004ac <owCRC+0x14>
  return crc;
 8000502:	7b7b      	ldrb	r3, [r7, #13]
}
 8000504:	4618      	mov	r0, r3
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr

0800050e <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);                        
 8000516:	2107      	movs	r1, #7
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f7ff ffbd 	bl	8000498 <owCRC>
 800051e:	4603      	mov	r3, r0
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <hasNextRom>:
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 * переделать на функции обратного вызова для реакции на ошибки
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {//
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 8000536:	f04f 33ff 	mov.w	r3, #4294967295
 800053a:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) { //есть ли кто на шине
 8000540:	f7ff fedc 	bl	80002fc <owResetCmd>
 8000544:	4603      	mov	r3, r0
 8000546:	2bf0      	cmp	r3, #240	; 0xf0
 8000548:	d101      	bne.n	800054e <hasNextRom+0x26>
    return 0;
 800054a:	2300      	movs	r3, #0
 800054c:	e097      	b.n	800067e <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);//
 800054e:	20f0      	movs	r0, #240	; 0xf0
 8000550:	f7ff ff7f 	bl	8000452 <owSendByte>
  do {
		uint8_t answerBit =0;
 8000554:	2300      	movs	r3, #0
 8000556:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 8000558:	7ffb      	ldrb	r3, [r7, #31]
 800055a:	08db      	lsrs	r3, r3, #3
 800055c:	b2db      	uxtb	r3, r3
 800055e:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	4413      	add	r3, r2
 8000566:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ); // чтение прямого бита
 800056c:	20ff      	movs	r0, #255	; 0xff
 800056e:	f7ff fee3 	bl	8000338 <owSend>
    cB = owReadSlot(owEchoRead());//ответ от датчика
 8000572:	f7ff ff1f 	bl	80003b4 <owEchoRead>
 8000576:	4603      	mov	r3, r0
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff ff0b 	bl	8000394 <owReadSlot>
 800057e:	4603      	mov	r3, r0
 8000580:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ); // чтение инверсного бита
 8000582:	20ff      	movs	r0, #255	; 0xff
 8000584:	f7ff fed8 	bl	8000338 <owSend>
    cmp_cB = owReadSlot(owEchoRead());//ответ от датчика
 8000588:	f7ff ff14 	bl	80003b4 <owEchoRead>
 800058c:	4603      	mov	r3, r0
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff00 	bl	8000394 <owReadSlot>
 8000594:	4603      	mov	r3, r0
 8000596:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)//сравниваем два ответа
 8000598:	7afa      	ldrb	r2, [r7, #11]
 800059a:	7abb      	ldrb	r3, [r7, #10]
 800059c:	429a      	cmp	r2, r3
 800059e:	d105      	bne.n	80005ac <hasNextRom+0x84>
 80005a0:	7afb      	ldrb	r3, [r7, #11]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d102      	bne.n	80005ac <hasNextRom+0x84>
      return -1;//ошибка никто не ответил 
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	e068      	b.n	800067e <hasNextRom+0x156>
    if (cB != cmp_cB) { //нормальная ситуация пришло либо 10 либо 01
 80005ac:	7afa      	ldrb	r2, [r7, #11]
 80005ae:	7abb      	ldrb	r3, [r7, #10]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d002      	beq.n	80005ba <hasNextRom+0x92>
      searchDirection = cB;//выбираем в каком направлении будем двигатся дальше
 80005b4:	7afb      	ldrb	r3, [r7, #11]
 80005b6:	75bb      	strb	r3, [r7, #22]
 80005b8:	e023      	b.n	8000602 <hasNextRom+0xda>
			} else {//колизия пришло 00 т.е текущий бит у ROM-ов разный
				if (ui32BitNumber == ow->lastDiscrepancy)//если текущая позиция колизии равна прошлой
 80005ba:	7ffa      	ldrb	r2, [r7, #31]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	691b      	ldr	r3, [r3, #16]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d102      	bne.n	80005ca <hasNextRom+0xa2>
        searchDirection = 1;//выбираем в каком направлении будем двигатся дальше
 80005c4:	2301      	movs	r3, #1
 80005c6:	75bb      	strb	r3, [r7, #22]
 80005c8:	e01b      	b.n	8000602 <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {//если мы зашили дальше
 80005ca:	7ffa      	ldrb	r2, [r7, #31]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	691b      	ldr	r3, [r3, #16]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dd02      	ble.n	80005da <hasNextRom+0xb2>
          searchDirection = 0;//выбираем в каком направлении будем двигатся дальше 
 80005d4:	2300      	movs	r3, #0
 80005d6:	75bb      	strb	r3, [r7, #22]
 80005d8:	e00e      	b.n	80005f8 <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	4413      	add	r3, r2
 80005e0:	3314      	adds	r3, #20
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	7ffb      	ldrb	r3, [r7, #31]
 80005e8:	f003 0307 	and.w	r3, r3, #7
 80005ec:	fa42 f303 	asr.w	r3, r2, r3
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 80005f8:	7dbb      	ldrb	r3, [r7, #22]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d101      	bne.n	8000602 <hasNextRom+0xda>
          zeroFork = ui32BitNumber;//запоминаем развилку
 80005fe:	7ffb      	ldrb	r3, [r7, #31]
 8000600:	61bb      	str	r3, [r7, #24]
      }
    }
    // сохраняем бит
    if (searchDirection)
 8000602:	7dbb      	ldrb	r3, [r7, #22]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d00e      	beq.n	8000626 <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;//выставляем бит в текущем байте байте
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b25a      	sxtb	r2, r3
 800060e:	7ffb      	ldrb	r3, [r7, #31]
 8000610:	f003 0307 	and.w	r3, r3, #7
 8000614:	2101      	movs	r1, #1
 8000616:	fa01 f303 	lsl.w	r3, r1, r3
 800061a:	b25b      	sxtb	r3, r3
 800061c:	4313      	orrs	r3, r2
 800061e:	b25b      	sxtb	r3, r3
 8000620:	b2da      	uxtb	r2, r3
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);// решаем кого отключить
 8000626:	7dbb      	ldrb	r3, [r7, #22]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d101      	bne.n	8000630 <hasNextRom+0x108>
 800062c:	2300      	movs	r3, #0
 800062e:	e000      	b.n	8000632 <hasNextRom+0x10a>
 8000630:	23ff      	movs	r3, #255	; 0xff
 8000632:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);//вырубаем "мешающие" устройсва
 8000634:	7d7b      	ldrb	r3, [r7, #21]
 8000636:	b29b      	uxth	r3, r3
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fe7d 	bl	8000338 <owSend>
    ui32BitNumber++;//ищем следующий бит
 800063e:	7ffb      	ldrb	r3, [r7, #31]
 8000640:	3301      	adds	r3, #1
 8000642:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);//пока не найден весь ROM все биты
 8000644:	7ffb      	ldrb	r3, [r7, #31]
 8000646:	2b3f      	cmp	r3, #63	; 0x3f
 8000648:	d984      	bls.n	8000554 <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;//запоминаем развилку
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	69ba      	ldr	r2, [r7, #24]
 800064e:	611a      	str	r2, [r3, #16]
  for (; i < 7; i++)
 8000650:	e00b      	b.n	800066a <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];//запоминаем последний ROM
 8000652:	7dfb      	ldrb	r3, [r7, #23]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	441a      	add	r2, r3
 8000658:	7dfb      	ldrb	r3, [r7, #23]
 800065a:	7811      	ldrb	r1, [r2, #0]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	460a      	mov	r2, r1
 8000662:	751a      	strb	r2, [r3, #20]
  for (; i < 7; i++)
 8000664:	7dfb      	ldrb	r3, [r7, #23]
 8000666:	3301      	adds	r3, #1
 8000668:	75fb      	strb	r3, [r7, #23]
 800066a:	7dfb      	ldrb	r3, [r7, #23]
 800066c:	2b06      	cmp	r3, #6
 800066e:	d9f0      	bls.n	8000652 <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	691b      	ldr	r3, [r3, #16]
 8000674:	2b00      	cmp	r3, #0
 8000676:	bfcc      	ite	gt
 8000678:	2301      	movgt	r3, #1
 800067a:	2300      	movle	r3, #0
 800067c:	b2db      	uxtb	r3, r3
}
 800067e:	4618      	mov	r0, r3
 8000680:	3720      	adds	r7, #32
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <owSearchCmd>:

// Возвращает количество устройств на шине или код ошибки, если значение меньше 0
int owSearchCmd(OneWire *ow) {
 8000686:	b580      	push	{r7, lr}
 8000688:	b084      	sub	sp, #16
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff fdba 	bl	800020c <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //передаем указатель на структуру куда положить след.ROM
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	4619      	mov	r1, r3
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff ff40 	bl	8000528 <hasNextRom>
 80006a8:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	da02      	bge.n	80006b6 <owSearchCmd+0x30>
      return -1;
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	e009      	b.n	80006ca <owSearchCmd+0x44>
    device++;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//ищем пока кто-то есть и этих кто-то не больше дефайна
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d002      	beq.n	80006c8 <owSearchCmd+0x42>
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	dde7      	ble.n	8000698 <owSearchCmd+0x12>
		return device;//возвращаем порядковый номер датчика (устройства) на шине
 80006c8:	68fb      	ldr	r3, [r7, #12]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <get_ROMid>:
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}


int get_ROMid (void){
 80006d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {    // is anybody on the bus?
 80006da:	f7ff fe0f 	bl	80002fc <owResetCmd>
 80006de:	4603      	mov	r3, r0
 80006e0:	2bf0      	cmp	r3, #240	; 0xf0
 80006e2:	d079      	beq.n	80007d8 <get_ROMid+0x104>
		devices = owSearchCmd(&ow);        // получить ROMid в�?ех у�?трой�?т на шине или вернуть код ошибки
 80006e4:	484e      	ldr	r0, [pc, #312]	; (8000820 <get_ROMid+0x14c>)
 80006e6:	f7ff ffce 	bl	8000686 <owSearchCmd>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b4d      	ldr	r3, [pc, #308]	; (8000824 <get_ROMid+0x150>)
 80006f0:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 80006f2:	4b4c      	ldr	r3, [pc, #304]	; (8000824 <get_ROMid+0x150>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d113      	bne.n	8000722 <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 80006fa:	4b4b      	ldr	r3, [pc, #300]	; (8000828 <get_ROMid+0x154>)
 80006fc:	4a4b      	ldr	r2, [pc, #300]	; (800082c <get_ROMid+0x158>)
 80006fe:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 8000700:	4b4b      	ldr	r3, [pc, #300]	; (8000830 <get_ROMid+0x15c>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	e005      	b.n	8000714 <get_ROMid+0x40>
					__asm__("nop");
 8000708:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 800070a:	4b49      	ldr	r3, [pc, #292]	; (8000830 <get_ROMid+0x15c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	4a47      	ldr	r2, [pc, #284]	; (8000830 <get_ROMid+0x15c>)
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b46      	ldr	r3, [pc, #280]	; (8000830 <get_ROMid+0x15c>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b43      	ldr	r3, [pc, #268]	; (8000828 <get_ROMid+0x154>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	429a      	cmp	r2, r3
 800071e:	d3f3      	bcc.n	8000708 <get_ROMid+0x34>
				pDelay = 1000000;
 8000720:	e7eb      	b.n	80006fa <get_ROMid+0x26>
			}

		}
		i = 0;
 8000722:	4b43      	ldr	r3, [pc, #268]	; (8000830 <get_ROMid+0x15c>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 8000728:	e04f      	b.n	80007ca <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 800072a:	4b41      	ldr	r3, [pc, #260]	; (8000830 <get_ROMid+0x15c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	00db      	lsls	r3, r3, #3
 8000730:	4a3b      	ldr	r2, [pc, #236]	; (8000820 <get_ROMid+0x14c>)
 8000732:	4413      	add	r3, r2
 8000734:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff fee9 	bl	800050e <owCRC8>
 800073c:	4603      	mov	r3, r0
 800073e:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	79db      	ldrb	r3, [r3, #7]
 8000744:	78fa      	ldrb	r2, [r7, #3]
 8000746:	429a      	cmp	r2, r3
 8000748:	d101      	bne.n	800074e <get_ROMid+0x7a>
 800074a:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <get_ROMid+0x160>)
 800074c:	e000      	b.n	8000750 <get_ROMid+0x7c>
 800074e:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <get_ROMid+0x164>)
 8000750:	4a3a      	ldr	r2, [pc, #232]	; (800083c <get_ROMid+0x168>)
 8000752:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 8000754:	4b36      	ldr	r3, [pc, #216]	; (8000830 <get_ROMid+0x15c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b39      	ldr	r3, [pc, #228]	; (8000840 <get_ROMid+0x16c>)
 800075c:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	461e      	mov	r6, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	799b      	ldrb	r3, [r3, #6]
 8000768:	469c      	mov	ip, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	795b      	ldrb	r3, [r3, #5]
 800076e:	461a      	mov	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800077a:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8000780:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8000786:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800078c:	9305      	str	r3, [sp, #20]
 800078e:	9504      	str	r5, [sp, #16]
 8000790:	9403      	str	r4, [sp, #12]
 8000792:	9002      	str	r0, [sp, #8]
 8000794:	9101      	str	r1, [sp, #4]
 8000796:	9200      	str	r2, [sp, #0]
 8000798:	4663      	mov	r3, ip
 800079a:	4632      	mov	r2, r6
 800079c:	4929      	ldr	r1, [pc, #164]	; (8000844 <get_ROMid+0x170>)
 800079e:	482a      	ldr	r0, [pc, #168]	; (8000848 <get_ROMid+0x174>)
 80007a0:	f005 ffec 	bl	800677c <siprintf>

			if (crc != r->crc) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	79db      	ldrb	r3, [r3, #7]
 80007a8:	78fa      	ldrb	r2, [r7, #3]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d008      	beq.n	80007c0 <get_ROMid+0xec>
				devInfo.device = i;
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <get_ROMid+0x15c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	461a      	mov	r2, r3
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <get_ROMid+0x16c>)
 80007b6:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 80007b8:	4924      	ldr	r1, [pc, #144]	; (800084c <get_ROMid+0x178>)
 80007ba:	4823      	ldr	r0, [pc, #140]	; (8000848 <get_ROMid+0x174>)
 80007bc:	f005 ffde 	bl	800677c <siprintf>
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <get_ROMid+0x15c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	4a1a      	ldr	r2, [pc, #104]	; (8000830 <get_ROMid+0x15c>)
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <get_ROMid+0x150>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <get_ROMid+0x15c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d8a8      	bhi.n	800072a <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <get_ROMid+0x154>)
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <get_ROMid+0x158>)
 80007dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <get_ROMid+0x15c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	e005      	b.n	80007f2 <get_ROMid+0x11e>
		__asm__("nop");
 80007e6:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <get_ROMid+0x15c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	3301      	adds	r3, #1
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <get_ROMid+0x15c>)
 80007f0:	6013      	str	r3, [r2, #0]
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <get_ROMid+0x15c>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <get_ROMid+0x154>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d3f3      	bcc.n	80007e6 <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <get_ROMid+0x168>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	490c      	ldr	r1, [pc, #48]	; (8000834 <get_ROMid+0x160>)
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fca3 	bl	8000150 <strcmp>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d101      	bne.n	8000814 <get_ROMid+0x140>
 8000810:	2300      	movs	r3, #0
 8000812:	e001      	b.n	8000818 <get_ROMid+0x144>
	else return -1;
 8000814:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000818:	4618      	mov	r0, r3
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000820:	200000e0 	.word	0x200000e0
 8000824:	200000dc 	.word	0x200000dc
 8000828:	20000000 	.word	0x20000000
 800082c:	000f4240 	.word	0x000f4240
 8000830:	200000fc 	.word	0x200000fc
 8000834:	08006f20 	.word	0x08006f20
 8000838:	08006f28 	.word	0x08006f28
 800083c:	20000100 	.word	0x20000100
 8000840:	200000b8 	.word	0x200000b8
 8000844:	08006f34 	.word	0x08006f34
 8000848:	200000bc 	.word	0x200000bc
 800084c:	08006f5c 	.word	0x08006f5c

08000850 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800085a:	4a38      	ldr	r2, [pc, #224]	; (800093c <HD44780_Init+0xec>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000860:	4b37      	ldr	r3, [pc, #220]	; (8000940 <HD44780_Init+0xf0>)
 8000862:	2208      	movs	r2, #8
 8000864:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000866:	4b37      	ldr	r3, [pc, #220]	; (8000944 <HD44780_Init+0xf4>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800086c:	4b33      	ldr	r3, [pc, #204]	; (800093c <HD44780_Init+0xec>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d907      	bls.n	8000884 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000874:	4b33      	ldr	r3, [pc, #204]	; (8000944 <HD44780_Init+0xf4>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b31      	ldr	r3, [pc, #196]	; (8000944 <HD44780_Init+0xf4>)
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	e006      	b.n	8000892 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000884:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <HD44780_Init+0xf4>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <HD44780_Init+0xf4>)
 8000890:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000892:	f000 f9c5 	bl	8000c20 <DelayInit>
  HAL_Delay(50);
 8000896:	2032      	movs	r0, #50	; 0x32
 8000898:	f000 fed0 	bl	800163c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800089c:	4b28      	ldr	r3, [pc, #160]	; (8000940 <HD44780_Init+0xf0>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f983 	bl	8000bac <ExpanderWrite>
  HAL_Delay(1000);
 80008a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008aa:	f000 fec7 	bl	800163c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80008ae:	2030      	movs	r0, #48	; 0x30
 80008b0:	f000 f96b 	bl	8000b8a <Write4Bits>
  DelayUS(4500);
 80008b4:	f241 1094 	movw	r0, #4500	; 0x1194
 80008b8:	f000 f9da 	bl	8000c70 <DelayUS>

  Write4Bits(0x03 << 4);
 80008bc:	2030      	movs	r0, #48	; 0x30
 80008be:	f000 f964 	bl	8000b8a <Write4Bits>
  DelayUS(4500);
 80008c2:	f241 1094 	movw	r0, #4500	; 0x1194
 80008c6:	f000 f9d3 	bl	8000c70 <DelayUS>

  Write4Bits(0x03 << 4);
 80008ca:	2030      	movs	r0, #48	; 0x30
 80008cc:	f000 f95d 	bl	8000b8a <Write4Bits>
  DelayUS(4500);
 80008d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80008d4:	f000 f9cc 	bl	8000c70 <DelayUS>

  Write4Bits(0x02 << 4);
 80008d8:	2020      	movs	r0, #32
 80008da:	f000 f956 	bl	8000b8a <Write4Bits>
  DelayUS(100);
 80008de:	2064      	movs	r0, #100	; 0x64
 80008e0:	f000 f9c6 	bl	8000c70 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <HD44780_Init+0xf4>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	f043 0320 	orr.w	r3, r3, #32
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f90e 	bl	8000b10 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <HD44780_Init+0xf8>)
 80008f6:	2204      	movs	r2, #4
 80008f8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80008fa:	f000 f875 	bl	80009e8 <HD44780_Display>
  HD44780_Clear();
 80008fe:	f000 f82b 	bl	8000958 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <HD44780_Init+0xfc>)
 8000904:	2202      	movs	r2, #2
 8000906:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <HD44780_Init+0xfc>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	b2db      	uxtb	r3, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f8fc 	bl	8000b10 <SendCommand>
  DelayUS(4500);
 8000918:	f241 1094 	movw	r0, #4500	; 0x1194
 800091c:	f000 f9a8 	bl	8000c70 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000920:	490b      	ldr	r1, [pc, #44]	; (8000950 <HD44780_Init+0x100>)
 8000922:	2000      	movs	r0, #0
 8000924:	f000 f88c 	bl	8000a40 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000928:	490a      	ldr	r1, [pc, #40]	; (8000954 <HD44780_Init+0x104>)
 800092a:	2001      	movs	r0, #1
 800092c:	f000 f888 	bl	8000a40 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000930:	f000 f81d 	bl	800096e <HD44780_Home>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000107 	.word	0x20000107
 8000940:	20000108 	.word	0x20000108
 8000944:	20000104 	.word	0x20000104
 8000948:	20000105 	.word	0x20000105
 800094c:	20000106 	.word	0x20000106
 8000950:	20000004 	.word	0x20000004
 8000954:	2000000c 	.word	0x2000000c

08000958 <HD44780_Clear>:

void HD44780_Clear()
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800095c:	2001      	movs	r0, #1
 800095e:	f000 f8d7 	bl	8000b10 <SendCommand>
  DelayUS(2000);
 8000962:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000966:	f000 f983 	bl	8000c70 <DelayUS>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}

0800096e <HD44780_Home>:

void HD44780_Home()
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000972:	2002      	movs	r0, #2
 8000974:	f000 f8cc 	bl	8000b10 <SendCommand>
  DelayUS(2000);
 8000978:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800097c:	f000 f978 	bl	8000c70 <DelayUS>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	460a      	mov	r2, r1
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	4613      	mov	r3, r2
 8000992:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HD44780_SetCursor+0x5c>)
 8000996:	f107 0408 	add.w	r4, r7, #8
 800099a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800099c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80009a0:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HD44780_SetCursor+0x60>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	79ba      	ldrb	r2, [r7, #6]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d303      	bcc.n	80009b2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <HD44780_SetCursor+0x60>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80009b2:	79bb      	ldrb	r3, [r7, #6]
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	3318      	adds	r3, #24
 80009b8:	443b      	add	r3, r7
 80009ba:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	4413      	add	r3, r2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 f89d 	bl	8000b10 <SendCommand>
}
 80009d6:	bf00      	nop
 80009d8:	371c      	adds	r7, #28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd90      	pop	{r4, r7, pc}
 80009de:	bf00      	nop
 80009e0:	08006f7c 	.word	0x08006f7c
 80009e4:	20000107 	.word	0x20000107

080009e8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HD44780_Display+0x28>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HD44780_Display+0x28>)
 80009f8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HD44780_Display+0x28>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	f043 0308 	orr.w	r3, r3, #8
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f883 	bl	8000b10 <SendCommand>
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000105 	.word	0x20000105

08000a14 <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HD44780_NoCursor+0x28>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	f023 0302 	bic.w	r3, r3, #2
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HD44780_NoCursor+0x28>)
 8000a24:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HD44780_NoCursor+0x28>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f86d 	bl	8000b10 <SendCommand>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000105 	.word	0x20000105

08000a40 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a5e:	b25b      	sxtb	r3, r3
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f854 	bl	8000b10 <SendCommand>
  for (int i=0; i<8; i++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	e009      	b.n	8000a82 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f858 	bl	8000b2c <SendChar>
  for (int i=0; i<8; i++)
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	2b07      	cmp	r3, #7
 8000a86:	ddf2      	ble.n	8000a6e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000a9a:	e006      	b.n	8000aaa <HD44780_PrintStr+0x18>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f841 	bl	8000b2c <SendChar>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1f4      	bne.n	8000a9c <HD44780_PrintStr+0xa>
}
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <HD44780_SetBacklight>:

void HD44780_SetBacklight(uint8_t new_val)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  if(new_val) HD44780_Backlight();
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d002      	beq.n	8000ad2 <HD44780_SetBacklight+0x16>
 8000acc:	f000 f814 	bl	8000af8 <HD44780_Backlight>
  else HD44780_NoBacklight();
}
 8000ad0:	e001      	b.n	8000ad6 <HD44780_SetBacklight+0x1a>
  else HD44780_NoBacklight();
 8000ad2:	f000 f805 	bl	8000ae0 <HD44780_NoBacklight>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <HD44780_NoBacklight>:

void HD44780_NoBacklight(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <HD44780_NoBacklight+0x14>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000aea:	2000      	movs	r0, #0
 8000aec:	f000 f85e 	bl	8000bac <ExpanderWrite>
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000108 	.word	0x20000108

08000af8 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HD44780_Backlight+0x14>)
 8000afe:	2208      	movs	r2, #8
 8000b00:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 f852 	bl	8000bac <ExpanderWrite>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000108 	.word	0x20000108

08000b10 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f812 	bl	8000b48 <Send>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <SendChar>:

static void SendChar(uint8_t ch)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f804 	bl	8000b48 <Send>
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	4613      	mov	r3, r2
 8000b56:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f023 030f 	bic.w	r3, r3, #15
 8000b5e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	011b      	lsls	r3, r3, #4
 8000b64:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000b66:	7bfa      	ldrb	r2, [r7, #15]
 8000b68:	79bb      	ldrb	r3, [r7, #6]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f80b 	bl	8000b8a <Write4Bits>
  Write4Bits((lownib)|mode);
 8000b74:	7bba      	ldrb	r2, [r7, #14]
 8000b76:	79bb      	ldrb	r3, [r7, #6]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f804 	bl	8000b8a <Write4Bits>
}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f808 	bl	8000bac <ExpanderWrite>
  PulseEnable(value);
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f820 	bl	8000be4 <PulseEnable>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af02      	add	r7, sp, #8
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <ExpanderWrite+0x30>)
 8000bb8:	781a      	ldrb	r2, [r3, #0]
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000bc2:	f107 020f 	add.w	r2, r7, #15
 8000bc6:	230a      	movs	r3, #10
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2301      	movs	r3, #1
 8000bcc:	217e      	movs	r1, #126	; 0x7e
 8000bce:	4804      	ldr	r0, [pc, #16]	; (8000be0 <ExpanderWrite+0x34>)
 8000bd0:	f001 f9e0 	bl	8001f94 <HAL_I2C_Master_Transmit>
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000108 	.word	0x20000108
 8000be0:	2000010c 	.word	0x2000010c

08000be4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ffd8 	bl	8000bac <ExpanderWrite>
  DelayUS(20);
 8000bfc:	2014      	movs	r0, #20
 8000bfe:	f000 f837 	bl	8000c70 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f023 0304 	bic.w	r3, r3, #4
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ffce 	bl	8000bac <ExpanderWrite>
  DelayUS(20);
 8000c10:	2014      	movs	r0, #20
 8000c12:	f000 f82d 	bl	8000c70 <DelayUS>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <DelayInit>:

static void DelayInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <DelayInit+0x48>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <DelayInit+0x48>)
 8000c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c2e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <DelayInit+0x48>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	4a0c      	ldr	r2, [pc, #48]	; (8000c68 <DelayInit+0x48>)
 8000c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c3a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <DelayInit+0x4c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <DelayInit+0x4c>)
 8000c42:	f023 0301 	bic.w	r3, r3, #1
 8000c46:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <DelayInit+0x4c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <DelayInit+0x4c>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <DelayInit+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000c5a:	bf00      	nop
  __ASM volatile ("NOP");
 8000c5c:	bf00      	nop
  __ASM volatile ("NOP");
 8000c5e:	bf00      	nop
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	e000edf0 	.word	0xe000edf0
 8000c6c:	e0001000 	.word	0xe0001000

08000c70 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000c70:	b480      	push	{r7}
 8000c72:	b087      	sub	sp, #28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <DelayUS+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <DelayUS+0x44>)
 8000c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c82:	0c9a      	lsrs	r2, r3, #18
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	fb02 f303 	mul.w	r3, r2, r3
 8000c8a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <DelayUS+0x48>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <DelayUS+0x48>)
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8f6      	bhi.n	8000c92 <DelayUS+0x22>
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	371c      	adds	r7, #28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	20000014 	.word	0x20000014
 8000cb4:	431bde83 	.word	0x431bde83
 8000cb8:	e0001000 	.word	0xe0001000

08000cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc2:	f000 fc89 	bl	80015d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc6:	f000 f85f 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cca:	f000 f8fb 	bl	8000ec4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cce:	f000 f8a1 	bl	8000e14 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000cd2:	f000 f8cd 	bl	8000e70 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  get_ROMid();
 8000cd6:	f7ff fcfd 	bl	80006d4 <get_ROMid>

  HD44780_Init(2);
 8000cda:	2002      	movs	r0, #2
 8000cdc:	f7ff fdb8 	bl	8000850 <HD44780_Init>
  HD44780_NoCursor();
 8000ce0:	f7ff fe98 	bl	8000a14 <HD44780_NoCursor>
  HD44780_SetBacklight(100);
 8000ce4:	2064      	movs	r0, #100	; 0x64
 8000ce6:	f7ff fee9 	bl	8000abc <HD44780_SetBacklight>
    HD44780_Clear();
 8000cea:	f7ff fe35 	bl	8000958 <HD44780_Clear>

    chequeo_inicio();
 8000cee:	f000 fc31 	bl	8001554 <chequeo_inicio>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cf2:	f002 feed 	bl	8003ad0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cf6:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <main+0xa0>)
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4819      	ldr	r0, [pc, #100]	; (8000d60 <main+0xa4>)
 8000cfc:	f002 ff4e 	bl	8003b9c <osThreadNew>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4a18      	ldr	r2, [pc, #96]	; (8000d64 <main+0xa8>)
 8000d04:	6013      	str	r3, [r2, #0]
  /* add threads, ... */

  //xTaskCreate(Error_Sensores, "Chequeo Error Sensores", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
  //xTaskCreate(Error_Anafe, "Chequeo Error Anafe", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 // xTaskCreate(Tarea_Lectura, "Tarea Lectura Temperatura", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
  xTaskCreate(MdE_Display, "Display", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000d06:	2300      	movs	r3, #0
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	4915      	ldr	r1, [pc, #84]	; (8000d68 <main+0xac>)
 8000d14:	4815      	ldr	r0, [pc, #84]	; (8000d6c <main+0xb0>)
 8000d16:	f003 fe3b 	bl	8004990 <xTaskCreate>
  xTaskCreate(Boton_Ok, "Boton OK", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	2301      	movs	r3, #1
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	4912      	ldr	r1, [pc, #72]	; (8000d70 <main+0xb4>)
 8000d28:	4812      	ldr	r0, [pc, #72]	; (8000d74 <main+0xb8>)
 8000d2a:	f003 fe31 	bl	8004990 <xTaskCreate>
  xTaskCreate(Boton_Sel, "Boton Sel", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000d2e:	2300      	movs	r3, #0
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	2301      	movs	r3, #1
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2300      	movs	r3, #0
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	490f      	ldr	r1, [pc, #60]	; (8000d78 <main+0xbc>)
 8000d3c:	480f      	ldr	r0, [pc, #60]	; (8000d7c <main+0xc0>)
 8000d3e:	f003 fe27 	bl	8004990 <xTaskCreate>
  xTaskCreate(Boton_Cancel, "Boton Cancel", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000d42:	2300      	movs	r3, #0
 8000d44:	9301      	str	r3, [sp, #4]
 8000d46:	2301      	movs	r3, #1
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	490c      	ldr	r1, [pc, #48]	; (8000d80 <main+0xc4>)
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <main+0xc8>)
 8000d52:	f003 fe1d 	bl	8004990 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d56:	f002 feed 	bl	8003b34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <main+0x9e>
 8000d5c:	08007098 	.word	0x08007098
 8000d60:	08000f91 	.word	0x08000f91
 8000d64:	200001a4 	.word	0x200001a4
 8000d68:	08006f98 	.word	0x08006f98
 8000d6c:	08001345 	.word	0x08001345
 8000d70:	08006fa0 	.word	0x08006fa0
 8000d74:	080012cd 	.word	0x080012cd
 8000d78:	08006fac 	.word	0x08006fac
 8000d7c:	0800131d 	.word	0x0800131d
 8000d80:	08006fb8 	.word	0x08006fb8
 8000d84:	080012f5 	.word	0x080012f5

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b090      	sub	sp, #64	; 0x40
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0318 	add.w	r3, r7, #24
 8000d92:	2228      	movs	r2, #40	; 0x28
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f005 fbda 	bl	8006550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000daa:	2301      	movs	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dc6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fbe5 	bl	80025a0 <HAL_RCC_OscConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ddc:	f000 f8f2 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de0:	230f      	movs	r3, #15
 8000de2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	2302      	movs	r3, #2
 8000de6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2102      	movs	r1, #2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fe52 	bl	8002aa4 <HAL_RCC_ClockConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e06:	f000 f8dd 	bl	8000fc4 <Error_Handler>
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3740      	adds	r7, #64	; 0x40
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e1a:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <MX_I2C1_Init+0x54>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e20:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <MX_I2C1_Init+0x58>)
 8000e22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_I2C1_Init+0x50>)
 8000e52:	f000 ff5b 	bl	8001d0c <HAL_I2C_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e5c:	f000 f8b2 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2000010c 	.word	0x2000010c
 8000e68:	40005400 	.word	0x40005400
 8000e6c:	000186a0 	.word	0x000186a0

08000e70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <MX_USART1_UART_Init+0x50>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000ea8:	f002 fa0e 	bl	80032c8 <HAL_HalfDuplex_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eb2:	f000 f887 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000160 	.word	0x20000160
 8000ec0:	40013800 	.word	0x40013800

08000ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed8:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <MX_GPIO_Init+0xc0>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a29      	ldr	r2, [pc, #164]	; (8000f84 <MX_GPIO_Init+0xc0>)
 8000ede:	f043 0320 	orr.w	r3, r3, #32
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <MX_GPIO_Init+0xc0>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0320 	and.w	r3, r3, #32
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef0:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <MX_GPIO_Init+0xc0>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a23      	ldr	r2, [pc, #140]	; (8000f84 <MX_GPIO_Init+0xc0>)
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <MX_GPIO_Init+0xc0>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <MX_GPIO_Init+0xc0>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <MX_GPIO_Init+0xc0>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_GPIO_Init+0xc0>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_VERDE_Pin|LED_ROJO_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000f26:	4818      	ldr	r0, [pc, #96]	; (8000f88 <MX_GPIO_Init+0xc4>)
 8000f28:	f000 fed7 	bl	8001cda <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_VERDE_Pin LED_ROJO_Pin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin|LED_ROJO_Pin;
 8000f2c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000f30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	4619      	mov	r1, r3
 8000f44:	4810      	ldr	r0, [pc, #64]	; (8000f88 <MX_GPIO_Init+0xc4>)
 8000f46:	f000 fd2d 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTON_OK_Pin */
  GPIO_InitStruct.Pin = BOTON_OK_Pin;
 8000f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOTON_OK_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480b      	ldr	r0, [pc, #44]	; (8000f8c <MX_GPIO_Init+0xc8>)
 8000f60:	f000 fd20 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON2_Pin BOTON1_Pin */
  GPIO_InitStruct.Pin = BOTON2_Pin|BOTON1_Pin;
 8000f64:	2318      	movs	r3, #24
 8000f66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4619      	mov	r1, r3
 8000f76:	4804      	ldr	r0, [pc, #16]	; (8000f88 <MX_GPIO_Init+0xc4>)
 8000f78:	f000 fd14 	bl	80019a4 <HAL_GPIO_Init>

}
 8000f7c:	bf00      	nop
 8000f7e:	3720      	adds	r7, #32
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010c00 	.word	0x40010c00
 8000f8c:	40010800 	.word	0x40010800

08000f90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f002 fea9 	bl	8003cf0 <osDelay>
 8000f9e:	e7fb      	b.n	8000f98 <StartDefaultTask+0x8>

08000fa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d101      	bne.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fb2:	f000 fb27 	bl	8001604 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40000800 	.word	0x40000800

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <Error_Handler+0x8>
	...

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_MspInit+0x68>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <HAL_MspInit+0x68>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6193      	str	r3, [r2, #24]
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_MspInit+0x68>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_MspInit+0x68>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	4a11      	ldr	r2, [pc, #68]	; (8001038 <HAL_MspInit+0x68>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	61d3      	str	r3, [r2, #28]
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_MspInit+0x68>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	210f      	movs	r1, #15
 800100a:	f06f 0001 	mvn.w	r0, #1
 800100e:	f000 fbee 	bl	80017ee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_MspInit+0x6c>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_MspInit+0x6c>)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000
 800103c:	40010000 	.word	0x40010000

08001040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <HAL_I2C_MspInit+0x70>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d123      	bne.n	80010a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_I2C_MspInit+0x74>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <HAL_I2C_MspInit+0x74>)
 8001066:	f043 0308 	orr.w	r3, r3, #8
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_I2C_MspInit+0x74>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0308 	and.w	r3, r3, #8
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001078:	23c0      	movs	r3, #192	; 0xc0
 800107a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107c:	2312      	movs	r3, #18
 800107e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	4619      	mov	r1, r3
 800108a:	480b      	ldr	r0, [pc, #44]	; (80010b8 <HAL_I2C_MspInit+0x78>)
 800108c:	f000 fc8a 	bl	80019a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_I2C_MspInit+0x74>)
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_I2C_MspInit+0x74>)
 8001096:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800109a:	61d3      	str	r3, [r2, #28]
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_I2C_MspInit+0x74>)
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010a8:	bf00      	nop
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40005400 	.word	0x40005400
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010c00 	.word	0x40010c00

080010bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a1a      	ldr	r2, [pc, #104]	; (8001140 <HAL_UART_MspInit+0x84>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d12c      	bne.n	8001136 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_UART_MspInit+0x88>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a18      	ldr	r2, [pc, #96]	; (8001144 <HAL_UART_MspInit+0x88>)
 80010e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <HAL_UART_MspInit+0x88>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <HAL_UART_MspInit+0x88>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <HAL_UART_MspInit+0x88>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <HAL_UART_MspInit+0x88>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800110c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001110:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001112:	2312      	movs	r3, #18
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4619      	mov	r1, r3
 8001120:	4809      	ldr	r0, [pc, #36]	; (8001148 <HAL_UART_MspInit+0x8c>)
 8001122:	f000 fc3f 	bl	80019a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2105      	movs	r1, #5
 800112a:	2025      	movs	r0, #37	; 0x25
 800112c:	f000 fb5f 	bl	80017ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001130:	2025      	movs	r0, #37	; 0x25
 8001132:	f000 fb78 	bl	8001826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40013800 	.word	0x40013800
 8001144:	40021000 	.word	0x40021000
 8001148:	40010800 	.word	0x40010800

0800114c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08c      	sub	sp, #48	; 0x30
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800115c:	2200      	movs	r2, #0
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	201e      	movs	r0, #30
 8001162:	f000 fb44 	bl	80017ee <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001166:	201e      	movs	r0, #30
 8001168:	f000 fb5d 	bl	8001826 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <HAL_InitTick+0xa0>)
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <HAL_InitTick+0xa0>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	61d3      	str	r3, [r2, #28]
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <HAL_InitTick+0xa0>)
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001184:	f107 0210 	add.w	r2, r7, #16
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f001 fe02 	bl	8002d98 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001194:	f001 fdd8 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 8001198:	4603      	mov	r3, r0
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a0:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <HAL_InitTick+0xa4>)
 80011a2:	fba2 2303 	umull	r2, r3, r2, r3
 80011a6:	0c9b      	lsrs	r3, r3, #18
 80011a8:	3b01      	subs	r3, #1
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_InitTick+0xa8>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <HAL_InitTick+0xac>)
 80011b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_InitTick+0xa8>)
 80011b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011b8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <HAL_InitTick+0xa8>)
 80011bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011be:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_InitTick+0xa8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_InitTick+0xa8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80011cc:	4809      	ldr	r0, [pc, #36]	; (80011f4 <HAL_InitTick+0xa8>)
 80011ce:	f001 fe31 	bl	8002e34 <HAL_TIM_Base_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d104      	bne.n	80011e2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80011d8:	4806      	ldr	r0, [pc, #24]	; (80011f4 <HAL_InitTick+0xa8>)
 80011da:	f001 fe83 	bl	8002ee4 <HAL_TIM_Base_Start_IT>
 80011de:	4603      	mov	r3, r0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3730      	adds	r7, #48	; 0x30
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021000 	.word	0x40021000
 80011f0:	431bde83 	.word	0x431bde83
 80011f4:	200001a8 	.word	0x200001a8
 80011f8:	40000800 	.word	0x40000800

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <NMI_Handler+0x4>

08001202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <MemManage_Handler+0x4>

0800120e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <BusFault_Handler+0x4>

08001214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <UsageFault_Handler+0x4>

0800121a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
	...

08001228 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <TIM4_IRQHandler+0x10>)
 800122e:	f001 feab 	bl	8002f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200001a8 	.word	0x200001a8

0800123c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  owReadHandler();
 8001240:	f7ff f81e 	bl	8000280 <owReadHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <USART1_IRQHandler+0x14>)
 8001246:	f002 f895 	bl	8003374 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000160 	.word	0x20000160

08001254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <_sbrk+0x5c>)
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <_sbrk+0x60>)
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d102      	bne.n	8001276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <_sbrk+0x64>)
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <_sbrk+0x68>)
 8001274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <_sbrk+0x64>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	429a      	cmp	r2, r3
 8001282:	d207      	bcs.n	8001294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001284:	f005 f92a 	bl	80064dc <__errno>
 8001288:	4603      	mov	r3, r0
 800128a:	220c      	movs	r2, #12
 800128c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	e009      	b.n	80012a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <_sbrk+0x64>)
 80012a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20005000 	.word	0x20005000
 80012b4:	00000400 	.word	0x00000400
 80012b8:	200001f0 	.word	0x200001f0
 80012bc:	20001c18 	.word	0x20001c18

080012c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <Boton_Ok>:

	vTaskDelete(NULL); // En caso de romperse el loop
}

void Boton_Ok(void *p)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(!HAL_GPIO_ReadPin(BOTON_OK_GPIO_Port,BOTON_OK_Pin))
 80012d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <Boton_Ok+0x20>)
 80012da:	f000 fce7 	bl	8001cac <HAL_GPIO_ReadPin>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f7      	bne.n	80012d4 <Boton_Ok+0x8>
		{
			estado_OK = 1;
 80012e4:	4b02      	ldr	r3, [pc, #8]	; (80012f0 <Boton_Ok+0x24>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
		if(!HAL_GPIO_ReadPin(BOTON_OK_GPIO_Port,BOTON_OK_Pin))
 80012ea:	e7f3      	b.n	80012d4 <Boton_Ok+0x8>
 80012ec:	40010800 	.word	0x40010800
 80012f0:	200001f4 	.word	0x200001f4

080012f4 <Boton_Cancel>:

	vTaskDelete(NULL);
}

void Boton_Cancel(void *p)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(!HAL_GPIO_ReadPin(BOTON1_GPIO_Port,BOTON1_Pin))
 80012fc:	2110      	movs	r1, #16
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <Boton_Cancel+0x20>)
 8001300:	f000 fcd4 	bl	8001cac <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f8      	bne.n	80012fc <Boton_Cancel+0x8>
		{
			estado_Cancel = 1;
 800130a:	4b03      	ldr	r3, [pc, #12]	; (8001318 <Boton_Cancel+0x24>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
		if(!HAL_GPIO_ReadPin(BOTON1_GPIO_Port,BOTON1_Pin))
 8001310:	e7f4      	b.n	80012fc <Boton_Cancel+0x8>
 8001312:	bf00      	nop
 8001314:	40010c00 	.word	0x40010c00
 8001318:	200001f5 	.word	0x200001f5

0800131c <Boton_Sel>:

	vTaskDelete(NULL);
}

void Boton_Sel(void *p)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(!HAL_GPIO_ReadPin(BOTON2_GPIO_Port,BOTON2_Pin))
 8001324:	2108      	movs	r1, #8
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <Boton_Sel+0x20>)
 8001328:	f000 fcc0 	bl	8001cac <HAL_GPIO_ReadPin>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f8      	bne.n	8001324 <Boton_Sel+0x8>
		{
			estado_Sel = 1;
 8001332:	4b03      	ldr	r3, [pc, #12]	; (8001340 <Boton_Sel+0x24>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
		if(!HAL_GPIO_ReadPin(BOTON2_GPIO_Port,BOTON2_Pin))
 8001338:	e7f4      	b.n	8001324 <Boton_Sel+0x8>
 800133a:	bf00      	nop
 800133c:	40010c00 	.word	0x40010c00
 8001340:	200001f6 	.word	0x200001f6

08001344 <MdE_Display>:

	vTaskDelete(NULL);
}

void MdE_Display(void *p)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch(estado_Display)
 800134c:	4b44      	ldr	r3, [pc, #272]	; (8001460 <MdE_Display+0x11c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b04      	cmp	r3, #4
 8001352:	d877      	bhi.n	8001444 <MdE_Display+0x100>
 8001354:	a201      	add	r2, pc, #4	; (adr r2, 800135c <MdE_Display+0x18>)
 8001356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135a:	bf00      	nop
 800135c:	08001371 	.word	0x08001371
 8001360:	08001391 	.word	0x08001391
 8001364:	080013c7 	.word	0x080013c7
 8001368:	08001405 	.word	0x08001405
 800136c:	08001425 	.word	0x08001425
		{
			case INICIANDO:
				if(chequeo_listo)
 8001370:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <MdE_Display+0x120>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d069      	beq.n	800144c <MdE_Display+0x108>
				{
					estado_Display = MENU_PPAL;
 8001378:	4b39      	ldr	r3, [pc, #228]	; (8001460 <MdE_Display+0x11c>)
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
					chequeo_listo = 0;
 800137e:	4b39      	ldr	r3, [pc, #228]	; (8001464 <MdE_Display+0x120>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
					print_Display(estado_Display);
 8001384:	4b36      	ldr	r3, [pc, #216]	; (8001460 <MdE_Display+0x11c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f877 	bl	800147c <print_Display>
				}
				break;
 800138e:	e05d      	b.n	800144c <MdE_Display+0x108>
			case MENU_PPAL:
				if(estado_Sel)
 8001390:	4b35      	ldr	r3, [pc, #212]	; (8001468 <MdE_Display+0x124>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <MdE_Display+0x62>
				{
					cursor?cursor:!cursor;
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <MdE_Display+0x128>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <MdE_Display+0x62>
 80013a0:	4b32      	ldr	r3, [pc, #200]	; (800146c <MdE_Display+0x128>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
				}
				if(estado_OK)
 80013a6:	4b32      	ldr	r3, [pc, #200]	; (8001470 <MdE_Display+0x12c>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d050      	beq.n	8001450 <MdE_Display+0x10c>
				{
					estado_Display = SEGURO;
 80013ae:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <MdE_Display+0x11c>)
 80013b0:	2202      	movs	r2, #2
 80013b2:	701a      	strb	r2, [r3, #0]
					estado_OK = 0;
 80013b4:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <MdE_Display+0x12c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
					print_Display(estado_Display);
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <MdE_Display+0x11c>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f85c 	bl	800147c <print_Display>
				}
				break;
 80013c4:	e044      	b.n	8001450 <MdE_Display+0x10c>
			case SEGURO:
				if(estado_OK)
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <MdE_Display+0x12c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00a      	beq.n	80013e4 <MdE_Display+0xa0>
				{
					estado_Display = PREPARACION;
 80013ce:	4b24      	ldr	r3, [pc, #144]	; (8001460 <MdE_Display+0x11c>)
 80013d0:	2203      	movs	r2, #3
 80013d2:	701a      	strb	r2, [r3, #0]
					estado_OK = 0;
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <MdE_Display+0x12c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
					print_Display(estado_Display);
 80013da:	4b21      	ldr	r3, [pc, #132]	; (8001460 <MdE_Display+0x11c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f84c 	bl	800147c <print_Display>
				}
				if(estado_Cancel)
 80013e4:	4b23      	ldr	r3, [pc, #140]	; (8001474 <MdE_Display+0x130>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d033      	beq.n	8001454 <MdE_Display+0x110>
				{
					estado_Display = MENU_PPAL;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <MdE_Display+0x11c>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
					estado_Cancel = 0;
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <MdE_Display+0x130>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
					print_Display(estado_Display);
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MdE_Display+0x11c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 f83d 	bl	800147c <print_Display>
				}
				break;
 8001402:	e027      	b.n	8001454 <MdE_Display+0x110>
			case PREPARACION:
				if(fin_preparacion)
 8001404:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <MdE_Display+0x134>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d025      	beq.n	8001458 <MdE_Display+0x114>
				{
					estado_Display = FINALIZACION;
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <MdE_Display+0x11c>)
 800140e:	2204      	movs	r2, #4
 8001410:	701a      	strb	r2, [r3, #0]
					fin_preparacion = 0;
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <MdE_Display+0x134>)
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
					print_Display(estado_Display);
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MdE_Display+0x11c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f000 f82d 	bl	800147c <print_Display>
				}
				break;
 8001422:	e019      	b.n	8001458 <MdE_Display+0x114>
			case FINALIZACION:
				if(estado_OK)
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MdE_Display+0x12c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d017      	beq.n	800145c <MdE_Display+0x118>
				{
					estado_Display = MENU_PPAL;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MdE_Display+0x11c>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
					estado_OK = 0;
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MdE_Display+0x12c>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
					print_Display(estado_Display);
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MdE_Display+0x11c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f81d 	bl	800147c <print_Display>
				}
				break;
 8001442:	e00b      	b.n	800145c <MdE_Display+0x118>
			default:
				estado_Display = MENU_PPAL;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MdE_Display+0x11c>)
 8001446:	2201      	movs	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]
				break;
 800144a:	e008      	b.n	800145e <MdE_Display+0x11a>
				break;
 800144c:	bf00      	nop
 800144e:	e77d      	b.n	800134c <MdE_Display+0x8>
				break;
 8001450:	bf00      	nop
 8001452:	e77b      	b.n	800134c <MdE_Display+0x8>
				break;
 8001454:	bf00      	nop
 8001456:	e779      	b.n	800134c <MdE_Display+0x8>
				break;
 8001458:	bf00      	nop
 800145a:	e777      	b.n	800134c <MdE_Display+0x8>
				break;
 800145c:	bf00      	nop
		switch(estado_Display)
 800145e:	e775      	b.n	800134c <MdE_Display+0x8>
 8001460:	200001f9 	.word	0x200001f9
 8001464:	20000018 	.word	0x20000018
 8001468:	200001f6 	.word	0x200001f6
 800146c:	200001f8 	.word	0x200001f8
 8001470:	200001f4 	.word	0x200001f4
 8001474:	200001f5 	.word	0x200001f5
 8001478:	200001f7 	.word	0x200001f7

0800147c <print_Display>:

	vTaskDelete(NULL);
}

void print_Display(uint8_t estado)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	switch (estado)
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d84f      	bhi.n	800152c <print_Display+0xb0>
 800148c:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <print_Display+0x18>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014a5 	.word	0x080014a5
 8001498:	080014c7 	.word	0x080014c7
 800149c:	080014e9 	.word	0x080014e9
 80014a0:	0800150b 	.word	0x0800150b
	{
		case INICIANDO:
			HD44780_Clear();
 80014a4:	f7ff fa58 	bl	8000958 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 80014a8:	2100      	movs	r1, #0
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff fa6a 	bl	8000984 <HD44780_SetCursor>
			HD44780_PrintStr("Iniciando");
 80014b0:	4820      	ldr	r0, [pc, #128]	; (8001534 <print_Display+0xb8>)
 80014b2:	f7ff faee 	bl	8000a92 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 80014b6:	2101      	movs	r1, #1
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff fa63 	bl	8000984 <HD44780_SetCursor>
			HD44780_PrintStr("Aguarde...");
 80014be:	481e      	ldr	r0, [pc, #120]	; (8001538 <print_Display+0xbc>)
 80014c0:	f7ff fae7 	bl	8000a92 <HD44780_PrintStr>
			break;
 80014c4:	e032      	b.n	800152c <print_Display+0xb0>
		case MENU_PPAL:
			HD44780_Clear();
 80014c6:	f7ff fa47 	bl	8000958 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 80014ca:	2100      	movs	r1, #0
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff fa59 	bl	8000984 <HD44780_SetCursor>
			HD44780_PrintStr("Cafe Rapido");
 80014d2:	481a      	ldr	r0, [pc, #104]	; (800153c <print_Display+0xc0>)
 80014d4:	f7ff fadd 	bl	8000a92 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 80014d8:	2101      	movs	r1, #1
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff fa52 	bl	8000984 <HD44780_SetCursor>
			HD44780_PrintStr("Programar Cafe");
 80014e0:	4817      	ldr	r0, [pc, #92]	; (8001540 <print_Display+0xc4>)
 80014e2:	f7ff fad6 	bl	8000a92 <HD44780_PrintStr>
			break;
 80014e6:	e021      	b.n	800152c <print_Display+0xb0>
		case SEGURO:
			HD44780_Clear();
 80014e8:	f7ff fa36 	bl	8000958 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 80014ec:	2100      	movs	r1, #0
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7ff fa48 	bl	8000984 <HD44780_SetCursor>
			HD44780_PrintStr("Esta seguro?");
 80014f4:	4813      	ldr	r0, [pc, #76]	; (8001544 <print_Display+0xc8>)
 80014f6:	f7ff facc 	bl	8000a92 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 80014fa:	2101      	movs	r1, #1
 80014fc:	2000      	movs	r0, #0
 80014fe:	f7ff fa41 	bl	8000984 <HD44780_SetCursor>
			HD44780_PrintStr("OK:SI-CANCEL:NO");
 8001502:	4811      	ldr	r0, [pc, #68]	; (8001548 <print_Display+0xcc>)
 8001504:	f7ff fac5 	bl	8000a92 <HD44780_PrintStr>
			break;
 8001508:	e010      	b.n	800152c <print_Display+0xb0>
		case PREPARACION:
			HD44780_Clear();
 800150a:	f7ff fa25 	bl	8000958 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 800150e:	2100      	movs	r1, #0
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff fa37 	bl	8000984 <HD44780_SetCursor>
			HD44780_PrintStr("Cafe en marcha");
 8001516:	480d      	ldr	r0, [pc, #52]	; (800154c <print_Display+0xd0>)
 8001518:	f7ff fabb 	bl	8000a92 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 800151c:	2101      	movs	r1, #1
 800151e:	2000      	movs	r0, #0
 8001520:	f7ff fa30 	bl	8000984 <HD44780_SetCursor>
			HD44780_PrintStr("Restante: "); // Tiempo restante
 8001524:	480a      	ldr	r0, [pc, #40]	; (8001550 <print_Display+0xd4>)
 8001526:	f7ff fab4 	bl	8000a92 <HD44780_PrintStr>
			break;
 800152a:	bf00      	nop
	}
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	08006fe8 	.word	0x08006fe8
 8001538:	08006ff4 	.word	0x08006ff4
 800153c:	08007000 	.word	0x08007000
 8001540:	0800700c 	.word	0x0800700c
 8001544:	0800701c 	.word	0x0800701c
 8001548:	0800702c 	.word	0x0800702c
 800154c:	0800703c 	.word	0x0800703c
 8001550:	0800704c 	.word	0x0800704c

08001554 <chequeo_inicio>:
	HD44780_NoCursor();
	HD44780_Clear();
}

void chequeo_inicio()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	HD44780_Clear();
 8001558:	f7ff f9fe 	bl	8000958 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 800155c:	2100      	movs	r1, #0
 800155e:	2000      	movs	r0, #0
 8001560:	f7ff fa10 	bl	8000984 <HD44780_SetCursor>
	HD44780_PrintStr("Iniciando");
 8001564:	4807      	ldr	r0, [pc, #28]	; (8001584 <chequeo_inicio+0x30>)
 8001566:	f7ff fa94 	bl	8000a92 <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 800156a:	2101      	movs	r1, #1
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff fa09 	bl	8000984 <HD44780_SetCursor>
	HD44780_PrintStr("Aguarde...");
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <chequeo_inicio+0x34>)
 8001574:	f7ff fa8d 	bl	8000a92 <HD44780_PrintStr>

	HAL_Delay(ONE_SEC);
 8001578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800157c:	f000 f85e 	bl	800163c <HAL_Delay>
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	08007058 	.word	0x08007058
 8001588:	08007064 	.word	0x08007064

0800158c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158e:	490d      	ldr	r1, [pc, #52]	; (80015c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a4:	4c0a      	ldr	r4, [pc, #40]	; (80015d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015b2:	f7ff fe85 	bl	80012c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b6:	f004 ff97 	bl	80064e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ba:	f7ff fb7f 	bl	8000cbc <main>
  bx lr
 80015be:	4770      	bx	lr
  ldr r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80015c8:	08007170 	.word	0x08007170
  ldr r2, =_sbss
 80015cc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80015d0:	20001c18 	.word	0x20001c18

080015d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC1_2_IRQHandler>
	...

080015d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_Init+0x28>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_Init+0x28>)
 80015e2:	f043 0310 	orr.w	r3, r3, #16
 80015e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e8:	2003      	movs	r0, #3
 80015ea:	f000 f8f5 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ee:	200f      	movs	r0, #15
 80015f0:	f7ff fdac 	bl	800114c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f4:	f7ff fcec 	bl	8000fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40022000 	.word	0x40022000

08001604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_IncTick+0x1c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_IncTick+0x20>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a03      	ldr	r2, [pc, #12]	; (8001624 <HAL_IncTick+0x20>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000020 	.word	0x20000020
 8001624:	200001fc 	.word	0x200001fc

08001628 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b02      	ldr	r3, [pc, #8]	; (8001638 <HAL_GetTick+0x10>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	200001fc 	.word	0x200001fc

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff fff0 	bl	8001628 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_Delay+0x44>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001662:	bf00      	nop
 8001664:	f7ff ffe0 	bl	8001628 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000020 	.word	0x20000020

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4906      	ldr	r1, [pc, #24]	; (800171c <__NVIC_EnableIRQ+0x34>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff4f 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001800:	f7ff ff64 	bl	80016cc <__NVIC_GetPriorityGrouping>
 8001804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff ffb2 	bl	8001774 <NVIC_EncodePriority>
 8001810:	4602      	mov	r2, r0
 8001812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff81 	bl	8001720 <__NVIC_SetPriority>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff57 	bl	80016e8 <__NVIC_EnableIRQ>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001854:	2b02      	cmp	r3, #2
 8001856:	d008      	beq.n	800186a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2204      	movs	r2, #4
 800185c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e020      	b.n	80018ac <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 020e 	bic.w	r2, r2, #14
 8001878:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0201 	bic.w	r2, r2, #1
 8001888:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001892:	2101      	movs	r1, #1
 8001894:	fa01 f202 	lsl.w	r2, r1, r2
 8001898:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d005      	beq.n	80018da <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2204      	movs	r2, #4
 80018d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
 80018d8:	e051      	b.n	800197e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 020e 	bic.w	r2, r2, #14
 80018e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0201 	bic.w	r2, r2, #1
 80018f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a22      	ldr	r2, [pc, #136]	; (8001988 <HAL_DMA_Abort_IT+0xd0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d029      	beq.n	8001958 <HAL_DMA_Abort_IT+0xa0>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a20      	ldr	r2, [pc, #128]	; (800198c <HAL_DMA_Abort_IT+0xd4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d022      	beq.n	8001954 <HAL_DMA_Abort_IT+0x9c>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a1f      	ldr	r2, [pc, #124]	; (8001990 <HAL_DMA_Abort_IT+0xd8>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d01a      	beq.n	800194e <HAL_DMA_Abort_IT+0x96>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <HAL_DMA_Abort_IT+0xdc>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d012      	beq.n	8001948 <HAL_DMA_Abort_IT+0x90>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a1c      	ldr	r2, [pc, #112]	; (8001998 <HAL_DMA_Abort_IT+0xe0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d00a      	beq.n	8001942 <HAL_DMA_Abort_IT+0x8a>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1a      	ldr	r2, [pc, #104]	; (800199c <HAL_DMA_Abort_IT+0xe4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d102      	bne.n	800193c <HAL_DMA_Abort_IT+0x84>
 8001936:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800193a:	e00e      	b.n	800195a <HAL_DMA_Abort_IT+0xa2>
 800193c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001940:	e00b      	b.n	800195a <HAL_DMA_Abort_IT+0xa2>
 8001942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001946:	e008      	b.n	800195a <HAL_DMA_Abort_IT+0xa2>
 8001948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194c:	e005      	b.n	800195a <HAL_DMA_Abort_IT+0xa2>
 800194e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001952:	e002      	b.n	800195a <HAL_DMA_Abort_IT+0xa2>
 8001954:	2310      	movs	r3, #16
 8001956:	e000      	b.n	800195a <HAL_DMA_Abort_IT+0xa2>
 8001958:	2301      	movs	r3, #1
 800195a:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <HAL_DMA_Abort_IT+0xe8>)
 800195c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	4798      	blx	r3
    } 
  }
  return status;
 800197e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40020008 	.word	0x40020008
 800198c:	4002001c 	.word	0x4002001c
 8001990:	40020030 	.word	0x40020030
 8001994:	40020044 	.word	0x40020044
 8001998:	40020058 	.word	0x40020058
 800199c:	4002006c 	.word	0x4002006c
 80019a0:	40020000 	.word	0x40020000

080019a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b08b      	sub	sp, #44	; 0x2c
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b6:	e169      	b.n	8001c8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019b8:	2201      	movs	r2, #1
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	f040 8158 	bne.w	8001c86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4a9a      	ldr	r2, [pc, #616]	; (8001c44 <HAL_GPIO_Init+0x2a0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d05e      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 80019e0:	4a98      	ldr	r2, [pc, #608]	; (8001c44 <HAL_GPIO_Init+0x2a0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d875      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 80019e6:	4a98      	ldr	r2, [pc, #608]	; (8001c48 <HAL_GPIO_Init+0x2a4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d058      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 80019ec:	4a96      	ldr	r2, [pc, #600]	; (8001c48 <HAL_GPIO_Init+0x2a4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d86f      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 80019f2:	4a96      	ldr	r2, [pc, #600]	; (8001c4c <HAL_GPIO_Init+0x2a8>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d052      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 80019f8:	4a94      	ldr	r2, [pc, #592]	; (8001c4c <HAL_GPIO_Init+0x2a8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d869      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 80019fe:	4a94      	ldr	r2, [pc, #592]	; (8001c50 <HAL_GPIO_Init+0x2ac>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d04c      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 8001a04:	4a92      	ldr	r2, [pc, #584]	; (8001c50 <HAL_GPIO_Init+0x2ac>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d863      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 8001a0a:	4a92      	ldr	r2, [pc, #584]	; (8001c54 <HAL_GPIO_Init+0x2b0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d046      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 8001a10:	4a90      	ldr	r2, [pc, #576]	; (8001c54 <HAL_GPIO_Init+0x2b0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d85d      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 8001a16:	2b12      	cmp	r3, #18
 8001a18:	d82a      	bhi.n	8001a70 <HAL_GPIO_Init+0xcc>
 8001a1a:	2b12      	cmp	r3, #18
 8001a1c:	d859      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 8001a1e:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <HAL_GPIO_Init+0x80>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001a9f 	.word	0x08001a9f
 8001a28:	08001a79 	.word	0x08001a79
 8001a2c:	08001a8b 	.word	0x08001a8b
 8001a30:	08001acd 	.word	0x08001acd
 8001a34:	08001ad3 	.word	0x08001ad3
 8001a38:	08001ad3 	.word	0x08001ad3
 8001a3c:	08001ad3 	.word	0x08001ad3
 8001a40:	08001ad3 	.word	0x08001ad3
 8001a44:	08001ad3 	.word	0x08001ad3
 8001a48:	08001ad3 	.word	0x08001ad3
 8001a4c:	08001ad3 	.word	0x08001ad3
 8001a50:	08001ad3 	.word	0x08001ad3
 8001a54:	08001ad3 	.word	0x08001ad3
 8001a58:	08001ad3 	.word	0x08001ad3
 8001a5c:	08001ad3 	.word	0x08001ad3
 8001a60:	08001ad3 	.word	0x08001ad3
 8001a64:	08001ad3 	.word	0x08001ad3
 8001a68:	08001a81 	.word	0x08001a81
 8001a6c:	08001a95 	.word	0x08001a95
 8001a70:	4a79      	ldr	r2, [pc, #484]	; (8001c58 <HAL_GPIO_Init+0x2b4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a76:	e02c      	b.n	8001ad2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	623b      	str	r3, [r7, #32]
          break;
 8001a7e:	e029      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	3304      	adds	r3, #4
 8001a86:	623b      	str	r3, [r7, #32]
          break;
 8001a88:	e024      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	3308      	adds	r3, #8
 8001a90:	623b      	str	r3, [r7, #32]
          break;
 8001a92:	e01f      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	330c      	adds	r3, #12
 8001a9a:	623b      	str	r3, [r7, #32]
          break;
 8001a9c:	e01a      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	623b      	str	r3, [r7, #32]
          break;
 8001aaa:	e013      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d105      	bne.n	8001ac0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab4:	2308      	movs	r3, #8
 8001ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	611a      	str	r2, [r3, #16]
          break;
 8001abe:	e009      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	615a      	str	r2, [r3, #20]
          break;
 8001aca:	e003      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
          break;
 8001ad0:	e000      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          break;
 8001ad2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2bff      	cmp	r3, #255	; 0xff
 8001ad8:	d801      	bhi.n	8001ade <HAL_GPIO_Init+0x13a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	e001      	b.n	8001ae2 <HAL_GPIO_Init+0x13e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2bff      	cmp	r3, #255	; 0xff
 8001ae8:	d802      	bhi.n	8001af0 <HAL_GPIO_Init+0x14c>
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	e002      	b.n	8001af6 <HAL_GPIO_Init+0x152>
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	3b08      	subs	r3, #8
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	210f      	movs	r1, #15
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	401a      	ands	r2, r3
 8001b08:	6a39      	ldr	r1, [r7, #32]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	431a      	orrs	r2, r3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 80b1 	beq.w	8001c86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b24:	4b4d      	ldr	r3, [pc, #308]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4a4c      	ldr	r2, [pc, #304]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6193      	str	r3, [r2, #24]
 8001b30:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b3c:	4a48      	ldr	r2, [pc, #288]	; (8001c60 <HAL_GPIO_Init+0x2bc>)
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	220f      	movs	r2, #15
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a40      	ldr	r2, [pc, #256]	; (8001c64 <HAL_GPIO_Init+0x2c0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d013      	beq.n	8001b90 <HAL_GPIO_Init+0x1ec>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a3f      	ldr	r2, [pc, #252]	; (8001c68 <HAL_GPIO_Init+0x2c4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d00d      	beq.n	8001b8c <HAL_GPIO_Init+0x1e8>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a3e      	ldr	r2, [pc, #248]	; (8001c6c <HAL_GPIO_Init+0x2c8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d007      	beq.n	8001b88 <HAL_GPIO_Init+0x1e4>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a3d      	ldr	r2, [pc, #244]	; (8001c70 <HAL_GPIO_Init+0x2cc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d101      	bne.n	8001b84 <HAL_GPIO_Init+0x1e0>
 8001b80:	2303      	movs	r3, #3
 8001b82:	e006      	b.n	8001b92 <HAL_GPIO_Init+0x1ee>
 8001b84:	2304      	movs	r3, #4
 8001b86:	e004      	b.n	8001b92 <HAL_GPIO_Init+0x1ee>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e002      	b.n	8001b92 <HAL_GPIO_Init+0x1ee>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_GPIO_Init+0x1ee>
 8001b90:	2300      	movs	r3, #0
 8001b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b94:	f002 0203 	and.w	r2, r2, #3
 8001b98:	0092      	lsls	r2, r2, #2
 8001b9a:	4093      	lsls	r3, r2
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ba2:	492f      	ldr	r1, [pc, #188]	; (8001c60 <HAL_GPIO_Init+0x2bc>)
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d006      	beq.n	8001bca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	492c      	ldr	r1, [pc, #176]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bca:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	4928      	ldr	r1, [pc, #160]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	4922      	ldr	r1, [pc, #136]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
 8001bf0:	e006      	b.n	8001c00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	491e      	ldr	r1, [pc, #120]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	4918      	ldr	r1, [pc, #96]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	608b      	str	r3, [r1, #8]
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	4914      	ldr	r1, [pc, #80]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d021      	beq.n	8001c78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	490e      	ldr	r1, [pc, #56]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60cb      	str	r3, [r1, #12]
 8001c40:	e021      	b.n	8001c86 <HAL_GPIO_Init+0x2e2>
 8001c42:	bf00      	nop
 8001c44:	10320000 	.word	0x10320000
 8001c48:	10310000 	.word	0x10310000
 8001c4c:	10220000 	.word	0x10220000
 8001c50:	10210000 	.word	0x10210000
 8001c54:	10120000 	.word	0x10120000
 8001c58:	10110000 	.word	0x10110000
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010000 	.word	0x40010000
 8001c64:	40010800 	.word	0x40010800
 8001c68:	40010c00 	.word	0x40010c00
 8001c6c:	40011000 	.word	0x40011000
 8001c70:	40011400 	.word	0x40011400
 8001c74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_GPIO_Init+0x304>)
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	4909      	ldr	r1, [pc, #36]	; (8001ca8 <HAL_GPIO_Init+0x304>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	3301      	adds	r3, #1
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	fa22 f303 	lsr.w	r3, r2, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f47f ae8e 	bne.w	80019b8 <HAL_GPIO_Init+0x14>
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	372c      	adds	r7, #44	; 0x2c
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	40010400 	.word	0x40010400

08001cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	e001      	b.n	8001cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	807b      	strh	r3, [r7, #2]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cea:	787b      	ldrb	r3, [r7, #1]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf0:	887a      	ldrh	r2, [r7, #2]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cf6:	e003      	b.n	8001d00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	041a      	lsls	r2, r3, #16
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	611a      	str	r2, [r3, #16]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
	...

08001d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e12b      	b.n	8001f76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff f984 	bl	8001040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2224      	movs	r2, #36	; 0x24
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0201 	bic.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d70:	f000 ffea 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 8001d74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4a81      	ldr	r2, [pc, #516]	; (8001f80 <HAL_I2C_Init+0x274>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d807      	bhi.n	8001d90 <HAL_I2C_Init+0x84>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4a80      	ldr	r2, [pc, #512]	; (8001f84 <HAL_I2C_Init+0x278>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	bf94      	ite	ls
 8001d88:	2301      	movls	r3, #1
 8001d8a:	2300      	movhi	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	e006      	b.n	8001d9e <HAL_I2C_Init+0x92>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4a7d      	ldr	r2, [pc, #500]	; (8001f88 <HAL_I2C_Init+0x27c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	bf94      	ite	ls
 8001d98:	2301      	movls	r3, #1
 8001d9a:	2300      	movhi	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e0e7      	b.n	8001f76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4a78      	ldr	r2, [pc, #480]	; (8001f8c <HAL_I2C_Init+0x280>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0c9b      	lsrs	r3, r3, #18
 8001db0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a6a      	ldr	r2, [pc, #424]	; (8001f80 <HAL_I2C_Init+0x274>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d802      	bhi.n	8001de0 <HAL_I2C_Init+0xd4>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	e009      	b.n	8001df4 <HAL_I2C_Init+0xe8>
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001de6:	fb02 f303 	mul.w	r3, r2, r3
 8001dea:	4a69      	ldr	r2, [pc, #420]	; (8001f90 <HAL_I2C_Init+0x284>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	099b      	lsrs	r3, r3, #6
 8001df2:	3301      	adds	r3, #1
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	495c      	ldr	r1, [pc, #368]	; (8001f80 <HAL_I2C_Init+0x274>)
 8001e10:	428b      	cmp	r3, r1
 8001e12:	d819      	bhi.n	8001e48 <HAL_I2C_Init+0x13c>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1e59      	subs	r1, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e22:	1c59      	adds	r1, r3, #1
 8001e24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e28:	400b      	ands	r3, r1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00a      	beq.n	8001e44 <HAL_I2C_Init+0x138>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1e59      	subs	r1, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e42:	e051      	b.n	8001ee8 <HAL_I2C_Init+0x1dc>
 8001e44:	2304      	movs	r3, #4
 8001e46:	e04f      	b.n	8001ee8 <HAL_I2C_Init+0x1dc>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d111      	bne.n	8001e74 <HAL_I2C_Init+0x168>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1e58      	subs	r0, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	440b      	add	r3, r1
 8001e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e62:	3301      	adds	r3, #1
 8001e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	e012      	b.n	8001e9a <HAL_I2C_Init+0x18e>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1e58      	subs	r0, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6859      	ldr	r1, [r3, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	0099      	lsls	r1, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_I2C_Init+0x196>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e022      	b.n	8001ee8 <HAL_I2C_Init+0x1dc>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_I2C_Init+0x1bc>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1e58      	subs	r0, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6859      	ldr	r1, [r3, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	440b      	add	r3, r1
 8001eb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec6:	e00f      	b.n	8001ee8 <HAL_I2C_Init+0x1dc>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1e58      	subs	r0, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	0099      	lsls	r1, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	6809      	ldr	r1, [r1, #0]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69da      	ldr	r2, [r3, #28]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6911      	ldr	r1, [r2, #16]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68d2      	ldr	r2, [r2, #12]
 8001f22:	4311      	orrs	r1, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2220      	movs	r2, #32
 8001f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	000186a0 	.word	0x000186a0
 8001f84:	001e847f 	.word	0x001e847f
 8001f88:	003d08ff 	.word	0x003d08ff
 8001f8c:	431bde83 	.word	0x431bde83
 8001f90:	10624dd3 	.word	0x10624dd3

08001f94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	817b      	strh	r3, [r7, #10]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff fb3e 	bl	8001628 <HAL_GetTick>
 8001fac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	f040 80e0 	bne.w	800217c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2319      	movs	r3, #25
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4970      	ldr	r1, [pc, #448]	; (8002188 <HAL_I2C_Master_Transmit+0x1f4>)
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f964 	bl	8002294 <I2C_WaitOnFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e0d3      	b.n	800217e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_I2C_Master_Transmit+0x50>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e0cc      	b.n	800217e <HAL_I2C_Master_Transmit+0x1ea>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d007      	beq.n	800200a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0201 	orr.w	r2, r2, #1
 8002008:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002018:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2221      	movs	r2, #33	; 0x21
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2210      	movs	r2, #16
 8002026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	893a      	ldrh	r2, [r7, #8]
 800203a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4a50      	ldr	r2, [pc, #320]	; (800218c <HAL_I2C_Master_Transmit+0x1f8>)
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800204c:	8979      	ldrh	r1, [r7, #10]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	6a3a      	ldr	r2, [r7, #32]
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f89c 	bl	8002190 <I2C_MasterRequestWrite>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e08d      	b.n	800217e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002078:	e066      	b.n	8002148 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	6a39      	ldr	r1, [r7, #32]
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f9de 	bl	8002440 <I2C_WaitOnTXEFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00d      	beq.n	80020a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	2b04      	cmp	r3, #4
 8002090:	d107      	bne.n	80020a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e06b      	b.n	800217e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	781a      	ldrb	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d11b      	bne.n	800211c <HAL_I2C_Master_Transmit+0x188>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d017      	beq.n	800211c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	6a39      	ldr	r1, [r7, #32]
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 f9ce 	bl	80024c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00d      	beq.n	8002148 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	2b04      	cmp	r3, #4
 8002132:	d107      	bne.n	8002144 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002142:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e01a      	b.n	800217e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214c:	2b00      	cmp	r3, #0
 800214e:	d194      	bne.n	800207a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800215e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	e000      	b.n	800217e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800217c:	2302      	movs	r3, #2
  }
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	00100002 	.word	0x00100002
 800218c:	ffff0000 	.word	0xffff0000

08002190 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af02      	add	r7, sp, #8
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	460b      	mov	r3, r1
 800219e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d006      	beq.n	80021ba <I2C_MasterRequestWrite+0x2a>
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d003      	beq.n	80021ba <I2C_MasterRequestWrite+0x2a>
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021b8:	d108      	bne.n	80021cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e00b      	b.n	80021e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	2b12      	cmp	r3, #18
 80021d2:	d107      	bne.n	80021e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f84f 	bl	8002294 <I2C_WaitOnFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00d      	beq.n	8002218 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220a:	d103      	bne.n	8002214 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002212:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e035      	b.n	8002284 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002220:	d108      	bne.n	8002234 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002222:	897b      	ldrh	r3, [r7, #10]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002230:	611a      	str	r2, [r3, #16]
 8002232:	e01b      	b.n	800226c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002234:	897b      	ldrh	r3, [r7, #10]
 8002236:	11db      	asrs	r3, r3, #7
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f003 0306 	and.w	r3, r3, #6
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f063 030f 	orn	r3, r3, #15
 8002244:	b2da      	uxtb	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	490e      	ldr	r1, [pc, #56]	; (800228c <I2C_MasterRequestWrite+0xfc>)
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f875 	bl	8002342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e010      	b.n	8002284 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002262:	897b      	ldrh	r3, [r7, #10]
 8002264:	b2da      	uxtb	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4907      	ldr	r1, [pc, #28]	; (8002290 <I2C_MasterRequestWrite+0x100>)
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f865 	bl	8002342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	00010008 	.word	0x00010008
 8002290:	00010002 	.word	0x00010002

08002294 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a4:	e025      	b.n	80022f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d021      	beq.n	80022f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ae:	f7ff f9bb 	bl	8001628 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d302      	bcc.n	80022c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d116      	bne.n	80022f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2220      	movs	r2, #32
 80022ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f043 0220 	orr.w	r2, r3, #32
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e023      	b.n	800233a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d10d      	bne.n	8002318 <I2C_WaitOnFlagUntilTimeout+0x84>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4013      	ands	r3, r2
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf0c      	ite	eq
 800230e:	2301      	moveq	r3, #1
 8002310:	2300      	movne	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	e00c      	b.n	8002332 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	43da      	mvns	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4013      	ands	r3, r2
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf0c      	ite	eq
 800232a:	2301      	moveq	r3, #1
 800232c:	2300      	movne	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	429a      	cmp	r2, r3
 8002336:	d0b6      	beq.n	80022a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002350:	e051      	b.n	80023f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002360:	d123      	bne.n	80023aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002370:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800237a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f043 0204 	orr.w	r2, r3, #4
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e046      	b.n	8002438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d021      	beq.n	80023f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b2:	f7ff f939 	bl	8001628 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d302      	bcc.n	80023c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d116      	bne.n	80023f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f043 0220 	orr.w	r2, r3, #32
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e020      	b.n	8002438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	0c1b      	lsrs	r3, r3, #16
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d10c      	bne.n	800241a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	43da      	mvns	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4013      	ands	r3, r2
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	bf14      	ite	ne
 8002412:	2301      	movne	r3, #1
 8002414:	2300      	moveq	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	e00b      	b.n	8002432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	43da      	mvns	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	4013      	ands	r3, r2
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf14      	ite	ne
 800242c:	2301      	movne	r3, #1
 800242e:	2300      	moveq	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d18d      	bne.n	8002352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800244c:	e02d      	b.n	80024aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f878 	bl	8002544 <I2C_IsAcknowledgeFailed>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e02d      	b.n	80024ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d021      	beq.n	80024aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002466:	f7ff f8df 	bl	8001628 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	429a      	cmp	r2, r3
 8002474:	d302      	bcc.n	800247c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d116      	bne.n	80024aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f043 0220 	orr.w	r2, r3, #32
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e007      	b.n	80024ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b4:	2b80      	cmp	r3, #128	; 0x80
 80024b6:	d1ca      	bne.n	800244e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024ce:	e02d      	b.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f837 	bl	8002544 <I2C_IsAcknowledgeFailed>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e02d      	b.n	800253c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e6:	d021      	beq.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e8:	f7ff f89e 	bl	8001628 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d302      	bcc.n	80024fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d116      	bne.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f043 0220 	orr.w	r2, r3, #32
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e007      	b.n	800253c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b04      	cmp	r3, #4
 8002538:	d1ca      	bne.n	80024d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255a:	d11b      	bne.n	8002594 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002564:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f043 0204 	orr.w	r2, r3, #4
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e272      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8087 	beq.w	80026ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c0:	4b92      	ldr	r3, [pc, #584]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d00c      	beq.n	80025e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025cc:	4b8f      	ldr	r3, [pc, #572]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d112      	bne.n	80025fe <HAL_RCC_OscConfig+0x5e>
 80025d8:	4b8c      	ldr	r3, [pc, #560]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e4:	d10b      	bne.n	80025fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e6:	4b89      	ldr	r3, [pc, #548]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d06c      	beq.n	80026cc <HAL_RCC_OscConfig+0x12c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d168      	bne.n	80026cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e24c      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x76>
 8002608:	4b80      	ldr	r3, [pc, #512]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a7f      	ldr	r2, [pc, #508]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800260e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	e02e      	b.n	8002674 <HAL_RCC_OscConfig+0xd4>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x98>
 800261e:	4b7b      	ldr	r3, [pc, #492]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7a      	ldr	r2, [pc, #488]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b78      	ldr	r3, [pc, #480]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a77      	ldr	r2, [pc, #476]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e01d      	b.n	8002674 <HAL_RCC_OscConfig+0xd4>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0xbc>
 8002642:	4b72      	ldr	r3, [pc, #456]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a71      	ldr	r2, [pc, #452]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b6f      	ldr	r3, [pc, #444]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6e      	ldr	r2, [pc, #440]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0xd4>
 800265c:	4b6b      	ldr	r3, [pc, #428]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a6a      	ldr	r2, [pc, #424]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b68      	ldr	r3, [pc, #416]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a67      	ldr	r2, [pc, #412]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe ffd4 	bl	8001628 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe ffd0 	bl	8001628 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e200      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b5d      	ldr	r3, [pc, #372]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0xe4>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe ffc0 	bl	8001628 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe ffbc 	bl	8001628 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1ec      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x10c>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d063      	beq.n	80027a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026da:	4b4c      	ldr	r3, [pc, #304]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026e6:	4b49      	ldr	r3, [pc, #292]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d11c      	bne.n	800272c <HAL_RCC_OscConfig+0x18c>
 80026f2:	4b46      	ldr	r3, [pc, #280]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	4b43      	ldr	r3, [pc, #268]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_RCC_OscConfig+0x176>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e1c0      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002716:	4b3d      	ldr	r3, [pc, #244]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4939      	ldr	r1, [pc, #228]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	e03a      	b.n	80027a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d020      	beq.n	8002776 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002734:	4b36      	ldr	r3, [pc, #216]	; (8002810 <HAL_RCC_OscConfig+0x270>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7fe ff75 	bl	8001628 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002742:	f7fe ff71 	bl	8001628 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1a1      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b2a      	ldr	r3, [pc, #168]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4927      	ldr	r1, [pc, #156]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <HAL_RCC_OscConfig+0x270>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe ff54 	bl	8001628 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002784:	f7fe ff50 	bl	8001628 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e180      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	4b1d      	ldr	r3, [pc, #116]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d03a      	beq.n	8002824 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d019      	beq.n	80027ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b6:	4b17      	ldr	r3, [pc, #92]	; (8002814 <HAL_RCC_OscConfig+0x274>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027bc:	f7fe ff34 	bl	8001628 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c4:	f7fe ff30 	bl	8001628 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e160      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	4b0d      	ldr	r3, [pc, #52]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027e2:	2001      	movs	r0, #1
 80027e4:	f000 fb08 	bl	8002df8 <RCC_Delay>
 80027e8:	e01c      	b.n	8002824 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_RCC_OscConfig+0x274>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f0:	f7fe ff1a 	bl	8001628 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f6:	e00f      	b.n	8002818 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f8:	f7fe ff16 	bl	8001628 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d908      	bls.n	8002818 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e146      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	42420000 	.word	0x42420000
 8002814:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002818:	4b92      	ldr	r3, [pc, #584]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1e9      	bne.n	80027f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80a6 	beq.w	800297e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002836:	4b8b      	ldr	r3, [pc, #556]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10d      	bne.n	800285e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	4b88      	ldr	r3, [pc, #544]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	4a87      	ldr	r2, [pc, #540]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284c:	61d3      	str	r3, [r2, #28]
 800284e:	4b85      	ldr	r3, [pc, #532]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285a:	2301      	movs	r3, #1
 800285c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285e:	4b82      	ldr	r3, [pc, #520]	; (8002a68 <HAL_RCC_OscConfig+0x4c8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d118      	bne.n	800289c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286a:	4b7f      	ldr	r3, [pc, #508]	; (8002a68 <HAL_RCC_OscConfig+0x4c8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a7e      	ldr	r2, [pc, #504]	; (8002a68 <HAL_RCC_OscConfig+0x4c8>)
 8002870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002876:	f7fe fed7 	bl	8001628 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287e:	f7fe fed3 	bl	8001628 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b64      	cmp	r3, #100	; 0x64
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e103      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	4b75      	ldr	r3, [pc, #468]	; (8002a68 <HAL_RCC_OscConfig+0x4c8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x312>
 80028a4:	4b6f      	ldr	r3, [pc, #444]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4a6e      	ldr	r2, [pc, #440]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6213      	str	r3, [r2, #32]
 80028b0:	e02d      	b.n	800290e <HAL_RCC_OscConfig+0x36e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x334>
 80028ba:	4b6a      	ldr	r3, [pc, #424]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4a69      	ldr	r2, [pc, #420]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	f023 0301 	bic.w	r3, r3, #1
 80028c4:	6213      	str	r3, [r2, #32]
 80028c6:	4b67      	ldr	r3, [pc, #412]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	4a66      	ldr	r2, [pc, #408]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	f023 0304 	bic.w	r3, r3, #4
 80028d0:	6213      	str	r3, [r2, #32]
 80028d2:	e01c      	b.n	800290e <HAL_RCC_OscConfig+0x36e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b05      	cmp	r3, #5
 80028da:	d10c      	bne.n	80028f6 <HAL_RCC_OscConfig+0x356>
 80028dc:	4b61      	ldr	r3, [pc, #388]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	4a60      	ldr	r2, [pc, #384]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	f043 0304 	orr.w	r3, r3, #4
 80028e6:	6213      	str	r3, [r2, #32]
 80028e8:	4b5e      	ldr	r3, [pc, #376]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4a5d      	ldr	r2, [pc, #372]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6213      	str	r3, [r2, #32]
 80028f4:	e00b      	b.n	800290e <HAL_RCC_OscConfig+0x36e>
 80028f6:	4b5b      	ldr	r3, [pc, #364]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4a5a      	ldr	r2, [pc, #360]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	6213      	str	r3, [r2, #32]
 8002902:	4b58      	ldr	r3, [pc, #352]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4a57      	ldr	r2, [pc, #348]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	f023 0304 	bic.w	r3, r3, #4
 800290c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d015      	beq.n	8002942 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002916:	f7fe fe87 	bl	8001628 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291c:	e00a      	b.n	8002934 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291e:	f7fe fe83 	bl	8001628 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	f241 3288 	movw	r2, #5000	; 0x1388
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e0b1      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002934:	4b4b      	ldr	r3, [pc, #300]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ee      	beq.n	800291e <HAL_RCC_OscConfig+0x37e>
 8002940:	e014      	b.n	800296c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002942:	f7fe fe71 	bl	8001628 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294a:	f7fe fe6d 	bl	8001628 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f241 3288 	movw	r2, #5000	; 0x1388
 8002958:	4293      	cmp	r3, r2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e09b      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002960:	4b40      	ldr	r3, [pc, #256]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ee      	bne.n	800294a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d105      	bne.n	800297e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002972:	4b3c      	ldr	r3, [pc, #240]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	4a3b      	ldr	r2, [pc, #236]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8087 	beq.w	8002a96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002988:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b08      	cmp	r3, #8
 8002992:	d061      	beq.n	8002a58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d146      	bne.n	8002a2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299c:	4b33      	ldr	r3, [pc, #204]	; (8002a6c <HAL_RCC_OscConfig+0x4cc>)
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7fe fe41 	bl	8001628 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029aa:	f7fe fe3d 	bl	8001628 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e06d      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029bc:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f0      	bne.n	80029aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d0:	d108      	bne.n	80029e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029d2:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	4921      	ldr	r1, [pc, #132]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e4:	4b1f      	ldr	r3, [pc, #124]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a19      	ldr	r1, [r3, #32]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	430b      	orrs	r3, r1
 80029f6:	491b      	ldr	r1, [pc, #108]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_RCC_OscConfig+0x4cc>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fe fe11 	bl	8001628 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0a:	f7fe fe0d 	bl	8001628 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e03d      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x46a>
 8002a28:	e035      	b.n	8002a96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <HAL_RCC_OscConfig+0x4cc>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe fdfa 	bl	8001628 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fe fdf6 	bl	8001628 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e026      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x498>
 8002a56:	e01e      	b.n	8002a96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d107      	bne.n	8002a70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e019      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40007000 	.word	0x40007000
 8002a6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_OscConfig+0x500>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d001      	beq.n	8002a96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0d0      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d910      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b67      	ldr	r3, [pc, #412]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 0207 	bic.w	r2, r3, #7
 8002ace:	4965      	ldr	r1, [pc, #404]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b63      	ldr	r3, [pc, #396]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0b8      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d020      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b00:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b18:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4a52      	ldr	r2, [pc, #328]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b24:	4b50      	ldr	r3, [pc, #320]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	494d      	ldr	r1, [pc, #308]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d040      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d115      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e07f      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b62:	4b41      	ldr	r3, [pc, #260]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e073      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b72:	4b3d      	ldr	r3, [pc, #244]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e06b      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b82:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f023 0203 	bic.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4936      	ldr	r1, [pc, #216]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b94:	f7fe fd48 	bl	8001628 <HAL_GetTick>
 8002b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9c:	f7fe fd44 	bl	8001628 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e053      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	4b2d      	ldr	r3, [pc, #180]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 020c 	and.w	r2, r3, #12
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d1eb      	bne.n	8002b9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d210      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 0207 	bic.w	r2, r3, #7
 8002bda:	4922      	ldr	r1, [pc, #136]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e032      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4916      	ldr	r1, [pc, #88]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	490e      	ldr	r1, [pc, #56]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c32:	f000 f821 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002c36:	4602      	mov	r2, r0
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	490a      	ldr	r1, [pc, #40]	; (8002c6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c44:	5ccb      	ldrb	r3, [r1, r3]
 8002c46:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4a:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <HAL_RCC_ClockConfig+0x1cc>)
 8002c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_ClockConfig+0x1d0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe fa7a 	bl	800114c <HAL_InitTick>

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40022000 	.word	0x40022000
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	080070bc 	.word	0x080070bc
 8002c70:	20000014 	.word	0x20000014
 8002c74:	2000001c 	.word	0x2000001c

08002c78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c78:	b490      	push	{r4, r7}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c7e:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xac>)
 8002c80:	1d3c      	adds	r4, r7, #4
 8002c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c88:	f240 2301 	movw	r3, #513	; 0x201
 8002c8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ca2:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d002      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d003      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0x46>
 8002cb6:	e02b      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cb8:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cba:	623b      	str	r3, [r7, #32]
      break;
 8002cbc:	e02b      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	0c9b      	lsrs	r3, r3, #18
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	3328      	adds	r3, #40	; 0x28
 8002cc8:	443b      	add	r3, r7
 8002cca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d012      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	0c5b      	lsrs	r3, r3, #17
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	3328      	adds	r3, #40	; 0x28
 8002ce6:	443b      	add	r3, r7
 8002ce8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002cec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cf2:	fb03 f202 	mul.w	r2, r3, r2
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfe:	e004      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d04:	fb02 f303 	mul.w	r3, r2, r3
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	623b      	str	r3, [r7, #32]
      break;
 8002d0e:	e002      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d12:	623b      	str	r3, [r7, #32]
      break;
 8002d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d16:	6a3b      	ldr	r3, [r7, #32]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3728      	adds	r7, #40	; 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc90      	pop	{r4, r7}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	08007070 	.word	0x08007070
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	007a1200 	.word	0x007a1200
 8002d30:	003d0900 	.word	0x003d0900

08002d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d38:	4b02      	ldr	r3, [pc, #8]	; (8002d44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	20000014 	.word	0x20000014

08002d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d4c:	f7ff fff2 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	; (8002d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	080070cc 	.word	0x080070cc

08002d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d74:	f7ff ffde 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	0adb      	lsrs	r3, r3, #11
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	4903      	ldr	r1, [pc, #12]	; (8002d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40021000 	.word	0x40021000
 8002d94:	080070cc 	.word	0x080070cc

08002d98 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	220f      	movs	r2, #15
 8002da6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_RCC_GetClockConfig+0x58>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0203 	and.w	r2, r3, #3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <HAL_RCC_GetClockConfig+0x58>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_GetClockConfig+0x58>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_RCC_GetClockConfig+0x58>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	08db      	lsrs	r3, r3, #3
 8002dd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <HAL_RCC_GetClockConfig+0x5c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0207 	and.w	r2, r3, #7
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40022000 	.word	0x40022000

08002df8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e00:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <RCC_Delay+0x34>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <RCC_Delay+0x38>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	0a5b      	lsrs	r3, r3, #9
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e14:	bf00      	nop
  }
  while (Delay --);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1e5a      	subs	r2, r3, #1
 8002e1a:	60fa      	str	r2, [r7, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f9      	bne.n	8002e14 <RCC_Delay+0x1c>
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	20000014 	.word	0x20000014
 8002e30:	10624dd3 	.word	0x10624dd3

08002e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e041      	b.n	8002eca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f839 	bl	8002ed2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	4619      	mov	r1, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f000 f9b4 	bl	80031e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d001      	beq.n	8002efc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e03a      	b.n	8002f72 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a18      	ldr	r2, [pc, #96]	; (8002f7c <HAL_TIM_Base_Start_IT+0x98>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00e      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x58>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f26:	d009      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x58>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d004      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x58>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d111      	bne.n	8002f60 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d010      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5e:	e007      	b.n	8002f70 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	40000400 	.word	0x40000400
 8002f84:	40000800 	.word	0x40000800

08002f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d122      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d11b      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0202 	mvn.w	r2, #2
 8002fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8ed 	bl	80031aa <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f8e0 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f8ef 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d122      	bne.n	8003038 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d11b      	bne.n	8003038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0204 	mvn.w	r2, #4
 8003008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2202      	movs	r2, #2
 800300e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f8c3 	bl	80031aa <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f8b6 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f8c5 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b08      	cmp	r3, #8
 8003044:	d122      	bne.n	800308c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b08      	cmp	r3, #8
 8003052:	d11b      	bne.n	800308c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0208 	mvn.w	r2, #8
 800305c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2204      	movs	r2, #4
 8003062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f899 	bl	80031aa <HAL_TIM_IC_CaptureCallback>
 8003078:	e005      	b.n	8003086 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f88c 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f89b 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b10      	cmp	r3, #16
 8003098:	d122      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d11b      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0210 	mvn.w	r2, #16
 80030b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2208      	movs	r2, #8
 80030b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f86f 	bl	80031aa <HAL_TIM_IC_CaptureCallback>
 80030cc:	e005      	b.n	80030da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f862 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f871 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d10e      	bne.n	800310c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d107      	bne.n	800310c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0201 	mvn.w	r2, #1
 8003104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fd ff4a 	bl	8000fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003116:	2b80      	cmp	r3, #128	; 0x80
 8003118:	d10e      	bne.n	8003138 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	2b80      	cmp	r3, #128	; 0x80
 8003126:	d107      	bne.n	8003138 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f8bf 	bl	80032b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003142:	2b40      	cmp	r3, #64	; 0x40
 8003144:	d10e      	bne.n	8003164 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003150:	2b40      	cmp	r3, #64	; 0x40
 8003152:	d107      	bne.n	8003164 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800315c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f835 	bl	80031ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b20      	cmp	r3, #32
 8003170:	d10e      	bne.n	8003190 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b20      	cmp	r3, #32
 800317e:	d107      	bne.n	8003190 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0220 	mvn.w	r2, #32
 8003188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f88a 	bl	80032a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a29      	ldr	r2, [pc, #164]	; (8003298 <TIM_Base_SetConfig+0xb8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00b      	beq.n	8003210 <TIM_Base_SetConfig+0x30>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fe:	d007      	beq.n	8003210 <TIM_Base_SetConfig+0x30>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a26      	ldr	r2, [pc, #152]	; (800329c <TIM_Base_SetConfig+0xbc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_Base_SetConfig+0x30>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a25      	ldr	r2, [pc, #148]	; (80032a0 <TIM_Base_SetConfig+0xc0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d108      	bne.n	8003222 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <TIM_Base_SetConfig+0xb8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00b      	beq.n	8003242 <TIM_Base_SetConfig+0x62>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003230:	d007      	beq.n	8003242 <TIM_Base_SetConfig+0x62>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a19      	ldr	r2, [pc, #100]	; (800329c <TIM_Base_SetConfig+0xbc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d003      	beq.n	8003242 <TIM_Base_SetConfig+0x62>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a18      	ldr	r2, [pc, #96]	; (80032a0 <TIM_Base_SetConfig+0xc0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d108      	bne.n	8003254 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <TIM_Base_SetConfig+0xb8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d103      	bne.n	8003288 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	615a      	str	r2, [r3, #20]
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	40012c00 	.word	0x40012c00
 800329c:	40000400 	.word	0x40000400
 80032a0:	40000800 	.word	0x40000800

080032a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr

080032b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e047      	b.n	800336a <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fd fee4 	bl	80010bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2224      	movs	r2, #36	; 0x24
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800330a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fb51 	bl	80039b4 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003330:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0208 	orr.w	r2, r2, #8
 8003340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003394:	2300      	movs	r3, #0
 8003396:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10d      	bne.n	80033c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_UART_IRQHandler+0x52>
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fa4f 	bl	8003862 <UART_Receive_IT>
      return;
 80033c4:	e17b      	b.n	80036be <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80b1 	beq.w	8003530 <HAL_UART_IRQHandler+0x1bc>
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <HAL_UART_IRQHandler+0x70>
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80a6 	beq.w	8003530 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_UART_IRQHandler+0x90>
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f043 0201 	orr.w	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <HAL_UART_IRQHandler+0xb0>
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	f043 0202 	orr.w	r2, r3, #2
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_UART_IRQHandler+0xd0>
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f043 0204 	orr.w	r2, r3, #4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00f      	beq.n	800346e <HAL_UART_IRQHandler+0xfa>
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d104      	bne.n	8003462 <HAL_UART_IRQHandler+0xee>
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f043 0208 	orr.w	r2, r3, #8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 811e 	beq.w	80036b4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <HAL_UART_IRQHandler+0x11e>
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f9e8 	bl	8003862 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf14      	ite	ne
 80034a0:	2301      	movne	r3, #1
 80034a2:	2300      	moveq	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <HAL_UART_IRQHandler+0x146>
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d031      	beq.n	800351e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f92a 	bl	8003714 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d023      	beq.n	8003516 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034dc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d013      	beq.n	800350e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	4a76      	ldr	r2, [pc, #472]	; (80036c4 <HAL_UART_IRQHandler+0x350>)
 80034ec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe f9e0 	bl	80018b8 <HAL_DMA_Abort_IT>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d016      	beq.n	800352c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003508:	4610      	mov	r0, r2
 800350a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350c:	e00e      	b.n	800352c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8ec 	bl	80036ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003514:	e00a      	b.n	800352c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f8e8 	bl	80036ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	e006      	b.n	800352c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f8e4 	bl	80036ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800352a:	e0c3      	b.n	80036b4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800352c:	bf00      	nop
    return;
 800352e:	e0c1      	b.n	80036b4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	2b01      	cmp	r3, #1
 8003536:	f040 80a1 	bne.w	800367c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 809b 	beq.w	800367c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 8095 	beq.w	800367c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d04e      	beq.n	8003614 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003580:	8a3b      	ldrh	r3, [r7, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8098 	beq.w	80036b8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800358c:	8a3a      	ldrh	r2, [r7, #16]
 800358e:	429a      	cmp	r2, r3
 8003590:	f080 8092 	bcs.w	80036b8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8a3a      	ldrh	r2, [r7, #16]
 8003598:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d02b      	beq.n	80035fc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035b2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0210 	bic.w	r2, r2, #16
 80035f0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe f923 	bl	8001842 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003604:	b29b      	uxth	r3, r3
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	b29b      	uxth	r3, r3
 800360a:	4619      	mov	r1, r3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f876 	bl	80036fe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003612:	e051      	b.n	80036b8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800361c:	b29b      	uxth	r3, r3
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d047      	beq.n	80036bc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800362c:	8a7b      	ldrh	r3, [r7, #18]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d044      	beq.n	80036bc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003640:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0201 	bic.w	r2, r2, #1
 8003650:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0210 	bic.w	r2, r2, #16
 800366e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003670:	8a7b      	ldrh	r3, [r7, #18]
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f842 	bl	80036fe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800367a:	e01f      	b.n	80036bc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_UART_IRQHandler+0x324>
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f87f 	bl	8003794 <UART_Transmit_IT>
    return;
 8003696:	e012      	b.n	80036be <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00d      	beq.n	80036be <HAL_UART_IRQHandler+0x34a>
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f8c0 	bl	8003832 <UART_EndTransmit_IT>
    return;
 80036b2:	e004      	b.n	80036be <HAL_UART_IRQHandler+0x34a>
    return;
 80036b4:	bf00      	nop
 80036b6:	e002      	b.n	80036be <HAL_UART_IRQHandler+0x34a>
      return;
 80036b8:	bf00      	nop
 80036ba:	e000      	b.n	80036be <HAL_UART_IRQHandler+0x34a>
      return;
 80036bc:	bf00      	nop
  }
}
 80036be:	3728      	adds	r7, #40	; 0x28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	0800376d 	.word	0x0800376d

080036c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	460b      	mov	r3, r1
 8003708:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800372a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	2b01      	cmp	r3, #1
 8003742:	d107      	bne.n	8003754 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0210 	bic.w	r2, r2, #16
 8003752:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7ff ffb0 	bl	80036ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b21      	cmp	r3, #33	; 0x21
 80037a6:	d13e      	bne.n	8003826 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b0:	d114      	bne.n	80037dc <UART_Transmit_IT+0x48>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d110      	bne.n	80037dc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	1c9a      	adds	r2, r3, #2
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	621a      	str	r2, [r3, #32]
 80037da:	e008      	b.n	80037ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	1c59      	adds	r1, r3, #1
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6211      	str	r1, [r2, #32]
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	4619      	mov	r1, r3
 80037fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10f      	bne.n	8003822 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003810:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003820:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	e000      	b.n	8003828 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003826:	2302      	movs	r3, #2
  }
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr

08003832 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003848:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ff38 	bl	80036c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b086      	sub	sp, #24
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b22      	cmp	r3, #34	; 0x22
 8003874:	f040 8099 	bne.w	80039aa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003880:	d117      	bne.n	80038b2 <UART_Receive_IT+0x50>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d113      	bne.n	80038b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003892:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	b29b      	uxth	r3, r3
 800389c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	1c9a      	adds	r2, r3, #2
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	629a      	str	r2, [r3, #40]	; 0x28
 80038b0:	e026      	b.n	8003900 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c4:	d007      	beq.n	80038d6 <UART_Receive_IT+0x74>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10a      	bne.n	80038e4 <UART_Receive_IT+0x82>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	e008      	b.n	80038f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29b      	uxth	r3, r3
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	4619      	mov	r1, r3
 800390e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003910:	2b00      	cmp	r3, #0
 8003912:	d148      	bne.n	80039a6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0220 	bic.w	r2, r2, #32
 8003922:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003932:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	2b01      	cmp	r3, #1
 8003952:	d123      	bne.n	800399c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0210 	bic.w	r2, r2, #16
 8003968:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b10      	cmp	r3, #16
 8003976:	d10a      	bne.n	800398e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003992:	4619      	mov	r1, r3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff feb2 	bl	80036fe <HAL_UARTEx_RxEventCallback>
 800399a:	e002      	b.n	80039a2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff fe9c 	bl	80036da <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e002      	b.n	80039ac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e000      	b.n	80039ac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80039aa:	2302      	movs	r3, #2
  }
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039ee:	f023 030c 	bic.w	r3, r3, #12
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	68b9      	ldr	r1, [r7, #8]
 80039f8:	430b      	orrs	r3, r1
 80039fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2c      	ldr	r2, [pc, #176]	; (8003ac8 <UART_SetConfig+0x114>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d103      	bne.n	8003a24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a1c:	f7ff f9a8 	bl	8002d70 <HAL_RCC_GetPCLK2Freq>
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	e002      	b.n	8003a2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7ff f990 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 8003a28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	009a      	lsls	r2, r3, #2
 8003a34:	441a      	add	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	4a22      	ldr	r2, [pc, #136]	; (8003acc <UART_SetConfig+0x118>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	0119      	lsls	r1, r3, #4
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	009a      	lsls	r2, r3, #2
 8003a54:	441a      	add	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <UART_SetConfig+0x118>)
 8003a62:	fba3 0302 	umull	r0, r3, r3, r2
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	2064      	movs	r0, #100	; 0x64
 8003a6a:	fb00 f303 	mul.w	r3, r0, r3
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	3332      	adds	r3, #50	; 0x32
 8003a74:	4a15      	ldr	r2, [pc, #84]	; (8003acc <UART_SetConfig+0x118>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a80:	4419      	add	r1, r3
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	009a      	lsls	r2, r3, #2
 8003a8c:	441a      	add	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a98:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <UART_SetConfig+0x118>)
 8003a9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	2064      	movs	r0, #100	; 0x64
 8003aa2:	fb00 f303 	mul.w	r3, r0, r3
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	3332      	adds	r3, #50	; 0x32
 8003aac:	4a07      	ldr	r2, [pc, #28]	; (8003acc <UART_SetConfig+0x118>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	f003 020f 	and.w	r2, r3, #15
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	440a      	add	r2, r1
 8003abe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ac0:	bf00      	nop
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40013800 	.word	0x40013800
 8003acc:	51eb851f 	.word	0x51eb851f

08003ad0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ad6:	f3ef 8305 	mrs	r3, IPSR
 8003ada:	60bb      	str	r3, [r7, #8]
  return(result);
 8003adc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10f      	bne.n	8003b02 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae6:	607b      	str	r3, [r7, #4]
  return(result);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <osKernelInitialize+0x32>
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <osKernelInitialize+0x60>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d109      	bne.n	8003b0a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003af6:	f3ef 8311 	mrs	r3, BASEPRI
 8003afa:	603b      	str	r3, [r7, #0]
  return(result);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003b02:	f06f 0305 	mvn.w	r3, #5
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e00c      	b.n	8003b24 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <osKernelInitialize+0x60>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d105      	bne.n	8003b1e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <osKernelInitialize+0x60>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	e002      	b.n	8003b24 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003b24:	68fb      	ldr	r3, [r7, #12]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr
 8003b30:	20000200 	.word	0x20000200

08003b34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b3a:	f3ef 8305 	mrs	r3, IPSR
 8003b3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10f      	bne.n	8003b66 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b46:	f3ef 8310 	mrs	r3, PRIMASK
 8003b4a:	607b      	str	r3, [r7, #4]
  return(result);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <osKernelStart+0x32>
 8003b52:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <osKernelStart+0x64>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d109      	bne.n	8003b6e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b5a:	f3ef 8311 	mrs	r3, BASEPRI
 8003b5e:	603b      	str	r3, [r7, #0]
  return(result);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003b66:	f06f 0305 	mvn.w	r3, #5
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	e00e      	b.n	8003b8c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <osKernelStart+0x64>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d107      	bne.n	8003b86 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <osKernelStart+0x64>)
 8003b78:	2202      	movs	r2, #2
 8003b7a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003b7c:	f001 f890 	bl	8004ca0 <vTaskStartScheduler>
      stat = osOK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e002      	b.n	8003b8c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000200 	.word	0x20000200

08003b9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b092      	sub	sp, #72	; 0x48
 8003ba0:	af04      	add	r7, sp, #16
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bac:	f3ef 8305 	mrs	r3, IPSR
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f040 8094 	bne.w	8003ce2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bba:	f3ef 8310 	mrs	r3, PRIMASK
 8003bbe:	623b      	str	r3, [r7, #32]
  return(result);
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f040 808d 	bne.w	8003ce2 <osThreadNew+0x146>
 8003bc8:	4b48      	ldr	r3, [pc, #288]	; (8003cec <osThreadNew+0x150>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d106      	bne.n	8003bde <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bd0:	f3ef 8311 	mrs	r3, BASEPRI
 8003bd4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f040 8082 	bne.w	8003ce2 <osThreadNew+0x146>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d07e      	beq.n	8003ce2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003be8:	2318      	movs	r3, #24
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003bec:	2300      	movs	r3, #0
 8003bee:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003bf0:	f107 031b 	add.w	r3, r7, #27
 8003bf4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d045      	beq.n	8003c8e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <osThreadNew+0x74>
        name = attr->name;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <osThreadNew+0x9a>
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	2b38      	cmp	r3, #56	; 0x38
 8003c28:	d805      	bhi.n	8003c36 <osThreadNew+0x9a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <osThreadNew+0x9e>
        return (NULL);
 8003c36:	2300      	movs	r3, #0
 8003c38:	e054      	b.n	8003ce4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	089b      	lsrs	r3, r3, #2
 8003c48:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00e      	beq.n	8003c70 <osThreadNew+0xd4>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2bbb      	cmp	r3, #187	; 0xbb
 8003c58:	d90a      	bls.n	8003c70 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d006      	beq.n	8003c70 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <osThreadNew+0xd4>
        mem = 1;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c6e:	e010      	b.n	8003c92 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10c      	bne.n	8003c92 <osThreadNew+0xf6>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d108      	bne.n	8003c92 <osThreadNew+0xf6>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d104      	bne.n	8003c92 <osThreadNew+0xf6>
          mem = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c8c:	e001      	b.n	8003c92 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d110      	bne.n	8003cba <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ca0:	9202      	str	r2, [sp, #8]
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fe12 	bl	80048d8 <xTaskCreateStatic>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	e013      	b.n	8003ce2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d110      	bne.n	8003ce2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	f107 0314 	add.w	r3, r7, #20
 8003cc8:	9301      	str	r3, [sp, #4]
 8003cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fe5c 	bl	8004990 <xTaskCreate>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d001      	beq.n	8003ce2 <osThreadNew+0x146>
          hTask = NULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ce2:	697b      	ldr	r3, [r7, #20]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3738      	adds	r7, #56	; 0x38
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20000200 	.word	0x20000200

08003cf0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cf8:	f3ef 8305 	mrs	r3, IPSR
 8003cfc:	613b      	str	r3, [r7, #16]
  return(result);
 8003cfe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10f      	bne.n	8003d24 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d04:	f3ef 8310 	mrs	r3, PRIMASK
 8003d08:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d109      	bne.n	8003d24 <osDelay+0x34>
 8003d10:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <osDelay+0x58>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d109      	bne.n	8003d2c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d18:	f3ef 8311 	mrs	r3, BASEPRI
 8003d1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <osDelay+0x3c>
    stat = osErrorISR;
 8003d24:	f06f 0305 	mvn.w	r3, #5
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	e007      	b.n	8003d3c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 ff7e 	bl	8004c38 <vTaskDelay>
    }
  }

  return (stat);
 8003d3c:	697b      	ldr	r3, [r7, #20]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000200 	.word	0x20000200

08003d4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4a06      	ldr	r2, [pc, #24]	; (8003d74 <vApplicationGetIdleTaskMemory+0x28>)
 8003d5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2280      	movs	r2, #128	; 0x80
 8003d68:	601a      	str	r2, [r3, #0]
}
 8003d6a:	bf00      	nop
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr
 8003d74:	20000204 	.word	0x20000204
 8003d78:	200002c0 	.word	0x200002c0

08003d7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4a07      	ldr	r2, [pc, #28]	; (8003da8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	4a06      	ldr	r2, [pc, #24]	; (8003dac <vApplicationGetTimerTaskMemory+0x30>)
 8003d92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d9a:	601a      	str	r2, [r3, #0]
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	200004c0 	.word	0x200004c0
 8003dac:	2000057c 	.word	0x2000057c

08003db0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f103 0208 	add.w	r2, r3, #8
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f103 0208 	add.w	r2, r3, #8
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f103 0208 	add.w	r2, r3, #8
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr

08003dee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr

08003e06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d103      	bne.n	8003e6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	e00c      	b.n	8003e86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3308      	adds	r3, #8
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	e002      	b.n	8003e7a <vListInsert+0x2e>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d2f6      	bcs.n	8003e74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	601a      	str	r2, [r3, #0]
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6892      	ldr	r2, [r2, #8]
 8003ed2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6852      	ldr	r2, [r2, #4]
 8003edc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d103      	bne.n	8003ef0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	1e5a      	subs	r2, r3, #1
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr
	...

08003f10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10a      	bne.n	8003f3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f36:	bf00      	nop
 8003f38:	e7fe      	b.n	8003f38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f3a:	f001 fff7 	bl	8005f2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f46:	68f9      	ldr	r1, [r7, #12]
 8003f48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f4a:	fb01 f303 	mul.w	r3, r1, r3
 8003f4e:	441a      	add	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	68f9      	ldr	r1, [r7, #12]
 8003f6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	441a      	add	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	22ff      	movs	r2, #255	; 0xff
 8003f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	22ff      	movs	r2, #255	; 0xff
 8003f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d114      	bne.n	8003fba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01a      	beq.n	8003fce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	3310      	adds	r3, #16
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 f91b 	bl	80051d8 <xTaskRemoveFromEventList>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d012      	beq.n	8003fce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <xQueueGenericReset+0xcc>)
 8003faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	e009      	b.n	8003fce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3310      	adds	r3, #16
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fef6 	bl	8003db0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3324      	adds	r3, #36	; 0x24
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fef1 	bl	8003db0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003fce:	f001 ffdd 	bl	8005f8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fd2:	2301      	movs	r3, #1
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08e      	sub	sp, #56	; 0x38
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004006:	bf00      	nop
 8004008:	e7fe      	b.n	8004008 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <xQueueGenericCreateStatic+0x52>
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <xQueueGenericCreateStatic+0x56>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <xQueueGenericCreateStatic+0x58>
 8004036:	2300      	movs	r3, #0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10a      	bne.n	8004052 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	623b      	str	r3, [r7, #32]
}
 800404e:	bf00      	nop
 8004050:	e7fe      	b.n	8004050 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d102      	bne.n	800405e <xQueueGenericCreateStatic+0x7e>
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <xQueueGenericCreateStatic+0x82>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <xQueueGenericCreateStatic+0x84>
 8004062:	2300      	movs	r3, #0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	61fb      	str	r3, [r7, #28]
}
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800407e:	2350      	movs	r3, #80	; 0x50
 8004080:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b50      	cmp	r3, #80	; 0x50
 8004086:	d00a      	beq.n	800409e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	61bb      	str	r3, [r7, #24]
}
 800409a:	bf00      	nop
 800409c:	e7fe      	b.n	800409c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00d      	beq.n	80040c4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040b0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	4613      	mov	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f805 	bl	80040ce <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3730      	adds	r7, #48	; 0x30
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
 80040da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d103      	bne.n	80040ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	e002      	b.n	80040f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040fc:	2101      	movs	r1, #1
 80040fe:	69b8      	ldr	r0, [r7, #24]
 8004100:	f7ff ff06 	bl	8003f10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08e      	sub	sp, #56	; 0x38
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004122:	2300      	movs	r3, #0
 8004124:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <xQueueGenericSend+0x32>
	__asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004142:	bf00      	nop
 8004144:	e7fe      	b.n	8004144 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d103      	bne.n	8004154 <xQueueGenericSend+0x40>
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <xQueueGenericSend+0x44>
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <xQueueGenericSend+0x46>
 8004158:	2300      	movs	r3, #0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <xQueueGenericSend+0x60>
	__asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004170:	bf00      	nop
 8004172:	e7fe      	b.n	8004172 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d103      	bne.n	8004182 <xQueueGenericSend+0x6e>
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <xQueueGenericSend+0x72>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <xQueueGenericSend+0x74>
 8004186:	2300      	movs	r3, #0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10a      	bne.n	80041a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	623b      	str	r3, [r7, #32]
}
 800419e:	bf00      	nop
 80041a0:	e7fe      	b.n	80041a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041a2:	f001 f9df 	bl	8005564 <xTaskGetSchedulerState>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <xQueueGenericSend+0x9e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <xQueueGenericSend+0xa2>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <xQueueGenericSend+0xa4>
 80041b6:	2300      	movs	r3, #0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	61fb      	str	r3, [r7, #28]
}
 80041ce:	bf00      	nop
 80041d0:	e7fe      	b.n	80041d0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041d2:	f001 feab 	bl	8005f2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	429a      	cmp	r2, r3
 80041e0:	d302      	bcc.n	80041e8 <xQueueGenericSend+0xd4>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d129      	bne.n	800423c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041ee:	f000 fa07 	bl	8004600 <prvCopyDataToQueue>
 80041f2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d010      	beq.n	800421e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	3324      	adds	r3, #36	; 0x24
 8004200:	4618      	mov	r0, r3
 8004202:	f000 ffe9 	bl	80051d8 <xTaskRemoveFromEventList>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d013      	beq.n	8004234 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800420c:	4b3f      	ldr	r3, [pc, #252]	; (800430c <xQueueGenericSend+0x1f8>)
 800420e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	e00a      	b.n	8004234 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004224:	4b39      	ldr	r3, [pc, #228]	; (800430c <xQueueGenericSend+0x1f8>)
 8004226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004234:	f001 feaa 	bl	8005f8c <vPortExitCritical>
				return pdPASS;
 8004238:	2301      	movs	r3, #1
 800423a:	e063      	b.n	8004304 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d103      	bne.n	800424a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004242:	f001 fea3 	bl	8005f8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004246:	2300      	movs	r3, #0
 8004248:	e05c      	b.n	8004304 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800424a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424c:	2b00      	cmp	r3, #0
 800424e:	d106      	bne.n	800425e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004250:	f107 0314 	add.w	r3, r7, #20
 8004254:	4618      	mov	r0, r3
 8004256:	f001 f823 	bl	80052a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800425a:	2301      	movs	r3, #1
 800425c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800425e:	f001 fe95 	bl	8005f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004262:	f000 fd8d 	bl	8004d80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004266:	f001 fe61 	bl	8005f2c <vPortEnterCritical>
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004270:	b25b      	sxtb	r3, r3
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d103      	bne.n	8004280 <xQueueGenericSend+0x16c>
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004286:	b25b      	sxtb	r3, r3
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d103      	bne.n	8004296 <xQueueGenericSend+0x182>
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004296:	f001 fe79 	bl	8005f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800429a:	1d3a      	adds	r2, r7, #4
 800429c:	f107 0314 	add.w	r3, r7, #20
 80042a0:	4611      	mov	r1, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 f812 	bl	80052cc <xTaskCheckForTimeOut>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d124      	bne.n	80042f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042b0:	f000 fa9e 	bl	80047f0 <prvIsQueueFull>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d018      	beq.n	80042ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	3310      	adds	r3, #16
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	4611      	mov	r1, r2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 ff38 	bl	8005138 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ca:	f000 fa29 	bl	8004720 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042ce:	f000 fd65 	bl	8004d9c <xTaskResumeAll>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f47f af7c 	bne.w	80041d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80042da:	4b0c      	ldr	r3, [pc, #48]	; (800430c <xQueueGenericSend+0x1f8>)
 80042dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	e772      	b.n	80041d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ee:	f000 fa17 	bl	8004720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042f2:	f000 fd53 	bl	8004d9c <xTaskResumeAll>
 80042f6:	e76c      	b.n	80041d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042fa:	f000 fa11 	bl	8004720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042fe:	f000 fd4d 	bl	8004d9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004302:	2300      	movs	r3, #0
		}
	}
}
 8004304:	4618      	mov	r0, r3
 8004306:	3738      	adds	r7, #56	; 0x38
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08e      	sub	sp, #56	; 0x38
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
}
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d103      	bne.n	800434c <xQueueGenericSendFromISR+0x3c>
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <xQueueGenericSendFromISR+0x40>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <xQueueGenericSendFromISR+0x42>
 8004350:	2300      	movs	r3, #0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	623b      	str	r3, [r7, #32]
}
 8004368:	bf00      	nop
 800436a:	e7fe      	b.n	800436a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d103      	bne.n	800437a <xQueueGenericSendFromISR+0x6a>
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <xQueueGenericSendFromISR+0x6e>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <xQueueGenericSendFromISR+0x70>
 800437e:	2300      	movs	r3, #0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	61fb      	str	r3, [r7, #28]
}
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800439a:	f001 fe89 	bl	80060b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800439e:	f3ef 8211 	mrs	r2, BASEPRI
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	61ba      	str	r2, [r7, #24]
 80043b4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043b6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d302      	bcc.n	80043cc <xQueueGenericSendFromISR+0xbc>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d12c      	bne.n	8004426 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043dc:	f000 f910 	bl	8004600 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043e0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d112      	bne.n	8004410 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d016      	beq.n	8004420 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	3324      	adds	r3, #36	; 0x24
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 feee 	bl	80051d8 <xTaskRemoveFromEventList>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00e      	beq.n	8004420 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00b      	beq.n	8004420 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	e007      	b.n	8004420 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004410:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004414:	3301      	adds	r3, #1
 8004416:	b2db      	uxtb	r3, r3
 8004418:	b25a      	sxtb	r2, r3
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004420:	2301      	movs	r3, #1
 8004422:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004424:	e001      	b.n	800442a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004426:	2300      	movs	r3, #0
 8004428:	637b      	str	r3, [r7, #52]	; 0x34
 800442a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004434:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004438:	4618      	mov	r0, r3
 800443a:	3738      	adds	r7, #56	; 0x38
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08c      	sub	sp, #48	; 0x30
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800444c:	2300      	movs	r3, #0
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10a      	bne.n	8004470 <xQueueReceive+0x30>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	623b      	str	r3, [r7, #32]
}
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d103      	bne.n	800447e <xQueueReceive+0x3e>
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <xQueueReceive+0x42>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <xQueueReceive+0x44>
 8004482:	2300      	movs	r3, #0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <xQueueReceive+0x5e>
	__asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	61fb      	str	r3, [r7, #28]
}
 800449a:	bf00      	nop
 800449c:	e7fe      	b.n	800449c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800449e:	f001 f861 	bl	8005564 <xTaskGetSchedulerState>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d102      	bne.n	80044ae <xQueueReceive+0x6e>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <xQueueReceive+0x72>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <xQueueReceive+0x74>
 80044b2:	2300      	movs	r3, #0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10a      	bne.n	80044ce <xQueueReceive+0x8e>
	__asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	61bb      	str	r3, [r7, #24]
}
 80044ca:	bf00      	nop
 80044cc:	e7fe      	b.n	80044cc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80044ce:	f001 fd2d 	bl	8005f2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01f      	beq.n	800451e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044de:	68b9      	ldr	r1, [r7, #8]
 80044e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044e2:	f000 f8f7 	bl	80046d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	1e5a      	subs	r2, r3, #1
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00f      	beq.n	8004516 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	3310      	adds	r3, #16
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fe6c 	bl	80051d8 <xTaskRemoveFromEventList>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004506:	4b3d      	ldr	r3, [pc, #244]	; (80045fc <xQueueReceive+0x1bc>)
 8004508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004516:	f001 fd39 	bl	8005f8c <vPortExitCritical>
				return pdPASS;
 800451a:	2301      	movs	r3, #1
 800451c:	e069      	b.n	80045f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d103      	bne.n	800452c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004524:	f001 fd32 	bl	8005f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004528:	2300      	movs	r3, #0
 800452a:	e062      	b.n	80045f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800452c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004532:	f107 0310 	add.w	r3, r7, #16
 8004536:	4618      	mov	r0, r3
 8004538:	f000 feb2 	bl	80052a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800453c:	2301      	movs	r3, #1
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004540:	f001 fd24 	bl	8005f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004544:	f000 fc1c 	bl	8004d80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004548:	f001 fcf0 	bl	8005f2c <vPortEnterCritical>
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004552:	b25b      	sxtb	r3, r3
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d103      	bne.n	8004562 <xQueueReceive+0x122>
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004568:	b25b      	sxtb	r3, r3
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d103      	bne.n	8004578 <xQueueReceive+0x138>
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004578:	f001 fd08 	bl	8005f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800457c:	1d3a      	adds	r2, r7, #4
 800457e:	f107 0310 	add.w	r3, r7, #16
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fea1 	bl	80052cc <xTaskCheckForTimeOut>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d123      	bne.n	80045d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004592:	f000 f917 	bl	80047c4 <prvIsQueueEmpty>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d017      	beq.n	80045cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459e:	3324      	adds	r3, #36	; 0x24
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	4611      	mov	r1, r2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fdc7 	bl	8005138 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ac:	f000 f8b8 	bl	8004720 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045b0:	f000 fbf4 	bl	8004d9c <xTaskResumeAll>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d189      	bne.n	80044ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80045ba:	4b10      	ldr	r3, [pc, #64]	; (80045fc <xQueueReceive+0x1bc>)
 80045bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	e780      	b.n	80044ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ce:	f000 f8a7 	bl	8004720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045d2:	f000 fbe3 	bl	8004d9c <xTaskResumeAll>
 80045d6:	e77a      	b.n	80044ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045da:	f000 f8a1 	bl	8004720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045de:	f000 fbdd 	bl	8004d9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e4:	f000 f8ee 	bl	80047c4 <prvIsQueueEmpty>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f43f af6f 	beq.w	80044ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3730      	adds	r7, #48	; 0x30
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	e000ed04 	.word	0xe000ed04

08004600 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10d      	bne.n	800463a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d14d      	bne.n	80046c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 ffb8 	bl	80055a0 <xTaskPriorityDisinherit>
 8004630:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	605a      	str	r2, [r3, #4]
 8004638:	e043      	b.n	80046c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d119      	bne.n	8004674 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6898      	ldr	r0, [r3, #8]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	461a      	mov	r2, r3
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	f001 ff72 	bl	8006534 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	441a      	add	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	429a      	cmp	r2, r3
 8004668:	d32b      	bcc.n	80046c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	609a      	str	r2, [r3, #8]
 8004672:	e026      	b.n	80046c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	68d8      	ldr	r0, [r3, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	461a      	mov	r2, r3
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	f001 ff58 	bl	8006534 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	425b      	negs	r3, r3
 800468e:	441a      	add	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d207      	bcs.n	80046b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	425b      	negs	r3, r3
 80046aa:	441a      	add	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d105      	bne.n	80046c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	3b01      	subs	r3, #1
 80046c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046ca:	697b      	ldr	r3, [r7, #20]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d018      	beq.n	8004718 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	441a      	add	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d303      	bcc.n	8004708 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68d9      	ldr	r1, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	461a      	mov	r2, r3
 8004712:	6838      	ldr	r0, [r7, #0]
 8004714:	f001 ff0e 	bl	8006534 <memcpy>
	}
}
 8004718:	bf00      	nop
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004728:	f001 fc00 	bl	8005f2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004732:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004734:	e011      	b.n	800475a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	2b00      	cmp	r3, #0
 800473c:	d012      	beq.n	8004764 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3324      	adds	r3, #36	; 0x24
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fd48 	bl	80051d8 <xTaskRemoveFromEventList>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800474e:	f000 fe1f 	bl	8005390 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	3b01      	subs	r3, #1
 8004756:	b2db      	uxtb	r3, r3
 8004758:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800475a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800475e:	2b00      	cmp	r3, #0
 8004760:	dce9      	bgt.n	8004736 <prvUnlockQueue+0x16>
 8004762:	e000      	b.n	8004766 <prvUnlockQueue+0x46>
					break;
 8004764:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	22ff      	movs	r2, #255	; 0xff
 800476a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800476e:	f001 fc0d 	bl	8005f8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004772:	f001 fbdb 	bl	8005f2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800477c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800477e:	e011      	b.n	80047a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d012      	beq.n	80047ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3310      	adds	r3, #16
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fd23 	bl	80051d8 <xTaskRemoveFromEventList>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004798:	f000 fdfa 	bl	8005390 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800479c:	7bbb      	ldrb	r3, [r7, #14]
 800479e:	3b01      	subs	r3, #1
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	dce9      	bgt.n	8004780 <prvUnlockQueue+0x60>
 80047ac:	e000      	b.n	80047b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	22ff      	movs	r2, #255	; 0xff
 80047b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80047b8:	f001 fbe8 	bl	8005f8c <vPortExitCritical>
}
 80047bc:	bf00      	nop
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047cc:	f001 fbae 	bl	8005f2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d102      	bne.n	80047de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80047d8:	2301      	movs	r3, #1
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e001      	b.n	80047e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047e2:	f001 fbd3 	bl	8005f8c <vPortExitCritical>

	return xReturn;
 80047e6:	68fb      	ldr	r3, [r7, #12]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047f8:	f001 fb98 	bl	8005f2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004804:	429a      	cmp	r2, r3
 8004806:	d102      	bne.n	800480e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004808:	2301      	movs	r3, #1
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	e001      	b.n	8004812 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004812:	f001 fbbb 	bl	8005f8c <vPortExitCritical>

	return xReturn;
 8004816:	68fb      	ldr	r3, [r7, #12]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	e014      	b.n	800485a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004830:	4a0e      	ldr	r2, [pc, #56]	; (800486c <vQueueAddToRegistry+0x4c>)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10b      	bne.n	8004854 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800483c:	490b      	ldr	r1, [pc, #44]	; (800486c <vQueueAddToRegistry+0x4c>)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004846:	4a09      	ldr	r2, [pc, #36]	; (800486c <vQueueAddToRegistry+0x4c>)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	4413      	add	r3, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004852:	e006      	b.n	8004862 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3301      	adds	r3, #1
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b07      	cmp	r3, #7
 800485e:	d9e7      	bls.n	8004830 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr
 800486c:	2000097c 	.word	0x2000097c

08004870 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004880:	f001 fb54 	bl	8005f2c <vPortEnterCritical>
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800488a:	b25b      	sxtb	r3, r3
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	d103      	bne.n	800489a <vQueueWaitForMessageRestricted+0x2a>
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048a0:	b25b      	sxtb	r3, r3
 80048a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a6:	d103      	bne.n	80048b0 <vQueueWaitForMessageRestricted+0x40>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048b0:	f001 fb6c 	bl	8005f8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	3324      	adds	r3, #36	; 0x24
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	68b9      	ldr	r1, [r7, #8]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fc5b 	bl	8005180 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048ca:	6978      	ldr	r0, [r7, #20]
 80048cc:	f7ff ff28 	bl	8004720 <prvUnlockQueue>
	}
 80048d0:	bf00      	nop
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08e      	sub	sp, #56	; 0x38
 80048dc:	af04      	add	r7, sp, #16
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <xTaskCreateStatic+0x2a>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	623b      	str	r3, [r7, #32]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <xTaskCreateStatic+0x46>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	61fb      	str	r3, [r7, #28]
}
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800491e:	23bc      	movs	r3, #188	; 0xbc
 8004920:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2bbc      	cmp	r3, #188	; 0xbc
 8004926:	d00a      	beq.n	800493e <xTaskCreateStatic+0x66>
	__asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	61bb      	str	r3, [r7, #24]
}
 800493a:	bf00      	nop
 800493c:	e7fe      	b.n	800493c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800493e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01e      	beq.n	8004982 <xTaskCreateStatic+0xaa>
 8004944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004946:	2b00      	cmp	r3, #0
 8004948:	d01b      	beq.n	8004982 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800494a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004952:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	2202      	movs	r2, #2
 8004958:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800495c:	2300      	movs	r3, #0
 800495e:	9303      	str	r3, [sp, #12]
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	9302      	str	r3, [sp, #8]
 8004964:	f107 0314 	add.w	r3, r7, #20
 8004968:	9301      	str	r3, [sp, #4]
 800496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	68b9      	ldr	r1, [r7, #8]
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f851 	bl	8004a1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800497a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800497c:	f000 f8ec 	bl	8004b58 <prvAddNewTaskToReadyList>
 8004980:	e001      	b.n	8004986 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004986:	697b      	ldr	r3, [r7, #20]
	}
 8004988:	4618      	mov	r0, r3
 800498a:	3728      	adds	r7, #40	; 0x28
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08c      	sub	sp, #48	; 0x30
 8004994:	af04      	add	r7, sp, #16
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	4613      	mov	r3, r2
 800499e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049a0:	88fb      	ldrh	r3, [r7, #6]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f001 fbc1 	bl	800612c <pvPortMalloc>
 80049aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00e      	beq.n	80049d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80049b2:	20bc      	movs	r0, #188	; 0xbc
 80049b4:	f001 fbba 	bl	800612c <pvPortMalloc>
 80049b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30
 80049c6:	e005      	b.n	80049d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049c8:	6978      	ldr	r0, [r7, #20]
 80049ca:	f001 fc73 	bl	80062b4 <vPortFree>
 80049ce:	e001      	b.n	80049d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d017      	beq.n	8004a0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049e2:	88fa      	ldrh	r2, [r7, #6]
 80049e4:	2300      	movs	r3, #0
 80049e6:	9303      	str	r3, [sp, #12]
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	9302      	str	r3, [sp, #8]
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f80f 	bl	8004a1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049fe:	69f8      	ldr	r0, [r7, #28]
 8004a00:	f000 f8aa 	bl	8004b58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a04:	2301      	movs	r3, #1
 8004a06:	61bb      	str	r3, [r7, #24]
 8004a08:	e002      	b.n	8004a10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a10:	69bb      	ldr	r3, [r7, #24]
	}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	461a      	mov	r2, r3
 8004a34:	21a5      	movs	r1, #165	; 0xa5
 8004a36:	f001 fd8b 	bl	8006550 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a44:	3b01      	subs	r3, #1
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	f023 0307 	bic.w	r3, r3, #7
 8004a52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	617b      	str	r3, [r7, #20]
}
 8004a70:	bf00      	nop
 8004a72:	e7fe      	b.n	8004a72 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a74:	2300      	movs	r3, #0
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	e012      	b.n	8004aa0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	4413      	add	r3, r2
 8004a80:	7819      	ldrb	r1, [r3, #0]
 8004a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	4413      	add	r3, r2
 8004a88:	3334      	adds	r3, #52	; 0x34
 8004a8a:	460a      	mov	r2, r1
 8004a8c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	4413      	add	r3, r2
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d006      	beq.n	8004aa8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	2b0f      	cmp	r3, #15
 8004aa4:	d9e9      	bls.n	8004a7a <prvInitialiseNewTask+0x5e>
 8004aa6:	e000      	b.n	8004aaa <prvInitialiseNewTask+0x8e>
		{
			break;
 8004aa8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	2b37      	cmp	r3, #55	; 0x37
 8004ab6:	d901      	bls.n	8004abc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ab8:	2337      	movs	r3, #55	; 0x37
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ac0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ac6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	2200      	movs	r2, #0
 8004acc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff f98b 	bl	8003dee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	3318      	adds	r3, #24
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff f986 	bl	8003dee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	3354      	adds	r3, #84	; 0x54
 8004b0c:	2260      	movs	r2, #96	; 0x60
 8004b0e:	2100      	movs	r1, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 fd1d 	bl	8006550 <memset>
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	4a0c      	ldr	r2, [pc, #48]	; (8004b4c <prvInitialiseNewTask+0x130>)
 8004b1a:	659a      	str	r2, [r3, #88]	; 0x58
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	4a0c      	ldr	r2, [pc, #48]	; (8004b50 <prvInitialiseNewTask+0x134>)
 8004b20:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	4a0b      	ldr	r2, [pc, #44]	; (8004b54 <prvInitialiseNewTask+0x138>)
 8004b26:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	68f9      	ldr	r1, [r7, #12]
 8004b2c:	69b8      	ldr	r0, [r7, #24]
 8004b2e:	f001 f90b 	bl	8005d48 <pxPortInitialiseStack>
 8004b32:	4602      	mov	r2, r0
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b44:	bf00      	nop
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	080070f4 	.word	0x080070f4
 8004b50:	08007114 	.word	0x08007114
 8004b54:	080070d4 	.word	0x080070d4

08004b58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b60:	f001 f9e4 	bl	8005f2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b64:	4b2d      	ldr	r3, [pc, #180]	; (8004c1c <prvAddNewTaskToReadyList+0xc4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	4a2c      	ldr	r2, [pc, #176]	; (8004c1c <prvAddNewTaskToReadyList+0xc4>)
 8004b6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b6e:	4b2c      	ldr	r3, [pc, #176]	; (8004c20 <prvAddNewTaskToReadyList+0xc8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d109      	bne.n	8004b8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b76:	4a2a      	ldr	r2, [pc, #168]	; (8004c20 <prvAddNewTaskToReadyList+0xc8>)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b7c:	4b27      	ldr	r3, [pc, #156]	; (8004c1c <prvAddNewTaskToReadyList+0xc4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d110      	bne.n	8004ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b84:	f000 fc28 	bl	80053d8 <prvInitialiseTaskLists>
 8004b88:	e00d      	b.n	8004ba6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b8a:	4b26      	ldr	r3, [pc, #152]	; (8004c24 <prvAddNewTaskToReadyList+0xcc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b92:	4b23      	ldr	r3, [pc, #140]	; (8004c20 <prvAddNewTaskToReadyList+0xc8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d802      	bhi.n	8004ba6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ba0:	4a1f      	ldr	r2, [pc, #124]	; (8004c20 <prvAddNewTaskToReadyList+0xc8>)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ba6:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <prvAddNewTaskToReadyList+0xd0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3301      	adds	r3, #1
 8004bac:	4a1e      	ldr	r2, [pc, #120]	; (8004c28 <prvAddNewTaskToReadyList+0xd0>)
 8004bae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bb0:	4b1d      	ldr	r3, [pc, #116]	; (8004c28 <prvAddNewTaskToReadyList+0xd0>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbc:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <prvAddNewTaskToReadyList+0xd4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d903      	bls.n	8004bcc <prvAddNewTaskToReadyList+0x74>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	4a18      	ldr	r2, [pc, #96]	; (8004c2c <prvAddNewTaskToReadyList+0xd4>)
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <prvAddNewTaskToReadyList+0xd8>)
 8004bda:	441a      	add	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4619      	mov	r1, r3
 8004be2:	4610      	mov	r0, r2
 8004be4:	f7ff f90f 	bl	8003e06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004be8:	f001 f9d0 	bl	8005f8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004bec:	4b0d      	ldr	r3, [pc, #52]	; (8004c24 <prvAddNewTaskToReadyList+0xcc>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00e      	beq.n	8004c12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bf4:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <prvAddNewTaskToReadyList+0xc8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d207      	bcs.n	8004c12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c02:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <prvAddNewTaskToReadyList+0xdc>)
 8004c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c12:	bf00      	nop
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000e90 	.word	0x20000e90
 8004c20:	200009bc 	.word	0x200009bc
 8004c24:	20000e9c 	.word	0x20000e9c
 8004c28:	20000eac 	.word	0x20000eac
 8004c2c:	20000e98 	.word	0x20000e98
 8004c30:	200009c0 	.word	0x200009c0
 8004c34:	e000ed04 	.word	0xe000ed04

08004c38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d017      	beq.n	8004c7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c4a:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <vTaskDelay+0x60>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <vTaskDelay+0x30>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	60bb      	str	r3, [r7, #8]
}
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c68:	f000 f88a 	bl	8004d80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fd04 	bl	800567c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c74:	f000 f892 	bl	8004d9c <xTaskResumeAll>
 8004c78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d107      	bne.n	8004c90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <vTaskDelay+0x64>)
 8004c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c90:	bf00      	nop
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20000eb8 	.word	0x20000eb8
 8004c9c:	e000ed04 	.word	0xe000ed04

08004ca0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	; 0x28
 8004ca4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cae:	463a      	mov	r2, r7
 8004cb0:	1d39      	adds	r1, r7, #4
 8004cb2:	f107 0308 	add.w	r3, r7, #8
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff f848 	bl	8003d4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004cbc:	6839      	ldr	r1, [r7, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	9202      	str	r2, [sp, #8]
 8004cc4:	9301      	str	r3, [sp, #4]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	460a      	mov	r2, r1
 8004cce:	4924      	ldr	r1, [pc, #144]	; (8004d60 <vTaskStartScheduler+0xc0>)
 8004cd0:	4824      	ldr	r0, [pc, #144]	; (8004d64 <vTaskStartScheduler+0xc4>)
 8004cd2:	f7ff fe01 	bl	80048d8 <xTaskCreateStatic>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4a23      	ldr	r2, [pc, #140]	; (8004d68 <vTaskStartScheduler+0xc8>)
 8004cda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cdc:	4b22      	ldr	r3, [pc, #136]	; (8004d68 <vTaskStartScheduler+0xc8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	e001      	b.n	8004cee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d102      	bne.n	8004cfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004cf4:	f000 fd16 	bl	8005724 <xTimerCreateTimerTask>
 8004cf8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d11b      	bne.n	8004d38 <vTaskStartScheduler+0x98>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	613b      	str	r3, [r7, #16]
}
 8004d12:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d14:	4b15      	ldr	r3, [pc, #84]	; (8004d6c <vTaskStartScheduler+0xcc>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3354      	adds	r3, #84	; 0x54
 8004d1a:	4a15      	ldr	r2, [pc, #84]	; (8004d70 <vTaskStartScheduler+0xd0>)
 8004d1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d1e:	4b15      	ldr	r3, [pc, #84]	; (8004d74 <vTaskStartScheduler+0xd4>)
 8004d20:	f04f 32ff 	mov.w	r2, #4294967295
 8004d24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d26:	4b14      	ldr	r3, [pc, #80]	; (8004d78 <vTaskStartScheduler+0xd8>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004d2c:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <vTaskStartScheduler+0xdc>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d32:	f001 f889 	bl	8005e48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d36:	e00e      	b.n	8004d56 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3e:	d10a      	bne.n	8004d56 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	60fb      	str	r3, [r7, #12]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <vTaskStartScheduler+0xb4>
}
 8004d56:	bf00      	nop
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	08007080 	.word	0x08007080
 8004d64:	080053a9 	.word	0x080053a9
 8004d68:	20000eb4 	.word	0x20000eb4
 8004d6c:	200009bc 	.word	0x200009bc
 8004d70:	20000028 	.word	0x20000028
 8004d74:	20000eb0 	.word	0x20000eb0
 8004d78:	20000e9c 	.word	0x20000e9c
 8004d7c:	20000e94 	.word	0x20000e94

08004d80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004d84:	4b04      	ldr	r3, [pc, #16]	; (8004d98 <vTaskSuspendAll+0x18>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	4a03      	ldr	r2, [pc, #12]	; (8004d98 <vTaskSuspendAll+0x18>)
 8004d8c:	6013      	str	r3, [r2, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	20000eb8 	.word	0x20000eb8

08004d9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004daa:	4b42      	ldr	r3, [pc, #264]	; (8004eb4 <xTaskResumeAll+0x118>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	603b      	str	r3, [r7, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	e7fe      	b.n	8004dc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004dc8:	f001 f8b0 	bl	8005f2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004dcc:	4b39      	ldr	r3, [pc, #228]	; (8004eb4 <xTaskResumeAll+0x118>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	4a38      	ldr	r2, [pc, #224]	; (8004eb4 <xTaskResumeAll+0x118>)
 8004dd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dd6:	4b37      	ldr	r3, [pc, #220]	; (8004eb4 <xTaskResumeAll+0x118>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d162      	bne.n	8004ea4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dde:	4b36      	ldr	r3, [pc, #216]	; (8004eb8 <xTaskResumeAll+0x11c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d05e      	beq.n	8004ea4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004de6:	e02f      	b.n	8004e48 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004de8:	4b34      	ldr	r3, [pc, #208]	; (8004ebc <xTaskResumeAll+0x120>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3318      	adds	r3, #24
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff f861 	bl	8003ebc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff f85c 	bl	8003ebc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e08:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <xTaskResumeAll+0x124>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d903      	bls.n	8004e18 <xTaskResumeAll+0x7c>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	4a2a      	ldr	r2, [pc, #168]	; (8004ec0 <xTaskResumeAll+0x124>)
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4a27      	ldr	r2, [pc, #156]	; (8004ec4 <xTaskResumeAll+0x128>)
 8004e26:	441a      	add	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	f7fe ffe9 	bl	8003e06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e38:	4b23      	ldr	r3, [pc, #140]	; (8004ec8 <xTaskResumeAll+0x12c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d302      	bcc.n	8004e48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004e42:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <xTaskResumeAll+0x130>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e48:	4b1c      	ldr	r3, [pc, #112]	; (8004ebc <xTaskResumeAll+0x120>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1cb      	bne.n	8004de8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e56:	f000 fb61 	bl	800551c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004e5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <xTaskResumeAll+0x134>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d010      	beq.n	8004e88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e66:	f000 f845 	bl	8004ef4 <xTaskIncrementTick>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e70:	4b16      	ldr	r3, [pc, #88]	; (8004ecc <xTaskResumeAll+0x130>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f1      	bne.n	8004e66 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004e82:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <xTaskResumeAll+0x134>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e88:	4b10      	ldr	r3, [pc, #64]	; (8004ecc <xTaskResumeAll+0x130>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d009      	beq.n	8004ea4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e94:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <xTaskResumeAll+0x138>)
 8004e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ea4:	f001 f872 	bl	8005f8c <vPortExitCritical>

	return xAlreadyYielded;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000eb8 	.word	0x20000eb8
 8004eb8:	20000e90 	.word	0x20000e90
 8004ebc:	20000e50 	.word	0x20000e50
 8004ec0:	20000e98 	.word	0x20000e98
 8004ec4:	200009c0 	.word	0x200009c0
 8004ec8:	200009bc 	.word	0x200009bc
 8004ecc:	20000ea4 	.word	0x20000ea4
 8004ed0:	20000ea0 	.word	0x20000ea0
 8004ed4:	e000ed04 	.word	0xe000ed04

08004ed8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004ede:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <xTaskGetTickCount+0x18>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ee4:	687b      	ldr	r3, [r7, #4]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr
 8004ef0:	20000e94 	.word	0x20000e94

08004ef4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004efe:	4b51      	ldr	r3, [pc, #324]	; (8005044 <xTaskIncrementTick+0x150>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f040 808e 	bne.w	8005024 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f08:	4b4f      	ldr	r3, [pc, #316]	; (8005048 <xTaskIncrementTick+0x154>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f10:	4a4d      	ldr	r2, [pc, #308]	; (8005048 <xTaskIncrementTick+0x154>)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d120      	bne.n	8004f5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f1c:	4b4b      	ldr	r3, [pc, #300]	; (800504c <xTaskIncrementTick+0x158>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <xTaskIncrementTick+0x48>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	603b      	str	r3, [r7, #0]
}
 8004f38:	bf00      	nop
 8004f3a:	e7fe      	b.n	8004f3a <xTaskIncrementTick+0x46>
 8004f3c:	4b43      	ldr	r3, [pc, #268]	; (800504c <xTaskIncrementTick+0x158>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	4b43      	ldr	r3, [pc, #268]	; (8005050 <xTaskIncrementTick+0x15c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a41      	ldr	r2, [pc, #260]	; (800504c <xTaskIncrementTick+0x158>)
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	4a41      	ldr	r2, [pc, #260]	; (8005050 <xTaskIncrementTick+0x15c>)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	4b40      	ldr	r3, [pc, #256]	; (8005054 <xTaskIncrementTick+0x160>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3301      	adds	r3, #1
 8004f56:	4a3f      	ldr	r2, [pc, #252]	; (8005054 <xTaskIncrementTick+0x160>)
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	f000 fadf 	bl	800551c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f5e:	4b3e      	ldr	r3, [pc, #248]	; (8005058 <xTaskIncrementTick+0x164>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d34e      	bcc.n	8005006 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f68:	4b38      	ldr	r3, [pc, #224]	; (800504c <xTaskIncrementTick+0x158>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <xTaskIncrementTick+0x82>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <xTaskIncrementTick+0x84>
 8004f76:	2300      	movs	r3, #0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f7c:	4b36      	ldr	r3, [pc, #216]	; (8005058 <xTaskIncrementTick+0x164>)
 8004f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f82:	601a      	str	r2, [r3, #0]
					break;
 8004f84:	e03f      	b.n	8005006 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f86:	4b31      	ldr	r3, [pc, #196]	; (800504c <xTaskIncrementTick+0x158>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d203      	bcs.n	8004fa6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f9e:	4a2e      	ldr	r2, [pc, #184]	; (8005058 <xTaskIncrementTick+0x164>)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6013      	str	r3, [r2, #0]
						break;
 8004fa4:	e02f      	b.n	8005006 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fe ff86 	bl	8003ebc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d004      	beq.n	8004fc2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	3318      	adds	r3, #24
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fe ff7d 	bl	8003ebc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc6:	4b25      	ldr	r3, [pc, #148]	; (800505c <xTaskIncrementTick+0x168>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d903      	bls.n	8004fd6 <xTaskIncrementTick+0xe2>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	4a22      	ldr	r2, [pc, #136]	; (800505c <xTaskIncrementTick+0x168>)
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4a1f      	ldr	r2, [pc, #124]	; (8005060 <xTaskIncrementTick+0x16c>)
 8004fe4:	441a      	add	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	4619      	mov	r1, r3
 8004fec:	4610      	mov	r0, r2
 8004fee:	f7fe ff0a 	bl	8003e06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff6:	4b1b      	ldr	r3, [pc, #108]	; (8005064 <xTaskIncrementTick+0x170>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d3b3      	bcc.n	8004f68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005000:	2301      	movs	r3, #1
 8005002:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005004:	e7b0      	b.n	8004f68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005006:	4b17      	ldr	r3, [pc, #92]	; (8005064 <xTaskIncrementTick+0x170>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500c:	4914      	ldr	r1, [pc, #80]	; (8005060 <xTaskIncrementTick+0x16c>)
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d907      	bls.n	800502e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800501e:	2301      	movs	r3, #1
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	e004      	b.n	800502e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005024:	4b10      	ldr	r3, [pc, #64]	; (8005068 <xTaskIncrementTick+0x174>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3301      	adds	r3, #1
 800502a:	4a0f      	ldr	r2, [pc, #60]	; (8005068 <xTaskIncrementTick+0x174>)
 800502c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800502e:	4b0f      	ldr	r3, [pc, #60]	; (800506c <xTaskIncrementTick+0x178>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005036:	2301      	movs	r3, #1
 8005038:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800503a:	697b      	ldr	r3, [r7, #20]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20000eb8 	.word	0x20000eb8
 8005048:	20000e94 	.word	0x20000e94
 800504c:	20000e48 	.word	0x20000e48
 8005050:	20000e4c 	.word	0x20000e4c
 8005054:	20000ea8 	.word	0x20000ea8
 8005058:	20000eb0 	.word	0x20000eb0
 800505c:	20000e98 	.word	0x20000e98
 8005060:	200009c0 	.word	0x200009c0
 8005064:	200009bc 	.word	0x200009bc
 8005068:	20000ea0 	.word	0x20000ea0
 800506c:	20000ea4 	.word	0x20000ea4

08005070 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005076:	4b2a      	ldr	r3, [pc, #168]	; (8005120 <vTaskSwitchContext+0xb0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800507e:	4b29      	ldr	r3, [pc, #164]	; (8005124 <vTaskSwitchContext+0xb4>)
 8005080:	2201      	movs	r2, #1
 8005082:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005084:	e046      	b.n	8005114 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005086:	4b27      	ldr	r3, [pc, #156]	; (8005124 <vTaskSwitchContext+0xb4>)
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800508c:	4b26      	ldr	r3, [pc, #152]	; (8005128 <vTaskSwitchContext+0xb8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	e010      	b.n	80050b6 <vTaskSwitchContext+0x46>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10a      	bne.n	80050b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	607b      	str	r3, [r7, #4]
}
 80050ac:	bf00      	nop
 80050ae:	e7fe      	b.n	80050ae <vTaskSwitchContext+0x3e>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	491d      	ldr	r1, [pc, #116]	; (800512c <vTaskSwitchContext+0xbc>)
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0e4      	beq.n	8005094 <vTaskSwitchContext+0x24>
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4a15      	ldr	r2, [pc, #84]	; (800512c <vTaskSwitchContext+0xbc>)
 80050d6:	4413      	add	r3, r2
 80050d8:	60bb      	str	r3, [r7, #8]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	605a      	str	r2, [r3, #4]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	3308      	adds	r3, #8
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d104      	bne.n	80050fa <vTaskSwitchContext+0x8a>
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	605a      	str	r2, [r3, #4]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4a0b      	ldr	r2, [pc, #44]	; (8005130 <vTaskSwitchContext+0xc0>)
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	4a08      	ldr	r2, [pc, #32]	; (8005128 <vTaskSwitchContext+0xb8>)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800510a:	4b09      	ldr	r3, [pc, #36]	; (8005130 <vTaskSwitchContext+0xc0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3354      	adds	r3, #84	; 0x54
 8005110:	4a08      	ldr	r2, [pc, #32]	; (8005134 <vTaskSwitchContext+0xc4>)
 8005112:	6013      	str	r3, [r2, #0]
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	20000eb8 	.word	0x20000eb8
 8005124:	20000ea4 	.word	0x20000ea4
 8005128:	20000e98 	.word	0x20000e98
 800512c:	200009c0 	.word	0x200009c0
 8005130:	200009bc 	.word	0x200009bc
 8005134:	20000028 	.word	0x20000028

08005138 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	60fb      	str	r3, [r7, #12]
}
 800515a:	bf00      	nop
 800515c:	e7fe      	b.n	800515c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800515e:	4b07      	ldr	r3, [pc, #28]	; (800517c <vTaskPlaceOnEventList+0x44>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3318      	adds	r3, #24
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fe fe70 	bl	8003e4c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800516c:	2101      	movs	r1, #1
 800516e:	6838      	ldr	r0, [r7, #0]
 8005170:	f000 fa84 	bl	800567c <prvAddCurrentTaskToDelayedList>
}
 8005174:	bf00      	nop
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	200009bc 	.word	0x200009bc

08005180 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	617b      	str	r3, [r7, #20]
}
 80051a4:	bf00      	nop
 80051a6:	e7fe      	b.n	80051a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051a8:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3318      	adds	r3, #24
 80051ae:	4619      	mov	r1, r3
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7fe fe28 	bl	8003e06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80051bc:	f04f 33ff 	mov.w	r3, #4294967295
 80051c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	68b8      	ldr	r0, [r7, #8]
 80051c6:	f000 fa59 	bl	800567c <prvAddCurrentTaskToDelayedList>
	}
 80051ca:	bf00      	nop
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	200009bc 	.word	0x200009bc

080051d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10a      	bne.n	8005204 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	60fb      	str	r3, [r7, #12]
}
 8005200:	bf00      	nop
 8005202:	e7fe      	b.n	8005202 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	3318      	adds	r3, #24
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe fe57 	bl	8003ebc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800520e:	4b1e      	ldr	r3, [pc, #120]	; (8005288 <xTaskRemoveFromEventList+0xb0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d11d      	bne.n	8005252 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	3304      	adds	r3, #4
 800521a:	4618      	mov	r0, r3
 800521c:	f7fe fe4e 	bl	8003ebc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	4b19      	ldr	r3, [pc, #100]	; (800528c <xTaskRemoveFromEventList+0xb4>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d903      	bls.n	8005234 <xTaskRemoveFromEventList+0x5c>
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	4a16      	ldr	r2, [pc, #88]	; (800528c <xTaskRemoveFromEventList+0xb4>)
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4a13      	ldr	r2, [pc, #76]	; (8005290 <xTaskRemoveFromEventList+0xb8>)
 8005242:	441a      	add	r2, r3
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	3304      	adds	r3, #4
 8005248:	4619      	mov	r1, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f7fe fddb 	bl	8003e06 <vListInsertEnd>
 8005250:	e005      	b.n	800525e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3318      	adds	r3, #24
 8005256:	4619      	mov	r1, r3
 8005258:	480e      	ldr	r0, [pc, #56]	; (8005294 <xTaskRemoveFromEventList+0xbc>)
 800525a:	f7fe fdd4 	bl	8003e06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005262:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <xTaskRemoveFromEventList+0xc0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	429a      	cmp	r2, r3
 800526a:	d905      	bls.n	8005278 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800526c:	2301      	movs	r3, #1
 800526e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005270:	4b0a      	ldr	r3, [pc, #40]	; (800529c <xTaskRemoveFromEventList+0xc4>)
 8005272:	2201      	movs	r2, #1
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	e001      	b.n	800527c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800527c:	697b      	ldr	r3, [r7, #20]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20000eb8 	.word	0x20000eb8
 800528c:	20000e98 	.word	0x20000e98
 8005290:	200009c0 	.word	0x200009c0
 8005294:	20000e50 	.word	0x20000e50
 8005298:	200009bc 	.word	0x200009bc
 800529c:	20000ea4 	.word	0x20000ea4

080052a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052a8:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <vTaskInternalSetTimeOutState+0x24>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052b0:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <vTaskInternalSetTimeOutState+0x28>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	605a      	str	r2, [r3, #4]
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	bc80      	pop	{r7}
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20000ea8 	.word	0x20000ea8
 80052c8:	20000e94 	.word	0x20000e94

080052cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	613b      	str	r3, [r7, #16]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10a      	bne.n	800530e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	60fb      	str	r3, [r7, #12]
}
 800530a:	bf00      	nop
 800530c:	e7fe      	b.n	800530c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800530e:	f000 fe0d 	bl	8005f2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005312:	4b1d      	ldr	r3, [pc, #116]	; (8005388 <xTaskCheckForTimeOut+0xbc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532a:	d102      	bne.n	8005332 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800532c:	2300      	movs	r3, #0
 800532e:	61fb      	str	r3, [r7, #28]
 8005330:	e023      	b.n	800537a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b15      	ldr	r3, [pc, #84]	; (800538c <xTaskCheckForTimeOut+0xc0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d007      	beq.n	800534e <xTaskCheckForTimeOut+0x82>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	429a      	cmp	r2, r3
 8005346:	d302      	bcc.n	800534e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005348:	2301      	movs	r3, #1
 800534a:	61fb      	str	r3, [r7, #28]
 800534c:	e015      	b.n	800537a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	429a      	cmp	r2, r3
 8005356:	d20b      	bcs.n	8005370 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	1ad2      	subs	r2, r2, r3
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff ff9b 	bl	80052a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	e004      	b.n	800537a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005376:	2301      	movs	r3, #1
 8005378:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800537a:	f000 fe07 	bl	8005f8c <vPortExitCritical>

	return xReturn;
 800537e:	69fb      	ldr	r3, [r7, #28]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3720      	adds	r7, #32
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20000e94 	.word	0x20000e94
 800538c:	20000ea8 	.word	0x20000ea8

08005390 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005394:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <vTaskMissedYield+0x14>)
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]
}
 800539a:	bf00      	nop
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	20000ea4 	.word	0x20000ea4

080053a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053b0:	f000 f852 	bl	8005458 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <prvIdleTask+0x28>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d9f9      	bls.n	80053b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053bc:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <prvIdleTask+0x2c>)
 80053be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053cc:	e7f0      	b.n	80053b0 <prvIdleTask+0x8>
 80053ce:	bf00      	nop
 80053d0:	200009c0 	.word	0x200009c0
 80053d4:	e000ed04 	.word	0xe000ed04

080053d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053de:	2300      	movs	r3, #0
 80053e0:	607b      	str	r3, [r7, #4]
 80053e2:	e00c      	b.n	80053fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4613      	mov	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4a12      	ldr	r2, [pc, #72]	; (8005438 <prvInitialiseTaskLists+0x60>)
 80053f0:	4413      	add	r3, r2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fe fcdc 	bl	8003db0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3301      	adds	r3, #1
 80053fc:	607b      	str	r3, [r7, #4]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b37      	cmp	r3, #55	; 0x37
 8005402:	d9ef      	bls.n	80053e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005404:	480d      	ldr	r0, [pc, #52]	; (800543c <prvInitialiseTaskLists+0x64>)
 8005406:	f7fe fcd3 	bl	8003db0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800540a:	480d      	ldr	r0, [pc, #52]	; (8005440 <prvInitialiseTaskLists+0x68>)
 800540c:	f7fe fcd0 	bl	8003db0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005410:	480c      	ldr	r0, [pc, #48]	; (8005444 <prvInitialiseTaskLists+0x6c>)
 8005412:	f7fe fccd 	bl	8003db0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005416:	480c      	ldr	r0, [pc, #48]	; (8005448 <prvInitialiseTaskLists+0x70>)
 8005418:	f7fe fcca 	bl	8003db0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800541c:	480b      	ldr	r0, [pc, #44]	; (800544c <prvInitialiseTaskLists+0x74>)
 800541e:	f7fe fcc7 	bl	8003db0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005422:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <prvInitialiseTaskLists+0x78>)
 8005424:	4a05      	ldr	r2, [pc, #20]	; (800543c <prvInitialiseTaskLists+0x64>)
 8005426:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <prvInitialiseTaskLists+0x7c>)
 800542a:	4a05      	ldr	r2, [pc, #20]	; (8005440 <prvInitialiseTaskLists+0x68>)
 800542c:	601a      	str	r2, [r3, #0]
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	200009c0 	.word	0x200009c0
 800543c:	20000e20 	.word	0x20000e20
 8005440:	20000e34 	.word	0x20000e34
 8005444:	20000e50 	.word	0x20000e50
 8005448:	20000e64 	.word	0x20000e64
 800544c:	20000e7c 	.word	0x20000e7c
 8005450:	20000e48 	.word	0x20000e48
 8005454:	20000e4c 	.word	0x20000e4c

08005458 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800545e:	e019      	b.n	8005494 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005460:	f000 fd64 	bl	8005f2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005464:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <prvCheckTasksWaitingTermination+0x50>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3304      	adds	r3, #4
 8005470:	4618      	mov	r0, r3
 8005472:	f7fe fd23 	bl	8003ebc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005476:	4b0d      	ldr	r3, [pc, #52]	; (80054ac <prvCheckTasksWaitingTermination+0x54>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3b01      	subs	r3, #1
 800547c:	4a0b      	ldr	r2, [pc, #44]	; (80054ac <prvCheckTasksWaitingTermination+0x54>)
 800547e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005480:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <prvCheckTasksWaitingTermination+0x58>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3b01      	subs	r3, #1
 8005486:	4a0a      	ldr	r2, [pc, #40]	; (80054b0 <prvCheckTasksWaitingTermination+0x58>)
 8005488:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800548a:	f000 fd7f 	bl	8005f8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f810 	bl	80054b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005494:	4b06      	ldr	r3, [pc, #24]	; (80054b0 <prvCheckTasksWaitingTermination+0x58>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e1      	bne.n	8005460 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800549c:	bf00      	nop
 800549e:	bf00      	nop
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20000e64 	.word	0x20000e64
 80054ac:	20000e90 	.word	0x20000e90
 80054b0:	20000e78 	.word	0x20000e78

080054b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3354      	adds	r3, #84	; 0x54
 80054c0:	4618      	mov	r0, r3
 80054c2:	f001 f8ef 	bl	80066a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d108      	bne.n	80054e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 feed 	bl	80062b4 <vPortFree>
				vPortFree( pxTCB );
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 feea 	bl	80062b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054e0:	e018      	b.n	8005514 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d103      	bne.n	80054f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fee1 	bl	80062b4 <vPortFree>
	}
 80054f2:	e00f      	b.n	8005514 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d00a      	beq.n	8005514 <prvDeleteTCB+0x60>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	60fb      	str	r3, [r7, #12]
}
 8005510:	bf00      	nop
 8005512:	e7fe      	b.n	8005512 <prvDeleteTCB+0x5e>
	}
 8005514:	bf00      	nop
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005522:	4b0e      	ldr	r3, [pc, #56]	; (800555c <prvResetNextTaskUnblockTime+0x40>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <prvResetNextTaskUnblockTime+0x14>
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <prvResetNextTaskUnblockTime+0x16>
 8005530:	2300      	movs	r3, #0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d004      	beq.n	8005540 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005536:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <prvResetNextTaskUnblockTime+0x44>)
 8005538:	f04f 32ff 	mov.w	r2, #4294967295
 800553c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800553e:	e008      	b.n	8005552 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005540:	4b06      	ldr	r3, [pc, #24]	; (800555c <prvResetNextTaskUnblockTime+0x40>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	4a04      	ldr	r2, [pc, #16]	; (8005560 <prvResetNextTaskUnblockTime+0x44>)
 8005550:	6013      	str	r3, [r2, #0]
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr
 800555c:	20000e48 	.word	0x20000e48
 8005560:	20000eb0 	.word	0x20000eb0

08005564 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800556a:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <xTaskGetSchedulerState+0x34>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d102      	bne.n	8005578 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005572:	2301      	movs	r3, #1
 8005574:	607b      	str	r3, [r7, #4]
 8005576:	e008      	b.n	800558a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005578:	4b08      	ldr	r3, [pc, #32]	; (800559c <xTaskGetSchedulerState+0x38>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d102      	bne.n	8005586 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005580:	2302      	movs	r3, #2
 8005582:	607b      	str	r3, [r7, #4]
 8005584:	e001      	b.n	800558a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005586:	2300      	movs	r3, #0
 8005588:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800558a:	687b      	ldr	r3, [r7, #4]
	}
 800558c:	4618      	mov	r0, r3
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	bc80      	pop	{r7}
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	20000e9c 	.word	0x20000e9c
 800559c:	20000eb8 	.word	0x20000eb8

080055a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d056      	beq.n	8005664 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055b6:	4b2e      	ldr	r3, [pc, #184]	; (8005670 <xTaskPriorityDisinherit+0xd0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d00a      	beq.n	80055d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	60fb      	str	r3, [r7, #12]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10a      	bne.n	80055f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	60bb      	str	r3, [r7, #8]
}
 80055f0:	bf00      	nop
 80055f2:	e7fe      	b.n	80055f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f8:	1e5a      	subs	r2, r3, #1
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005606:	429a      	cmp	r2, r3
 8005608:	d02c      	beq.n	8005664 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560e:	2b00      	cmp	r3, #0
 8005610:	d128      	bne.n	8005664 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	3304      	adds	r3, #4
 8005616:	4618      	mov	r0, r3
 8005618:	f7fe fc50 	bl	8003ebc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <xTaskPriorityDisinherit+0xd4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d903      	bls.n	8005644 <xTaskPriorityDisinherit+0xa4>
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	4a0c      	ldr	r2, [pc, #48]	; (8005674 <xTaskPriorityDisinherit+0xd4>)
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005648:	4613      	mov	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4a09      	ldr	r2, [pc, #36]	; (8005678 <xTaskPriorityDisinherit+0xd8>)
 8005652:	441a      	add	r2, r3
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	3304      	adds	r3, #4
 8005658:	4619      	mov	r1, r3
 800565a:	4610      	mov	r0, r2
 800565c:	f7fe fbd3 	bl	8003e06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005660:	2301      	movs	r3, #1
 8005662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005664:	697b      	ldr	r3, [r7, #20]
	}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	200009bc 	.word	0x200009bc
 8005674:	20000e98 	.word	0x20000e98
 8005678:	200009c0 	.word	0x200009c0

0800567c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005686:	4b21      	ldr	r3, [pc, #132]	; (800570c <prvAddCurrentTaskToDelayedList+0x90>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800568c:	4b20      	ldr	r3, [pc, #128]	; (8005710 <prvAddCurrentTaskToDelayedList+0x94>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3304      	adds	r3, #4
 8005692:	4618      	mov	r0, r3
 8005694:	f7fe fc12 	bl	8003ebc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569e:	d10a      	bne.n	80056b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056a6:	4b1a      	ldr	r3, [pc, #104]	; (8005710 <prvAddCurrentTaskToDelayedList+0x94>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4619      	mov	r1, r3
 80056ae:	4819      	ldr	r0, [pc, #100]	; (8005714 <prvAddCurrentTaskToDelayedList+0x98>)
 80056b0:	f7fe fba9 	bl	8003e06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80056b4:	e026      	b.n	8005704 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4413      	add	r3, r2
 80056bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80056be:	4b14      	ldr	r3, [pc, #80]	; (8005710 <prvAddCurrentTaskToDelayedList+0x94>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d209      	bcs.n	80056e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056ce:	4b12      	ldr	r3, [pc, #72]	; (8005718 <prvAddCurrentTaskToDelayedList+0x9c>)
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <prvAddCurrentTaskToDelayedList+0x94>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3304      	adds	r3, #4
 80056d8:	4619      	mov	r1, r3
 80056da:	4610      	mov	r0, r2
 80056dc:	f7fe fbb6 	bl	8003e4c <vListInsert>
}
 80056e0:	e010      	b.n	8005704 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056e2:	4b0e      	ldr	r3, [pc, #56]	; (800571c <prvAddCurrentTaskToDelayedList+0xa0>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <prvAddCurrentTaskToDelayedList+0x94>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4619      	mov	r1, r3
 80056ee:	4610      	mov	r0, r2
 80056f0:	f7fe fbac 	bl	8003e4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80056f4:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <prvAddCurrentTaskToDelayedList+0xa4>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d202      	bcs.n	8005704 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80056fe:	4a08      	ldr	r2, [pc, #32]	; (8005720 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	6013      	str	r3, [r2, #0]
}
 8005704:	bf00      	nop
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20000e94 	.word	0x20000e94
 8005710:	200009bc 	.word	0x200009bc
 8005714:	20000e7c 	.word	0x20000e7c
 8005718:	20000e4c 	.word	0x20000e4c
 800571c:	20000e48 	.word	0x20000e48
 8005720:	20000eb0 	.word	0x20000eb0

08005724 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08a      	sub	sp, #40	; 0x28
 8005728:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800572e:	f000 facb 	bl	8005cc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005732:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <xTimerCreateTimerTask+0x80>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d021      	beq.n	800577e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005742:	1d3a      	adds	r2, r7, #4
 8005744:	f107 0108 	add.w	r1, r7, #8
 8005748:	f107 030c 	add.w	r3, r7, #12
 800574c:	4618      	mov	r0, r3
 800574e:	f7fe fb15 	bl	8003d7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	9202      	str	r2, [sp, #8]
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	2302      	movs	r3, #2
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	2300      	movs	r3, #0
 8005762:	460a      	mov	r2, r1
 8005764:	4910      	ldr	r1, [pc, #64]	; (80057a8 <xTimerCreateTimerTask+0x84>)
 8005766:	4811      	ldr	r0, [pc, #68]	; (80057ac <xTimerCreateTimerTask+0x88>)
 8005768:	f7ff f8b6 	bl	80048d8 <xTaskCreateStatic>
 800576c:	4603      	mov	r3, r0
 800576e:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <xTimerCreateTimerTask+0x8c>)
 8005770:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005772:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <xTimerCreateTimerTask+0x8c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800577a:	2301      	movs	r3, #1
 800577c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	613b      	str	r3, [r7, #16]
}
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800579a:	697b      	ldr	r3, [r7, #20]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000eec 	.word	0x20000eec
 80057a8:	08007088 	.word	0x08007088
 80057ac:	080058d1 	.word	0x080058d1
 80057b0:	20000ef0 	.word	0x20000ef0

080057b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08a      	sub	sp, #40	; 0x28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	623b      	str	r3, [r7, #32]
}
 80057de:	bf00      	nop
 80057e0:	e7fe      	b.n	80057e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80057e2:	4b1a      	ldr	r3, [pc, #104]	; (800584c <xTimerGenericCommand+0x98>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d02a      	beq.n	8005840 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2b05      	cmp	r3, #5
 80057fa:	dc18      	bgt.n	800582e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80057fc:	f7ff feb2 	bl	8005564 <xTaskGetSchedulerState>
 8005800:	4603      	mov	r3, r0
 8005802:	2b02      	cmp	r3, #2
 8005804:	d109      	bne.n	800581a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005806:	4b11      	ldr	r3, [pc, #68]	; (800584c <xTimerGenericCommand+0x98>)
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	f107 0110 	add.w	r1, r7, #16
 800580e:	2300      	movs	r3, #0
 8005810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005812:	f7fe fc7f 	bl	8004114 <xQueueGenericSend>
 8005816:	6278      	str	r0, [r7, #36]	; 0x24
 8005818:	e012      	b.n	8005840 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800581a:	4b0c      	ldr	r3, [pc, #48]	; (800584c <xTimerGenericCommand+0x98>)
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	f107 0110 	add.w	r1, r7, #16
 8005822:	2300      	movs	r3, #0
 8005824:	2200      	movs	r2, #0
 8005826:	f7fe fc75 	bl	8004114 <xQueueGenericSend>
 800582a:	6278      	str	r0, [r7, #36]	; 0x24
 800582c:	e008      	b.n	8005840 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800582e:	4b07      	ldr	r3, [pc, #28]	; (800584c <xTimerGenericCommand+0x98>)
 8005830:	6818      	ldr	r0, [r3, #0]
 8005832:	f107 0110 	add.w	r1, r7, #16
 8005836:	2300      	movs	r3, #0
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	f7fe fd69 	bl	8004310 <xQueueGenericSendFromISR>
 800583e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005842:	4618      	mov	r0, r3
 8005844:	3728      	adds	r7, #40	; 0x28
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	20000eec 	.word	0x20000eec

08005850 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af02      	add	r7, sp, #8
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800585a:	4b1c      	ldr	r3, [pc, #112]	; (80058cc <prvProcessExpiredTimer+0x7c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	3304      	adds	r3, #4
 8005868:	4618      	mov	r0, r3
 800586a:	f7fe fb27 	bl	8003ebc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d122      	bne.n	80058bc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	18d1      	adds	r1, r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	6978      	ldr	r0, [r7, #20]
 8005884:	f000 f8c8 	bl	8005a18 <prvInsertTimerInActiveList>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800588e:	2300      	movs	r3, #0
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	2300      	movs	r3, #0
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	2100      	movs	r1, #0
 8005898:	6978      	ldr	r0, [r7, #20]
 800589a:	f7ff ff8b 	bl	80057b4 <xTimerGenericCommand>
 800589e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10a      	bne.n	80058bc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	60fb      	str	r3, [r7, #12]
}
 80058b8:	bf00      	nop
 80058ba:	e7fe      	b.n	80058ba <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	6978      	ldr	r0, [r7, #20]
 80058c2:	4798      	blx	r3
}
 80058c4:	bf00      	nop
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	20000ee4 	.word	0x20000ee4

080058d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058d8:	f107 0308 	add.w	r3, r7, #8
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 f857 	bl	8005990 <prvGetNextExpireTime>
 80058e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4619      	mov	r1, r3
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 f803 	bl	80058f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80058ee:	f000 f8d5 	bl	8005a9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058f2:	e7f1      	b.n	80058d8 <prvTimerTask+0x8>

080058f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80058fe:	f7ff fa3f 	bl	8004d80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005902:	f107 0308 	add.w	r3, r7, #8
 8005906:	4618      	mov	r0, r3
 8005908:	f000 f866 	bl	80059d8 <prvSampleTimeNow>
 800590c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d130      	bne.n	8005976 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10a      	bne.n	8005930 <prvProcessTimerOrBlockTask+0x3c>
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	429a      	cmp	r2, r3
 8005920:	d806      	bhi.n	8005930 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005922:	f7ff fa3b 	bl	8004d9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005926:	68f9      	ldr	r1, [r7, #12]
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff ff91 	bl	8005850 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800592e:	e024      	b.n	800597a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d008      	beq.n	8005948 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005936:	4b13      	ldr	r3, [pc, #76]	; (8005984 <prvProcessTimerOrBlockTask+0x90>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005948:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <prvProcessTimerOrBlockTask+0x94>)
 800594a:	6818      	ldr	r0, [r3, #0]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	4619      	mov	r1, r3
 8005956:	f7fe ff8b 	bl	8004870 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800595a:	f7ff fa1f 	bl	8004d9c <xTaskResumeAll>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005964:	4b09      	ldr	r3, [pc, #36]	; (800598c <prvProcessTimerOrBlockTask+0x98>)
 8005966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	f3bf 8f6f 	isb	sy
}
 8005974:	e001      	b.n	800597a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005976:	f7ff fa11 	bl	8004d9c <xTaskResumeAll>
}
 800597a:	bf00      	nop
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000ee8 	.word	0x20000ee8
 8005988:	20000eec 	.word	0x20000eec
 800598c:	e000ed04 	.word	0xe000ed04

08005990 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005998:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <prvGetNextExpireTime+0x44>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bf0c      	ite	eq
 80059a2:	2301      	moveq	r3, #1
 80059a4:	2300      	movne	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d105      	bne.n	80059c2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059b6:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <prvGetNextExpireTime+0x44>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	e001      	b.n	80059c6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80059c6:	68fb      	ldr	r3, [r7, #12]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	20000ee4 	.word	0x20000ee4

080059d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80059e0:	f7ff fa7a 	bl	8004ed8 <xTaskGetTickCount>
 80059e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80059e6:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <prvSampleTimeNow+0x3c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d205      	bcs.n	80059fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80059f0:	f000 f908 	bl	8005c04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	e002      	b.n	8005a02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a02:	4a04      	ldr	r2, [pc, #16]	; (8005a14 <prvSampleTimeNow+0x3c>)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a08:	68fb      	ldr	r3, [r7, #12]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000ef4 	.word	0x20000ef4

08005a18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d812      	bhi.n	8005a64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	1ad2      	subs	r2, r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d302      	bcc.n	8005a52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	617b      	str	r3, [r7, #20]
 8005a50:	e01b      	b.n	8005a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a52:	4b10      	ldr	r3, [pc, #64]	; (8005a94 <prvInsertTimerInActiveList+0x7c>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	f7fe f9f5 	bl	8003e4c <vListInsert>
 8005a62:	e012      	b.n	8005a8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d206      	bcs.n	8005a7a <prvInsertTimerInActiveList+0x62>
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d302      	bcc.n	8005a7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a74:	2301      	movs	r3, #1
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	e007      	b.n	8005a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a7a:	4b07      	ldr	r3, [pc, #28]	; (8005a98 <prvInsertTimerInActiveList+0x80>)
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3304      	adds	r3, #4
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f7fe f9e1 	bl	8003e4c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a8a:	697b      	ldr	r3, [r7, #20]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20000ee8 	.word	0x20000ee8
 8005a98:	20000ee4 	.word	0x20000ee4

08005a9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08e      	sub	sp, #56	; 0x38
 8005aa0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005aa2:	e09d      	b.n	8005be0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	da18      	bge.n	8005adc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005aaa:	1d3b      	adds	r3, r7, #4
 8005aac:	3304      	adds	r3, #4
 8005aae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10a      	bne.n	8005acc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	61fb      	str	r3, [r7, #28]
}
 8005ac8:	bf00      	nop
 8005aca:	e7fe      	b.n	8005aca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ad2:	6850      	ldr	r0, [r2, #4]
 8005ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ad6:	6892      	ldr	r2, [r2, #8]
 8005ad8:	4611      	mov	r1, r2
 8005ada:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	db7d      	blt.n	8005bde <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d004      	beq.n	8005af8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	3304      	adds	r3, #4
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fe f9e2 	bl	8003ebc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005af8:	463b      	mov	r3, r7
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff ff6c 	bl	80059d8 <prvSampleTimeNow>
 8005b00:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b09      	cmp	r3, #9
 8005b06:	d86b      	bhi.n	8005be0 <prvProcessReceivedCommands+0x144>
 8005b08:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <prvProcessReceivedCommands+0x74>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005b39 	.word	0x08005b39
 8005b14:	08005b39 	.word	0x08005b39
 8005b18:	08005b39 	.word	0x08005b39
 8005b1c:	08005be1 	.word	0x08005be1
 8005b20:	08005b95 	.word	0x08005b95
 8005b24:	08005bcd 	.word	0x08005bcd
 8005b28:	08005b39 	.word	0x08005b39
 8005b2c:	08005b39 	.word	0x08005b39
 8005b30:	08005be1 	.word	0x08005be1
 8005b34:	08005b95 	.word	0x08005b95
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	18d1      	adds	r1, r2, r3
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b46:	f7ff ff67 	bl	8005a18 <prvInsertTimerInActiveList>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d047      	beq.n	8005be0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b56:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d13f      	bne.n	8005be0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	441a      	add	r2, r3
 8005b68:	2300      	movs	r3, #0
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	2100      	movs	r1, #0
 8005b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b72:	f7ff fe1f 	bl	80057b4 <xTimerGenericCommand>
 8005b76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d130      	bne.n	8005be0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	61bb      	str	r3, [r7, #24]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10a      	bne.n	8005bb8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	617b      	str	r3, [r7, #20]
}
 8005bb4:	bf00      	nop
 8005bb6:	e7fe      	b.n	8005bb6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	699a      	ldr	r2, [r3, #24]
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	18d1      	adds	r1, r2, r3
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bc6:	f7ff ff27 	bl	8005a18 <prvInsertTimerInActiveList>
					break;
 8005bca:	e009      	b.n	8005be0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d104      	bne.n	8005be0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bd8:	f000 fb6c 	bl	80062b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005bdc:	e000      	b.n	8005be0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005bde:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005be0:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <prvProcessReceivedCommands+0x164>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	1d39      	adds	r1, r7, #4
 8005be6:	2200      	movs	r2, #0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fe fc29 	bl	8004440 <xQueueReceive>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f47f af57 	bne.w	8005aa4 <prvProcessReceivedCommands+0x8>
	}
}
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	3730      	adds	r7, #48	; 0x30
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20000eec 	.word	0x20000eec

08005c04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c0a:	e045      	b.n	8005c98 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c0c:	4b2c      	ldr	r3, [pc, #176]	; (8005cc0 <prvSwitchTimerLists+0xbc>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c16:	4b2a      	ldr	r3, [pc, #168]	; (8005cc0 <prvSwitchTimerLists+0xbc>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3304      	adds	r3, #4
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fe f949 	bl	8003ebc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d12e      	bne.n	8005c98 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4413      	add	r3, r2
 8005c42:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d90e      	bls.n	8005c6a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c58:	4b19      	ldr	r3, [pc, #100]	; (8005cc0 <prvSwitchTimerLists+0xbc>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	4619      	mov	r1, r3
 8005c62:	4610      	mov	r0, r2
 8005c64:	f7fe f8f2 	bl	8003e4c <vListInsert>
 8005c68:	e016      	b.n	8005c98 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	2100      	movs	r1, #0
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f7ff fd9d 	bl	80057b4 <xTimerGenericCommand>
 8005c7a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	603b      	str	r3, [r7, #0]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c98:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <prvSwitchTimerLists+0xbc>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1b4      	bne.n	8005c0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <prvSwitchTimerLists+0xbc>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ca8:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <prvSwitchTimerLists+0xc0>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a04      	ldr	r2, [pc, #16]	; (8005cc0 <prvSwitchTimerLists+0xbc>)
 8005cae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005cb0:	4a04      	ldr	r2, [pc, #16]	; (8005cc4 <prvSwitchTimerLists+0xc0>)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	6013      	str	r3, [r2, #0]
}
 8005cb6:	bf00      	nop
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000ee4 	.word	0x20000ee4
 8005cc4:	20000ee8 	.word	0x20000ee8

08005cc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005cce:	f000 f92d 	bl	8005f2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005cd2:	4b15      	ldr	r3, [pc, #84]	; (8005d28 <prvCheckForValidListAndQueue+0x60>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d120      	bne.n	8005d1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005cda:	4814      	ldr	r0, [pc, #80]	; (8005d2c <prvCheckForValidListAndQueue+0x64>)
 8005cdc:	f7fe f868 	bl	8003db0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ce0:	4813      	ldr	r0, [pc, #76]	; (8005d30 <prvCheckForValidListAndQueue+0x68>)
 8005ce2:	f7fe f865 	bl	8003db0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ce6:	4b13      	ldr	r3, [pc, #76]	; (8005d34 <prvCheckForValidListAndQueue+0x6c>)
 8005ce8:	4a10      	ldr	r2, [pc, #64]	; (8005d2c <prvCheckForValidListAndQueue+0x64>)
 8005cea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005cec:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <prvCheckForValidListAndQueue+0x70>)
 8005cee:	4a10      	ldr	r2, [pc, #64]	; (8005d30 <prvCheckForValidListAndQueue+0x68>)
 8005cf0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	4b11      	ldr	r3, [pc, #68]	; (8005d3c <prvCheckForValidListAndQueue+0x74>)
 8005cf8:	4a11      	ldr	r2, [pc, #68]	; (8005d40 <prvCheckForValidListAndQueue+0x78>)
 8005cfa:	2110      	movs	r1, #16
 8005cfc:	200a      	movs	r0, #10
 8005cfe:	f7fe f96f 	bl	8003fe0 <xQueueGenericCreateStatic>
 8005d02:	4603      	mov	r3, r0
 8005d04:	4a08      	ldr	r2, [pc, #32]	; (8005d28 <prvCheckForValidListAndQueue+0x60>)
 8005d06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d08:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <prvCheckForValidListAndQueue+0x60>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d10:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <prvCheckForValidListAndQueue+0x60>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	490b      	ldr	r1, [pc, #44]	; (8005d44 <prvCheckForValidListAndQueue+0x7c>)
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fe fd82 	bl	8004820 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d1c:	f000 f936 	bl	8005f8c <vPortExitCritical>
}
 8005d20:	bf00      	nop
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000eec 	.word	0x20000eec
 8005d2c:	20000ebc 	.word	0x20000ebc
 8005d30:	20000ed0 	.word	0x20000ed0
 8005d34:	20000ee4 	.word	0x20000ee4
 8005d38:	20000ee8 	.word	0x20000ee8
 8005d3c:	20000f98 	.word	0x20000f98
 8005d40:	20000ef8 	.word	0x20000ef8
 8005d44:	08007090 	.word	0x08007090

08005d48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3b04      	subs	r3, #4
 8005d58:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3b04      	subs	r3, #4
 8005d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f023 0201 	bic.w	r2, r3, #1
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3b04      	subs	r3, #4
 8005d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d78:	4a08      	ldr	r2, [pc, #32]	; (8005d9c <pxPortInitialiseStack+0x54>)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3b14      	subs	r3, #20
 8005d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3b20      	subs	r3, #32
 8005d8e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d90:	68fb      	ldr	r3, [r7, #12]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr
 8005d9c:	08005da1 	.word	0x08005da1

08005da0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005daa:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <prvTaskExitError+0x54>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db2:	d00a      	beq.n	8005dca <prvTaskExitError+0x2a>
	__asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	60fb      	str	r3, [r7, #12]
}
 8005dc6:	bf00      	nop
 8005dc8:	e7fe      	b.n	8005dc8 <prvTaskExitError+0x28>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	60bb      	str	r3, [r7, #8]
}
 8005ddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005dde:	bf00      	nop
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0fc      	beq.n	8005de0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005de6:	bf00      	nop
 8005de8:	bf00      	nop
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bc80      	pop	{r7}
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20000024 	.word	0x20000024
	...

08005e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e00:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <pxCurrentTCBConst2>)
 8005e02:	6819      	ldr	r1, [r3, #0]
 8005e04:	6808      	ldr	r0, [r1, #0]
 8005e06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e0a:	f380 8809 	msr	PSP, r0
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f04f 0000 	mov.w	r0, #0
 8005e16:	f380 8811 	msr	BASEPRI, r0
 8005e1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005e1e:	4770      	bx	lr

08005e20 <pxCurrentTCBConst2>:
 8005e20:	200009bc 	.word	0x200009bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop

08005e28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005e28:	4806      	ldr	r0, [pc, #24]	; (8005e44 <prvPortStartFirstTask+0x1c>)
 8005e2a:	6800      	ldr	r0, [r0, #0]
 8005e2c:	6800      	ldr	r0, [r0, #0]
 8005e2e:	f380 8808 	msr	MSP, r0
 8005e32:	b662      	cpsie	i
 8005e34:	b661      	cpsie	f
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	df00      	svc	0
 8005e40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e42:	bf00      	nop
 8005e44:	e000ed08 	.word	0xe000ed08

08005e48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e4e:	4b32      	ldr	r3, [pc, #200]	; (8005f18 <xPortStartScheduler+0xd0>)
 8005e50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	22ff      	movs	r2, #255	; 0xff
 8005e5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	4b2a      	ldr	r3, [pc, #168]	; (8005f1c <xPortStartScheduler+0xd4>)
 8005e74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e76:	4b2a      	ldr	r3, [pc, #168]	; (8005f20 <xPortStartScheduler+0xd8>)
 8005e78:	2207      	movs	r2, #7
 8005e7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e7c:	e009      	b.n	8005e92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005e7e:	4b28      	ldr	r3, [pc, #160]	; (8005f20 <xPortStartScheduler+0xd8>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	4a26      	ldr	r2, [pc, #152]	; (8005f20 <xPortStartScheduler+0xd8>)
 8005e86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9a:	2b80      	cmp	r3, #128	; 0x80
 8005e9c:	d0ef      	beq.n	8005e7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e9e:	4b20      	ldr	r3, [pc, #128]	; (8005f20 <xPortStartScheduler+0xd8>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f1c3 0307 	rsb	r3, r3, #7
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d00a      	beq.n	8005ec0 <xPortStartScheduler+0x78>
	__asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	60bb      	str	r3, [r7, #8]
}
 8005ebc:	bf00      	nop
 8005ebe:	e7fe      	b.n	8005ebe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ec0:	4b17      	ldr	r3, [pc, #92]	; (8005f20 <xPortStartScheduler+0xd8>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	021b      	lsls	r3, r3, #8
 8005ec6:	4a16      	ldr	r2, [pc, #88]	; (8005f20 <xPortStartScheduler+0xd8>)
 8005ec8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005eca:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <xPortStartScheduler+0xd8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ed2:	4a13      	ldr	r2, [pc, #76]	; (8005f20 <xPortStartScheduler+0xd8>)
 8005ed4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ede:	4b11      	ldr	r3, [pc, #68]	; (8005f24 <xPortStartScheduler+0xdc>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a10      	ldr	r2, [pc, #64]	; (8005f24 <xPortStartScheduler+0xdc>)
 8005ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ee8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005eea:	4b0e      	ldr	r3, [pc, #56]	; (8005f24 <xPortStartScheduler+0xdc>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a0d      	ldr	r2, [pc, #52]	; (8005f24 <xPortStartScheduler+0xdc>)
 8005ef0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ef4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ef6:	f000 f8b9 	bl	800606c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005efa:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <xPortStartScheduler+0xe0>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f00:	f7ff ff92 	bl	8005e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f04:	f7ff f8b4 	bl	8005070 <vTaskSwitchContext>
	prvTaskExitError();
 8005f08:	f7ff ff4a 	bl	8005da0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	e000e400 	.word	0xe000e400
 8005f1c:	20000fe8 	.word	0x20000fe8
 8005f20:	20000fec 	.word	0x20000fec
 8005f24:	e000ed20 	.word	0xe000ed20
 8005f28:	20000024 	.word	0x20000024

08005f2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	607b      	str	r3, [r7, #4]
}
 8005f44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f46:	4b0f      	ldr	r3, [pc, #60]	; (8005f84 <vPortEnterCritical+0x58>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	4a0d      	ldr	r2, [pc, #52]	; (8005f84 <vPortEnterCritical+0x58>)
 8005f4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f50:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <vPortEnterCritical+0x58>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d10f      	bne.n	8005f78 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f58:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <vPortEnterCritical+0x5c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	603b      	str	r3, [r7, #0]
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <vPortEnterCritical+0x4a>
	}
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bc80      	pop	{r7}
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	20000024 	.word	0x20000024
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f92:	4b11      	ldr	r3, [pc, #68]	; (8005fd8 <vPortExitCritical+0x4c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <vPortExitCritical+0x24>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	607b      	str	r3, [r7, #4]
}
 8005fac:	bf00      	nop
 8005fae:	e7fe      	b.n	8005fae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005fb0:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <vPortExitCritical+0x4c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	4a08      	ldr	r2, [pc, #32]	; (8005fd8 <vPortExitCritical+0x4c>)
 8005fb8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fba:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <vPortExitCritical+0x4c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d105      	bne.n	8005fce <vPortExitCritical+0x42>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	f383 8811 	msr	BASEPRI, r3
}
 8005fcc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr
 8005fd8:	20000024 	.word	0x20000024
 8005fdc:	00000000 	.word	0x00000000

08005fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fe0:	f3ef 8009 	mrs	r0, PSP
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <pxCurrentTCBConst>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ff0:	6010      	str	r0, [r2, #0]
 8005ff2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005ff6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ffa:	f380 8811 	msr	BASEPRI, r0
 8005ffe:	f7ff f837 	bl	8005070 <vTaskSwitchContext>
 8006002:	f04f 0000 	mov.w	r0, #0
 8006006:	f380 8811 	msr	BASEPRI, r0
 800600a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800600e:	6819      	ldr	r1, [r3, #0]
 8006010:	6808      	ldr	r0, [r1, #0]
 8006012:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006016:	f380 8809 	msr	PSP, r0
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	4770      	bx	lr

08006020 <pxCurrentTCBConst>:
 8006020:	200009bc 	.word	0x200009bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop

08006028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	607b      	str	r3, [r7, #4]
}
 8006040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006042:	f7fe ff57 	bl	8004ef4 <xTaskIncrementTick>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800604c:	4b06      	ldr	r3, [pc, #24]	; (8006068 <SysTick_Handler+0x40>)
 800604e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	2300      	movs	r3, #0
 8006056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f383 8811 	msr	BASEPRI, r3
}
 800605e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <vPortSetupTimerInterrupt+0x30>)
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006076:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <vPortSetupTimerInterrupt+0x34>)
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800607c:	4b09      	ldr	r3, [pc, #36]	; (80060a4 <vPortSetupTimerInterrupt+0x38>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a09      	ldr	r2, [pc, #36]	; (80060a8 <vPortSetupTimerInterrupt+0x3c>)
 8006082:	fba2 2303 	umull	r2, r3, r2, r3
 8006086:	099b      	lsrs	r3, r3, #6
 8006088:	4a08      	ldr	r2, [pc, #32]	; (80060ac <vPortSetupTimerInterrupt+0x40>)
 800608a:	3b01      	subs	r3, #1
 800608c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800608e:	4b03      	ldr	r3, [pc, #12]	; (800609c <vPortSetupTimerInterrupt+0x30>)
 8006090:	2207      	movs	r2, #7
 8006092:	601a      	str	r2, [r3, #0]
}
 8006094:	bf00      	nop
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr
 800609c:	e000e010 	.word	0xe000e010
 80060a0:	e000e018 	.word	0xe000e018
 80060a4:	20000014 	.word	0x20000014
 80060a8:	10624dd3 	.word	0x10624dd3
 80060ac:	e000e014 	.word	0xe000e014

080060b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060b6:	f3ef 8305 	mrs	r3, IPSR
 80060ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b0f      	cmp	r3, #15
 80060c0:	d914      	bls.n	80060ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060c2:	4a16      	ldr	r2, [pc, #88]	; (800611c <vPortValidateInterruptPriority+0x6c>)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060cc:	4b14      	ldr	r3, [pc, #80]	; (8006120 <vPortValidateInterruptPriority+0x70>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	7afa      	ldrb	r2, [r7, #11]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d20a      	bcs.n	80060ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	607b      	str	r3, [r7, #4]
}
 80060e8:	bf00      	nop
 80060ea:	e7fe      	b.n	80060ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80060ec:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <vPortValidateInterruptPriority+0x74>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80060f4:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <vPortValidateInterruptPriority+0x78>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d90a      	bls.n	8006112 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	603b      	str	r3, [r7, #0]
}
 800610e:	bf00      	nop
 8006110:	e7fe      	b.n	8006110 <vPortValidateInterruptPriority+0x60>
	}
 8006112:	bf00      	nop
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	bc80      	pop	{r7}
 800611a:	4770      	bx	lr
 800611c:	e000e3f0 	.word	0xe000e3f0
 8006120:	20000fe8 	.word	0x20000fe8
 8006124:	e000ed0c 	.word	0xe000ed0c
 8006128:	20000fec 	.word	0x20000fec

0800612c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08a      	sub	sp, #40	; 0x28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006134:	2300      	movs	r3, #0
 8006136:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006138:	f7fe fe22 	bl	8004d80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800613c:	4b58      	ldr	r3, [pc, #352]	; (80062a0 <pvPortMalloc+0x174>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006144:	f000 f910 	bl	8006368 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006148:	4b56      	ldr	r3, [pc, #344]	; (80062a4 <pvPortMalloc+0x178>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4013      	ands	r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	f040 808e 	bne.w	8006272 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01d      	beq.n	8006198 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800615c:	2208      	movs	r2, #8
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4413      	add	r3, r2
 8006162:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	2b00      	cmp	r3, #0
 800616c:	d014      	beq.n	8006198 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f023 0307 	bic.w	r3, r3, #7
 8006174:	3308      	adds	r3, #8
 8006176:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <pvPortMalloc+0x6c>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	617b      	str	r3, [r7, #20]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d069      	beq.n	8006272 <pvPortMalloc+0x146>
 800619e:	4b42      	ldr	r3, [pc, #264]	; (80062a8 <pvPortMalloc+0x17c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d864      	bhi.n	8006272 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061a8:	4b40      	ldr	r3, [pc, #256]	; (80062ac <pvPortMalloc+0x180>)
 80061aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061ac:	4b3f      	ldr	r3, [pc, #252]	; (80062ac <pvPortMalloc+0x180>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061b2:	e004      	b.n	80061be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d903      	bls.n	80061d0 <pvPortMalloc+0xa4>
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1f1      	bne.n	80061b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061d0:	4b33      	ldr	r3, [pc, #204]	; (80062a0 <pvPortMalloc+0x174>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d04b      	beq.n	8006272 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2208      	movs	r2, #8
 80061e0:	4413      	add	r3, r2
 80061e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	1ad2      	subs	r2, r2, r3
 80061f4:	2308      	movs	r3, #8
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d91f      	bls.n	800623c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4413      	add	r3, r2
 8006202:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <pvPortMalloc+0xf8>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	613b      	str	r3, [r7, #16]
}
 8006220:	bf00      	nop
 8006222:	e7fe      	b.n	8006222 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	1ad2      	subs	r2, r2, r3
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006236:	69b8      	ldr	r0, [r7, #24]
 8006238:	f000 f8f8 	bl	800642c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800623c:	4b1a      	ldr	r3, [pc, #104]	; (80062a8 <pvPortMalloc+0x17c>)
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <pvPortMalloc+0x17c>)
 8006248:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800624a:	4b17      	ldr	r3, [pc, #92]	; (80062a8 <pvPortMalloc+0x17c>)
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4b18      	ldr	r3, [pc, #96]	; (80062b0 <pvPortMalloc+0x184>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d203      	bcs.n	800625e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006256:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <pvPortMalloc+0x17c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a15      	ldr	r2, [pc, #84]	; (80062b0 <pvPortMalloc+0x184>)
 800625c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	4b10      	ldr	r3, [pc, #64]	; (80062a4 <pvPortMalloc+0x178>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	431a      	orrs	r2, r3
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006272:	f7fe fd93 	bl	8004d9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00a      	beq.n	8006296 <pvPortMalloc+0x16a>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	60fb      	str	r3, [r7, #12]
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <pvPortMalloc+0x168>
	return pvReturn;
 8006296:	69fb      	ldr	r3, [r7, #28]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3728      	adds	r7, #40	; 0x28
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	20001bf8 	.word	0x20001bf8
 80062a4:	20001c04 	.word	0x20001c04
 80062a8:	20001bfc 	.word	0x20001bfc
 80062ac:	20001bf0 	.word	0x20001bf0
 80062b0:	20001c00 	.word	0x20001c00

080062b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d048      	beq.n	8006358 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062c6:	2308      	movs	r3, #8
 80062c8:	425b      	negs	r3, r3
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4413      	add	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	4b21      	ldr	r3, [pc, #132]	; (8006360 <vPortFree+0xac>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4013      	ands	r3, r2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10a      	bne.n	80062f8 <vPortFree+0x44>
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	60fb      	str	r3, [r7, #12]
}
 80062f4:	bf00      	nop
 80062f6:	e7fe      	b.n	80062f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00a      	beq.n	8006316 <vPortFree+0x62>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	60bb      	str	r3, [r7, #8]
}
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	4b11      	ldr	r3, [pc, #68]	; (8006360 <vPortFree+0xac>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4013      	ands	r3, r2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d019      	beq.n	8006358 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d115      	bne.n	8006358 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <vPortFree+0xac>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	43db      	mvns	r3, r3
 8006336:	401a      	ands	r2, r3
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800633c:	f7fe fd20 	bl	8004d80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	4b07      	ldr	r3, [pc, #28]	; (8006364 <vPortFree+0xb0>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4413      	add	r3, r2
 800634a:	4a06      	ldr	r2, [pc, #24]	; (8006364 <vPortFree+0xb0>)
 800634c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800634e:	6938      	ldr	r0, [r7, #16]
 8006350:	f000 f86c 	bl	800642c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006354:	f7fe fd22 	bl	8004d9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006358:	bf00      	nop
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20001c04 	.word	0x20001c04
 8006364:	20001bfc 	.word	0x20001bfc

08006368 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800636e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006372:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006374:	4b27      	ldr	r3, [pc, #156]	; (8006414 <prvHeapInit+0xac>)
 8006376:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00c      	beq.n	800639c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3307      	adds	r3, #7
 8006386:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0307 	bic.w	r3, r3, #7
 800638e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	4a1f      	ldr	r2, [pc, #124]	; (8006414 <prvHeapInit+0xac>)
 8006398:	4413      	add	r3, r2
 800639a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063a0:	4a1d      	ldr	r2, [pc, #116]	; (8006418 <prvHeapInit+0xb0>)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063a6:	4b1c      	ldr	r3, [pc, #112]	; (8006418 <prvHeapInit+0xb0>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	4413      	add	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063b4:	2208      	movs	r2, #8
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	1a9b      	subs	r3, r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0307 	bic.w	r3, r3, #7
 80063c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4a15      	ldr	r2, [pc, #84]	; (800641c <prvHeapInit+0xb4>)
 80063c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063ca:	4b14      	ldr	r3, [pc, #80]	; (800641c <prvHeapInit+0xb4>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2200      	movs	r2, #0
 80063d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063d2:	4b12      	ldr	r3, [pc, #72]	; (800641c <prvHeapInit+0xb4>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2200      	movs	r2, #0
 80063d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	1ad2      	subs	r2, r2, r3
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80063e8:	4b0c      	ldr	r3, [pc, #48]	; (800641c <prvHeapInit+0xb4>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	4a0a      	ldr	r2, [pc, #40]	; (8006420 <prvHeapInit+0xb8>)
 80063f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	4a09      	ldr	r2, [pc, #36]	; (8006424 <prvHeapInit+0xbc>)
 80063fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006400:	4b09      	ldr	r3, [pc, #36]	; (8006428 <prvHeapInit+0xc0>)
 8006402:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006406:	601a      	str	r2, [r3, #0]
}
 8006408:	bf00      	nop
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	bc80      	pop	{r7}
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	20000ff0 	.word	0x20000ff0
 8006418:	20001bf0 	.word	0x20001bf0
 800641c:	20001bf8 	.word	0x20001bf8
 8006420:	20001c00 	.word	0x20001c00
 8006424:	20001bfc 	.word	0x20001bfc
 8006428:	20001c04 	.word	0x20001c04

0800642c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006434:	4b27      	ldr	r3, [pc, #156]	; (80064d4 <prvInsertBlockIntoFreeList+0xa8>)
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	e002      	b.n	8006440 <prvInsertBlockIntoFreeList+0x14>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	429a      	cmp	r2, r3
 8006448:	d8f7      	bhi.n	800643a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	4413      	add	r3, r2
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	429a      	cmp	r2, r3
 800645a:	d108      	bne.n	800646e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	441a      	add	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	441a      	add	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d118      	bne.n	80064b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <prvInsertBlockIntoFreeList+0xac>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d00d      	beq.n	80064aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	441a      	add	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	e008      	b.n	80064bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064aa:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <prvInsertBlockIntoFreeList+0xac>)
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	e003      	b.n	80064bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d002      	beq.n	80064ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064ca:	bf00      	nop
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr
 80064d4:	20001bf0 	.word	0x20001bf0
 80064d8:	20001bf8 	.word	0x20001bf8

080064dc <__errno>:
 80064dc:	4b01      	ldr	r3, [pc, #4]	; (80064e4 <__errno+0x8>)
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	20000028 	.word	0x20000028

080064e8 <__libc_init_array>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	2600      	movs	r6, #0
 80064ec:	4d0c      	ldr	r5, [pc, #48]	; (8006520 <__libc_init_array+0x38>)
 80064ee:	4c0d      	ldr	r4, [pc, #52]	; (8006524 <__libc_init_array+0x3c>)
 80064f0:	1b64      	subs	r4, r4, r5
 80064f2:	10a4      	asrs	r4, r4, #2
 80064f4:	42a6      	cmp	r6, r4
 80064f6:	d109      	bne.n	800650c <__libc_init_array+0x24>
 80064f8:	f000 fd06 	bl	8006f08 <_init>
 80064fc:	2600      	movs	r6, #0
 80064fe:	4d0a      	ldr	r5, [pc, #40]	; (8006528 <__libc_init_array+0x40>)
 8006500:	4c0a      	ldr	r4, [pc, #40]	; (800652c <__libc_init_array+0x44>)
 8006502:	1b64      	subs	r4, r4, r5
 8006504:	10a4      	asrs	r4, r4, #2
 8006506:	42a6      	cmp	r6, r4
 8006508:	d105      	bne.n	8006516 <__libc_init_array+0x2e>
 800650a:	bd70      	pop	{r4, r5, r6, pc}
 800650c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006510:	4798      	blx	r3
 8006512:	3601      	adds	r6, #1
 8006514:	e7ee      	b.n	80064f4 <__libc_init_array+0xc>
 8006516:	f855 3b04 	ldr.w	r3, [r5], #4
 800651a:	4798      	blx	r3
 800651c:	3601      	adds	r6, #1
 800651e:	e7f2      	b.n	8006506 <__libc_init_array+0x1e>
 8006520:	08007168 	.word	0x08007168
 8006524:	08007168 	.word	0x08007168
 8006528:	08007168 	.word	0x08007168
 800652c:	0800716c 	.word	0x0800716c

08006530 <__retarget_lock_acquire_recursive>:
 8006530:	4770      	bx	lr

08006532 <__retarget_lock_release_recursive>:
 8006532:	4770      	bx	lr

08006534 <memcpy>:
 8006534:	440a      	add	r2, r1
 8006536:	4291      	cmp	r1, r2
 8006538:	f100 33ff 	add.w	r3, r0, #4294967295
 800653c:	d100      	bne.n	8006540 <memcpy+0xc>
 800653e:	4770      	bx	lr
 8006540:	b510      	push	{r4, lr}
 8006542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006546:	4291      	cmp	r1, r2
 8006548:	f803 4f01 	strb.w	r4, [r3, #1]!
 800654c:	d1f9      	bne.n	8006542 <memcpy+0xe>
 800654e:	bd10      	pop	{r4, pc}

08006550 <memset>:
 8006550:	4603      	mov	r3, r0
 8006552:	4402      	add	r2, r0
 8006554:	4293      	cmp	r3, r2
 8006556:	d100      	bne.n	800655a <memset+0xa>
 8006558:	4770      	bx	lr
 800655a:	f803 1b01 	strb.w	r1, [r3], #1
 800655e:	e7f9      	b.n	8006554 <memset+0x4>

08006560 <sbrk_aligned>:
 8006560:	b570      	push	{r4, r5, r6, lr}
 8006562:	4e0e      	ldr	r6, [pc, #56]	; (800659c <sbrk_aligned+0x3c>)
 8006564:	460c      	mov	r4, r1
 8006566:	6831      	ldr	r1, [r6, #0]
 8006568:	4605      	mov	r5, r0
 800656a:	b911      	cbnz	r1, 8006572 <sbrk_aligned+0x12>
 800656c:	f000 f8f6 	bl	800675c <_sbrk_r>
 8006570:	6030      	str	r0, [r6, #0]
 8006572:	4621      	mov	r1, r4
 8006574:	4628      	mov	r0, r5
 8006576:	f000 f8f1 	bl	800675c <_sbrk_r>
 800657a:	1c43      	adds	r3, r0, #1
 800657c:	d00a      	beq.n	8006594 <sbrk_aligned+0x34>
 800657e:	1cc4      	adds	r4, r0, #3
 8006580:	f024 0403 	bic.w	r4, r4, #3
 8006584:	42a0      	cmp	r0, r4
 8006586:	d007      	beq.n	8006598 <sbrk_aligned+0x38>
 8006588:	1a21      	subs	r1, r4, r0
 800658a:	4628      	mov	r0, r5
 800658c:	f000 f8e6 	bl	800675c <_sbrk_r>
 8006590:	3001      	adds	r0, #1
 8006592:	d101      	bne.n	8006598 <sbrk_aligned+0x38>
 8006594:	f04f 34ff 	mov.w	r4, #4294967295
 8006598:	4620      	mov	r0, r4
 800659a:	bd70      	pop	{r4, r5, r6, pc}
 800659c:	20001c10 	.word	0x20001c10

080065a0 <_malloc_r>:
 80065a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a4:	1ccd      	adds	r5, r1, #3
 80065a6:	f025 0503 	bic.w	r5, r5, #3
 80065aa:	3508      	adds	r5, #8
 80065ac:	2d0c      	cmp	r5, #12
 80065ae:	bf38      	it	cc
 80065b0:	250c      	movcc	r5, #12
 80065b2:	2d00      	cmp	r5, #0
 80065b4:	4607      	mov	r7, r0
 80065b6:	db01      	blt.n	80065bc <_malloc_r+0x1c>
 80065b8:	42a9      	cmp	r1, r5
 80065ba:	d905      	bls.n	80065c8 <_malloc_r+0x28>
 80065bc:	230c      	movs	r3, #12
 80065be:	2600      	movs	r6, #0
 80065c0:	603b      	str	r3, [r7, #0]
 80065c2:	4630      	mov	r0, r6
 80065c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c8:	4e2e      	ldr	r6, [pc, #184]	; (8006684 <_malloc_r+0xe4>)
 80065ca:	f000 f8f7 	bl	80067bc <__malloc_lock>
 80065ce:	6833      	ldr	r3, [r6, #0]
 80065d0:	461c      	mov	r4, r3
 80065d2:	bb34      	cbnz	r4, 8006622 <_malloc_r+0x82>
 80065d4:	4629      	mov	r1, r5
 80065d6:	4638      	mov	r0, r7
 80065d8:	f7ff ffc2 	bl	8006560 <sbrk_aligned>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	4604      	mov	r4, r0
 80065e0:	d14d      	bne.n	800667e <_malloc_r+0xde>
 80065e2:	6834      	ldr	r4, [r6, #0]
 80065e4:	4626      	mov	r6, r4
 80065e6:	2e00      	cmp	r6, #0
 80065e8:	d140      	bne.n	800666c <_malloc_r+0xcc>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	4631      	mov	r1, r6
 80065ee:	4638      	mov	r0, r7
 80065f0:	eb04 0803 	add.w	r8, r4, r3
 80065f4:	f000 f8b2 	bl	800675c <_sbrk_r>
 80065f8:	4580      	cmp	r8, r0
 80065fa:	d13a      	bne.n	8006672 <_malloc_r+0xd2>
 80065fc:	6821      	ldr	r1, [r4, #0]
 80065fe:	3503      	adds	r5, #3
 8006600:	1a6d      	subs	r5, r5, r1
 8006602:	f025 0503 	bic.w	r5, r5, #3
 8006606:	3508      	adds	r5, #8
 8006608:	2d0c      	cmp	r5, #12
 800660a:	bf38      	it	cc
 800660c:	250c      	movcc	r5, #12
 800660e:	4638      	mov	r0, r7
 8006610:	4629      	mov	r1, r5
 8006612:	f7ff ffa5 	bl	8006560 <sbrk_aligned>
 8006616:	3001      	adds	r0, #1
 8006618:	d02b      	beq.n	8006672 <_malloc_r+0xd2>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	442b      	add	r3, r5
 800661e:	6023      	str	r3, [r4, #0]
 8006620:	e00e      	b.n	8006640 <_malloc_r+0xa0>
 8006622:	6822      	ldr	r2, [r4, #0]
 8006624:	1b52      	subs	r2, r2, r5
 8006626:	d41e      	bmi.n	8006666 <_malloc_r+0xc6>
 8006628:	2a0b      	cmp	r2, #11
 800662a:	d916      	bls.n	800665a <_malloc_r+0xba>
 800662c:	1961      	adds	r1, r4, r5
 800662e:	42a3      	cmp	r3, r4
 8006630:	6025      	str	r5, [r4, #0]
 8006632:	bf18      	it	ne
 8006634:	6059      	strne	r1, [r3, #4]
 8006636:	6863      	ldr	r3, [r4, #4]
 8006638:	bf08      	it	eq
 800663a:	6031      	streq	r1, [r6, #0]
 800663c:	5162      	str	r2, [r4, r5]
 800663e:	604b      	str	r3, [r1, #4]
 8006640:	4638      	mov	r0, r7
 8006642:	f104 060b 	add.w	r6, r4, #11
 8006646:	f000 f8bf 	bl	80067c8 <__malloc_unlock>
 800664a:	f026 0607 	bic.w	r6, r6, #7
 800664e:	1d23      	adds	r3, r4, #4
 8006650:	1af2      	subs	r2, r6, r3
 8006652:	d0b6      	beq.n	80065c2 <_malloc_r+0x22>
 8006654:	1b9b      	subs	r3, r3, r6
 8006656:	50a3      	str	r3, [r4, r2]
 8006658:	e7b3      	b.n	80065c2 <_malloc_r+0x22>
 800665a:	6862      	ldr	r2, [r4, #4]
 800665c:	42a3      	cmp	r3, r4
 800665e:	bf0c      	ite	eq
 8006660:	6032      	streq	r2, [r6, #0]
 8006662:	605a      	strne	r2, [r3, #4]
 8006664:	e7ec      	b.n	8006640 <_malloc_r+0xa0>
 8006666:	4623      	mov	r3, r4
 8006668:	6864      	ldr	r4, [r4, #4]
 800666a:	e7b2      	b.n	80065d2 <_malloc_r+0x32>
 800666c:	4634      	mov	r4, r6
 800666e:	6876      	ldr	r6, [r6, #4]
 8006670:	e7b9      	b.n	80065e6 <_malloc_r+0x46>
 8006672:	230c      	movs	r3, #12
 8006674:	4638      	mov	r0, r7
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	f000 f8a6 	bl	80067c8 <__malloc_unlock>
 800667c:	e7a1      	b.n	80065c2 <_malloc_r+0x22>
 800667e:	6025      	str	r5, [r4, #0]
 8006680:	e7de      	b.n	8006640 <_malloc_r+0xa0>
 8006682:	bf00      	nop
 8006684:	20001c0c 	.word	0x20001c0c

08006688 <cleanup_glue>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	460c      	mov	r4, r1
 800668c:	6809      	ldr	r1, [r1, #0]
 800668e:	4605      	mov	r5, r0
 8006690:	b109      	cbz	r1, 8006696 <cleanup_glue+0xe>
 8006692:	f7ff fff9 	bl	8006688 <cleanup_glue>
 8006696:	4621      	mov	r1, r4
 8006698:	4628      	mov	r0, r5
 800669a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800669e:	f000 b899 	b.w	80067d4 <_free_r>
	...

080066a4 <_reclaim_reent>:
 80066a4:	4b2c      	ldr	r3, [pc, #176]	; (8006758 <_reclaim_reent+0xb4>)
 80066a6:	b570      	push	{r4, r5, r6, lr}
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4604      	mov	r4, r0
 80066ac:	4283      	cmp	r3, r0
 80066ae:	d051      	beq.n	8006754 <_reclaim_reent+0xb0>
 80066b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80066b2:	b143      	cbz	r3, 80066c6 <_reclaim_reent+0x22>
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d14a      	bne.n	8006750 <_reclaim_reent+0xac>
 80066ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066bc:	6819      	ldr	r1, [r3, #0]
 80066be:	b111      	cbz	r1, 80066c6 <_reclaim_reent+0x22>
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 f887 	bl	80067d4 <_free_r>
 80066c6:	6961      	ldr	r1, [r4, #20]
 80066c8:	b111      	cbz	r1, 80066d0 <_reclaim_reent+0x2c>
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 f882 	bl	80067d4 <_free_r>
 80066d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80066d2:	b111      	cbz	r1, 80066da <_reclaim_reent+0x36>
 80066d4:	4620      	mov	r0, r4
 80066d6:	f000 f87d 	bl	80067d4 <_free_r>
 80066da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80066dc:	b111      	cbz	r1, 80066e4 <_reclaim_reent+0x40>
 80066de:	4620      	mov	r0, r4
 80066e0:	f000 f878 	bl	80067d4 <_free_r>
 80066e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80066e6:	b111      	cbz	r1, 80066ee <_reclaim_reent+0x4a>
 80066e8:	4620      	mov	r0, r4
 80066ea:	f000 f873 	bl	80067d4 <_free_r>
 80066ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80066f0:	b111      	cbz	r1, 80066f8 <_reclaim_reent+0x54>
 80066f2:	4620      	mov	r0, r4
 80066f4:	f000 f86e 	bl	80067d4 <_free_r>
 80066f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80066fa:	b111      	cbz	r1, 8006702 <_reclaim_reent+0x5e>
 80066fc:	4620      	mov	r0, r4
 80066fe:	f000 f869 	bl	80067d4 <_free_r>
 8006702:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006704:	b111      	cbz	r1, 800670c <_reclaim_reent+0x68>
 8006706:	4620      	mov	r0, r4
 8006708:	f000 f864 	bl	80067d4 <_free_r>
 800670c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800670e:	b111      	cbz	r1, 8006716 <_reclaim_reent+0x72>
 8006710:	4620      	mov	r0, r4
 8006712:	f000 f85f 	bl	80067d4 <_free_r>
 8006716:	69a3      	ldr	r3, [r4, #24]
 8006718:	b1e3      	cbz	r3, 8006754 <_reclaim_reent+0xb0>
 800671a:	4620      	mov	r0, r4
 800671c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800671e:	4798      	blx	r3
 8006720:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006722:	b1b9      	cbz	r1, 8006754 <_reclaim_reent+0xb0>
 8006724:	4620      	mov	r0, r4
 8006726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800672a:	f7ff bfad 	b.w	8006688 <cleanup_glue>
 800672e:	5949      	ldr	r1, [r1, r5]
 8006730:	b941      	cbnz	r1, 8006744 <_reclaim_reent+0xa0>
 8006732:	3504      	adds	r5, #4
 8006734:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006736:	2d80      	cmp	r5, #128	; 0x80
 8006738:	68d9      	ldr	r1, [r3, #12]
 800673a:	d1f8      	bne.n	800672e <_reclaim_reent+0x8a>
 800673c:	4620      	mov	r0, r4
 800673e:	f000 f849 	bl	80067d4 <_free_r>
 8006742:	e7ba      	b.n	80066ba <_reclaim_reent+0x16>
 8006744:	680e      	ldr	r6, [r1, #0]
 8006746:	4620      	mov	r0, r4
 8006748:	f000 f844 	bl	80067d4 <_free_r>
 800674c:	4631      	mov	r1, r6
 800674e:	e7ef      	b.n	8006730 <_reclaim_reent+0x8c>
 8006750:	2500      	movs	r5, #0
 8006752:	e7ef      	b.n	8006734 <_reclaim_reent+0x90>
 8006754:	bd70      	pop	{r4, r5, r6, pc}
 8006756:	bf00      	nop
 8006758:	20000028 	.word	0x20000028

0800675c <_sbrk_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	2300      	movs	r3, #0
 8006760:	4d05      	ldr	r5, [pc, #20]	; (8006778 <_sbrk_r+0x1c>)
 8006762:	4604      	mov	r4, r0
 8006764:	4608      	mov	r0, r1
 8006766:	602b      	str	r3, [r5, #0]
 8006768:	f7fa fd74 	bl	8001254 <_sbrk>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d102      	bne.n	8006776 <_sbrk_r+0x1a>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	b103      	cbz	r3, 8006776 <_sbrk_r+0x1a>
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	bd38      	pop	{r3, r4, r5, pc}
 8006778:	20001c14 	.word	0x20001c14

0800677c <siprintf>:
 800677c:	b40e      	push	{r1, r2, r3}
 800677e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006782:	b500      	push	{lr}
 8006784:	b09c      	sub	sp, #112	; 0x70
 8006786:	ab1d      	add	r3, sp, #116	; 0x74
 8006788:	9002      	str	r0, [sp, #8]
 800678a:	9006      	str	r0, [sp, #24]
 800678c:	9107      	str	r1, [sp, #28]
 800678e:	9104      	str	r1, [sp, #16]
 8006790:	4808      	ldr	r0, [pc, #32]	; (80067b4 <siprintf+0x38>)
 8006792:	4909      	ldr	r1, [pc, #36]	; (80067b8 <siprintf+0x3c>)
 8006794:	f853 2b04 	ldr.w	r2, [r3], #4
 8006798:	9105      	str	r1, [sp, #20]
 800679a:	6800      	ldr	r0, [r0, #0]
 800679c:	a902      	add	r1, sp, #8
 800679e:	9301      	str	r3, [sp, #4]
 80067a0:	f000 f8bc 	bl	800691c <_svfiprintf_r>
 80067a4:	2200      	movs	r2, #0
 80067a6:	9b02      	ldr	r3, [sp, #8]
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	b01c      	add	sp, #112	; 0x70
 80067ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80067b0:	b003      	add	sp, #12
 80067b2:	4770      	bx	lr
 80067b4:	20000028 	.word	0x20000028
 80067b8:	ffff0208 	.word	0xffff0208

080067bc <__malloc_lock>:
 80067bc:	4801      	ldr	r0, [pc, #4]	; (80067c4 <__malloc_lock+0x8>)
 80067be:	f7ff beb7 	b.w	8006530 <__retarget_lock_acquire_recursive>
 80067c2:	bf00      	nop
 80067c4:	20001c08 	.word	0x20001c08

080067c8 <__malloc_unlock>:
 80067c8:	4801      	ldr	r0, [pc, #4]	; (80067d0 <__malloc_unlock+0x8>)
 80067ca:	f7ff beb2 	b.w	8006532 <__retarget_lock_release_recursive>
 80067ce:	bf00      	nop
 80067d0:	20001c08 	.word	0x20001c08

080067d4 <_free_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	4605      	mov	r5, r0
 80067d8:	2900      	cmp	r1, #0
 80067da:	d040      	beq.n	800685e <_free_r+0x8a>
 80067dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067e0:	1f0c      	subs	r4, r1, #4
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	bfb8      	it	lt
 80067e6:	18e4      	addlt	r4, r4, r3
 80067e8:	f7ff ffe8 	bl	80067bc <__malloc_lock>
 80067ec:	4a1c      	ldr	r2, [pc, #112]	; (8006860 <_free_r+0x8c>)
 80067ee:	6813      	ldr	r3, [r2, #0]
 80067f0:	b933      	cbnz	r3, 8006800 <_free_r+0x2c>
 80067f2:	6063      	str	r3, [r4, #4]
 80067f4:	6014      	str	r4, [r2, #0]
 80067f6:	4628      	mov	r0, r5
 80067f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067fc:	f7ff bfe4 	b.w	80067c8 <__malloc_unlock>
 8006800:	42a3      	cmp	r3, r4
 8006802:	d908      	bls.n	8006816 <_free_r+0x42>
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	1821      	adds	r1, r4, r0
 8006808:	428b      	cmp	r3, r1
 800680a:	bf01      	itttt	eq
 800680c:	6819      	ldreq	r1, [r3, #0]
 800680e:	685b      	ldreq	r3, [r3, #4]
 8006810:	1809      	addeq	r1, r1, r0
 8006812:	6021      	streq	r1, [r4, #0]
 8006814:	e7ed      	b.n	80067f2 <_free_r+0x1e>
 8006816:	461a      	mov	r2, r3
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	b10b      	cbz	r3, 8006820 <_free_r+0x4c>
 800681c:	42a3      	cmp	r3, r4
 800681e:	d9fa      	bls.n	8006816 <_free_r+0x42>
 8006820:	6811      	ldr	r1, [r2, #0]
 8006822:	1850      	adds	r0, r2, r1
 8006824:	42a0      	cmp	r0, r4
 8006826:	d10b      	bne.n	8006840 <_free_r+0x6c>
 8006828:	6820      	ldr	r0, [r4, #0]
 800682a:	4401      	add	r1, r0
 800682c:	1850      	adds	r0, r2, r1
 800682e:	4283      	cmp	r3, r0
 8006830:	6011      	str	r1, [r2, #0]
 8006832:	d1e0      	bne.n	80067f6 <_free_r+0x22>
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	4401      	add	r1, r0
 800683a:	6011      	str	r1, [r2, #0]
 800683c:	6053      	str	r3, [r2, #4]
 800683e:	e7da      	b.n	80067f6 <_free_r+0x22>
 8006840:	d902      	bls.n	8006848 <_free_r+0x74>
 8006842:	230c      	movs	r3, #12
 8006844:	602b      	str	r3, [r5, #0]
 8006846:	e7d6      	b.n	80067f6 <_free_r+0x22>
 8006848:	6820      	ldr	r0, [r4, #0]
 800684a:	1821      	adds	r1, r4, r0
 800684c:	428b      	cmp	r3, r1
 800684e:	bf01      	itttt	eq
 8006850:	6819      	ldreq	r1, [r3, #0]
 8006852:	685b      	ldreq	r3, [r3, #4]
 8006854:	1809      	addeq	r1, r1, r0
 8006856:	6021      	streq	r1, [r4, #0]
 8006858:	6063      	str	r3, [r4, #4]
 800685a:	6054      	str	r4, [r2, #4]
 800685c:	e7cb      	b.n	80067f6 <_free_r+0x22>
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	20001c0c 	.word	0x20001c0c

08006864 <__ssputs_r>:
 8006864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006868:	688e      	ldr	r6, [r1, #8]
 800686a:	4682      	mov	sl, r0
 800686c:	429e      	cmp	r6, r3
 800686e:	460c      	mov	r4, r1
 8006870:	4690      	mov	r8, r2
 8006872:	461f      	mov	r7, r3
 8006874:	d838      	bhi.n	80068e8 <__ssputs_r+0x84>
 8006876:	898a      	ldrh	r2, [r1, #12]
 8006878:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800687c:	d032      	beq.n	80068e4 <__ssputs_r+0x80>
 800687e:	6825      	ldr	r5, [r4, #0]
 8006880:	6909      	ldr	r1, [r1, #16]
 8006882:	3301      	adds	r3, #1
 8006884:	eba5 0901 	sub.w	r9, r5, r1
 8006888:	6965      	ldr	r5, [r4, #20]
 800688a:	444b      	add	r3, r9
 800688c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006890:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006894:	106d      	asrs	r5, r5, #1
 8006896:	429d      	cmp	r5, r3
 8006898:	bf38      	it	cc
 800689a:	461d      	movcc	r5, r3
 800689c:	0553      	lsls	r3, r2, #21
 800689e:	d531      	bpl.n	8006904 <__ssputs_r+0xa0>
 80068a0:	4629      	mov	r1, r5
 80068a2:	f7ff fe7d 	bl	80065a0 <_malloc_r>
 80068a6:	4606      	mov	r6, r0
 80068a8:	b950      	cbnz	r0, 80068c0 <__ssputs_r+0x5c>
 80068aa:	230c      	movs	r3, #12
 80068ac:	f04f 30ff 	mov.w	r0, #4294967295
 80068b0:	f8ca 3000 	str.w	r3, [sl]
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ba:	81a3      	strh	r3, [r4, #12]
 80068bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c0:	464a      	mov	r2, r9
 80068c2:	6921      	ldr	r1, [r4, #16]
 80068c4:	f7ff fe36 	bl	8006534 <memcpy>
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d2:	81a3      	strh	r3, [r4, #12]
 80068d4:	6126      	str	r6, [r4, #16]
 80068d6:	444e      	add	r6, r9
 80068d8:	6026      	str	r6, [r4, #0]
 80068da:	463e      	mov	r6, r7
 80068dc:	6165      	str	r5, [r4, #20]
 80068de:	eba5 0509 	sub.w	r5, r5, r9
 80068e2:	60a5      	str	r5, [r4, #8]
 80068e4:	42be      	cmp	r6, r7
 80068e6:	d900      	bls.n	80068ea <__ssputs_r+0x86>
 80068e8:	463e      	mov	r6, r7
 80068ea:	4632      	mov	r2, r6
 80068ec:	4641      	mov	r1, r8
 80068ee:	6820      	ldr	r0, [r4, #0]
 80068f0:	f000 fab8 	bl	8006e64 <memmove>
 80068f4:	68a3      	ldr	r3, [r4, #8]
 80068f6:	2000      	movs	r0, #0
 80068f8:	1b9b      	subs	r3, r3, r6
 80068fa:	60a3      	str	r3, [r4, #8]
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	4433      	add	r3, r6
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	e7db      	b.n	80068bc <__ssputs_r+0x58>
 8006904:	462a      	mov	r2, r5
 8006906:	f000 fac7 	bl	8006e98 <_realloc_r>
 800690a:	4606      	mov	r6, r0
 800690c:	2800      	cmp	r0, #0
 800690e:	d1e1      	bne.n	80068d4 <__ssputs_r+0x70>
 8006910:	4650      	mov	r0, sl
 8006912:	6921      	ldr	r1, [r4, #16]
 8006914:	f7ff ff5e 	bl	80067d4 <_free_r>
 8006918:	e7c7      	b.n	80068aa <__ssputs_r+0x46>
	...

0800691c <_svfiprintf_r>:
 800691c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006920:	4698      	mov	r8, r3
 8006922:	898b      	ldrh	r3, [r1, #12]
 8006924:	4607      	mov	r7, r0
 8006926:	061b      	lsls	r3, r3, #24
 8006928:	460d      	mov	r5, r1
 800692a:	4614      	mov	r4, r2
 800692c:	b09d      	sub	sp, #116	; 0x74
 800692e:	d50e      	bpl.n	800694e <_svfiprintf_r+0x32>
 8006930:	690b      	ldr	r3, [r1, #16]
 8006932:	b963      	cbnz	r3, 800694e <_svfiprintf_r+0x32>
 8006934:	2140      	movs	r1, #64	; 0x40
 8006936:	f7ff fe33 	bl	80065a0 <_malloc_r>
 800693a:	6028      	str	r0, [r5, #0]
 800693c:	6128      	str	r0, [r5, #16]
 800693e:	b920      	cbnz	r0, 800694a <_svfiprintf_r+0x2e>
 8006940:	230c      	movs	r3, #12
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	f04f 30ff 	mov.w	r0, #4294967295
 8006948:	e0d1      	b.n	8006aee <_svfiprintf_r+0x1d2>
 800694a:	2340      	movs	r3, #64	; 0x40
 800694c:	616b      	str	r3, [r5, #20]
 800694e:	2300      	movs	r3, #0
 8006950:	9309      	str	r3, [sp, #36]	; 0x24
 8006952:	2320      	movs	r3, #32
 8006954:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006958:	2330      	movs	r3, #48	; 0x30
 800695a:	f04f 0901 	mov.w	r9, #1
 800695e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006962:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006b08 <_svfiprintf_r+0x1ec>
 8006966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800696a:	4623      	mov	r3, r4
 800696c:	469a      	mov	sl, r3
 800696e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006972:	b10a      	cbz	r2, 8006978 <_svfiprintf_r+0x5c>
 8006974:	2a25      	cmp	r2, #37	; 0x25
 8006976:	d1f9      	bne.n	800696c <_svfiprintf_r+0x50>
 8006978:	ebba 0b04 	subs.w	fp, sl, r4
 800697c:	d00b      	beq.n	8006996 <_svfiprintf_r+0x7a>
 800697e:	465b      	mov	r3, fp
 8006980:	4622      	mov	r2, r4
 8006982:	4629      	mov	r1, r5
 8006984:	4638      	mov	r0, r7
 8006986:	f7ff ff6d 	bl	8006864 <__ssputs_r>
 800698a:	3001      	adds	r0, #1
 800698c:	f000 80aa 	beq.w	8006ae4 <_svfiprintf_r+0x1c8>
 8006990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006992:	445a      	add	r2, fp
 8006994:	9209      	str	r2, [sp, #36]	; 0x24
 8006996:	f89a 3000 	ldrb.w	r3, [sl]
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 80a2 	beq.w	8006ae4 <_svfiprintf_r+0x1c8>
 80069a0:	2300      	movs	r3, #0
 80069a2:	f04f 32ff 	mov.w	r2, #4294967295
 80069a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069aa:	f10a 0a01 	add.w	sl, sl, #1
 80069ae:	9304      	str	r3, [sp, #16]
 80069b0:	9307      	str	r3, [sp, #28]
 80069b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069b6:	931a      	str	r3, [sp, #104]	; 0x68
 80069b8:	4654      	mov	r4, sl
 80069ba:	2205      	movs	r2, #5
 80069bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c0:	4851      	ldr	r0, [pc, #324]	; (8006b08 <_svfiprintf_r+0x1ec>)
 80069c2:	f000 fa41 	bl	8006e48 <memchr>
 80069c6:	9a04      	ldr	r2, [sp, #16]
 80069c8:	b9d8      	cbnz	r0, 8006a02 <_svfiprintf_r+0xe6>
 80069ca:	06d0      	lsls	r0, r2, #27
 80069cc:	bf44      	itt	mi
 80069ce:	2320      	movmi	r3, #32
 80069d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069d4:	0711      	lsls	r1, r2, #28
 80069d6:	bf44      	itt	mi
 80069d8:	232b      	movmi	r3, #43	; 0x2b
 80069da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069de:	f89a 3000 	ldrb.w	r3, [sl]
 80069e2:	2b2a      	cmp	r3, #42	; 0x2a
 80069e4:	d015      	beq.n	8006a12 <_svfiprintf_r+0xf6>
 80069e6:	4654      	mov	r4, sl
 80069e8:	2000      	movs	r0, #0
 80069ea:	f04f 0c0a 	mov.w	ip, #10
 80069ee:	9a07      	ldr	r2, [sp, #28]
 80069f0:	4621      	mov	r1, r4
 80069f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069f6:	3b30      	subs	r3, #48	; 0x30
 80069f8:	2b09      	cmp	r3, #9
 80069fa:	d94e      	bls.n	8006a9a <_svfiprintf_r+0x17e>
 80069fc:	b1b0      	cbz	r0, 8006a2c <_svfiprintf_r+0x110>
 80069fe:	9207      	str	r2, [sp, #28]
 8006a00:	e014      	b.n	8006a2c <_svfiprintf_r+0x110>
 8006a02:	eba0 0308 	sub.w	r3, r0, r8
 8006a06:	fa09 f303 	lsl.w	r3, r9, r3
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	46a2      	mov	sl, r4
 8006a0e:	9304      	str	r3, [sp, #16]
 8006a10:	e7d2      	b.n	80069b8 <_svfiprintf_r+0x9c>
 8006a12:	9b03      	ldr	r3, [sp, #12]
 8006a14:	1d19      	adds	r1, r3, #4
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	9103      	str	r1, [sp, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bfbb      	ittet	lt
 8006a1e:	425b      	neglt	r3, r3
 8006a20:	f042 0202 	orrlt.w	r2, r2, #2
 8006a24:	9307      	strge	r3, [sp, #28]
 8006a26:	9307      	strlt	r3, [sp, #28]
 8006a28:	bfb8      	it	lt
 8006a2a:	9204      	strlt	r2, [sp, #16]
 8006a2c:	7823      	ldrb	r3, [r4, #0]
 8006a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8006a30:	d10c      	bne.n	8006a4c <_svfiprintf_r+0x130>
 8006a32:	7863      	ldrb	r3, [r4, #1]
 8006a34:	2b2a      	cmp	r3, #42	; 0x2a
 8006a36:	d135      	bne.n	8006aa4 <_svfiprintf_r+0x188>
 8006a38:	9b03      	ldr	r3, [sp, #12]
 8006a3a:	3402      	adds	r4, #2
 8006a3c:	1d1a      	adds	r2, r3, #4
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	9203      	str	r2, [sp, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	bfb8      	it	lt
 8006a46:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a4a:	9305      	str	r3, [sp, #20]
 8006a4c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006b0c <_svfiprintf_r+0x1f0>
 8006a50:	2203      	movs	r2, #3
 8006a52:	4650      	mov	r0, sl
 8006a54:	7821      	ldrb	r1, [r4, #0]
 8006a56:	f000 f9f7 	bl	8006e48 <memchr>
 8006a5a:	b140      	cbz	r0, 8006a6e <_svfiprintf_r+0x152>
 8006a5c:	2340      	movs	r3, #64	; 0x40
 8006a5e:	eba0 000a 	sub.w	r0, r0, sl
 8006a62:	fa03 f000 	lsl.w	r0, r3, r0
 8006a66:	9b04      	ldr	r3, [sp, #16]
 8006a68:	3401      	adds	r4, #1
 8006a6a:	4303      	orrs	r3, r0
 8006a6c:	9304      	str	r3, [sp, #16]
 8006a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a72:	2206      	movs	r2, #6
 8006a74:	4826      	ldr	r0, [pc, #152]	; (8006b10 <_svfiprintf_r+0x1f4>)
 8006a76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a7a:	f000 f9e5 	bl	8006e48 <memchr>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d038      	beq.n	8006af4 <_svfiprintf_r+0x1d8>
 8006a82:	4b24      	ldr	r3, [pc, #144]	; (8006b14 <_svfiprintf_r+0x1f8>)
 8006a84:	bb1b      	cbnz	r3, 8006ace <_svfiprintf_r+0x1b2>
 8006a86:	9b03      	ldr	r3, [sp, #12]
 8006a88:	3307      	adds	r3, #7
 8006a8a:	f023 0307 	bic.w	r3, r3, #7
 8006a8e:	3308      	adds	r3, #8
 8006a90:	9303      	str	r3, [sp, #12]
 8006a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a94:	4433      	add	r3, r6
 8006a96:	9309      	str	r3, [sp, #36]	; 0x24
 8006a98:	e767      	b.n	800696a <_svfiprintf_r+0x4e>
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006aa2:	e7a5      	b.n	80069f0 <_svfiprintf_r+0xd4>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f04f 0c0a 	mov.w	ip, #10
 8006aaa:	4619      	mov	r1, r3
 8006aac:	3401      	adds	r4, #1
 8006aae:	9305      	str	r3, [sp, #20]
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ab6:	3a30      	subs	r2, #48	; 0x30
 8006ab8:	2a09      	cmp	r2, #9
 8006aba:	d903      	bls.n	8006ac4 <_svfiprintf_r+0x1a8>
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0c5      	beq.n	8006a4c <_svfiprintf_r+0x130>
 8006ac0:	9105      	str	r1, [sp, #20]
 8006ac2:	e7c3      	b.n	8006a4c <_svfiprintf_r+0x130>
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006acc:	e7f0      	b.n	8006ab0 <_svfiprintf_r+0x194>
 8006ace:	ab03      	add	r3, sp, #12
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	462a      	mov	r2, r5
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	4b10      	ldr	r3, [pc, #64]	; (8006b18 <_svfiprintf_r+0x1fc>)
 8006ad8:	a904      	add	r1, sp, #16
 8006ada:	f3af 8000 	nop.w
 8006ade:	1c42      	adds	r2, r0, #1
 8006ae0:	4606      	mov	r6, r0
 8006ae2:	d1d6      	bne.n	8006a92 <_svfiprintf_r+0x176>
 8006ae4:	89ab      	ldrh	r3, [r5, #12]
 8006ae6:	065b      	lsls	r3, r3, #25
 8006ae8:	f53f af2c 	bmi.w	8006944 <_svfiprintf_r+0x28>
 8006aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006aee:	b01d      	add	sp, #116	; 0x74
 8006af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af4:	ab03      	add	r3, sp, #12
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	462a      	mov	r2, r5
 8006afa:	4638      	mov	r0, r7
 8006afc:	4b06      	ldr	r3, [pc, #24]	; (8006b18 <_svfiprintf_r+0x1fc>)
 8006afe:	a904      	add	r1, sp, #16
 8006b00:	f000 f87c 	bl	8006bfc <_printf_i>
 8006b04:	e7eb      	b.n	8006ade <_svfiprintf_r+0x1c2>
 8006b06:	bf00      	nop
 8006b08:	08007134 	.word	0x08007134
 8006b0c:	0800713a 	.word	0x0800713a
 8006b10:	0800713e 	.word	0x0800713e
 8006b14:	00000000 	.word	0x00000000
 8006b18:	08006865 	.word	0x08006865

08006b1c <_printf_common>:
 8006b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	4616      	mov	r6, r2
 8006b22:	4699      	mov	r9, r3
 8006b24:	688a      	ldr	r2, [r1, #8]
 8006b26:	690b      	ldr	r3, [r1, #16]
 8006b28:	4607      	mov	r7, r0
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	bfb8      	it	lt
 8006b2e:	4613      	movlt	r3, r2
 8006b30:	6033      	str	r3, [r6, #0]
 8006b32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b36:	460c      	mov	r4, r1
 8006b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b3c:	b10a      	cbz	r2, 8006b42 <_printf_common+0x26>
 8006b3e:	3301      	adds	r3, #1
 8006b40:	6033      	str	r3, [r6, #0]
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	0699      	lsls	r1, r3, #26
 8006b46:	bf42      	ittt	mi
 8006b48:	6833      	ldrmi	r3, [r6, #0]
 8006b4a:	3302      	addmi	r3, #2
 8006b4c:	6033      	strmi	r3, [r6, #0]
 8006b4e:	6825      	ldr	r5, [r4, #0]
 8006b50:	f015 0506 	ands.w	r5, r5, #6
 8006b54:	d106      	bne.n	8006b64 <_printf_common+0x48>
 8006b56:	f104 0a19 	add.w	sl, r4, #25
 8006b5a:	68e3      	ldr	r3, [r4, #12]
 8006b5c:	6832      	ldr	r2, [r6, #0]
 8006b5e:	1a9b      	subs	r3, r3, r2
 8006b60:	42ab      	cmp	r3, r5
 8006b62:	dc28      	bgt.n	8006bb6 <_printf_common+0x9a>
 8006b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b68:	1e13      	subs	r3, r2, #0
 8006b6a:	6822      	ldr	r2, [r4, #0]
 8006b6c:	bf18      	it	ne
 8006b6e:	2301      	movne	r3, #1
 8006b70:	0692      	lsls	r2, r2, #26
 8006b72:	d42d      	bmi.n	8006bd0 <_printf_common+0xb4>
 8006b74:	4649      	mov	r1, r9
 8006b76:	4638      	mov	r0, r7
 8006b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b7c:	47c0      	blx	r8
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d020      	beq.n	8006bc4 <_printf_common+0xa8>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	68e5      	ldr	r5, [r4, #12]
 8006b86:	f003 0306 	and.w	r3, r3, #6
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	bf18      	it	ne
 8006b8e:	2500      	movne	r5, #0
 8006b90:	6832      	ldr	r2, [r6, #0]
 8006b92:	f04f 0600 	mov.w	r6, #0
 8006b96:	68a3      	ldr	r3, [r4, #8]
 8006b98:	bf08      	it	eq
 8006b9a:	1aad      	subeq	r5, r5, r2
 8006b9c:	6922      	ldr	r2, [r4, #16]
 8006b9e:	bf08      	it	eq
 8006ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	bfc4      	itt	gt
 8006ba8:	1a9b      	subgt	r3, r3, r2
 8006baa:	18ed      	addgt	r5, r5, r3
 8006bac:	341a      	adds	r4, #26
 8006bae:	42b5      	cmp	r5, r6
 8006bb0:	d11a      	bne.n	8006be8 <_printf_common+0xcc>
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	e008      	b.n	8006bc8 <_printf_common+0xac>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	4652      	mov	r2, sl
 8006bba:	4649      	mov	r1, r9
 8006bbc:	4638      	mov	r0, r7
 8006bbe:	47c0      	blx	r8
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d103      	bne.n	8006bcc <_printf_common+0xb0>
 8006bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bcc:	3501      	adds	r5, #1
 8006bce:	e7c4      	b.n	8006b5a <_printf_common+0x3e>
 8006bd0:	2030      	movs	r0, #48	; 0x30
 8006bd2:	18e1      	adds	r1, r4, r3
 8006bd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bde:	4422      	add	r2, r4
 8006be0:	3302      	adds	r3, #2
 8006be2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006be6:	e7c5      	b.n	8006b74 <_printf_common+0x58>
 8006be8:	2301      	movs	r3, #1
 8006bea:	4622      	mov	r2, r4
 8006bec:	4649      	mov	r1, r9
 8006bee:	4638      	mov	r0, r7
 8006bf0:	47c0      	blx	r8
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	d0e6      	beq.n	8006bc4 <_printf_common+0xa8>
 8006bf6:	3601      	adds	r6, #1
 8006bf8:	e7d9      	b.n	8006bae <_printf_common+0x92>
	...

08006bfc <_printf_i>:
 8006bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c00:	7e0f      	ldrb	r7, [r1, #24]
 8006c02:	4691      	mov	r9, r2
 8006c04:	2f78      	cmp	r7, #120	; 0x78
 8006c06:	4680      	mov	r8, r0
 8006c08:	460c      	mov	r4, r1
 8006c0a:	469a      	mov	sl, r3
 8006c0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c12:	d807      	bhi.n	8006c24 <_printf_i+0x28>
 8006c14:	2f62      	cmp	r7, #98	; 0x62
 8006c16:	d80a      	bhi.n	8006c2e <_printf_i+0x32>
 8006c18:	2f00      	cmp	r7, #0
 8006c1a:	f000 80d9 	beq.w	8006dd0 <_printf_i+0x1d4>
 8006c1e:	2f58      	cmp	r7, #88	; 0x58
 8006c20:	f000 80a4 	beq.w	8006d6c <_printf_i+0x170>
 8006c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c2c:	e03a      	b.n	8006ca4 <_printf_i+0xa8>
 8006c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c32:	2b15      	cmp	r3, #21
 8006c34:	d8f6      	bhi.n	8006c24 <_printf_i+0x28>
 8006c36:	a101      	add	r1, pc, #4	; (adr r1, 8006c3c <_printf_i+0x40>)
 8006c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c3c:	08006c95 	.word	0x08006c95
 8006c40:	08006ca9 	.word	0x08006ca9
 8006c44:	08006c25 	.word	0x08006c25
 8006c48:	08006c25 	.word	0x08006c25
 8006c4c:	08006c25 	.word	0x08006c25
 8006c50:	08006c25 	.word	0x08006c25
 8006c54:	08006ca9 	.word	0x08006ca9
 8006c58:	08006c25 	.word	0x08006c25
 8006c5c:	08006c25 	.word	0x08006c25
 8006c60:	08006c25 	.word	0x08006c25
 8006c64:	08006c25 	.word	0x08006c25
 8006c68:	08006db7 	.word	0x08006db7
 8006c6c:	08006cd9 	.word	0x08006cd9
 8006c70:	08006d99 	.word	0x08006d99
 8006c74:	08006c25 	.word	0x08006c25
 8006c78:	08006c25 	.word	0x08006c25
 8006c7c:	08006dd9 	.word	0x08006dd9
 8006c80:	08006c25 	.word	0x08006c25
 8006c84:	08006cd9 	.word	0x08006cd9
 8006c88:	08006c25 	.word	0x08006c25
 8006c8c:	08006c25 	.word	0x08006c25
 8006c90:	08006da1 	.word	0x08006da1
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	1d1a      	adds	r2, r3, #4
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	602a      	str	r2, [r5, #0]
 8006c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e0a4      	b.n	8006df2 <_printf_i+0x1f6>
 8006ca8:	6820      	ldr	r0, [r4, #0]
 8006caa:	6829      	ldr	r1, [r5, #0]
 8006cac:	0606      	lsls	r6, r0, #24
 8006cae:	f101 0304 	add.w	r3, r1, #4
 8006cb2:	d50a      	bpl.n	8006cca <_printf_i+0xce>
 8006cb4:	680e      	ldr	r6, [r1, #0]
 8006cb6:	602b      	str	r3, [r5, #0]
 8006cb8:	2e00      	cmp	r6, #0
 8006cba:	da03      	bge.n	8006cc4 <_printf_i+0xc8>
 8006cbc:	232d      	movs	r3, #45	; 0x2d
 8006cbe:	4276      	negs	r6, r6
 8006cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc4:	230a      	movs	r3, #10
 8006cc6:	485e      	ldr	r0, [pc, #376]	; (8006e40 <_printf_i+0x244>)
 8006cc8:	e019      	b.n	8006cfe <_printf_i+0x102>
 8006cca:	680e      	ldr	r6, [r1, #0]
 8006ccc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cd0:	602b      	str	r3, [r5, #0]
 8006cd2:	bf18      	it	ne
 8006cd4:	b236      	sxthne	r6, r6
 8006cd6:	e7ef      	b.n	8006cb8 <_printf_i+0xbc>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	6820      	ldr	r0, [r4, #0]
 8006cdc:	1d19      	adds	r1, r3, #4
 8006cde:	6029      	str	r1, [r5, #0]
 8006ce0:	0601      	lsls	r1, r0, #24
 8006ce2:	d501      	bpl.n	8006ce8 <_printf_i+0xec>
 8006ce4:	681e      	ldr	r6, [r3, #0]
 8006ce6:	e002      	b.n	8006cee <_printf_i+0xf2>
 8006ce8:	0646      	lsls	r6, r0, #25
 8006cea:	d5fb      	bpl.n	8006ce4 <_printf_i+0xe8>
 8006cec:	881e      	ldrh	r6, [r3, #0]
 8006cee:	2f6f      	cmp	r7, #111	; 0x6f
 8006cf0:	bf0c      	ite	eq
 8006cf2:	2308      	moveq	r3, #8
 8006cf4:	230a      	movne	r3, #10
 8006cf6:	4852      	ldr	r0, [pc, #328]	; (8006e40 <_printf_i+0x244>)
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cfe:	6865      	ldr	r5, [r4, #4]
 8006d00:	2d00      	cmp	r5, #0
 8006d02:	bfa8      	it	ge
 8006d04:	6821      	ldrge	r1, [r4, #0]
 8006d06:	60a5      	str	r5, [r4, #8]
 8006d08:	bfa4      	itt	ge
 8006d0a:	f021 0104 	bicge.w	r1, r1, #4
 8006d0e:	6021      	strge	r1, [r4, #0]
 8006d10:	b90e      	cbnz	r6, 8006d16 <_printf_i+0x11a>
 8006d12:	2d00      	cmp	r5, #0
 8006d14:	d04d      	beq.n	8006db2 <_printf_i+0x1b6>
 8006d16:	4615      	mov	r5, r2
 8006d18:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d1c:	fb03 6711 	mls	r7, r3, r1, r6
 8006d20:	5dc7      	ldrb	r7, [r0, r7]
 8006d22:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d26:	4637      	mov	r7, r6
 8006d28:	42bb      	cmp	r3, r7
 8006d2a:	460e      	mov	r6, r1
 8006d2c:	d9f4      	bls.n	8006d18 <_printf_i+0x11c>
 8006d2e:	2b08      	cmp	r3, #8
 8006d30:	d10b      	bne.n	8006d4a <_printf_i+0x14e>
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	07de      	lsls	r6, r3, #31
 8006d36:	d508      	bpl.n	8006d4a <_printf_i+0x14e>
 8006d38:	6923      	ldr	r3, [r4, #16]
 8006d3a:	6861      	ldr	r1, [r4, #4]
 8006d3c:	4299      	cmp	r1, r3
 8006d3e:	bfde      	ittt	le
 8006d40:	2330      	movle	r3, #48	; 0x30
 8006d42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d4a:	1b52      	subs	r2, r2, r5
 8006d4c:	6122      	str	r2, [r4, #16]
 8006d4e:	464b      	mov	r3, r9
 8006d50:	4621      	mov	r1, r4
 8006d52:	4640      	mov	r0, r8
 8006d54:	f8cd a000 	str.w	sl, [sp]
 8006d58:	aa03      	add	r2, sp, #12
 8006d5a:	f7ff fedf 	bl	8006b1c <_printf_common>
 8006d5e:	3001      	adds	r0, #1
 8006d60:	d14c      	bne.n	8006dfc <_printf_i+0x200>
 8006d62:	f04f 30ff 	mov.w	r0, #4294967295
 8006d66:	b004      	add	sp, #16
 8006d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6c:	4834      	ldr	r0, [pc, #208]	; (8006e40 <_printf_i+0x244>)
 8006d6e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d72:	6829      	ldr	r1, [r5, #0]
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d7a:	6029      	str	r1, [r5, #0]
 8006d7c:	061d      	lsls	r5, r3, #24
 8006d7e:	d514      	bpl.n	8006daa <_printf_i+0x1ae>
 8006d80:	07df      	lsls	r7, r3, #31
 8006d82:	bf44      	itt	mi
 8006d84:	f043 0320 	orrmi.w	r3, r3, #32
 8006d88:	6023      	strmi	r3, [r4, #0]
 8006d8a:	b91e      	cbnz	r6, 8006d94 <_printf_i+0x198>
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	f023 0320 	bic.w	r3, r3, #32
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	2310      	movs	r3, #16
 8006d96:	e7af      	b.n	8006cf8 <_printf_i+0xfc>
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	f043 0320 	orr.w	r3, r3, #32
 8006d9e:	6023      	str	r3, [r4, #0]
 8006da0:	2378      	movs	r3, #120	; 0x78
 8006da2:	4828      	ldr	r0, [pc, #160]	; (8006e44 <_printf_i+0x248>)
 8006da4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006da8:	e7e3      	b.n	8006d72 <_printf_i+0x176>
 8006daa:	0659      	lsls	r1, r3, #25
 8006dac:	bf48      	it	mi
 8006dae:	b2b6      	uxthmi	r6, r6
 8006db0:	e7e6      	b.n	8006d80 <_printf_i+0x184>
 8006db2:	4615      	mov	r5, r2
 8006db4:	e7bb      	b.n	8006d2e <_printf_i+0x132>
 8006db6:	682b      	ldr	r3, [r5, #0]
 8006db8:	6826      	ldr	r6, [r4, #0]
 8006dba:	1d18      	adds	r0, r3, #4
 8006dbc:	6961      	ldr	r1, [r4, #20]
 8006dbe:	6028      	str	r0, [r5, #0]
 8006dc0:	0635      	lsls	r5, r6, #24
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	d501      	bpl.n	8006dca <_printf_i+0x1ce>
 8006dc6:	6019      	str	r1, [r3, #0]
 8006dc8:	e002      	b.n	8006dd0 <_printf_i+0x1d4>
 8006dca:	0670      	lsls	r0, r6, #25
 8006dcc:	d5fb      	bpl.n	8006dc6 <_printf_i+0x1ca>
 8006dce:	8019      	strh	r1, [r3, #0]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	4615      	mov	r5, r2
 8006dd4:	6123      	str	r3, [r4, #16]
 8006dd6:	e7ba      	b.n	8006d4e <_printf_i+0x152>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	2100      	movs	r1, #0
 8006ddc:	1d1a      	adds	r2, r3, #4
 8006dde:	602a      	str	r2, [r5, #0]
 8006de0:	681d      	ldr	r5, [r3, #0]
 8006de2:	6862      	ldr	r2, [r4, #4]
 8006de4:	4628      	mov	r0, r5
 8006de6:	f000 f82f 	bl	8006e48 <memchr>
 8006dea:	b108      	cbz	r0, 8006df0 <_printf_i+0x1f4>
 8006dec:	1b40      	subs	r0, r0, r5
 8006dee:	6060      	str	r0, [r4, #4]
 8006df0:	6863      	ldr	r3, [r4, #4]
 8006df2:	6123      	str	r3, [r4, #16]
 8006df4:	2300      	movs	r3, #0
 8006df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dfa:	e7a8      	b.n	8006d4e <_printf_i+0x152>
 8006dfc:	462a      	mov	r2, r5
 8006dfe:	4649      	mov	r1, r9
 8006e00:	4640      	mov	r0, r8
 8006e02:	6923      	ldr	r3, [r4, #16]
 8006e04:	47d0      	blx	sl
 8006e06:	3001      	adds	r0, #1
 8006e08:	d0ab      	beq.n	8006d62 <_printf_i+0x166>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	079b      	lsls	r3, r3, #30
 8006e0e:	d413      	bmi.n	8006e38 <_printf_i+0x23c>
 8006e10:	68e0      	ldr	r0, [r4, #12]
 8006e12:	9b03      	ldr	r3, [sp, #12]
 8006e14:	4298      	cmp	r0, r3
 8006e16:	bfb8      	it	lt
 8006e18:	4618      	movlt	r0, r3
 8006e1a:	e7a4      	b.n	8006d66 <_printf_i+0x16a>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	4632      	mov	r2, r6
 8006e20:	4649      	mov	r1, r9
 8006e22:	4640      	mov	r0, r8
 8006e24:	47d0      	blx	sl
 8006e26:	3001      	adds	r0, #1
 8006e28:	d09b      	beq.n	8006d62 <_printf_i+0x166>
 8006e2a:	3501      	adds	r5, #1
 8006e2c:	68e3      	ldr	r3, [r4, #12]
 8006e2e:	9903      	ldr	r1, [sp, #12]
 8006e30:	1a5b      	subs	r3, r3, r1
 8006e32:	42ab      	cmp	r3, r5
 8006e34:	dcf2      	bgt.n	8006e1c <_printf_i+0x220>
 8006e36:	e7eb      	b.n	8006e10 <_printf_i+0x214>
 8006e38:	2500      	movs	r5, #0
 8006e3a:	f104 0619 	add.w	r6, r4, #25
 8006e3e:	e7f5      	b.n	8006e2c <_printf_i+0x230>
 8006e40:	08007145 	.word	0x08007145
 8006e44:	08007156 	.word	0x08007156

08006e48 <memchr>:
 8006e48:	4603      	mov	r3, r0
 8006e4a:	b510      	push	{r4, lr}
 8006e4c:	b2c9      	uxtb	r1, r1
 8006e4e:	4402      	add	r2, r0
 8006e50:	4293      	cmp	r3, r2
 8006e52:	4618      	mov	r0, r3
 8006e54:	d101      	bne.n	8006e5a <memchr+0x12>
 8006e56:	2000      	movs	r0, #0
 8006e58:	e003      	b.n	8006e62 <memchr+0x1a>
 8006e5a:	7804      	ldrb	r4, [r0, #0]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	428c      	cmp	r4, r1
 8006e60:	d1f6      	bne.n	8006e50 <memchr+0x8>
 8006e62:	bd10      	pop	{r4, pc}

08006e64 <memmove>:
 8006e64:	4288      	cmp	r0, r1
 8006e66:	b510      	push	{r4, lr}
 8006e68:	eb01 0402 	add.w	r4, r1, r2
 8006e6c:	d902      	bls.n	8006e74 <memmove+0x10>
 8006e6e:	4284      	cmp	r4, r0
 8006e70:	4623      	mov	r3, r4
 8006e72:	d807      	bhi.n	8006e84 <memmove+0x20>
 8006e74:	1e43      	subs	r3, r0, #1
 8006e76:	42a1      	cmp	r1, r4
 8006e78:	d008      	beq.n	8006e8c <memmove+0x28>
 8006e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e82:	e7f8      	b.n	8006e76 <memmove+0x12>
 8006e84:	4601      	mov	r1, r0
 8006e86:	4402      	add	r2, r0
 8006e88:	428a      	cmp	r2, r1
 8006e8a:	d100      	bne.n	8006e8e <memmove+0x2a>
 8006e8c:	bd10      	pop	{r4, pc}
 8006e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e96:	e7f7      	b.n	8006e88 <memmove+0x24>

08006e98 <_realloc_r>:
 8006e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e9c:	4680      	mov	r8, r0
 8006e9e:	4614      	mov	r4, r2
 8006ea0:	460e      	mov	r6, r1
 8006ea2:	b921      	cbnz	r1, 8006eae <_realloc_r+0x16>
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eaa:	f7ff bb79 	b.w	80065a0 <_malloc_r>
 8006eae:	b92a      	cbnz	r2, 8006ebc <_realloc_r+0x24>
 8006eb0:	f7ff fc90 	bl	80067d4 <_free_r>
 8006eb4:	4625      	mov	r5, r4
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ebc:	f000 f81b 	bl	8006ef6 <_malloc_usable_size_r>
 8006ec0:	4284      	cmp	r4, r0
 8006ec2:	4607      	mov	r7, r0
 8006ec4:	d802      	bhi.n	8006ecc <_realloc_r+0x34>
 8006ec6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006eca:	d812      	bhi.n	8006ef2 <_realloc_r+0x5a>
 8006ecc:	4621      	mov	r1, r4
 8006ece:	4640      	mov	r0, r8
 8006ed0:	f7ff fb66 	bl	80065a0 <_malloc_r>
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d0ed      	beq.n	8006eb6 <_realloc_r+0x1e>
 8006eda:	42bc      	cmp	r4, r7
 8006edc:	4622      	mov	r2, r4
 8006ede:	4631      	mov	r1, r6
 8006ee0:	bf28      	it	cs
 8006ee2:	463a      	movcs	r2, r7
 8006ee4:	f7ff fb26 	bl	8006534 <memcpy>
 8006ee8:	4631      	mov	r1, r6
 8006eea:	4640      	mov	r0, r8
 8006eec:	f7ff fc72 	bl	80067d4 <_free_r>
 8006ef0:	e7e1      	b.n	8006eb6 <_realloc_r+0x1e>
 8006ef2:	4635      	mov	r5, r6
 8006ef4:	e7df      	b.n	8006eb6 <_realloc_r+0x1e>

08006ef6 <_malloc_usable_size_r>:
 8006ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006efa:	1f18      	subs	r0, r3, #4
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	bfbc      	itt	lt
 8006f00:	580b      	ldrlt	r3, [r1, r0]
 8006f02:	18c0      	addlt	r0, r0, r3
 8006f04:	4770      	bx	lr
	...

08006f08 <_init>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	bf00      	nop
 8006f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0e:	bc08      	pop	{r3}
 8006f10:	469e      	mov	lr, r3
 8006f12:	4770      	bx	lr

08006f14 <_fini>:
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	bf00      	nop
 8006f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1a:	bc08      	pop	{r3}
 8006f1c:	469e      	mov	lr, r3
 8006f1e:	4770      	bx	lr
