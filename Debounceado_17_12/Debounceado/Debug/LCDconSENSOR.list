
LCDconSENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eb0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08008fc0  08008fc0  00018fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092a8  080092a8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080092a8  080092a8  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092a8  080092a8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092a8  080092a8  000192a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092ac  080092ac  000192ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080092b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bd4  2000008c  0800933c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c60  0800933c  00021c60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3de  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043f3  00000000  00000000  0003d493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  00041888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001920  00000000  00000000  00043328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b2b2  00000000  00000000  00044c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dd6a  00000000  00000000  0005fefa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a30c  00000000  00000000  0007dc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117f70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075f0  00000000  00000000  00117fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008fa8 	.word	0x08008fa8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	08008fa8 	.word	0x08008fa8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_frsub>:
 8000164:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__addsf3>
 800016a:	bf00      	nop

0800016c <__aeabi_fsub>:
 800016c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000170 <__addsf3>:
 8000170:	0042      	lsls	r2, r0, #1
 8000172:	bf1f      	itttt	ne
 8000174:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000178:	ea92 0f03 	teqne	r2, r3
 800017c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000180:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000184:	d06a      	beq.n	800025c <__addsf3+0xec>
 8000186:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800018a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018e:	bfc1      	itttt	gt
 8000190:	18d2      	addgt	r2, r2, r3
 8000192:	4041      	eorgt	r1, r0
 8000194:	4048      	eorgt	r0, r1
 8000196:	4041      	eorgt	r1, r0
 8000198:	bfb8      	it	lt
 800019a:	425b      	neglt	r3, r3
 800019c:	2b19      	cmp	r3, #25
 800019e:	bf88      	it	hi
 80001a0:	4770      	bxhi	lr
 80001a2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ae:	bf18      	it	ne
 80001b0:	4240      	negne	r0, r0
 80001b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001ba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001be:	bf18      	it	ne
 80001c0:	4249      	negne	r1, r1
 80001c2:	ea92 0f03 	teq	r2, r3
 80001c6:	d03f      	beq.n	8000248 <__addsf3+0xd8>
 80001c8:	f1a2 0201 	sub.w	r2, r2, #1
 80001cc:	fa41 fc03 	asr.w	ip, r1, r3
 80001d0:	eb10 000c 	adds.w	r0, r0, ip
 80001d4:	f1c3 0320 	rsb	r3, r3, #32
 80001d8:	fa01 f103 	lsl.w	r1, r1, r3
 80001dc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001e0:	d502      	bpl.n	80001e8 <__addsf3+0x78>
 80001e2:	4249      	negs	r1, r1
 80001e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001ec:	d313      	bcc.n	8000216 <__addsf3+0xa6>
 80001ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001f2:	d306      	bcc.n	8000202 <__addsf3+0x92>
 80001f4:	0840      	lsrs	r0, r0, #1
 80001f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80001fa:	f102 0201 	add.w	r2, r2, #1
 80001fe:	2afe      	cmp	r2, #254	; 0xfe
 8000200:	d251      	bcs.n	80002a6 <__addsf3+0x136>
 8000202:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000206:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800020a:	bf08      	it	eq
 800020c:	f020 0001 	biceq.w	r0, r0, #1
 8000210:	ea40 0003 	orr.w	r0, r0, r3
 8000214:	4770      	bx	lr
 8000216:	0049      	lsls	r1, r1, #1
 8000218:	eb40 0000 	adc.w	r0, r0, r0
 800021c:	3a01      	subs	r2, #1
 800021e:	bf28      	it	cs
 8000220:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000224:	d2ed      	bcs.n	8000202 <__addsf3+0x92>
 8000226:	fab0 fc80 	clz	ip, r0
 800022a:	f1ac 0c08 	sub.w	ip, ip, #8
 800022e:	ebb2 020c 	subs.w	r2, r2, ip
 8000232:	fa00 f00c 	lsl.w	r0, r0, ip
 8000236:	bfaa      	itet	ge
 8000238:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800023c:	4252      	neglt	r2, r2
 800023e:	4318      	orrge	r0, r3
 8000240:	bfbc      	itt	lt
 8000242:	40d0      	lsrlt	r0, r2
 8000244:	4318      	orrlt	r0, r3
 8000246:	4770      	bx	lr
 8000248:	f092 0f00 	teq	r2, #0
 800024c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000250:	bf06      	itte	eq
 8000252:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000256:	3201      	addeq	r2, #1
 8000258:	3b01      	subne	r3, #1
 800025a:	e7b5      	b.n	80001c8 <__addsf3+0x58>
 800025c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000260:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000264:	bf18      	it	ne
 8000266:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800026a:	d021      	beq.n	80002b0 <__addsf3+0x140>
 800026c:	ea92 0f03 	teq	r2, r3
 8000270:	d004      	beq.n	800027c <__addsf3+0x10c>
 8000272:	f092 0f00 	teq	r2, #0
 8000276:	bf08      	it	eq
 8000278:	4608      	moveq	r0, r1
 800027a:	4770      	bx	lr
 800027c:	ea90 0f01 	teq	r0, r1
 8000280:	bf1c      	itt	ne
 8000282:	2000      	movne	r0, #0
 8000284:	4770      	bxne	lr
 8000286:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800028a:	d104      	bne.n	8000296 <__addsf3+0x126>
 800028c:	0040      	lsls	r0, r0, #1
 800028e:	bf28      	it	cs
 8000290:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000294:	4770      	bx	lr
 8000296:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800029a:	bf3c      	itt	cc
 800029c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002a0:	4770      	bxcc	lr
 80002a2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ae:	4770      	bx	lr
 80002b0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b4:	bf16      	itet	ne
 80002b6:	4608      	movne	r0, r1
 80002b8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002bc:	4601      	movne	r1, r0
 80002be:	0242      	lsls	r2, r0, #9
 80002c0:	bf06      	itte	eq
 80002c2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c6:	ea90 0f01 	teqeq	r0, r1
 80002ca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_ui2f>:
 80002d0:	f04f 0300 	mov.w	r3, #0
 80002d4:	e004      	b.n	80002e0 <__aeabi_i2f+0x8>
 80002d6:	bf00      	nop

080002d8 <__aeabi_i2f>:
 80002d8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002dc:	bf48      	it	mi
 80002de:	4240      	negmi	r0, r0
 80002e0:	ea5f 0c00 	movs.w	ip, r0
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002ec:	4601      	mov	r1, r0
 80002ee:	f04f 0000 	mov.w	r0, #0
 80002f2:	e01c      	b.n	800032e <__aeabi_l2f+0x2a>

080002f4 <__aeabi_ul2f>:
 80002f4:	ea50 0201 	orrs.w	r2, r0, r1
 80002f8:	bf08      	it	eq
 80002fa:	4770      	bxeq	lr
 80002fc:	f04f 0300 	mov.w	r3, #0
 8000300:	e00a      	b.n	8000318 <__aeabi_l2f+0x14>
 8000302:	bf00      	nop

08000304 <__aeabi_l2f>:
 8000304:	ea50 0201 	orrs.w	r2, r0, r1
 8000308:	bf08      	it	eq
 800030a:	4770      	bxeq	lr
 800030c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000310:	d502      	bpl.n	8000318 <__aeabi_l2f+0x14>
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	ea5f 0c01 	movs.w	ip, r1
 800031c:	bf02      	ittt	eq
 800031e:	4684      	moveq	ip, r0
 8000320:	4601      	moveq	r1, r0
 8000322:	2000      	moveq	r0, #0
 8000324:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000328:	bf08      	it	eq
 800032a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000332:	fabc f28c 	clz	r2, ip
 8000336:	3a08      	subs	r2, #8
 8000338:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800033c:	db10      	blt.n	8000360 <__aeabi_l2f+0x5c>
 800033e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000342:	4463      	add	r3, ip
 8000344:	fa00 fc02 	lsl.w	ip, r0, r2
 8000348:	f1c2 0220 	rsb	r2, r2, #32
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000350:	fa20 f202 	lsr.w	r2, r0, r2
 8000354:	eb43 0002 	adc.w	r0, r3, r2
 8000358:	bf08      	it	eq
 800035a:	f020 0001 	biceq.w	r0, r0, #1
 800035e:	4770      	bx	lr
 8000360:	f102 0220 	add.w	r2, r2, #32
 8000364:	fa01 fc02 	lsl.w	ip, r1, r2
 8000368:	f1c2 0220 	rsb	r2, r2, #32
 800036c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000370:	fa21 f202 	lsr.w	r2, r1, r2
 8000374:	eb43 0002 	adc.w	r0, r3, r2
 8000378:	bf08      	it	eq
 800037a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037e:	4770      	bx	lr

08000380 <__aeabi_fmul>:
 8000380:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000384:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000388:	bf1e      	ittt	ne
 800038a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038e:	ea92 0f0c 	teqne	r2, ip
 8000392:	ea93 0f0c 	teqne	r3, ip
 8000396:	d06f      	beq.n	8000478 <__aeabi_fmul+0xf8>
 8000398:	441a      	add	r2, r3
 800039a:	ea80 0c01 	eor.w	ip, r0, r1
 800039e:	0240      	lsls	r0, r0, #9
 80003a0:	bf18      	it	ne
 80003a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a6:	d01e      	beq.n	80003e6 <__aeabi_fmul+0x66>
 80003a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b4:	fba0 3101 	umull	r3, r1, r0, r1
 80003b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003c0:	bf3e      	ittt	cc
 80003c2:	0049      	lslcc	r1, r1, #1
 80003c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c8:	005b      	lslcc	r3, r3, #1
 80003ca:	ea40 0001 	orr.w	r0, r0, r1
 80003ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003d2:	2afd      	cmp	r2, #253	; 0xfd
 80003d4:	d81d      	bhi.n	8000412 <__aeabi_fmul+0x92>
 80003d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003de:	bf08      	it	eq
 80003e0:	f020 0001 	biceq.w	r0, r0, #1
 80003e4:	4770      	bx	lr
 80003e6:	f090 0f00 	teq	r0, #0
 80003ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ee:	bf08      	it	eq
 80003f0:	0249      	lsleq	r1, r1, #9
 80003f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003fa:	3a7f      	subs	r2, #127	; 0x7f
 80003fc:	bfc2      	ittt	gt
 80003fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000402:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000406:	4770      	bxgt	lr
 8000408:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800040c:	f04f 0300 	mov.w	r3, #0
 8000410:	3a01      	subs	r2, #1
 8000412:	dc5d      	bgt.n	80004d0 <__aeabi_fmul+0x150>
 8000414:	f112 0f19 	cmn.w	r2, #25
 8000418:	bfdc      	itt	le
 800041a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041e:	4770      	bxle	lr
 8000420:	f1c2 0200 	rsb	r2, r2, #0
 8000424:	0041      	lsls	r1, r0, #1
 8000426:	fa21 f102 	lsr.w	r1, r1, r2
 800042a:	f1c2 0220 	rsb	r2, r2, #32
 800042e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000432:	ea5f 0031 	movs.w	r0, r1, rrx
 8000436:	f140 0000 	adc.w	r0, r0, #0
 800043a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043e:	bf08      	it	eq
 8000440:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000444:	4770      	bx	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0040      	lsleq	r0, r0, #1
 8000452:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000456:	3a01      	subeq	r2, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xce>
 800045a:	ea40 000c 	orr.w	r0, r0, ip
 800045e:	f093 0f00 	teq	r3, #0
 8000462:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0049      	lsleq	r1, r1, #1
 800046a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046e:	3b01      	subeq	r3, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xe6>
 8000472:	ea41 010c 	orr.w	r1, r1, ip
 8000476:	e78f      	b.n	8000398 <__aeabi_fmul+0x18>
 8000478:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800047c:	ea92 0f0c 	teq	r2, ip
 8000480:	bf18      	it	ne
 8000482:	ea93 0f0c 	teqne	r3, ip
 8000486:	d00a      	beq.n	800049e <__aeabi_fmul+0x11e>
 8000488:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800048c:	bf18      	it	ne
 800048e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000492:	d1d8      	bne.n	8000446 <__aeabi_fmul+0xc6>
 8000494:	ea80 0001 	eor.w	r0, r0, r1
 8000498:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800049c:	4770      	bx	lr
 800049e:	f090 0f00 	teq	r0, #0
 80004a2:	bf17      	itett	ne
 80004a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a8:	4608      	moveq	r0, r1
 80004aa:	f091 0f00 	teqne	r1, #0
 80004ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004b2:	d014      	beq.n	80004de <__aeabi_fmul+0x15e>
 80004b4:	ea92 0f0c 	teq	r2, ip
 80004b8:	d101      	bne.n	80004be <__aeabi_fmul+0x13e>
 80004ba:	0242      	lsls	r2, r0, #9
 80004bc:	d10f      	bne.n	80004de <__aeabi_fmul+0x15e>
 80004be:	ea93 0f0c 	teq	r3, ip
 80004c2:	d103      	bne.n	80004cc <__aeabi_fmul+0x14c>
 80004c4:	024b      	lsls	r3, r1, #9
 80004c6:	bf18      	it	ne
 80004c8:	4608      	movne	r0, r1
 80004ca:	d108      	bne.n	80004de <__aeabi_fmul+0x15e>
 80004cc:	ea80 0001 	eor.w	r0, r0, r1
 80004d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004dc:	4770      	bx	lr
 80004de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e6:	4770      	bx	lr

080004e8 <__aeabi_fdiv>:
 80004e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004f0:	bf1e      	ittt	ne
 80004f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f6:	ea92 0f0c 	teqne	r2, ip
 80004fa:	ea93 0f0c 	teqne	r3, ip
 80004fe:	d069      	beq.n	80005d4 <__aeabi_fdiv+0xec>
 8000500:	eba2 0203 	sub.w	r2, r2, r3
 8000504:	ea80 0c01 	eor.w	ip, r0, r1
 8000508:	0249      	lsls	r1, r1, #9
 800050a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050e:	d037      	beq.n	8000580 <__aeabi_fdiv+0x98>
 8000510:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000514:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000518:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800051c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000520:	428b      	cmp	r3, r1
 8000522:	bf38      	it	cc
 8000524:	005b      	lslcc	r3, r3, #1
 8000526:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800052a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052e:	428b      	cmp	r3, r1
 8000530:	bf24      	itt	cs
 8000532:	1a5b      	subcs	r3, r3, r1
 8000534:	ea40 000c 	orrcs.w	r0, r0, ip
 8000538:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800053c:	bf24      	itt	cs
 800053e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000542:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000546:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800054a:	bf24      	itt	cs
 800054c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000550:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000554:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000558:	bf24      	itt	cs
 800055a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	bf18      	it	ne
 8000566:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800056a:	d1e0      	bne.n	800052e <__aeabi_fdiv+0x46>
 800056c:	2afd      	cmp	r2, #253	; 0xfd
 800056e:	f63f af50 	bhi.w	8000412 <__aeabi_fmul+0x92>
 8000572:	428b      	cmp	r3, r1
 8000574:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000584:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000588:	327f      	adds	r2, #127	; 0x7f
 800058a:	bfc2      	ittt	gt
 800058c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000590:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000594:	4770      	bxgt	lr
 8000596:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059a:	f04f 0300 	mov.w	r3, #0
 800059e:	3a01      	subs	r2, #1
 80005a0:	e737      	b.n	8000412 <__aeabi_fmul+0x92>
 80005a2:	f092 0f00 	teq	r2, #0
 80005a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0040      	lsleq	r0, r0, #1
 80005ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005b2:	3a01      	subeq	r2, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xc2>
 80005b6:	ea40 000c 	orr.w	r0, r0, ip
 80005ba:	f093 0f00 	teq	r3, #0
 80005be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0049      	lsleq	r1, r1, #1
 80005c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005ca:	3b01      	subeq	r3, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xda>
 80005ce:	ea41 010c 	orr.w	r1, r1, ip
 80005d2:	e795      	b.n	8000500 <__aeabi_fdiv+0x18>
 80005d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d8:	ea92 0f0c 	teq	r2, ip
 80005dc:	d108      	bne.n	80005f0 <__aeabi_fdiv+0x108>
 80005de:	0242      	lsls	r2, r0, #9
 80005e0:	f47f af7d 	bne.w	80004de <__aeabi_fmul+0x15e>
 80005e4:	ea93 0f0c 	teq	r3, ip
 80005e8:	f47f af70 	bne.w	80004cc <__aeabi_fmul+0x14c>
 80005ec:	4608      	mov	r0, r1
 80005ee:	e776      	b.n	80004de <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	d104      	bne.n	8000600 <__aeabi_fdiv+0x118>
 80005f6:	024b      	lsls	r3, r1, #9
 80005f8:	f43f af4c 	beq.w	8000494 <__aeabi_fmul+0x114>
 80005fc:	4608      	mov	r0, r1
 80005fe:	e76e      	b.n	80004de <__aeabi_fmul+0x15e>
 8000600:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000604:	bf18      	it	ne
 8000606:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800060a:	d1ca      	bne.n	80005a2 <__aeabi_fdiv+0xba>
 800060c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000610:	f47f af5c 	bne.w	80004cc <__aeabi_fmul+0x14c>
 8000614:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000618:	f47f af3c 	bne.w	8000494 <__aeabi_fmul+0x114>
 800061c:	e75f      	b.n	80004de <__aeabi_fmul+0x15e>
 800061e:	bf00      	nop

08000620 <__gesf2>:
 8000620:	f04f 3cff 	mov.w	ip, #4294967295
 8000624:	e006      	b.n	8000634 <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__lesf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	e002      	b.n	8000634 <__cmpsf2+0x4>
 800062e:	bf00      	nop

08000630 <__cmpsf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000638:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800063c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000640:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000644:	bf18      	it	ne
 8000646:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800064a:	d011      	beq.n	8000670 <__cmpsf2+0x40>
 800064c:	b001      	add	sp, #4
 800064e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000652:	bf18      	it	ne
 8000654:	ea90 0f01 	teqne	r0, r1
 8000658:	bf58      	it	pl
 800065a:	ebb2 0003 	subspl.w	r0, r2, r3
 800065e:	bf88      	it	hi
 8000660:	17c8      	asrhi	r0, r1, #31
 8000662:	bf38      	it	cc
 8000664:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000668:	bf18      	it	ne
 800066a:	f040 0001 	orrne.w	r0, r0, #1
 800066e:	4770      	bx	lr
 8000670:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000674:	d102      	bne.n	800067c <__cmpsf2+0x4c>
 8000676:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800067a:	d105      	bne.n	8000688 <__cmpsf2+0x58>
 800067c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000680:	d1e4      	bne.n	800064c <__cmpsf2+0x1c>
 8000682:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000686:	d0e1      	beq.n	800064c <__cmpsf2+0x1c>
 8000688:	f85d 0b04 	ldr.w	r0, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <__aeabi_cfrcmple>:
 8000690:	4684      	mov	ip, r0
 8000692:	4608      	mov	r0, r1
 8000694:	4661      	mov	r1, ip
 8000696:	e7ff      	b.n	8000698 <__aeabi_cfcmpeq>

08000698 <__aeabi_cfcmpeq>:
 8000698:	b50f      	push	{r0, r1, r2, r3, lr}
 800069a:	f7ff ffc9 	bl	8000630 <__cmpsf2>
 800069e:	2800      	cmp	r0, #0
 80006a0:	bf48      	it	mi
 80006a2:	f110 0f00 	cmnmi.w	r0, #0
 80006a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a8 <__aeabi_fcmpeq>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff fff4 	bl	8000698 <__aeabi_cfcmpeq>
 80006b0:	bf0c      	ite	eq
 80006b2:	2001      	moveq	r0, #1
 80006b4:	2000      	movne	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmplt>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffea 	bl	8000698 <__aeabi_cfcmpeq>
 80006c4:	bf34      	ite	cc
 80006c6:	2001      	movcc	r0, #1
 80006c8:	2000      	movcs	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmple>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffe0 	bl	8000698 <__aeabi_cfcmpeq>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpge>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffd2 	bl	8000690 <__aeabi_cfrcmple>
 80006ec:	bf94      	ite	ls
 80006ee:	2001      	movls	r0, #1
 80006f0:	2000      	movhi	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_fcmpgt>:
 80006f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006fc:	f7ff ffc8 	bl	8000690 <__aeabi_cfrcmple>
 8000700:	bf34      	ite	cc
 8000702:	2001      	movcc	r0, #1
 8000704:	2000      	movcs	r0, #0
 8000706:	f85d fb08 	ldr.w	pc, [sp], #8
 800070a:	bf00      	nop

0800070c <USART_ReceiveData>:


char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	b29b      	uxth	r3, r3
 800071a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800071e:	b29b      	uxth	r3, r3
}
 8000720:	4618      	mov	r0, r3
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	460b      	mov	r3, r1
 8000734:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000736:	887b      	ldrh	r3, [r7, #2]
 8000738:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	605a      	str	r2, [r3, #4]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
	...

0800074c <usart_setup>:


uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <usart_setup+0x60>)
 8000756:	4a16      	ldr	r2, [pc, #88]	; (80007b0 <usart_setup+0x64>)
 8000758:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <usart_setup+0x60>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <usart_setup+0x60>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <usart_setup+0x60>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <usart_setup+0x60>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <usart_setup+0x60>)
 8000774:	220c      	movs	r2, #12
 8000776:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <usart_setup+0x60>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <usart_setup+0x60>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <usart_setup+0x60>)
 8000786:	f004 fc61 	bl	800504c <HAL_HalfDuplex_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d000      	beq.n	8000792 <usart_setup+0x46>
	{
		//	    Error_Handler();
		__asm__("NOP");
 8000790:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <usart_setup+0x60>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	68da      	ldr	r2, [r3, #12]
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <usart_setup+0x60>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f042 0220 	orr.w	r2, r2, #32
 80007a0:	60da      	str	r2, [r3, #12]
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000180 	.word	0x20000180
 80007b0:	40013800 	.word	0x40013800

080007b4 <owInit>:

void owInit(OneWire *ow) {
 80007b4:	b480      	push	{r7}
 80007b6:	b087      	sub	sp, #28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 80007c4:	e015      	b.n	80007f2 <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];      
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]
    k=0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 80007d4:	e007      	b.n	80007e6 <owInit+0x32>
    r[k] = 0;
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	4413      	add	r3, r2
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	3301      	adds	r3, #1
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	2b07      	cmp	r3, #7
 80007ea:	ddf4      	ble.n	80007d6 <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	3301      	adds	r3, #1
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	dde6      	ble.n	80007c6 <owInit+0x12>
  }
  k=0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 80007fc:	e008      	b.n	8000810 <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	4413      	add	r3, r2
 8000804:	3314      	adds	r3, #20
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	3301      	adds	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	2b07      	cmp	r3, #7
 8000814:	ddf3      	ble.n	80007fe <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2240      	movs	r2, #64	; 0x40
 800081a:	611a      	str	r2, [r3, #16]

}
 800081c:	bf00      	nop
 800081e:	371c      	adds	r7, #28
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
	...

08000828 <owReadHandler>:

void owReadHandler() { //обработчик прерыания USART
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 800082e:	f000 f850 	bl	80008d2 <getUsartIndex>
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  /* Проверяем, что мы вызвали прерывание из-за RXNE. */
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <owReadHandler+0x70>)
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	f003 0320 	and.w	r3, r3, #32
 800083e:	2b00      	cmp	r3, #0
 8000840:	d025      	beq.n	800088e <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <owReadHandler+0x70>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 800084a:	2b00      	cmp	r3, #0
 800084c:	d01f      	beq.n	800088e <owReadHandler+0x66>

    /* Получаем данные из периферии и сбрасываем флаг*/
		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 800084e:	bf00      	nop
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <owReadHandler+0x70>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f003 0320 	and.w	r3, r3, #32
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f9      	beq.n	8000850 <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);              
 800085c:	79fc      	ldrb	r4, [r7, #7]
 800085e:	480e      	ldr	r0, [pc, #56]	; (8000898 <owReadHandler+0x70>)
 8000860:	f7ff ff54 	bl	800070c <USART_ReceiveData>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <owReadHandler+0x74>)
 800086a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);//сбрасываем флаг ответ получен после 
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2201      	movs	r2, #1
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	b25b      	sxtb	r3, r3
 8000878:	43db      	mvns	r3, r3
 800087a:	b25a      	sxtb	r2, r3
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <owReadHandler+0x78>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	b25b      	sxtb	r3, r3
 8000884:	4013      	ands	r3, r2
 8000886:	b25b      	sxtb	r3, r3
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <owReadHandler+0x78>)
 800088c:	701a      	strb	r2, [r3, #0]
  }
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bd90      	pop	{r4, r7, pc}
 8000896:	bf00      	nop
 8000898:	40013800 	.word	0x40013800
 800089c:	200000ac 	.word	0x200000ac
 80008a0:	200000a8 	.word	0x200000a8

080008a4 <owResetCmd>:
 *
 * @param N usart -- выбранный для реализации 1wire usart
 * @return Возвращает 1 если на шине кто-то есть и 0 в противном случае
 */

  uint16_t owResetCmd() {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
	uint16_t owPresence;
	
	usart_setup(9600);
 80008aa:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80008ae:	f7ff ff4d 	bl	800074c <usart_setup>

  owSend(0xF0); // Send RESET отправляем импуль сброса
 80008b2:	20f0      	movs	r0, #240	; 0xf0
 80008b4:	f000 f814 	bl	80008e0 <owSend>
  owPresence = owEchoRead(); // Ждём PRESENCE на шине и вовзращаем, что есть
 80008b8:	f000 f850 	bl	800095c <owEchoRead>
 80008bc:	4603      	mov	r3, r0
 80008be:	80fb      	strh	r3, [r7, #6]

	usart_setup(115200);// перенастраиваем скорость UART
 80008c0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80008c4:	f7ff ff42 	bl	800074c <usart_setup>
  return owPresence;
 80008c8:	88fb      	ldrh	r3, [r7, #6]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <getUsartIndex>:

uint8_t getUsartIndex() {// смотрит по номеру UART c каким будет идти работа
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <owSend>:

void owSend(uint16_t data) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());//устанавливаем флаг если попадем в обработчик прерывания там он сбросится
 80008ea:	f7ff fff2 	bl	80008d2 <getUsartIndex>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461a      	mov	r2, r3
 80008f2:	2301      	movs	r3, #1
 80008f4:	4093      	lsls	r3, r2
 80008f6:	b25a      	sxtb	r2, r3
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <owSend+0x50>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b25b      	sxtb	r3, r3
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <owSend+0x50>)
 8000908:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);//отправляем данные
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	4619      	mov	r1, r3
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <owSend+0x54>)
 8000910:	f7ff ff0b 	bl	800072a <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);//ждем пока передача закончится
 8000914:	bf00      	nop
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <owSend+0x58>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000920:	2b40      	cmp	r3, #64	; 0x40
 8000922:	d1f8      	bne.n	8000916 <owSend+0x36>
}
 8000924:	bf00      	nop
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000a8 	.word	0x200000a8
 8000934:	40013800 	.word	0x40013800
 8000938:	20000180 	.word	0x20000180

0800093c <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {//читаем у нас пришла единица или ноль в ответ
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0; //если пришло 0xFF, то бит = 1, что то другое бит = 0
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	2bff      	cmp	r3, #255	; 0xff
 800094a:	bf0c      	ite	eq
 800094c:	2301      	moveq	r3, #1
 800094e:	2300      	movne	r3, #0
 8000950:	b2db      	uxtb	r3, r3
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <owEchoRead>:

uint16_t owEchoRead() {//
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();//получаем номер USART
 8000962:	f7ff ffb6 	bl	80008d2 <getUsartIndex>
 8000966:	4603      	mov	r3, r0
 8000968:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);// ждем пока кто-то не ответит но не больше паузы
 8000970:	bf00      	nop
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <owEchoRead+0x48>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b2db      	uxtb	r3, r3
 8000978:	461a      	mov	r2, r3
 800097a:	797b      	ldrb	r3, [r7, #5]
 800097c:	fa42 f303 	asr.w	r3, r2, r3
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	2b00      	cmp	r3, #0
 8000986:	d004      	beq.n	8000992 <owEchoRead+0x36>
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	1e5a      	subs	r2, r3, #1
 800098c:	80fa      	strh	r2, [r7, #6]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1ef      	bne.n	8000972 <owEchoRead+0x16>
  return rc_buffer[i];//в зависимости от используемого номера UART 
 8000992:	797b      	ldrb	r3, [r7, #5]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <owEchoRead+0x4c>)
 8000996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800099a:	b29b      	uxth	r3, r3
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200000a8 	.word	0x200000a8
 80009a8:	200000ac 	.word	0x200000ac

080009ac <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {//разлагаем 1 байт на 8 байт ,кодируем так скасказать в посылку для 1wire
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]
 80009bc:	e014      	b.n	80009e8 <byteToBits+0x3c>
    if (ow_byte & 0x01) {//если текущий бит в байте ==1 то
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d003      	beq.n	80009d0 <byteToBits+0x24>
      *bits = WIRE_1; //заменяем на число которое при передаче по USART для 1wire будет единцией t.e 0xFF
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	22ff      	movs	r2, #255	; 0xff
 80009cc:	701a      	strb	r2, [r3, #0]
 80009ce:	e002      	b.n	80009d6 <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;// тоже самое только для 0
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1; //сдвигаем обработанный бит
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	085b      	lsrs	r3, r3, #1
 80009e0:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	3301      	adds	r3, #1
 80009e6:	73fb      	strb	r3, [r7, #15]
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	2b07      	cmp	r3, #7
 80009ec:	d9e7      	bls.n	80009be <byteToBits+0x12>
  }
  return bits; //возвращае массив для передачи 
 80009ee:	683b      	ldr	r3, [r7, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <owSendByte>:
/**
 * Метод пересылает последовательно 8 байт по одному на каждый бит в data
 * @param usart -- выбранный для эмуляции 1wire UART
 * @param d -- данные
 */
void owSendByte(uint8_t d) {
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);//преобразовываем байт в биты "массив байт для  передачи UART и эмуляции 1WIRE"
 8000a04:	f107 020c 	add.w	r2, r7, #12
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ffcd 	bl	80009ac <byteToBits>
  for (i = 0; i < 8; ++i) {
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	e00b      	b.n	8000a30 <owSendByte+0x36>
    owSend(data[i]);
 8000a18:	f107 020c 	add.w	r2, r7, #12
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	4413      	add	r3, r2
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff5b 	bl	80008e0 <owSend>
  for (i = 0; i < 8; ++i) {
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	2b07      	cmp	r3, #7
 8000a34:	ddf0      	ble.n	8000a18 <owSendByte+0x1e>
  }
}
 8000a36:	bf00      	nop
 8000a38:	bf00      	nop
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <owCRC>:
  }
  return target_byte; //возвращаем полученный байт
}

/* Подсчет CRC8 массива mas длиной Len */
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	733b      	strb	r3, [r7, #12]
  crc = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 8000a54:	7b3b      	ldrb	r3, [r7, #12]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 8000a5e:	2300      	movs	r3, #0
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	e018      	b.n	8000a96 <owCRC+0x56>
      fb = crc ^ dat;
 8000a64:	7b7a      	ldrb	r2, [r7, #13]
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	4053      	eors	r3, r2
 8000a6a:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 8000a6c:	7afb      	ldrb	r3, [r7, #11]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 8000a74:	7b7b      	ldrb	r3, [r7, #13]
 8000a76:	085b      	lsrs	r3, r3, #1
 8000a78:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 8000a7a:	7bbb      	ldrb	r3, [r7, #14]
 8000a7c:	085b      	lsrs	r3, r3, #1
 8000a7e:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c; // полином
 8000a80:	7afb      	ldrb	r3, [r7, #11]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d104      	bne.n	8000a90 <owCRC+0x50>
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	3301      	adds	r3, #1
 8000a94:	73fb      	strb	r3, [r7, #15]
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	2b07      	cmp	r3, #7
 8000a9a:	d9e3      	bls.n	8000a64 <owCRC+0x24>
    }
    st_byt++;
 8000a9c:	7b3b      	ldrb	r3, [r7, #12]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len); // счетчик байтов в массиве
 8000aa2:	7b3a      	ldrb	r2, [r7, #12]
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d3d4      	bcc.n	8000a54 <owCRC+0x14>
  return crc;
 8000aaa:	7b7b      	ldrb	r3, [r7, #13]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr

08000ab6 <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);                        
 8000abe:	2107      	movs	r1, #7
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ffbd 	bl	8000a40 <owCRC>
 8000ac6:	4603      	mov	r3, r0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <hasNextRom>:
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 * переделать на функции обратного вызова для реакции на ошибки
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {//
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) { //есть ли кто на шине
 8000ae8:	f7ff fedc 	bl	80008a4 <owResetCmd>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2bf0      	cmp	r3, #240	; 0xf0
 8000af0:	d101      	bne.n	8000af6 <hasNextRom+0x26>
    return 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e097      	b.n	8000c26 <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);//
 8000af6:	20f0      	movs	r0, #240	; 0xf0
 8000af8:	f7ff ff7f 	bl	80009fa <owSendByte>
  do {
		uint8_t answerBit =0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 8000b00:	7ffb      	ldrb	r3, [r7, #31]
 8000b02:	08db      	lsrs	r3, r3, #3
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ); // чтение прямого бита
 8000b14:	20ff      	movs	r0, #255	; 0xff
 8000b16:	f7ff fee3 	bl	80008e0 <owSend>
    cB = owReadSlot(owEchoRead());//ответ от датчика
 8000b1a:	f7ff ff1f 	bl	800095c <owEchoRead>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff0b 	bl	800093c <owReadSlot>
 8000b26:	4603      	mov	r3, r0
 8000b28:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ); // чтение инверсного бита
 8000b2a:	20ff      	movs	r0, #255	; 0xff
 8000b2c:	f7ff fed8 	bl	80008e0 <owSend>
    cmp_cB = owReadSlot(owEchoRead());//ответ от датчика
 8000b30:	f7ff ff14 	bl	800095c <owEchoRead>
 8000b34:	4603      	mov	r3, r0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff00 	bl	800093c <owReadSlot>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)//сравниваем два ответа
 8000b40:	7afa      	ldrb	r2, [r7, #11]
 8000b42:	7abb      	ldrb	r3, [r7, #10]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d105      	bne.n	8000b54 <hasNextRom+0x84>
 8000b48:	7afb      	ldrb	r3, [r7, #11]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d102      	bne.n	8000b54 <hasNextRom+0x84>
      return -1;//ошибка никто не ответил 
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	e068      	b.n	8000c26 <hasNextRom+0x156>
    if (cB != cmp_cB) { //нормальная ситуация пришло либо 10 либо 01
 8000b54:	7afa      	ldrb	r2, [r7, #11]
 8000b56:	7abb      	ldrb	r3, [r7, #10]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d002      	beq.n	8000b62 <hasNextRom+0x92>
      searchDirection = cB;//выбираем в каком направлении будем двигатся дальше
 8000b5c:	7afb      	ldrb	r3, [r7, #11]
 8000b5e:	75bb      	strb	r3, [r7, #22]
 8000b60:	e023      	b.n	8000baa <hasNextRom+0xda>
			} else {//колизия пришло 00 т.е текущий бит у ROM-ов разный
				if (ui32BitNumber == ow->lastDiscrepancy)//если текущая позиция колизии равна прошлой
 8000b62:	7ffa      	ldrb	r2, [r7, #31]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	691b      	ldr	r3, [r3, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d102      	bne.n	8000b72 <hasNextRom+0xa2>
        searchDirection = 1;//выбираем в каком направлении будем двигатся дальше
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	75bb      	strb	r3, [r7, #22]
 8000b70:	e01b      	b.n	8000baa <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {//если мы зашили дальше
 8000b72:	7ffa      	ldrb	r2, [r7, #31]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dd02      	ble.n	8000b82 <hasNextRom+0xb2>
          searchDirection = 0;//выбираем в каком направлении будем двигатся дальше 
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	75bb      	strb	r3, [r7, #22]
 8000b80:	e00e      	b.n	8000ba0 <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	4413      	add	r3, r2
 8000b88:	3314      	adds	r3, #20
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	7ffb      	ldrb	r3, [r7, #31]
 8000b90:	f003 0307 	and.w	r3, r3, #7
 8000b94:	fa42 f303 	asr.w	r3, r2, r3
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 8000ba0:	7dbb      	ldrb	r3, [r7, #22]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <hasNextRom+0xda>
          zeroFork = ui32BitNumber;//запоминаем развилку
 8000ba6:	7ffb      	ldrb	r3, [r7, #31]
 8000ba8:	61bb      	str	r3, [r7, #24]
      }
    }
    // сохраняем бит
    if (searchDirection)
 8000baa:	7dbb      	ldrb	r3, [r7, #22]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d00e      	beq.n	8000bce <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;//выставляем бит в текущем байте байте
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b25a      	sxtb	r2, r3
 8000bb6:	7ffb      	ldrb	r3, [r7, #31]
 8000bb8:	f003 0307 	and.w	r3, r3, #7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b25b      	sxtb	r3, r3
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);// решаем кого отключить
 8000bce:	7dbb      	ldrb	r3, [r7, #22]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <hasNextRom+0x108>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e000      	b.n	8000bda <hasNextRom+0x10a>
 8000bd8:	23ff      	movs	r3, #255	; 0xff
 8000bda:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);//вырубаем "мешающие" устройсва
 8000bdc:	7d7b      	ldrb	r3, [r7, #21]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fe7d 	bl	80008e0 <owSend>
    ui32BitNumber++;//ищем следующий бит
 8000be6:	7ffb      	ldrb	r3, [r7, #31]
 8000be8:	3301      	adds	r3, #1
 8000bea:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);//пока не найден весь ROM все биты
 8000bec:	7ffb      	ldrb	r3, [r7, #31]
 8000bee:	2b3f      	cmp	r3, #63	; 0x3f
 8000bf0:	d984      	bls.n	8000afc <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;//запоминаем развилку
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	611a      	str	r2, [r3, #16]
  for (; i < 7; i++)
 8000bf8:	e00b      	b.n	8000c12 <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];//запоминаем последний ROM
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	441a      	add	r2, r3
 8000c00:	7dfb      	ldrb	r3, [r7, #23]
 8000c02:	7811      	ldrb	r1, [r2, #0]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	460a      	mov	r2, r1
 8000c0a:	751a      	strb	r2, [r3, #20]
  for (; i < 7; i++)
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	75fb      	strb	r3, [r7, #23]
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
 8000c14:	2b06      	cmp	r3, #6
 8000c16:	d9f0      	bls.n	8000bfa <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	691b      	ldr	r3, [r3, #16]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	bfcc      	ite	gt
 8000c20:	2301      	movgt	r3, #1
 8000c22:	2300      	movle	r3, #0
 8000c24:	b2db      	uxtb	r3, r3
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3720      	adds	r7, #32
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <owSearchCmd>:

// Возвращает количество устройств на шине или код ошибки, если значение меньше 0
int owSearchCmd(OneWire *ow) {
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b084      	sub	sp, #16
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff fdba 	bl	80007b4 <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //передаем указатель на структуру куда положить след.ROM
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	4619      	mov	r1, r3
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ff40 	bl	8000ad0 <hasNextRom>
 8000c50:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	da02      	bge.n	8000c5e <owSearchCmd+0x30>
      return -1;
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	e009      	b.n	8000c72 <owSearchCmd+0x44>
    device++;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	3301      	adds	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//ищем пока кто-то есть и этих кто-то не больше дефайна
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <owSearchCmd+0x42>
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	dde7      	ble.n	8000c40 <owSearchCmd+0x12>
		return device;//возвращаем порядковый номер датчика (устройства) на шине
 8000c70:	68fb      	ldr	r3, [r7, #12]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {//отправляет команду пропуска ROM после этого следующая команда будет
  owResetCmd();                 //для всех устройств на шине
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {//позволяет мастеру обращаться к конкретному  ведомому устройству
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 8000c86:	f7ff fe0d 	bl	80008a4 <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);//обращаемся к конкретному устройсву
 8000c8a:	2055      	movs	r0, #85	; 0x55
 8000c8c:	f7ff feb5 	bl	80009fa <owSendByte>
  for (; i < 8; i++)
 8000c90:	e009      	b.n	8000ca6 <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));//"перебираемся по структуре как по массиву" первой звездочкой получаем i тый байт из структуры
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	4413      	add	r3, r2
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fead 	bl	80009fa <owSendByte>
  for (; i < 8; i++)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b07      	cmp	r3, #7
 8000caa:	ddf2      	ble.n	8000c92 <owMatchRomCmd+0x18>
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);//позволяет мастеру обращаться к конкретному  ведомому устройству
 8000cc0:	6838      	ldr	r0, [r7, #0]
 8000cc2:	f7ff ffda 	bl	8000c7a <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);//говорим датчику пора бы преобразовать температуру
 8000cc6:	2044      	movs	r0, #68	; 0x44
 8000cc8:	f7ff fe97 	bl	80009fa <owSendByte>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <owReadScratchpadCmd>:
 * @param ow -- OneWire pointer
 * @param rom -- selected device on the bus
 * @param data -- buffer for data
 * @return data
 */
uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {//читаем память датчика
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b10      	cmp	r3, #16
 8000cea:	d001      	beq.n	8000cf0 <owReadScratchpadCmd+0x1c>
 8000cec:	2b28      	cmp	r3, #40	; 0x28
 8000cee:	d109      	bne.n	8000d04 <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;  //9*8 =72 == равняется 9 байт данных
 8000cf0:	2348      	movs	r3, #72	; 0x48
 8000cf2:	82bb      	strh	r3, [r7, #20]
      break;
 8000cf4:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 8000cf6:	68b8      	ldr	r0, [r7, #8]
 8000cf8:	f7ff ffbf 	bl	8000c7a <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);//отправляем команду на чтение памяти
 8000cfc:	20be      	movs	r0, #190	; 0xbe
 8000cfe:	f7ff fe7c 	bl	80009fa <owSendByte>
  while (b < p) {// пока мы не обработали 9 байт 
 8000d02:	e048      	b.n	8000d96 <owReadScratchpadCmd+0xc2>
      return data;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	e04b      	b.n	8000da0 <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8)); //позиция обрабатываемого байта
 8000d08:	8abb      	ldrh	r3, [r7, #20]
 8000d0a:	3b08      	subs	r3, #8
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	da00      	bge.n	8000d12 <owReadScratchpadCmd+0x3e>
 8000d10:	3307      	adds	r3, #7
 8000d12:	10db      	asrs	r3, r3, #3
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	8afb      	ldrh	r3, [r7, #22]
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	74fb      	strb	r3, [r7, #19]
    uint8_t bt; 
		owSend(OW_READ);
 8000d22:	20ff      	movs	r0, #255	; 0xff
 8000d24:	f7ff fddc 	bl	80008e0 <owSend>
    bt = owReadSlot(owEchoRead());//читаем данные 
 8000d28:	f7ff fe18 	bl	800095c <owEchoRead>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fe04 	bl	800093c <owReadSlot>
 8000d34:	4603      	mov	r3, r0
 8000d36:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 8000d38:	7cbb      	ldrb	r3, [r7, #18]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d113      	bne.n	8000d66 <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;//выставляем бит в нужной позиции
 8000d3e:	7cfb      	ldrb	r3, [r7, #19]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	4413      	add	r3, r2
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b25a      	sxtb	r2, r3
 8000d48:	8afb      	ldrh	r3, [r7, #22]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	2101      	movs	r1, #1
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b259      	sxtb	r1, r3
 8000d5a:	7cfb      	ldrb	r3, [r7, #19]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	4413      	add	r3, r2
 8000d60:	b2ca      	uxtb	r2, r1
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	e014      	b.n	8000d90 <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);//сбрасываем бит в нужной позиции
 8000d66:	7cfb      	ldrb	r3, [r7, #19]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b25a      	sxtb	r2, r3
 8000d70:	8afb      	ldrh	r3, [r7, #22]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	2101      	movs	r1, #1
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	4013      	ands	r3, r2
 8000d84:	b259      	sxtb	r1, r3
 8000d86:	7cfb      	ldrb	r3, [r7, #19]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	b2ca      	uxtb	r2, r1
 8000d8e:	701a      	strb	r2, [r3, #0]
    b++;//следующий бит
 8000d90:	8afb      	ldrh	r3, [r7, #22]
 8000d92:	3301      	adds	r3, #1
 8000d94:	82fb      	strh	r3, [r7, #22]
  while (b < p) {// пока мы не обработали 9 байт 
 8000d96:	8afa      	ldrh	r2, [r7, #22]
 8000d98:	8abb      	ldrh	r3, [r7, #20]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d3b4      	bcc.n	8000d08 <owReadScratchpadCmd+0x34>
  }
  return data;
 8000d9e:	687b      	ldr	r3, [r7, #4]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <readTemperature>:
 * @param ow -- OneWire bus pointer
 * @param rom -- selected device
 * @param reSense -- do you want resense temp for next time?
 * @return struct with data
 */
Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	4613      	mov	r3, r2
 8000db4:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sp = (Scratchpad_DS18B20 *) &pad; 
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  switch (rom->family) {
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b10      	cmp	r3, #16
 8000dd4:	d022      	beq.n	8000e1c <readTemperature+0x74>
 8000dd6:	2b28      	cmp	r3, #40	; 0x28
 8000dd8:	d13a      	bne.n	8000e50 <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18B20
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	461a      	mov	r2, r3
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f7ff ff76 	bl	8000cd4 <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);//целая часть
 8000de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dea:	79db      	ldrb	r3, [r3, #7]
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	b25a      	sxtb	r2, r3
 8000df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df2:	7a1b      	ldrb	r3, [r3, #8]
 8000df4:	091b      	lsrs	r3, r3, #4
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);//дробная
 8000e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e04:	7a1b      	ldrb	r3, [r3, #8]
 8000e06:	f003 020f 	and.w	r2, r3, #15
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	111b      	asrs	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 8000e1a:	e01c      	b.n	8000e56 <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18S20
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	461a      	mov	r2, r3
 8000e22:	68b9      	ldr	r1, [r7, #8]
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	f7ff ff55 	bl	8000cd4 <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 8000e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2c:	7a1b      	ldrb	r3, [r3, #8]
 8000e2e:	085b      	lsrs	r3, r3, #1
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 8000e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3a:	7a1b      	ldrb	r3, [r3, #8]
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	461a      	mov	r2, r3
 8000e44:	0092      	lsls	r2, r2, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 8000e4e:	e002      	b.n	8000e56 <readTemperature+0xae>
    default:
      return t;
 8000e50:	8c3b      	ldrh	r3, [r7, #32]
 8000e52:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000e54:	e008      	b.n	8000e68 <readTemperature+0xc0>
  }
  if (reSense) {
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);//можно сразу после как забрали данные отдаем датчику команду на преобразования температуры
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f7ff ff29 	bl	8000cb6 <owConvertTemperatureCmd>
  }
  return t;
 8000e64:	8c3b      	ldrh	r3, [r7, #32]
 8000e66:	84bb      	strh	r3, [r7, #36]	; 0x24
}
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000e6e:	f362 0307 	bfi	r3, r2, #0, #8
 8000e72:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000e76:	f362 230f 	bfi	r3, r2, #8, #8
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3730      	adds	r7, #48	; 0x30
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <get_ROMid>:
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}


int get_ROMid (void){
 8000e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {    // is anybody on the bus?
 8000e8a:	f7ff fd0b 	bl	80008a4 <owResetCmd>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2bf0      	cmp	r3, #240	; 0xf0
 8000e92:	d079      	beq.n	8000f88 <get_ROMid+0x104>
		devices = owSearchCmd(&ow);        // получить ROMid в�?ех у�?трой�?т на шине или вернуть код ошибки
 8000e94:	484e      	ldr	r0, [pc, #312]	; (8000fd0 <get_ROMid+0x14c>)
 8000e96:	f7ff feca 	bl	8000c2e <owSearchCmd>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b4d      	ldr	r3, [pc, #308]	; (8000fd4 <get_ROMid+0x150>)
 8000ea0:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 8000ea2:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <get_ROMid+0x150>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d113      	bne.n	8000ed2 <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 8000eaa:	4b4b      	ldr	r3, [pc, #300]	; (8000fd8 <get_ROMid+0x154>)
 8000eac:	4a4b      	ldr	r2, [pc, #300]	; (8000fdc <get_ROMid+0x158>)
 8000eae:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 8000eb0:	4b4b      	ldr	r3, [pc, #300]	; (8000fe0 <get_ROMid+0x15c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	e005      	b.n	8000ec4 <get_ROMid+0x40>
					__asm__("nop");
 8000eb8:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 8000eba:	4b49      	ldr	r3, [pc, #292]	; (8000fe0 <get_ROMid+0x15c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	4a47      	ldr	r2, [pc, #284]	; (8000fe0 <get_ROMid+0x15c>)
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	4b46      	ldr	r3, [pc, #280]	; (8000fe0 <get_ROMid+0x15c>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b43      	ldr	r3, [pc, #268]	; (8000fd8 <get_ROMid+0x154>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d3f3      	bcc.n	8000eb8 <get_ROMid+0x34>
				pDelay = 1000000;
 8000ed0:	e7eb      	b.n	8000eaa <get_ROMid+0x26>
			}

		}
		i = 0;
 8000ed2:	4b43      	ldr	r3, [pc, #268]	; (8000fe0 <get_ROMid+0x15c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 8000ed8:	e04f      	b.n	8000f7a <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 8000eda:	4b41      	ldr	r3, [pc, #260]	; (8000fe0 <get_ROMid+0x15c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	4a3b      	ldr	r2, [pc, #236]	; (8000fd0 <get_ROMid+0x14c>)
 8000ee2:	4413      	add	r3, r2
 8000ee4:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff fde5 	bl	8000ab6 <owCRC8>
 8000eec:	4603      	mov	r3, r0
 8000eee:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	79db      	ldrb	r3, [r3, #7]
 8000ef4:	78fa      	ldrb	r2, [r7, #3]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d101      	bne.n	8000efe <get_ROMid+0x7a>
 8000efa:	4b3a      	ldr	r3, [pc, #232]	; (8000fe4 <get_ROMid+0x160>)
 8000efc:	e000      	b.n	8000f00 <get_ROMid+0x7c>
 8000efe:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <get_ROMid+0x164>)
 8000f00:	4a3a      	ldr	r2, [pc, #232]	; (8000fec <get_ROMid+0x168>)
 8000f02:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 8000f04:	4b36      	ldr	r3, [pc, #216]	; (8000fe0 <get_ROMid+0x15c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b39      	ldr	r3, [pc, #228]	; (8000ff0 <get_ROMid+0x16c>)
 8000f0c:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461e      	mov	r6, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	799b      	ldrb	r3, [r3, #6]
 8000f18:	469c      	mov	ip, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	795b      	ldrb	r3, [r3, #5]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	791b      	ldrb	r3, [r3, #4]
 8000f24:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8000f2a:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8000f30:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8000f36:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8000f3c:	9305      	str	r3, [sp, #20]
 8000f3e:	9504      	str	r5, [sp, #16]
 8000f40:	9403      	str	r4, [sp, #12]
 8000f42:	9002      	str	r0, [sp, #8]
 8000f44:	9101      	str	r1, [sp, #4]
 8000f46:	9200      	str	r2, [sp, #0]
 8000f48:	4663      	mov	r3, ip
 8000f4a:	4632      	mov	r2, r6
 8000f4c:	4929      	ldr	r1, [pc, #164]	; (8000ff4 <get_ROMid+0x170>)
 8000f4e:	482a      	ldr	r0, [pc, #168]	; (8000ff8 <get_ROMid+0x174>)
 8000f50:	f007 fc64 	bl	800881c <siprintf>

			if (crc != r->crc) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	79db      	ldrb	r3, [r3, #7]
 8000f58:	78fa      	ldrb	r2, [r7, #3]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d008      	beq.n	8000f70 <get_ROMid+0xec>
				devInfo.device = i;
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <get_ROMid+0x15c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <get_ROMid+0x16c>)
 8000f66:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 8000f68:	4924      	ldr	r1, [pc, #144]	; (8000ffc <get_ROMid+0x178>)
 8000f6a:	4823      	ldr	r0, [pc, #140]	; (8000ff8 <get_ROMid+0x174>)
 8000f6c:	f007 fc56 	bl	800881c <siprintf>
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <get_ROMid+0x15c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	4a1a      	ldr	r2, [pc, #104]	; (8000fe0 <get_ROMid+0x15c>)
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <get_ROMid+0x150>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <get_ROMid+0x15c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8a8      	bhi.n	8000eda <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <get_ROMid+0x154>)
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <get_ROMid+0x158>)
 8000f8c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <get_ROMid+0x15c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	e005      	b.n	8000fa2 <get_ROMid+0x11e>
		__asm__("nop");
 8000f96:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <get_ROMid+0x15c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <get_ROMid+0x15c>)
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <get_ROMid+0x15c>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <get_ROMid+0x154>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d3f3      	bcc.n	8000f96 <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <get_ROMid+0x168>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <get_ROMid+0x160>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff f8cb 	bl	8000150 <strcmp>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <get_ROMid+0x140>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e001      	b.n	8000fc8 <get_ROMid+0x144>
	else return -1;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd0:	200000e8 	.word	0x200000e8
 8000fd4:	200000e4 	.word	0x200000e4
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	000f4240 	.word	0x000f4240
 8000fe0:	20000104 	.word	0x20000104
 8000fe4:	08008fc0 	.word	0x08008fc0
 8000fe8:	08008fc8 	.word	0x08008fc8
 8000fec:	2000010c 	.word	0x2000010c
 8000ff0:	200000c0 	.word	0x200000c0
 8000ff4:	08008fd4 	.word	0x08008fd4
 8000ff8:	200000c4 	.word	0x200000c4
 8000ffc:	08008ffc 	.word	0x08008ffc

08001000 <get_Temperature>:

void get_Temperature (void)
{
 8001000:	b598      	push	{r3, r4, r7, lr}
 8001002:	af00      	add	r7, sp, #0
	i=0;
 8001004:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <get_Temperature+0xf0>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 800100a:	e067      	b.n	80010dc <get_Temperature+0xdc>
		switch ((ow.ids[i]).family) {//че у нас за датчик
 800100c:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <get_Temperature+0xf0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a38      	ldr	r2, [pc, #224]	; (80010f4 <get_Temperature+0xf4>)
 8001012:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001016:	2b28      	cmp	r3, #40	; 0x28
 8001018:	d006      	beq.n	8001028 <get_Temperature+0x28>
 800101a:	2b28      	cmp	r3, #40	; 0x28
 800101c:	dc56      	bgt.n	80010cc <get_Temperature+0xcc>
 800101e:	2b00      	cmp	r3, #0
 8001020:	d056      	beq.n	80010d0 <get_Temperature+0xd0>
 8001022:	2b10      	cmp	r3, #16
 8001024:	d029      	beq.n	800107a <get_Temperature+0x7a>
			break;
		case 0x00:
			break;
		default:
			// error handler
			break;
 8001026:	e051      	b.n	80010cc <get_Temperature+0xcc>
			t = readTemperature(&ow, &ow.ids[i], 1);
 8001028:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <get_Temperature+0xf0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4a31      	ldr	r2, [pc, #196]	; (80010f4 <get_Temperature+0xf4>)
 8001030:	4413      	add	r3, r2
 8001032:	2201      	movs	r2, #1
 8001034:	4619      	mov	r1, r3
 8001036:	482f      	ldr	r0, [pc, #188]	; (80010f4 <get_Temperature+0xf4>)
 8001038:	f7ff feb6 	bl	8000da8 <readTemperature>
 800103c:	4603      	mov	r3, r0
 800103e:	4a2e      	ldr	r2, [pc, #184]	; (80010f8 <get_Temperature+0xf8>)
 8001040:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8001042:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <get_Temperature+0xf8>)
 8001044:	f993 3000 	ldrsb.w	r3, [r3]
 8001048:	461a      	mov	r2, r3
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	461a      	mov	r2, r3
 8001054:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <get_Temperature+0xf8>)
 8001056:	785b      	ldrb	r3, [r3, #1]
 8001058:	4413      	add	r3, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff f93c 	bl	80002d8 <__aeabi_i2f>
 8001060:	4603      	mov	r3, r0
 8001062:	4a23      	ldr	r2, [pc, #140]	; (80010f0 <get_Temperature+0xf0>)
 8001064:	6814      	ldr	r4, [r2, #0]
 8001066:	4925      	ldr	r1, [pc, #148]	; (80010fc <get_Temperature+0xfc>)
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa3d 	bl	80004e8 <__aeabi_fdiv>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <get_Temperature+0x100>)
 8001074:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 8001078:	e02b      	b.n	80010d2 <get_Temperature+0xd2>
			t = readTemperature(&ow, &ow.ids[i], 1);
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <get_Temperature+0xf0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <get_Temperature+0xf4>)
 8001082:	4413      	add	r3, r2
 8001084:	2201      	movs	r2, #1
 8001086:	4619      	mov	r1, r3
 8001088:	481a      	ldr	r0, [pc, #104]	; (80010f4 <get_Temperature+0xf4>)
 800108a:	f7ff fe8d 	bl	8000da8 <readTemperature>
 800108e:	4603      	mov	r3, r0
 8001090:	4a19      	ldr	r2, [pc, #100]	; (80010f8 <get_Temperature+0xf8>)
 8001092:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <get_Temperature+0xf8>)
 8001096:	f993 3000 	ldrsb.w	r3, [r3]
 800109a:	461a      	mov	r2, r3
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <get_Temperature+0xf8>)
 80010a8:	785b      	ldrb	r3, [r3, #1]
 80010aa:	4413      	add	r3, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f913 	bl	80002d8 <__aeabi_i2f>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <get_Temperature+0xf0>)
 80010b6:	6814      	ldr	r4, [r2, #0]
 80010b8:	4910      	ldr	r1, [pc, #64]	; (80010fc <get_Temperature+0xfc>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa14 	bl	80004e8 <__aeabi_fdiv>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <get_Temperature+0x100>)
 80010c6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 80010ca:	e002      	b.n	80010d2 <get_Temperature+0xd2>
			break;
 80010cc:	bf00      	nop
 80010ce:	e000      	b.n	80010d2 <get_Temperature+0xd2>
			break;
 80010d0:	bf00      	nop
	for (; i < devices; i++) {
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <get_Temperature+0xf0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <get_Temperature+0xf0>)
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <get_Temperature+0x104>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <get_Temperature+0xf0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d890      	bhi.n	800100c <get_Temperature+0xc>
		}
	}
//	pDelay = 4000000;
//	for (i = 0; i < pDelay * 1; i++){}   /* Wait a bit. */
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	bd98      	pop	{r3, r4, r7, pc}
 80010f0:	20000104 	.word	0x20000104
 80010f4:	200000e8 	.word	0x200000e8
 80010f8:	20000108 	.word	0x20000108
 80010fc:	41200000 	.word	0x41200000
 8001100:	200000b8 	.word	0x200000b8
 8001104:	200000e4 	.word	0x200000e4

08001108 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8001112:	4a38      	ldr	r2, [pc, #224]	; (80011f4 <HD44780_Init+0xec>)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001118:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <HD44780_Init+0xf0>)
 800111a:	2208      	movs	r2, #8
 800111c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800111e:	4b37      	ldr	r3, [pc, #220]	; (80011fc <HD44780_Init+0xf4>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001124:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <HD44780_Init+0xec>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d907      	bls.n	800113c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800112c:	4b33      	ldr	r3, [pc, #204]	; (80011fc <HD44780_Init+0xf4>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f043 0308 	orr.w	r3, r3, #8
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b31      	ldr	r3, [pc, #196]	; (80011fc <HD44780_Init+0xf4>)
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e006      	b.n	800114a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800113c:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <HD44780_Init+0xf4>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <HD44780_Init+0xf4>)
 8001148:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800114a:	f000 fa07 	bl	800155c <DelayInit>
  HAL_Delay(50);
 800114e:	2032      	movs	r0, #50	; 0x32
 8001150:	f001 fbc2 	bl	80028d8 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001154:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <HD44780_Init+0xf0>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f9c5 	bl	80014e8 <ExpanderWrite>
  HAL_Delay(1000);
 800115e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001162:	f001 fbb9 	bl	80028d8 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8001166:	2030      	movs	r0, #48	; 0x30
 8001168:	f000 f9ad 	bl	80014c6 <Write4Bits>
  DelayUS(4500);
 800116c:	f241 1094 	movw	r0, #4500	; 0x1194
 8001170:	f000 fa1c 	bl	80015ac <DelayUS>

  Write4Bits(0x03 << 4);
 8001174:	2030      	movs	r0, #48	; 0x30
 8001176:	f000 f9a6 	bl	80014c6 <Write4Bits>
  DelayUS(4500);
 800117a:	f241 1094 	movw	r0, #4500	; 0x1194
 800117e:	f000 fa15 	bl	80015ac <DelayUS>

  Write4Bits(0x03 << 4);
 8001182:	2030      	movs	r0, #48	; 0x30
 8001184:	f000 f99f 	bl	80014c6 <Write4Bits>
  DelayUS(4500);
 8001188:	f241 1094 	movw	r0, #4500	; 0x1194
 800118c:	f000 fa0e 	bl	80015ac <DelayUS>

  Write4Bits(0x02 << 4);
 8001190:	2020      	movs	r0, #32
 8001192:	f000 f998 	bl	80014c6 <Write4Bits>
  DelayUS(100);
 8001196:	2064      	movs	r0, #100	; 0x64
 8001198:	f000 fa08 	bl	80015ac <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HD44780_Init+0xf4>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f043 0320 	orr.w	r3, r3, #32
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f950 	bl	800144c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HD44780_Init+0xf8>)
 80011ae:	2204      	movs	r2, #4
 80011b0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80011b2:	f000 f875 	bl	80012a0 <HD44780_Display>
  HD44780_Clear();
 80011b6:	f000 f82b 	bl	8001210 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HD44780_Init+0xfc>)
 80011bc:	2202      	movs	r2, #2
 80011be:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HD44780_Init+0xfc>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f93e 	bl	800144c <SendCommand>
  DelayUS(4500);
 80011d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80011d4:	f000 f9ea 	bl	80015ac <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80011d8:	490b      	ldr	r1, [pc, #44]	; (8001208 <HD44780_Init+0x100>)
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 f8ce 	bl	800137c <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80011e0:	490a      	ldr	r1, [pc, #40]	; (800120c <HD44780_Init+0x104>)
 80011e2:	2001      	movs	r0, #1
 80011e4:	f000 f8ca 	bl	800137c <HD44780_CreateSpecialChar>

  HD44780_Home();
 80011e8:	f000 f81d 	bl	8001226 <HD44780_Home>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000113 	.word	0x20000113
 80011f8:	20000114 	.word	0x20000114
 80011fc:	20000110 	.word	0x20000110
 8001200:	20000111 	.word	0x20000111
 8001204:	20000112 	.word	0x20000112
 8001208:	20000004 	.word	0x20000004
 800120c:	2000000c 	.word	0x2000000c

08001210 <HD44780_Clear>:

void HD44780_Clear()
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001214:	2001      	movs	r0, #1
 8001216:	f000 f919 	bl	800144c <SendCommand>
  DelayUS(2000);
 800121a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800121e:	f000 f9c5 	bl	80015ac <DelayUS>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}

08001226 <HD44780_Home>:

void HD44780_Home()
{
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800122a:	2002      	movs	r0, #2
 800122c:	f000 f90e 	bl	800144c <SendCommand>
  DelayUS(2000);
 8001230:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001234:	f000 f9ba 	bl	80015ac <DelayUS>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	460a      	mov	r2, r1
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	4613      	mov	r3, r2
 800124a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HD44780_SetCursor+0x5c>)
 800124e:	f107 0408 	add.w	r4, r7, #8
 8001252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <HD44780_SetCursor+0x60>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	79ba      	ldrb	r2, [r7, #6]
 800125e:	429a      	cmp	r2, r3
 8001260:	d303      	bcc.n	800126a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HD44780_SetCursor+0x60>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	3b01      	subs	r3, #1
 8001268:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	3318      	adds	r3, #24
 8001270:	443b      	add	r3, r7
 8001272:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	4413      	add	r3, r2
 800127c:	b2db      	uxtb	r3, r3
 800127e:	b25b      	sxtb	r3, r3
 8001280:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001284:	b25b      	sxtb	r3, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f8df 	bl	800144c <SendCommand>
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	0800901c 	.word	0x0800901c
 800129c:	20000113 	.word	0x20000113

080012a0 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HD44780_Display+0x28>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HD44780_Display+0x28>)
 80012b0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HD44780_Display+0x28>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 f8c5 	bl	800144c <SendCommand>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000111 	.word	0x20000111

080012cc <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HD44780_NoCursor+0x28>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	f023 0302 	bic.w	r3, r3, #2
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HD44780_NoCursor+0x28>)
 80012dc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HD44780_NoCursor+0x28>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 f8af 	bl	800144c <SendCommand>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000111 	.word	0x20000111

080012f8 <HD44780_Cursor>:

void HD44780_Cursor()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HD44780_Cursor+0x28>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HD44780_Cursor+0x28>)
 8001308:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HD44780_Cursor+0x28>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f043 0308 	orr.w	r3, r3, #8
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f899 	bl	800144c <SendCommand>
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000111 	.word	0x20000111

08001324 <HD44780_NoBlink>:

void HD44780_NoBlink()
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <HD44780_NoBlink+0x28>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HD44780_NoBlink+0x28>)
 8001334:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <HD44780_NoBlink+0x28>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4618      	mov	r0, r3
 8001342:	f000 f883 	bl	800144c <SendCommand>
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000111 	.word	0x20000111

08001350 <HD44780_Blink>:

void HD44780_Blink()
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HD44780_Blink+0x28>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HD44780_Blink+0x28>)
 8001360:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HD44780_Blink+0x28>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	b2db      	uxtb	r3, r3
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f86d 	bl	800144c <SendCommand>
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000111 	.word	0x20000111

0800137c <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	b25b      	sxtb	r3, r3
 8001396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800139a:	b25b      	sxtb	r3, r3
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f854 	bl	800144c <SendCommand>
  for (int i=0; i<8; i++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	e009      	b.n	80013be <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f858 	bl	8001468 <SendChar>
  for (int i=0; i<8; i++)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3301      	adds	r3, #1
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b07      	cmp	r3, #7
 80013c2:	ddf2      	ble.n	80013aa <HD44780_CreateSpecialChar+0x2e>
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80013d6:	e006      	b.n	80013e6 <HD44780_PrintStr+0x18>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f841 	bl	8001468 <SendChar>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f4      	bne.n	80013d8 <HD44780_PrintStr+0xa>
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HD44780_SetBacklight>:

void HD44780_SetBacklight(uint8_t new_val)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  if(new_val) HD44780_Backlight();
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <HD44780_SetBacklight+0x16>
 8001408:	f000 f814 	bl	8001434 <HD44780_Backlight>
  else HD44780_NoBacklight();
}
 800140c:	e001      	b.n	8001412 <HD44780_SetBacklight+0x1a>
  else HD44780_NoBacklight();
 800140e:	f000 f805 	bl	800141c <HD44780_NoBacklight>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HD44780_NoBacklight>:

void HD44780_NoBacklight(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HD44780_NoBacklight+0x14>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8001426:	2000      	movs	r0, #0
 8001428:	f000 f85e 	bl	80014e8 <ExpanderWrite>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000114 	.word	0x20000114

08001434 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <HD44780_Backlight+0x14>)
 800143a:	2208      	movs	r2, #8
 800143c:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800143e:	2000      	movs	r0, #0
 8001440:	f000 f852 	bl	80014e8 <ExpanderWrite>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000114 	.word	0x20000114

0800144c <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f812 	bl	8001484 <Send>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2101      	movs	r1, #1
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f804 	bl	8001484 <Send>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	460a      	mov	r2, r1
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	4613      	mov	r3, r2
 8001492:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f023 030f 	bic.w	r3, r3, #15
 800149a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	79bb      	ldrb	r3, [r7, #6]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f80b 	bl	80014c6 <Write4Bits>
  Write4Bits((lownib)|mode);
 80014b0:	7bba      	ldrb	r2, [r7, #14]
 80014b2:	79bb      	ldrb	r3, [r7, #6]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f804 	bl	80014c6 <Write4Bits>
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 f808 	bl	80014e8 <ExpanderWrite>
  PulseEnable(value);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f820 	bl	8001520 <PulseEnable>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <ExpanderWrite+0x30>)
 80014f4:	781a      	ldrb	r2, [r3, #0]
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80014fe:	f107 020f 	add.w	r2, r7, #15
 8001502:	230a      	movs	r3, #10
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2301      	movs	r3, #1
 8001508:	217e      	movs	r1, #126	; 0x7e
 800150a:	4804      	ldr	r0, [pc, #16]	; (800151c <ExpanderWrite+0x34>)
 800150c:	f001 fe90 	bl	8003230 <HAL_I2C_Master_Transmit>
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000114 	.word	0x20000114
 800151c:	20000118 	.word	0x20000118

08001520 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ffd8 	bl	80014e8 <ExpanderWrite>
  DelayUS(20);
 8001538:	2014      	movs	r0, #20
 800153a:	f000 f837 	bl	80015ac <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ffce 	bl	80014e8 <ExpanderWrite>
  DelayUS(20);
 800154c:	2014      	movs	r0, #20
 800154e:	f000 f82d 	bl	80015ac <DelayUS>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <DelayInit>:

static void DelayInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <DelayInit+0x48>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <DelayInit+0x48>)
 8001566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800156a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <DelayInit+0x48>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <DelayInit+0x48>)
 8001572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001576:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <DelayInit+0x4c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <DelayInit+0x4c>)
 800157e:	f023 0301 	bic.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <DelayInit+0x4c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <DelayInit+0x4c>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <DelayInit+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001596:	bf00      	nop
  __ASM volatile ("NOP");
 8001598:	bf00      	nop
  __ASM volatile ("NOP");
 800159a:	bf00      	nop
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	e000edf0 	.word	0xe000edf0
 80015a8:	e0001000 	.word	0xe0001000

080015ac <DelayUS>:

static void DelayUS(uint32_t us) {
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <DelayUS+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <DelayUS+0x44>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0c9a      	lsrs	r2, r3, #18
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <DelayUS+0x48>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <DelayUS+0x48>)
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d8f6      	bhi.n	80015ce <DelayUS+0x22>
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	20000014 	.word	0x20000014
 80015f0:	431bde83 	.word	0x431bde83
 80015f4:	e0001000 	.word	0xe0001000

080015f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fe:	f001 f939 	bl	8002874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001602:	f000 f87d 	bl	8001700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001606:	f000 f951 	bl	80018ac <MX_GPIO_Init>
  MX_I2C1_Init();
 800160a:	f000 f8d7 	bl	80017bc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800160e:	f000 f923 	bl	8001858 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001612:	f000 f901 	bl	8001818 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  InitAll();
 8001616:	f000 ffb5 	bl	8002584 <InitAll>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800161a:	f004 f91b 	bl	8005854 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800161e:	4a25      	ldr	r2, [pc, #148]	; (80016b4 <main+0xbc>)
 8001620:	2100      	movs	r1, #0
 8001622:	4825      	ldr	r0, [pc, #148]	; (80016b8 <main+0xc0>)
 8001624:	f004 f97c 	bl	8005920 <osThreadNew>
 8001628:	4603      	mov	r3, r0
 800162a:	4a24      	ldr	r2, [pc, #144]	; (80016bc <main+0xc4>)
 800162c:	6013      	str	r3, [r2, #0]

  //xTaskCreate(Error_Sensores, "Chequeo Error Sensores", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
  //xTaskCreate(Error_Anafe, "Chequeo Error Anafe", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 // xTaskCreate(Tarea_Lectura, "Tarea Lectura Temperatura", configMINIMAL_STACK_SIZE, NULL, 1, NULL);

  xTaskCreate(MdE_Principal, "MdE", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800162e:	2300      	movs	r3, #0
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	2301      	movs	r3, #1
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2300      	movs	r3, #0
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	4921      	ldr	r1, [pc, #132]	; (80016c0 <main+0xc8>)
 800163c:	4821      	ldr	r0, [pc, #132]	; (80016c4 <main+0xcc>)
 800163e:	f005 f869 	bl	8006714 <xTaskCreate>
  xTaskCreate(DriverTeclado, "Driver Teclado", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8001642:	2300      	movs	r3, #0
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	2301      	movs	r3, #1
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2300      	movs	r3, #0
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	491e      	ldr	r1, [pc, #120]	; (80016c8 <main+0xd0>)
 8001650:	481e      	ldr	r0, [pc, #120]	; (80016cc <main+0xd4>)
 8001652:	f005 f85f 	bl	8006714 <xTaskCreate>
  xTaskCreate(Tarea_Lectura, "Lectura Temperatura", configMINIMAL_STACK_SIZE, NULL, 1, Handler_Lectura);
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <main+0xd8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	2301      	movs	r3, #1
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2300      	movs	r3, #0
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	491b      	ldr	r1, [pc, #108]	; (80016d4 <main+0xdc>)
 8001666:	481c      	ldr	r0, [pc, #112]	; (80016d8 <main+0xe0>)
 8001668:	f005 f854 	bl	8006714 <xTaskCreate>
  xTaskCreate(Error_Sensores, "Error Sensores", configMINIMAL_STACK_SIZE, NULL, 1, Handler_Sensores);
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <main+0xe4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	2301      	movs	r3, #1
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2300      	movs	r3, #0
 8001678:	2280      	movs	r2, #128	; 0x80
 800167a:	4919      	ldr	r1, [pc, #100]	; (80016e0 <main+0xe8>)
 800167c:	4819      	ldr	r0, [pc, #100]	; (80016e4 <main+0xec>)
 800167e:	f005 f849 	bl	8006714 <xTaskCreate>
  xTaskCreate(Error_Anafe, "Error Anafe", configMINIMAL_STACK_SIZE, NULL, 1, Handler_Anafe);
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <main+0xf0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	2301      	movs	r3, #1
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2300      	movs	r3, #0
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	4916      	ldr	r1, [pc, #88]	; (80016ec <main+0xf4>)
 8001692:	4817      	ldr	r0, [pc, #92]	; (80016f0 <main+0xf8>)
 8001694:	f005 f83e 	bl	8006714 <xTaskCreate>
  xTaskCreate(Tarea_Timer, "Tarea Timer",configMINIMAL_STACK_SIZE,NULL, 1, Handler_Timer);
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <main+0xfc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	2301      	movs	r3, #1
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2300      	movs	r3, #0
 80016a4:	2280      	movs	r2, #128	; 0x80
 80016a6:	4914      	ldr	r1, [pc, #80]	; (80016f8 <main+0x100>)
 80016a8:	4814      	ldr	r0, [pc, #80]	; (80016fc <main+0x104>)
 80016aa:	f005 f833 	bl	8006714 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80016ae:	f004 f903 	bl	80058b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <main+0xba>
 80016b4:	080091d8 	.word	0x080091d8
 80016b8:	08001991 	.word	0x08001991
 80016bc:	200001c4 	.word	0x200001c4
 80016c0:	08009038 	.word	0x08009038
 80016c4:	08001ee1 	.word	0x08001ee1
 80016c8:	0800903c 	.word	0x0800903c
 80016cc:	080026c5 	.word	0x080026c5
 80016d0:	200001c8 	.word	0x200001c8
 80016d4:	0800904c 	.word	0x0800904c
 80016d8:	08001d15 	.word	0x08001d15
 80016dc:	200001cc 	.word	0x200001cc
 80016e0:	08009060 	.word	0x08009060
 80016e4:	08001d41 	.word	0x08001d41
 80016e8:	200001d0 	.word	0x200001d0
 80016ec:	08009070 	.word	0x08009070
 80016f0:	08001dd5 	.word	0x08001dd5
 80016f4:	200001d4 	.word	0x200001d4
 80016f8:	0800907c 	.word	0x0800907c
 80016fc:	08001e91 	.word	0x08001e91

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b094      	sub	sp, #80	; 0x50
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170a:	2228      	movs	r2, #40	; 0x28
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f006 ff6e 	bl	80085f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001730:	2309      	movs	r3, #9
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800173e:	2301      	movs	r3, #1
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001742:	2301      	movs	r3, #1
 8001744:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001746:	2302      	movs	r3, #2
 8001748:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001750:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001754:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800175a:	4618      	mov	r0, r3
 800175c:	f002 f87a 	bl	8003854 <HAL_RCC_OscConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001766:	f000 f92d 	bl	80019c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176a:	230f      	movs	r3, #15
 800176c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176e:	2302      	movs	r3, #2
 8001770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800177a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2102      	movs	r1, #2
 8001786:	4618      	mov	r0, r3
 8001788:	f002 fae6 	bl	8003d58 <HAL_RCC_ClockConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001792:	f000 f917 	bl	80019c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001796:	2301      	movs	r3, #1
 8001798:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800179a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800179e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 fca0 	bl	80040e8 <HAL_RCCEx_PeriphCLKConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80017ae:	f000 f909 	bl	80019c4 <Error_Handler>
  }
}
 80017b2:	bf00      	nop
 80017b4:	3750      	adds	r7, #80	; 0x50
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_I2C1_Init+0x50>)
 80017c2:	4a13      	ldr	r2, [pc, #76]	; (8001810 <MX_I2C1_Init+0x54>)
 80017c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_I2C1_Init+0x50>)
 80017c8:	4a12      	ldr	r2, [pc, #72]	; (8001814 <MX_I2C1_Init+0x58>)
 80017ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_I2C1_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_I2C1_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_I2C1_Init+0x50>)
 80017da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <MX_I2C1_Init+0x50>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_I2C1_Init+0x50>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <MX_I2C1_Init+0x50>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_I2C1_Init+0x50>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_I2C1_Init+0x50>)
 80017fa:	f001 fbd5 	bl	8002fa8 <HAL_I2C_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001804:	f000 f8de 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000118 	.word	0x20000118
 8001810:	40005400 	.word	0x40005400
 8001814:	000186a0 	.word	0x000186a0

08001818 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

//  RTC_TimeTypeDef sTime = {0};                COMENTADO PERO NO QUEDA ASI
  RTC_DateTypeDef DateToUpdate = {0};
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <MX_RTC_Init+0x38>)
 8001824:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <MX_RTC_Init+0x3c>)
 8001826:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_RTC_Init+0x38>)
 800182a:	f04f 32ff 	mov.w	r2, #4294967295
 800182e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <MX_RTC_Init+0x38>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001836:	4806      	ldr	r0, [pc, #24]	; (8001850 <MX_RTC_Init+0x38>)
 8001838:	f002 fdcc 	bl	80043d4 <HAL_RTC_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8001842:	f000 f8bf 	bl	80019c4 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000016c 	.word	0x2000016c
 8001854:	40002800 	.word	0x40002800

08001858 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_USART1_UART_Init+0x4c>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <MX_USART1_UART_Init+0x50>)
 8001860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <MX_USART1_UART_Init+0x4c>)
 8001864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_USART1_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_USART1_UART_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <MX_USART1_UART_Init+0x4c>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_USART1_UART_Init+0x4c>)
 800187e:	220c      	movs	r2, #12
 8001880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <MX_USART1_UART_Init+0x4c>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_USART1_UART_Init+0x4c>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_USART1_UART_Init+0x4c>)
 8001890:	f003 fbdc 	bl	800504c <HAL_HalfDuplex_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800189a:	f000 f893 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000180 	.word	0x20000180
 80018a8:	40013800 	.word	0x40013800

080018ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c0:	4b30      	ldr	r3, [pc, #192]	; (8001984 <MX_GPIO_Init+0xd8>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a2f      	ldr	r2, [pc, #188]	; (8001984 <MX_GPIO_Init+0xd8>)
 80018c6:	f043 0310 	orr.w	r3, r3, #16
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <MX_GPIO_Init+0xd8>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d8:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <MX_GPIO_Init+0xd8>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a29      	ldr	r2, [pc, #164]	; (8001984 <MX_GPIO_Init+0xd8>)
 80018de:	f043 0320 	orr.w	r3, r3, #32
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <MX_GPIO_Init+0xd8>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0320 	and.w	r3, r3, #32
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b24      	ldr	r3, [pc, #144]	; (8001984 <MX_GPIO_Init+0xd8>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a23      	ldr	r2, [pc, #140]	; (8001984 <MX_GPIO_Init+0xd8>)
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b21      	ldr	r3, [pc, #132]	; (8001984 <MX_GPIO_Init+0xd8>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <MX_GPIO_Init+0xd8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <MX_GPIO_Init+0xd8>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <MX_GPIO_Init+0xd8>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|LED_VERDE_Pin|LED_AMARILLO_Pin|LED_ROJO_Pin
 8001920:	2200      	movs	r2, #0
 8001922:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8001926:	4818      	ldr	r0, [pc, #96]	; (8001988 <MX_GPIO_Init+0xdc>)
 8001928:	f001 fb25 	bl	8002f76 <HAL_GPIO_WritePin>
                          |RELAY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUZZER_Pin LED_VERDE_Pin LED_AMARILLO_Pin LED_ROJO_Pin
                           RELAY_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_VERDE_Pin|LED_AMARILLO_Pin|LED_ROJO_Pin
 800192c:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8001930:	613b      	str	r3, [r7, #16]
                          |RELAY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2302      	movs	r3, #2
 800193c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	4619      	mov	r1, r3
 8001944:	4810      	ldr	r0, [pc, #64]	; (8001988 <MX_GPIO_Init+0xdc>)
 8001946:	f001 f97b 	bl	8002c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTON3_Pin */
  GPIO_InitStruct.Pin = BOTON3_Pin;
 800194a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800194e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001954:	2301      	movs	r3, #1
 8001956:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOTON3_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	4619      	mov	r1, r3
 800195e:	480b      	ldr	r0, [pc, #44]	; (800198c <MX_GPIO_Init+0xe0>)
 8001960:	f001 f96e 	bl	8002c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON2_Pin BOTON1_Pin */
  GPIO_InitStruct.Pin = BOTON2_Pin|BOTON1_Pin;
 8001964:	2318      	movs	r3, #24
 8001966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196c:	2301      	movs	r3, #1
 800196e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	4804      	ldr	r0, [pc, #16]	; (8001988 <MX_GPIO_Init+0xdc>)
 8001978:	f001 f962 	bl	8002c40 <HAL_GPIO_Init>

}
 800197c:	bf00      	nop
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40021000 	.word	0x40021000
 8001988:	40010c00 	.word	0x40010c00
 800198c:	40010800 	.word	0x40010800

08001990 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001998:	2001      	movs	r0, #1
 800199a:	f004 f86b 	bl	8005a74 <osDelay>
 800199e:	e7fb      	b.n	8001998 <StartDefaultTask+0x8>

080019a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d101      	bne.n	80019b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019b2:	f000 ff75 	bl	80028a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40000800 	.word	0x40000800

080019c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c8:	b672      	cpsid	i
}
 80019ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019cc:	e7fe      	b.n	80019cc <Error_Handler+0x8>
	...

080019d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_MspInit+0x68>)
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <HAL_MspInit+0x68>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6193      	str	r3, [r2, #24]
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_MspInit+0x68>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_MspInit+0x68>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <HAL_MspInit+0x68>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f8:	61d3      	str	r3, [r2, #28]
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_MspInit+0x68>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	210f      	movs	r1, #15
 8001a0a:	f06f 0001 	mvn.w	r0, #1
 8001a0e:	f001 f83c 	bl	8002a8a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_MspInit+0x6c>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <HAL_MspInit+0x6c>)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010000 	.word	0x40010000

08001a40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <HAL_I2C_MspInit+0x70>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d123      	bne.n	8001aa8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_I2C_MspInit+0x74>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <HAL_I2C_MspInit+0x74>)
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_I2C_MspInit+0x74>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a78:	23c0      	movs	r3, #192	; 0xc0
 8001a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a7c:	2312      	movs	r3, #18
 8001a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480b      	ldr	r0, [pc, #44]	; (8001ab8 <HAL_I2C_MspInit+0x78>)
 8001a8c:	f001 f8d8 	bl	8002c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_I2C_MspInit+0x74>)
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_I2C_MspInit+0x74>)
 8001a96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a9a:	61d3      	str	r3, [r2, #28]
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_I2C_MspInit+0x74>)
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001aa8:	bf00      	nop
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40005400 	.word	0x40005400
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010c00 	.word	0x40010c00

08001abc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0b      	ldr	r2, [pc, #44]	; (8001af8 <HAL_RTC_MspInit+0x3c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d110      	bne.n	8001af0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001ace:	f001 feb5 	bl	800383c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_RTC_MspInit+0x40>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <HAL_RTC_MspInit+0x40>)
 8001ad8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001adc:	61d3      	str	r3, [r2, #28]
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <HAL_RTC_MspInit+0x40>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RTC_MspInit+0x44>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40002800 	.word	0x40002800
 8001afc:	40021000 	.word	0x40021000
 8001b00:	4242043c 	.word	0x4242043c

08001b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a1a      	ldr	r2, [pc, #104]	; (8001b88 <HAL_UART_MspInit+0x84>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d12c      	bne.n	8001b7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2e:	6193      	str	r3, [r2, #24]
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b5a:	2312      	movs	r3, #18
 8001b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	4619      	mov	r1, r3
 8001b68:	4809      	ldr	r0, [pc, #36]	; (8001b90 <HAL_UART_MspInit+0x8c>)
 8001b6a:	f001 f869 	bl	8002c40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2105      	movs	r1, #5
 8001b72:	2025      	movs	r0, #37	; 0x25
 8001b74:	f000 ff89 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b78:	2025      	movs	r0, #37	; 0x25
 8001b7a:	f000 ffa2 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b7e:	bf00      	nop
 8001b80:	3720      	adds	r7, #32
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40013800 	.word	0x40013800
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40010800 	.word	0x40010800

08001b94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08c      	sub	sp, #48	; 0x30
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	201e      	movs	r0, #30
 8001baa:	f000 ff6e 	bl	8002a8a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bae:	201e      	movs	r0, #30
 8001bb0:	f000 ff87 	bl	8002ac2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <HAL_InitTick+0xa0>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	4a1e      	ldr	r2, [pc, #120]	; (8001c34 <HAL_InitTick+0xa0>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	61d3      	str	r3, [r2, #28]
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <HAL_InitTick+0xa0>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bcc:	f107 0210 	add.w	r2, r7, #16
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f002 fa38 	bl	800404c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001bdc:	f002 fa0e 	bl	8003ffc <HAL_RCC_GetPCLK1Freq>
 8001be0:	4603      	mov	r3, r0
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be8:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <HAL_InitTick+0xa4>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	0c9b      	lsrs	r3, r3, #18
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_InitTick+0xa8>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <HAL_InitTick+0xac>)
 8001bf8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <HAL_InitTick+0xa8>)
 8001bfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c00:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001c02:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <HAL_InitTick+0xa8>)
 8001c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c06:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_InitTick+0xa8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_InitTick+0xa8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001c14:	4809      	ldr	r0, [pc, #36]	; (8001c3c <HAL_InitTick+0xa8>)
 8001c16:	f002 ffcf 	bl	8004bb8 <HAL_TIM_Base_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d104      	bne.n	8001c2a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001c20:	4806      	ldr	r0, [pc, #24]	; (8001c3c <HAL_InitTick+0xa8>)
 8001c22:	f003 f821 	bl	8004c68 <HAL_TIM_Base_Start_IT>
 8001c26:	4603      	mov	r3, r0
 8001c28:	e000      	b.n	8001c2c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3730      	adds	r7, #48	; 0x30
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000
 8001c38:	431bde83 	.word	0x431bde83
 8001c3c:	200001d8 	.word	0x200001d8
 8001c40:	40000800 	.word	0x40000800

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <NMI_Handler+0x4>

08001c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <MemManage_Handler+0x4>

08001c56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
	...

08001c70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <TIM4_IRQHandler+0x10>)
 8001c76:	f003 f849 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200001d8 	.word	0x200001d8

08001c84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  owReadHandler();
 8001c88:	f7fe fdce 	bl	8000828 <owReadHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <USART1_IRQHandler+0x14>)
 8001c8e:	f003 fa33 	bl	80050f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000180 	.word	0x20000180

08001c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca4:	4a14      	ldr	r2, [pc, #80]	; (8001cf8 <_sbrk+0x5c>)
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <_sbrk+0x60>)
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <_sbrk+0x64>)
 8001cba:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <_sbrk+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d207      	bcs.n	8001cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ccc:	f006 fc56 	bl	800857c <__errno>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	e009      	b.n	8001cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <_sbrk+0x64>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <_sbrk+0x64>)
 8001cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20005000 	.word	0x20005000
 8001cfc:	00000400 	.word	0x00000400
 8001d00:	20000220 	.word	0x20000220
 8001d04:	20001c60 	.word	0x20001c60

08001d08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <Tarea_Lectura>:
*	\author  Grupo6_2022
*	\date    11-10-2022 12:25:11
*/

void Tarea_Lectura( void *p )
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	vTaskSuspend(NULL);   // La tarea inicia y se suspende hasta que la resuma la MdE ppal.
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f004 feff 	bl	8006b20 <vTaskSuspend>

	TickType_t xLastWakeTime;

	while(1) {

		xLastWakeTime = xTaskGetTickCount();
 8001d22:	f005 f927 	bl	8006f74 <xTaskGetTickCount>
 8001d26:	4603      	mov	r3, r0
 8001d28:	60fb      	str	r3, [r7, #12]

		get_Temperature();
 8001d2a:	f7ff f969 	bl	8001000 <get_Temperature>

		//vTaskDelayUntil(&xLastWakeTime,ONE_SEC);
		vTaskDelayUntil(&xLastWakeTime, 1000);
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d36:	4618      	mov	r0, r3
 8001d38:	f004 fe40 	bl	80069bc <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8001d3c:	e7f1      	b.n	8001d22 <Tarea_Lectura+0xe>
	...

08001d40 <Error_Sensores>:
	vTaskDelete(NULL); // En caso de romperse el loop
}


void Error_Sensores( void *p )
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	vTaskSuspend(NULL); // La tarea inicia y se suspende hasta que la resuma la MdE ppal.
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f004 fee9 	bl	8006b20 <vTaskSuspend>

	float dif=0;//, dif_s0=0, dif_s1=0, auxTemp[2] = {0, 0};
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]

	while(1) {

		dif = Temp[1] - Temp[0];
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <Error_Sensores+0x7c>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <Error_Sensores+0x7c>)
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fa04 	bl	800016c <__aeabi_fsub>
 8001d64:	4603      	mov	r3, r0
 8001d66:	60fb      	str	r3, [r7, #12]

		// Chequeamos que los sensores funcionen bien
		if( (dif>MAX_DIF_P) || (dif<MAX_DIF_N) ) {
 8001d68:	4915      	ldr	r1, [pc, #84]	; (8001dc0 <Error_Sensores+0x80>)
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f7fe fcc4 	bl	80006f8 <__aeabi_fcmpgt>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <Error_Sensores+0x44>
 8001d76:	4913      	ldr	r1, [pc, #76]	; (8001dc4 <Error_Sensores+0x84>)
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f7fe fc9f 	bl	80006bc <__aeabi_fcmplt>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d015      	beq.n	8001db0 <Error_Sensores+0x70>
			HAL_GPIO_WritePin(GREEN_PORT, GREEN_PIN, OFF);
 8001d84:	2200      	movs	r2, #0
 8001d86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d8a:	480f      	ldr	r0, [pc, #60]	; (8001dc8 <Error_Sensores+0x88>)
 8001d8c:	f001 f8f3 	bl	8002f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_PORT, RED_PIN, ON);
 8001d90:	2201      	movs	r2, #1
 8001d92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d96:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <Error_Sensores+0x88>)
 8001d98:	f001 f8ed 	bl	8002f76 <HAL_GPIO_WritePin>

		    HD44780_PrintStr("Error en");
 8001d9c:	480b      	ldr	r0, [pc, #44]	; (8001dcc <Error_Sensores+0x8c>)
 8001d9e:	f7ff fb16 	bl	80013ce <HD44780_PrintStr>
		    HD44780_SetCursor(10,1);
 8001da2:	2101      	movs	r1, #1
 8001da4:	200a      	movs	r0, #10
 8001da6:	f7ff fa49 	bl	800123c <HD44780_SetCursor>
		    HD44780_PrintStr("Sensores");
 8001daa:	4809      	ldr	r0, [pc, #36]	; (8001dd0 <Error_Sensores+0x90>)
 8001dac:	f7ff fb0f 	bl	80013ce <HD44780_PrintStr>
			//f_Error = 1; Comento porque de momento no se usa

			// En base a si la dif es positiva o negativa sabemos cual sensor fallo
		}

		vTaskDelay(ONE_SEC); // Tiene que ser 1s
 8001db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001db4:	f004 fe80 	bl	8006ab8 <vTaskDelay>
		dif = Temp[1] - Temp[0];
 8001db8:	e7cc      	b.n	8001d54 <Error_Sensores+0x14>
 8001dba:	bf00      	nop
 8001dbc:	200000b8 	.word	0x200000b8
 8001dc0:	40a00000 	.word	0x40a00000
 8001dc4:	c0a00000 	.word	0xc0a00000
 8001dc8:	40010c00 	.word	0x40010c00
 8001dcc:	08009088 	.word	0x08009088
 8001dd0:	08009094 	.word	0x08009094

08001dd4 <Error_Anafe>:
	vTaskDelete(NULL); // En caso de romperse el loop
}


void Error_Anafe(void *p)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	vTaskSuspend(NULL); // La tarea inicia y se suspende hasta que la resuma la MdE ppal.
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f004 fe9f 	bl	8006b20 <vTaskSuspend>

	float dif_s0=0, dif_s1=0, auxTemp[2] = {0, 0};
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]

	while(1)
	{

		dif_s0 = Temp[0]-auxTemp[0];
 8001dfa:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <Error_Anafe+0xac>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe f9b2 	bl	800016c <__aeabi_fsub>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	617b      	str	r3, [r7, #20]
		dif_s1 = Temp[1]-auxTemp[1];
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <Error_Anafe+0xac>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe f9a9 	bl	800016c <__aeabi_fsub>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	613b      	str	r3, [r7, #16]

		auxTemp[0] = Temp[0];
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <Error_Anafe+0xac>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	60bb      	str	r3, [r7, #8]
		auxTemp[1] = Temp[1];
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <Error_Anafe+0xac>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	60fb      	str	r3, [r7, #12]
		// Chequeamos que el anafe funcione bien
		if( (dif_s0<MIN_DIF_CALENTAMIENTO) || (dif_s1<MIN_DIF_CALENTAMIENTO) ) {
 8001e2a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7fe fc44 	bl	80006bc <__aeabi_fcmplt>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d107      	bne.n	8001e4a <Error_Anafe+0x76>
 8001e3a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001e3e:	6938      	ldr	r0, [r7, #16]
 8001e40:	f7fe fc3c 	bl	80006bc <__aeabi_fcmplt>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d015      	beq.n	8001e76 <Error_Anafe+0xa2>
			HAL_GPIO_WritePin(GREEN_PORT, GREEN_PIN, OFF);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e50:	480c      	ldr	r0, [pc, #48]	; (8001e84 <Error_Anafe+0xb0>)
 8001e52:	f001 f890 	bl	8002f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_PORT, RED_PIN, ON);
 8001e56:	2201      	movs	r2, #1
 8001e58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e5c:	4809      	ldr	r0, [pc, #36]	; (8001e84 <Error_Anafe+0xb0>)
 8001e5e:	f001 f88a 	bl	8002f76 <HAL_GPIO_WritePin>

		    HD44780_PrintStr("Error en");
 8001e62:	4809      	ldr	r0, [pc, #36]	; (8001e88 <Error_Anafe+0xb4>)
 8001e64:	f7ff fab3 	bl	80013ce <HD44780_PrintStr>
		    HD44780_SetCursor(10,1);
 8001e68:	2101      	movs	r1, #1
 8001e6a:	200a      	movs	r0, #10
 8001e6c:	f7ff f9e6 	bl	800123c <HD44780_SetCursor>
		    HD44780_PrintStr("Anafe");
 8001e70:	4806      	ldr	r0, [pc, #24]	; (8001e8c <Error_Anafe+0xb8>)
 8001e72:	f7ff faac 	bl	80013ce <HD44780_PrintStr>

			//f_Error = 1; Comento porque de momento no se usa

		}

		vTaskDelay(5*ONE_SEC); // Que mida cada 5 secs
 8001e76:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e7a:	f004 fe1d 	bl	8006ab8 <vTaskDelay>
		dif_s0 = Temp[0]-auxTemp[0];
 8001e7e:	e7bc      	b.n	8001dfa <Error_Anafe+0x26>
 8001e80:	200000b8 	.word	0x200000b8
 8001e84:	40010c00 	.word	0x40010c00
 8001e88:	08009088 	.word	0x08009088
 8001e8c:	080090a0 	.word	0x080090a0

08001e90 <Tarea_Timer>:

	vTaskDelete(NULL); // En caso de romperse el loop
}

void Tarea_Timer(void *p)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	vTaskSuspend(NULL);
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f004 fe41 	bl	8006b20 <vTaskSuspend>

	TickType_t xLastWakeTime;

	HAL_RTC_GetTime(&hrtc, &horaInicio, RTC_FORMAT_BIN);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	490c      	ldr	r1, [pc, #48]	; (8001ed4 <Tarea_Timer+0x44>)
 8001ea2:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <Tarea_Timer+0x48>)
 8001ea4:	f002 fb2c 	bl	8004500 <HAL_RTC_GetTime>

	xLastWakeTime = xTaskGetTickCount();
 8001ea8:	f005 f864 	bl	8006f74 <xTaskGetTickCount>
 8001eac:	4603      	mov	r3, r0
 8001eae:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		vTaskDelayUntil(&xLastWakeTime,1000);
 8001eb0:	f107 030c 	add.w	r3, r7, #12
 8001eb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f004 fd7f 	bl	80069bc <vTaskDelayUntil>

		HAL_RTC_GetTime(&hrtc, &horaActual, RTC_FORMAT_BIN);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	4906      	ldr	r1, [pc, #24]	; (8001edc <Tarea_Timer+0x4c>)
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <Tarea_Timer+0x48>)
 8001ec4:	f002 fb1c 	bl	8004500 <HAL_RTC_GetTime>
		if((horaActual.Seconds >= horaInicio.Seconds) && (horaActual.Minutes == horaInicio.Minutes+tiempoPreparacion))
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <Tarea_Timer+0x4c>)
 8001eca:	789a      	ldrb	r2, [r3, #2]
 8001ecc:	4b01      	ldr	r3, [pc, #4]	; (8001ed4 <Tarea_Timer+0x44>)
 8001ece:	789b      	ldrb	r3, [r3, #2]
 8001ed0:	429a      	cmp	r2, r3
		vTaskDelayUntil(&xLastWakeTime,1000);
 8001ed2:	e7ed      	b.n	8001eb0 <Tarea_Timer+0x20>
 8001ed4:	20000230 	.word	0x20000230
 8001ed8:	2000016c 	.word	0x2000016c
 8001edc:	20000228 	.word	0x20000228

08001ee0 <MdE_Principal>:
		}
	}
}

void MdE_Principal(void *p)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	static uint8_t estado_MdE = PRENDIENDO;

	while(1)
	{
		switch(estado_MdE)
 8001ee8:	4b99      	ldr	r3, [pc, #612]	; (8002150 <MdE_Principal+0x270>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	f200 81cd 	bhi.w	800228c <MdE_Principal+0x3ac>
 8001ef2:	a201      	add	r2, pc, #4	; (adr r2, 8001ef8 <MdE_Principal+0x18>)
 8001ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef8:	08001f11 	.word	0x08001f11
 8001efc:	08001f73 	.word	0x08001f73
 8001f00:	08001ffb 	.word	0x08001ffb
 8001f04:	080020ed 	.word	0x080020ed
 8001f08:	08002239 	.word	0x08002239
 8001f0c:	0800226f 	.word	0x0800226f
		{
			case PRENDIENDO:

				if(estado_comp == TODO_OK)
 8001f10:	4b90      	ldr	r3, [pc, #576]	; (8002154 <MdE_Principal+0x274>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d114      	bne.n	8001f42 <MdE_Principal+0x62>
				{
					if(cafe_programado)
 8001f18:	4b8f      	ldr	r3, [pc, #572]	; (8002158 <MdE_Principal+0x278>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <MdE_Principal+0x4e>
					{
						estado_MdE = PROGRAMADO;
 8001f20:	4b8b      	ldr	r3, [pc, #556]	; (8002150 <MdE_Principal+0x270>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
						print_Display(DIS_PROGRAMADO);
 8001f26:	2000      	movs	r0, #0
 8001f28:	f000 f9d0 	bl	80022cc <print_Display>
				else if(estado_comp >1) // Identificar error
				{
					estado_MdE = ERROR;
					print_Display(estado_comp + 4); // La organizacion de la enumeracion
				}
				break;
 8001f2c:	e1b2      	b.n	8002294 <MdE_Principal+0x3b4>
						estado_MdE = MENU_PPAL;
 8001f2e:	4b88      	ldr	r3, [pc, #544]	; (8002150 <MdE_Principal+0x270>)
 8001f30:	2202      	movs	r2, #2
 8001f32:	701a      	strb	r2, [r3, #0]
						print_Display(DIS_MENU_PPAL);
 8001f34:	2001      	movs	r0, #1
 8001f36:	f000 f9c9 	bl	80022cc <print_Display>
						cursor = 0;
 8001f3a:	4b88      	ldr	r3, [pc, #544]	; (800215c <MdE_Principal+0x27c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
				break;
 8001f40:	e1a8      	b.n	8002294 <MdE_Principal+0x3b4>
				else if(estado_comp == FALTA_SD)
 8001f42:	4b84      	ldr	r3, [pc, #528]	; (8002154 <MdE_Principal+0x274>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d103      	bne.n	8001f52 <MdE_Principal+0x72>
					print_Display(DIS_FALTA_SD);
 8001f4a:	2005      	movs	r0, #5
 8001f4c:	f000 f9be 	bl	80022cc <print_Display>
				break;
 8001f50:	e1a0      	b.n	8002294 <MdE_Principal+0x3b4>
				else if(estado_comp >1) // Identificar error
 8001f52:	4b80      	ldr	r3, [pc, #512]	; (8002154 <MdE_Principal+0x274>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	f240 819c 	bls.w	8002294 <MdE_Principal+0x3b4>
					estado_MdE = ERROR;
 8001f5c:	4b7c      	ldr	r3, [pc, #496]	; (8002150 <MdE_Principal+0x270>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
					print_Display(estado_comp + 4); // La organizacion de la enumeracion
 8001f62:	4b7c      	ldr	r3, [pc, #496]	; (8002154 <MdE_Principal+0x274>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	3304      	adds	r3, #4
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f9ae 	bl	80022cc <print_Display>
				break;
 8001f70:	e190      	b.n	8002294 <MdE_Principal+0x3b4>

			case PROGRAMADO: // Esperando a que sea la hora. Si se presiona el boton se cancela y se vuelve al menu ppal.

				HAL_RTC_GetTime(&hrtc, &horaActual, RTC_FORMAT_BIN);
 8001f72:	2200      	movs	r2, #0
 8001f74:	497a      	ldr	r1, [pc, #488]	; (8002160 <MdE_Principal+0x280>)
 8001f76:	487b      	ldr	r0, [pc, #492]	; (8002164 <MdE_Principal+0x284>)
 8001f78:	f002 fac2 	bl	8004500 <HAL_RTC_GetTime>

				if( getKey() == BOTON_OK )
 8001f7c:	f000 fb64 	bl	8002648 <getKey>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d109      	bne.n	8001f9a <MdE_Principal+0xba>
				{
					// Escribir en SD que no hay ninguno programado
					estado_MdE = MENU_PPAL;
 8001f86:	4b72      	ldr	r3, [pc, #456]	; (8002150 <MdE_Principal+0x270>)
 8001f88:	2202      	movs	r2, #2
 8001f8a:	701a      	strb	r2, [r3, #0]
					print_Display(DIS_MENU_PPAL);
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f000 f99d 	bl	80022cc <print_Display>
					cursor = 0;
 8001f92:	4b72      	ldr	r3, [pc, #456]	; (800215c <MdE_Principal+0x27c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]


					estado_MdE = PREPARACION;
					print_Display(DIS_PREPARACION);
				}
				break;
 8001f98:	e17e      	b.n	8002298 <MdE_Principal+0x3b8>
				else if( (horaActual.Hours == horaProgramada.Hours) && (horaActual.Minutes == horaProgramada.Minutes) )
 8001f9a:	4b71      	ldr	r3, [pc, #452]	; (8002160 <MdE_Principal+0x280>)
 8001f9c:	781a      	ldrb	r2, [r3, #0]
 8001f9e:	4b72      	ldr	r3, [pc, #456]	; (8002168 <MdE_Principal+0x288>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	f040 8178 	bne.w	8002298 <MdE_Principal+0x3b8>
 8001fa8:	4b6d      	ldr	r3, [pc, #436]	; (8002160 <MdE_Principal+0x280>)
 8001faa:	785a      	ldrb	r2, [r3, #1]
 8001fac:	4b6e      	ldr	r3, [pc, #440]	; (8002168 <MdE_Principal+0x288>)
 8001fae:	785b      	ldrb	r3, [r3, #1]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	f040 8171 	bne.w	8002298 <MdE_Principal+0x3b8>
					SetRelay(ON);
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f000 fbe6 	bl	8002788 <SetRelay>
					SetLED(ON, AMARILLO);
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f000 fc00 	bl	80027c4 <SetLED>
					vTaskResume(Handler_Lectura); // Activar tarea medicion de temperatura
 8001fc4:	4b69      	ldr	r3, [pc, #420]	; (800216c <MdE_Principal+0x28c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f004 fe59 	bl	8006c80 <vTaskResume>
					vTaskResume(Handler_Sensores);
 8001fce:	4b68      	ldr	r3, [pc, #416]	; (8002170 <MdE_Principal+0x290>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f004 fe54 	bl	8006c80 <vTaskResume>
					vTaskResume(Handler_Anafe);// Activar tareas medicion de errores
 8001fd8:	4b66      	ldr	r3, [pc, #408]	; (8002174 <MdE_Principal+0x294>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f004 fe4f 	bl	8006c80 <vTaskResume>
					vTaskResume(Handler_Timer);// Activar tarea timer
 8001fe2:	4b65      	ldr	r3, [pc, #404]	; (8002178 <MdE_Principal+0x298>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f004 fe4a 	bl	8006c80 <vTaskResume>
					estado_MdE = PREPARACION;
 8001fec:	4b58      	ldr	r3, [pc, #352]	; (8002150 <MdE_Principal+0x270>)
 8001fee:	2204      	movs	r2, #4
 8001ff0:	701a      	strb	r2, [r3, #0]
					print_Display(DIS_PREPARACION);
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	f000 f96a 	bl	80022cc <print_Display>
				break;
 8001ff8:	e14e      	b.n	8002298 <MdE_Principal+0x3b8>

			case MENU_PPAL:
				switch(getKey())
 8001ffa:	f000 fb25 	bl	8002648 <getKey>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b01      	cmp	r3, #1
 8002002:	d01a      	beq.n	800203a <MdE_Principal+0x15a>
 8002004:	2b02      	cmp	r3, #2
 8002006:	f040 8149 	bne.w	800229c <MdE_Principal+0x3bc>
				{
					case BOTON_SEL:
						if(cursor == 0) // Preparar ahora
 800200a:	4b54      	ldr	r3, [pc, #336]	; (800215c <MdE_Principal+0x27c>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d107      	bne.n	8002022 <MdE_Principal+0x142>
						{
							cursor = 1;
 8002012:	4b52      	ldr	r3, [pc, #328]	; (800215c <MdE_Principal+0x27c>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
							HD44780_SetCursor(0, 1);
 8002018:	2101      	movs	r1, #1
 800201a:	2000      	movs	r0, #0
 800201c:	f7ff f90e 	bl	800123c <HD44780_SetCursor>
						else if (cursor == 1)	// Programar Cafe
						{
							cursor = 0;
							HD44780_SetCursor(0, 0);
						}
						break;
 8002020:	e060      	b.n	80020e4 <MdE_Principal+0x204>
						else if (cursor == 1)	// Programar Cafe
 8002022:	4b4e      	ldr	r3, [pc, #312]	; (800215c <MdE_Principal+0x27c>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d15c      	bne.n	80020e4 <MdE_Principal+0x204>
							cursor = 0;
 800202a:	4b4c      	ldr	r3, [pc, #304]	; (800215c <MdE_Principal+0x27c>)
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
							HD44780_SetCursor(0, 0);
 8002030:	2100      	movs	r1, #0
 8002032:	2000      	movs	r0, #0
 8002034:	f7ff f902 	bl	800123c <HD44780_SetCursor>
						break;
 8002038:	e054      	b.n	80020e4 <MdE_Principal+0x204>

					case BOTON_OK:
						if(cursor == 0) // Preparar ahora
 800203a:	4b48      	ldr	r3, [pc, #288]	; (800215c <MdE_Principal+0x27c>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d125      	bne.n	800208e <MdE_Principal+0x1ae>
						{
							vTaskResume(Handler_Lectura);
 8002042:	4b4a      	ldr	r3, [pc, #296]	; (800216c <MdE_Principal+0x28c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f004 fe1a 	bl	8006c80 <vTaskResume>
							SetRelay(ON);
 800204c:	2001      	movs	r0, #1
 800204e:	f000 fb9b 	bl	8002788 <SetRelay>
							SetLED(ON, AMARILLO);
 8002052:	2102      	movs	r1, #2
 8002054:	2001      	movs	r0, #1
 8002056:	f000 fbb5 	bl	80027c4 <SetLED>

							vTaskResume(Handler_Lectura); // Activar tarea medicion de temperatura
 800205a:	4b44      	ldr	r3, [pc, #272]	; (800216c <MdE_Principal+0x28c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f004 fe0e 	bl	8006c80 <vTaskResume>
							vTaskResume(Handler_Sensores);
 8002064:	4b42      	ldr	r3, [pc, #264]	; (8002170 <MdE_Principal+0x290>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f004 fe09 	bl	8006c80 <vTaskResume>
							vTaskResume(Handler_Anafe);// Activar tareas medicion de errores
 800206e:	4b41      	ldr	r3, [pc, #260]	; (8002174 <MdE_Principal+0x294>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f004 fe04 	bl	8006c80 <vTaskResume>
							vTaskResume(Handler_Timer);// Activar tarea timer
 8002078:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <MdE_Principal+0x298>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f004 fdff 	bl	8006c80 <vTaskResume>

							estado_MdE = PREPARACION;
 8002082:	4b33      	ldr	r3, [pc, #204]	; (8002150 <MdE_Principal+0x270>)
 8002084:	2204      	movs	r2, #4
 8002086:	701a      	strb	r2, [r3, #0]
							print_Display(DIS_PREPARACION);
 8002088:	2003      	movs	r0, #3
 800208a:	f000 f91f 	bl	80022cc <print_Display>
						}
						if(cursor == 1) // Programar cafe
 800208e:	4b33      	ldr	r3, [pc, #204]	; (800215c <MdE_Principal+0x27c>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d128      	bne.n	80020e8 <MdE_Principal+0x208>
						{
							cursor = 0;
 8002096:	4b31      	ldr	r3, [pc, #196]	; (800215c <MdE_Principal+0x27c>)
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]

							HAL_RTC_GetTime(&hrtc, &horaActual, RTC_FORMAT_BIN);
 800209c:	2200      	movs	r2, #0
 800209e:	4930      	ldr	r1, [pc, #192]	; (8002160 <MdE_Principal+0x280>)
 80020a0:	4830      	ldr	r0, [pc, #192]	; (8002164 <MdE_Principal+0x284>)
 80020a2:	f002 fa2d 	bl	8004500 <HAL_RTC_GetTime>
							horaProgramada.Hours = horaActual.Hours;
 80020a6:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <MdE_Principal+0x280>)
 80020a8:	781a      	ldrb	r2, [r3, #0]
 80020aa:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <MdE_Principal+0x288>)
 80020ac:	701a      	strb	r2, [r3, #0]
							horaProgramada.Minutes = 0;
 80020ae:	4b2e      	ldr	r3, [pc, #184]	; (8002168 <MdE_Principal+0x288>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	705a      	strb	r2, [r3, #1]
							horaProgramada.Seconds = 0;
 80020b4:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <MdE_Principal+0x288>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	709a      	strb	r2, [r3, #2]
							sprintf(horaStr, "%d", horaProgramada.Hours);
 80020ba:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <MdE_Principal+0x288>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	492e      	ldr	r1, [pc, #184]	; (800217c <MdE_Principal+0x29c>)
 80020c2:	482f      	ldr	r0, [pc, #188]	; (8002180 <MdE_Principal+0x2a0>)
 80020c4:	f006 fbaa 	bl	800881c <siprintf>
							sprintf(minutoStr, "%d", horaProgramada.Minutes);
 80020c8:	4b27      	ldr	r3, [pc, #156]	; (8002168 <MdE_Principal+0x288>)
 80020ca:	785b      	ldrb	r3, [r3, #1]
 80020cc:	461a      	mov	r2, r3
 80020ce:	492b      	ldr	r1, [pc, #172]	; (800217c <MdE_Principal+0x29c>)
 80020d0:	482c      	ldr	r0, [pc, #176]	; (8002184 <MdE_Principal+0x2a4>)
 80020d2:	f006 fba3 	bl	800881c <siprintf>

							estado_MdE = PROGRAMAR_HORA;
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <MdE_Principal+0x270>)
 80020d8:	2203      	movs	r2, #3
 80020da:	701a      	strb	r2, [r3, #0]
							print_Display(DIS_PROGRAMAR_HORA);
 80020dc:	2002      	movs	r0, #2
 80020de:	f000 f8f5 	bl	80022cc <print_Display>
						}

						break;
 80020e2:	e001      	b.n	80020e8 <MdE_Principal+0x208>
						break;
 80020e4:	bf00      	nop
 80020e6:	e0d9      	b.n	800229c <MdE_Principal+0x3bc>
						break;
 80020e8:	bf00      	nop
				}
				break;
 80020ea:	e0d7      	b.n	800229c <MdE_Principal+0x3bc>

			case PROGRAMAR_HORA:
				switch(getKey())
 80020ec:	f000 faac 	bl	8002648 <getKey>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	f000 8091 	beq.w	800221a <MdE_Principal+0x33a>
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	f300 8098 	bgt.w	800222e <MdE_Principal+0x34e>
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d042      	beq.n	8002188 <MdE_Principal+0x2a8>
 8002102:	2b02      	cmp	r3, #2
 8002104:	f040 8093 	bne.w	800222e <MdE_Principal+0x34e>
				{
					case BOTON_SEL:
						if(cursor == 0) // Hora
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <MdE_Principal+0x27c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d107      	bne.n	8002120 <MdE_Principal+0x240>
						{
							cursor = 1;
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <MdE_Principal+0x27c>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
							HD44780_SetCursor(9, 1);
 8002116:	2101      	movs	r1, #1
 8002118:	2009      	movs	r0, #9
 800211a:	f7ff f88f 	bl	800123c <HD44780_SetCursor>
						else if (cursor == 2)		// OK
						{
							cursor = 0;
							HD44780_SetCursor(2, 1);
						}
						break;
 800211e:	e088      	b.n	8002232 <MdE_Principal+0x352>
						else if (cursor == 1)	// Minuto
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <MdE_Principal+0x27c>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d107      	bne.n	8002138 <MdE_Principal+0x258>
							cursor = 2;
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <MdE_Principal+0x27c>)
 800212a:	2202      	movs	r2, #2
 800212c:	701a      	strb	r2, [r3, #0]
							HD44780_SetCursor(13,1);
 800212e:	2101      	movs	r1, #1
 8002130:	200d      	movs	r0, #13
 8002132:	f7ff f883 	bl	800123c <HD44780_SetCursor>
						break;
 8002136:	e07c      	b.n	8002232 <MdE_Principal+0x352>
						else if (cursor == 2)		// OK
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <MdE_Principal+0x27c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d178      	bne.n	8002232 <MdE_Principal+0x352>
							cursor = 0;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <MdE_Principal+0x27c>)
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
							HD44780_SetCursor(2, 1);
 8002146:	2101      	movs	r1, #1
 8002148:	2002      	movs	r0, #2
 800214a:	f7ff f877 	bl	800123c <HD44780_SetCursor>
						break;
 800214e:	e070      	b.n	8002232 <MdE_Principal+0x352>
 8002150:	2000023d 	.word	0x2000023d
 8002154:	2000023c 	.word	0x2000023c
 8002158:	2000023e 	.word	0x2000023e
 800215c:	20000224 	.word	0x20000224
 8002160:	20000228 	.word	0x20000228
 8002164:	2000016c 	.word	0x2000016c
 8002168:	2000022c 	.word	0x2000022c
 800216c:	200001c8 	.word	0x200001c8
 8002170:	200001cc 	.word	0x200001cc
 8002174:	200001d0 	.word	0x200001d0
 8002178:	200001d4 	.word	0x200001d4
 800217c:	080090a8 	.word	0x080090a8
 8002180:	20000234 	.word	0x20000234
 8002184:	20000238 	.word	0x20000238

					case BOTON_OK:
						if(cursor == 0)
 8002188:	4b49      	ldr	r3, [pc, #292]	; (80022b0 <MdE_Principal+0x3d0>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d11a      	bne.n	80021c6 <MdE_Principal+0x2e6>
						{
							// Aumento la hora
							horaProgramada.Hours += 1;
 8002190:	4b48      	ldr	r3, [pc, #288]	; (80022b4 <MdE_Principal+0x3d4>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	3301      	adds	r3, #1
 8002196:	b2da      	uxtb	r2, r3
 8002198:	4b46      	ldr	r3, [pc, #280]	; (80022b4 <MdE_Principal+0x3d4>)
 800219a:	701a      	strb	r2, [r3, #0]
							if(horaProgramada.Hours >23) horaProgramada.Hours = 0;
 800219c:	4b45      	ldr	r3, [pc, #276]	; (80022b4 <MdE_Principal+0x3d4>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b17      	cmp	r3, #23
 80021a2:	d902      	bls.n	80021aa <MdE_Principal+0x2ca>
 80021a4:	4b43      	ldr	r3, [pc, #268]	; (80022b4 <MdE_Principal+0x3d4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
							sprintf(horaStr, "%d", horaProgramada.Hours);
 80021aa:	4b42      	ldr	r3, [pc, #264]	; (80022b4 <MdE_Principal+0x3d4>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	4941      	ldr	r1, [pc, #260]	; (80022b8 <MdE_Principal+0x3d8>)
 80021b2:	4842      	ldr	r0, [pc, #264]	; (80022bc <MdE_Principal+0x3dc>)
 80021b4:	f006 fb32 	bl	800881c <siprintf>

							print_Display(DIS_PROGRAMAR_HORA);
 80021b8:	2002      	movs	r0, #2
 80021ba:	f000 f887 	bl	80022cc <print_Display>
							HD44780_SetCursor(2, 1);
 80021be:	2101      	movs	r1, #1
 80021c0:	2002      	movs	r0, #2
 80021c2:	f7ff f83b 	bl	800123c <HD44780_SetCursor>
						}
						if(cursor == 1)
 80021c6:	4b3a      	ldr	r3, [pc, #232]	; (80022b0 <MdE_Principal+0x3d0>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d11a      	bne.n	8002204 <MdE_Principal+0x324>
						{
							// Aumento los minutos
							horaProgramada.Minutes += 10;
 80021ce:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <MdE_Principal+0x3d4>)
 80021d0:	785b      	ldrb	r3, [r3, #1]
 80021d2:	330a      	adds	r3, #10
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <MdE_Principal+0x3d4>)
 80021d8:	705a      	strb	r2, [r3, #1]
							if(horaProgramada.Minutes >50) horaProgramada.Minutes = 0;
 80021da:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <MdE_Principal+0x3d4>)
 80021dc:	785b      	ldrb	r3, [r3, #1]
 80021de:	2b32      	cmp	r3, #50	; 0x32
 80021e0:	d902      	bls.n	80021e8 <MdE_Principal+0x308>
 80021e2:	4b34      	ldr	r3, [pc, #208]	; (80022b4 <MdE_Principal+0x3d4>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	705a      	strb	r2, [r3, #1]
							sprintf(minutoStr, "%d", horaProgramada.Minutes);
 80021e8:	4b32      	ldr	r3, [pc, #200]	; (80022b4 <MdE_Principal+0x3d4>)
 80021ea:	785b      	ldrb	r3, [r3, #1]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4932      	ldr	r1, [pc, #200]	; (80022b8 <MdE_Principal+0x3d8>)
 80021f0:	4833      	ldr	r0, [pc, #204]	; (80022c0 <MdE_Principal+0x3e0>)
 80021f2:	f006 fb13 	bl	800881c <siprintf>

							print_Display(DIS_PROGRAMAR_HORA);
 80021f6:	2002      	movs	r0, #2
 80021f8:	f000 f868 	bl	80022cc <print_Display>
							HD44780_SetCursor(9, 1);
 80021fc:	2101      	movs	r1, #1
 80021fe:	2009      	movs	r0, #9
 8002200:	f7ff f81c 	bl	800123c <HD44780_SetCursor>
						}
						if(cursor == 2)
 8002204:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <MdE_Principal+0x3d0>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d114      	bne.n	8002236 <MdE_Principal+0x356>
						{
							estado_MdE = PROGRAMADO;
 800220c:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <MdE_Principal+0x3e4>)
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
							print_Display(DIS_PROGRAMADO);
 8002212:	2000      	movs	r0, #0
 8002214:	f000 f85a 	bl	80022cc <print_Display>
						}
						break;
 8002218:	e00d      	b.n	8002236 <MdE_Principal+0x356>

					case BOTON_CANCEL:
						estado_MdE = MENU_PPAL;
 800221a:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <MdE_Principal+0x3e4>)
 800221c:	2202      	movs	r2, #2
 800221e:	701a      	strb	r2, [r3, #0]
						print_Display(DIS_MENU_PPAL);
 8002220:	2001      	movs	r0, #1
 8002222:	f000 f853 	bl	80022cc <print_Display>
						cursor = 0;
 8002226:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <MdE_Principal+0x3d0>)
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
						break;
 800222c:	e004      	b.n	8002238 <MdE_Principal+0x358>

					default:
						break;
 800222e:	bf00      	nop
 8002230:	e002      	b.n	8002238 <MdE_Principal+0x358>
						break;
 8002232:	bf00      	nop
 8002234:	e000      	b.n	8002238 <MdE_Principal+0x358>
						break;
 8002236:	bf00      	nop
					}

			case PREPARACION:
				if(getKey() == BOTON_OK) // Cancelan el cafe
 8002238:	f000 fa06 	bl	8002648 <getKey>
 800223c:	4603      	mov	r3, r0
 800223e:	2b01      	cmp	r3, #1
 8002240:	d12e      	bne.n	80022a0 <MdE_Principal+0x3c0>
				{
					SetRelay(OFF);
 8002242:	2000      	movs	r0, #0
 8002244:	f000 faa0 	bl	8002788 <SetRelay>
					SetLED(OFF, AMARILLO);
 8002248:	2102      	movs	r1, #2
 800224a:	2000      	movs	r0, #0
 800224c:	f000 faba 	bl	80027c4 <SetLED>

					vTaskSuspend(Handler_Lectura);// Apagar tarea medicion de temperatura
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <MdE_Principal+0x3e8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f004 fc63 	bl	8006b20 <vTaskSuspend>

					estado_MdE = MENU_PPAL;
 800225a:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <MdE_Principal+0x3e4>)
 800225c:	2202      	movs	r2, #2
 800225e:	701a      	strb	r2, [r3, #0]
					print_Display(DIS_MENU_PPAL);
 8002260:	2001      	movs	r0, #1
 8002262:	f000 f833 	bl	80022cc <print_Display>
					cursor = 0;
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <MdE_Principal+0x3d0>)
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
//
//						estado_MdE = LISTO;
//						print_Display(LISTO);
//					}
//				}
				break;
 800226c:	e018      	b.n	80022a0 <MdE_Principal+0x3c0>
			case LISTO:
				if(getKey() == BOTON_OK)
 800226e:	f000 f9eb 	bl	8002648 <getKey>
 8002272:	4603      	mov	r3, r0
 8002274:	2b01      	cmp	r3, #1
 8002276:	d115      	bne.n	80022a4 <MdE_Principal+0x3c4>
				{
					estado_MdE = MENU_PPAL;
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <MdE_Principal+0x3e4>)
 800227a:	2202      	movs	r2, #2
 800227c:	701a      	strb	r2, [r3, #0]
					print_Display(DIS_MENU_PPAL);
 800227e:	2001      	movs	r0, #1
 8002280:	f000 f824 	bl	80022cc <print_Display>
					cursor = 0;
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <MdE_Principal+0x3d0>)
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
				}
				break;
 800228a:	e00b      	b.n	80022a4 <MdE_Principal+0x3c4>
			default:
				estado_MdE = PRENDIENDO;
 800228c:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <MdE_Principal+0x3e4>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
				break;
 8002292:	e008      	b.n	80022a6 <MdE_Principal+0x3c6>
				break;
 8002294:	bf00      	nop
 8002296:	e006      	b.n	80022a6 <MdE_Principal+0x3c6>
				break;
 8002298:	bf00      	nop
 800229a:	e004      	b.n	80022a6 <MdE_Principal+0x3c6>
				break;
 800229c:	bf00      	nop
 800229e:	e002      	b.n	80022a6 <MdE_Principal+0x3c6>
				break;
 80022a0:	bf00      	nop
 80022a2:	e000      	b.n	80022a6 <MdE_Principal+0x3c6>
				break;
 80022a4:	bf00      	nop

		}

		vTaskDelay(500);
 80022a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022aa:	f004 fc05 	bl	8006ab8 <vTaskDelay>
		switch(estado_MdE)
 80022ae:	e61b      	b.n	8001ee8 <MdE_Principal+0x8>
 80022b0:	20000224 	.word	0x20000224
 80022b4:	2000022c 	.word	0x2000022c
 80022b8:	080090a8 	.word	0x080090a8
 80022bc:	20000234 	.word	0x20000234
 80022c0:	20000238 	.word	0x20000238
 80022c4:	2000023d 	.word	0x2000023d
 80022c8:	200001c8 	.word	0x200001c8

080022cc <print_Display>:
	vTaskDelete(NULL);
}


void print_Display(uint8_t estado)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
	switch (estado)
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	2b09      	cmp	r3, #9
 80022da:	f200 8127 	bhi.w	800252c <print_Display+0x260>
 80022de:	a201      	add	r2, pc, #4	; (adr r2, 80022e4 <print_Display+0x18>)
 80022e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e4:	0800230d 	.word	0x0800230d
 80022e8:	08002369 	.word	0x08002369
 80022ec:	0800239b 	.word	0x0800239b
 80022f0:	080023f7 	.word	0x080023f7
 80022f4:	08002429 	.word	0x08002429
 80022f8:	0800245b 	.word	0x0800245b
 80022fc:	08002485 	.word	0x08002485
 8002300:	080024af 	.word	0x080024af
 8002304:	080024d9 	.word	0x080024d9
 8002308:	08002503 	.word	0x08002503
	{
		case DIS_PROGRAMADO:
			HD44780_Clear();
 800230c:	f7fe ff80 	bl	8001210 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002310:	2100      	movs	r1, #0
 8002312:	2000      	movs	r0, #0
 8002314:	f7fe ff92 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Cafe para ");
 8002318:	4886      	ldr	r0, [pc, #536]	; (8002534 <print_Display+0x268>)
 800231a:	f7ff f858 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(10,0);
 800231e:	2100      	movs	r1, #0
 8002320:	200a      	movs	r0, #10
 8002322:	f7fe ff8b 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr(horaStr);
 8002326:	4884      	ldr	r0, [pc, #528]	; (8002538 <print_Display+0x26c>)
 8002328:	f7ff f851 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(12,0);
 800232c:	2100      	movs	r1, #0
 800232e:	200c      	movs	r0, #12
 8002330:	f7fe ff84 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr(":");
 8002334:	4881      	ldr	r0, [pc, #516]	; (800253c <print_Display+0x270>)
 8002336:	f7ff f84a 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(14,0);
 800233a:	2100      	movs	r1, #0
 800233c:	200e      	movs	r0, #14
 800233e:	f7fe ff7d 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr(minutoStr);
 8002342:	487f      	ldr	r0, [pc, #508]	; (8002540 <print_Display+0x274>)
 8002344:	f7ff f843 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(2,1);
 8002348:	2101      	movs	r1, #1
 800234a:	2002      	movs	r0, #2
 800234c:	f7fe ff76 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Cancelar");
 8002350:	487c      	ldr	r0, [pc, #496]	; (8002544 <print_Display+0x278>)
 8002352:	f7ff f83c 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002356:	2101      	movs	r1, #1
 8002358:	2000      	movs	r0, #0
 800235a:	f7fe ff6f 	bl	800123c <HD44780_SetCursor>
			HD44780_Cursor();
 800235e:	f7fe ffcb 	bl	80012f8 <HD44780_Cursor>
			HD44780_Blink();
 8002362:	f7fe fff5 	bl	8001350 <HD44780_Blink>
			break;
 8002366:	e0e1      	b.n	800252c <print_Display+0x260>
		case DIS_MENU_PPAL:
			HD44780_Clear();
 8002368:	f7fe ff52 	bl	8001210 <HD44780_Clear>
			HD44780_SetCursor(2,0);
 800236c:	2100      	movs	r1, #0
 800236e:	2002      	movs	r0, #2
 8002370:	f7fe ff64 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Cafe Rapido");
 8002374:	4874      	ldr	r0, [pc, #464]	; (8002548 <print_Display+0x27c>)
 8002376:	f7ff f82a 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(2,1);
 800237a:	2101      	movs	r1, #1
 800237c:	2002      	movs	r0, #2
 800237e:	f7fe ff5d 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Programar Cafe");
 8002382:	4872      	ldr	r0, [pc, #456]	; (800254c <print_Display+0x280>)
 8002384:	f7ff f823 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(0,0);
 8002388:	2100      	movs	r1, #0
 800238a:	2000      	movs	r0, #0
 800238c:	f7fe ff56 	bl	800123c <HD44780_SetCursor>
			HD44780_Cursor();
 8002390:	f7fe ffb2 	bl	80012f8 <HD44780_Cursor>
			HD44780_Blink();
 8002394:	f7fe ffdc 	bl	8001350 <HD44780_Blink>
			break;
 8002398:	e0c8      	b.n	800252c <print_Display+0x260>

		case DIS_PROGRAMAR_HORA:
			HD44780_Clear();
 800239a:	f7fe ff39 	bl	8001210 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 800239e:	2100      	movs	r1, #0
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7fe ff4b 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Programar para:");
 80023a6:	486a      	ldr	r0, [pc, #424]	; (8002550 <print_Display+0x284>)
 80023a8:	f7ff f811 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 80023ac:	2101      	movs	r1, #1
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7fe ff44 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr(horaStr);
 80023b4:	4860      	ldr	r0, [pc, #384]	; (8002538 <print_Display+0x26c>)
 80023b6:	f7ff f80a 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(2,1);
 80023ba:	2101      	movs	r1, #1
 80023bc:	2002      	movs	r0, #2
 80023be:	f7fe ff3d 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr(" : ");
 80023c2:	4864      	ldr	r0, [pc, #400]	; (8002554 <print_Display+0x288>)
 80023c4:	f7ff f803 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(7,1);
 80023c8:	2101      	movs	r1, #1
 80023ca:	2007      	movs	r0, #7
 80023cc:	f7fe ff36 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr(minutoStr);
 80023d0:	485b      	ldr	r0, [pc, #364]	; (8002540 <print_Display+0x274>)
 80023d2:	f7fe fffc 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(13,1);
 80023d6:	2101      	movs	r1, #1
 80023d8:	200d      	movs	r0, #13
 80023da:	f7fe ff2f 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr(" OK");
 80023de:	485e      	ldr	r0, [pc, #376]	; (8002558 <print_Display+0x28c>)
 80023e0:	f7fe fff5 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(2,1);
 80023e4:	2101      	movs	r1, #1
 80023e6:	2002      	movs	r0, #2
 80023e8:	f7fe ff28 	bl	800123c <HD44780_SetCursor>
			HD44780_Cursor();
 80023ec:	f7fe ff84 	bl	80012f8 <HD44780_Cursor>
			HD44780_Blink();
 80023f0:	f7fe ffae 	bl	8001350 <HD44780_Blink>
			break;
 80023f4:	e09a      	b.n	800252c <print_Display+0x260>

		case DIS_PREPARACION:
			HD44780_Clear();
 80023f6:	f7fe ff0b 	bl	8001210 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 80023fa:	2100      	movs	r1, #0
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7fe ff1d 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Restante: ");
 8002402:	4856      	ldr	r0, [pc, #344]	; (800255c <print_Display+0x290>)
 8002404:	f7fe ffe3 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(2,1);
 8002408:	2101      	movs	r1, #1
 800240a:	2002      	movs	r0, #2
 800240c:	f7fe ff16 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Cancelar");
 8002410:	484c      	ldr	r0, [pc, #304]	; (8002544 <print_Display+0x278>)
 8002412:	f7fe ffdc 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002416:	2101      	movs	r1, #1
 8002418:	2000      	movs	r0, #0
 800241a:	f7fe ff0f 	bl	800123c <HD44780_SetCursor>
			HD44780_Cursor();
 800241e:	f7fe ff6b 	bl	80012f8 <HD44780_Cursor>
			HD44780_Blink();
 8002422:	f7fe ff95 	bl	8001350 <HD44780_Blink>
			break;
 8002426:	e081      	b.n	800252c <print_Display+0x260>

		case DIS_LISTO:
			HD44780_Clear();
 8002428:	f7fe fef2 	bl	8001210 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 800242c:	2100      	movs	r1, #0
 800242e:	2000      	movs	r0, #0
 8002430:	f7fe ff04 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Cafe Listo!");
 8002434:	484a      	ldr	r0, [pc, #296]	; (8002560 <print_Display+0x294>)
 8002436:	f7fe ffca 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(2,1);
 800243a:	2101      	movs	r1, #1
 800243c:	2002      	movs	r0, #2
 800243e:	f7fe fefd 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Volver");
 8002442:	4848      	ldr	r0, [pc, #288]	; (8002564 <print_Display+0x298>)
 8002444:	f7fe ffc3 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002448:	2101      	movs	r1, #1
 800244a:	2000      	movs	r0, #0
 800244c:	f7fe fef6 	bl	800123c <HD44780_SetCursor>
			HD44780_Cursor();
 8002450:	f7fe ff52 	bl	80012f8 <HD44780_Cursor>
			HD44780_Blink();
 8002454:	f7fe ff7c 	bl	8001350 <HD44780_Blink>
			break;
 8002458:	e068      	b.n	800252c <print_Display+0x260>

		case DIS_FALTA_SD:
			HD44780_Clear();
 800245a:	f7fe fed9 	bl	8001210 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 800245e:	2100      	movs	r1, #0
 8002460:	2000      	movs	r0, #0
 8002462:	f7fe feeb 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Inserte una");
 8002466:	4840      	ldr	r0, [pc, #256]	; (8002568 <print_Display+0x29c>)
 8002468:	f7fe ffb1 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 800246c:	2101      	movs	r1, #1
 800246e:	2000      	movs	r0, #0
 8002470:	f7fe fee4 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("SD valida");
 8002474:	483d      	ldr	r0, [pc, #244]	; (800256c <print_Display+0x2a0>)
 8002476:	f7fe ffaa 	bl	80013ce <HD44780_PrintStr>
			HD44780_NoCursor();
 800247a:	f7fe ff27 	bl	80012cc <HD44780_NoCursor>
			HD44780_NoBlink();
 800247e:	f7fe ff51 	bl	8001324 <HD44780_NoBlink>
			break;
 8002482:	e053      	b.n	800252c <print_Display+0x260>

		case DIS_ERROR_ANAFE:
			HD44780_Clear();
 8002484:	f7fe fec4 	bl	8001210 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002488:	2100      	movs	r1, #0
 800248a:	2000      	movs	r0, #0
 800248c:	f7fe fed6 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Error en Anafe");
 8002490:	4837      	ldr	r0, [pc, #220]	; (8002570 <print_Display+0x2a4>)
 8002492:	f7fe ff9c 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002496:	2101      	movs	r1, #1
 8002498:	2000      	movs	r0, #0
 800249a:	f7fe fecf 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Consulte Manual");
 800249e:	4835      	ldr	r0, [pc, #212]	; (8002574 <print_Display+0x2a8>)
 80024a0:	f7fe ff95 	bl	80013ce <HD44780_PrintStr>
			HD44780_NoCursor();
 80024a4:	f7fe ff12 	bl	80012cc <HD44780_NoCursor>
			HD44780_NoBlink();
 80024a8:	f7fe ff3c 	bl	8001324 <HD44780_NoBlink>
			break;
 80024ac:	e03e      	b.n	800252c <print_Display+0x260>

		case DIS_ERROR_SENSOR_1:
			HD44780_Clear();
 80024ae:	f7fe feaf 	bl	8001210 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 80024b2:	2100      	movs	r1, #0
 80024b4:	2000      	movs	r0, #0
 80024b6:	f7fe fec1 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Error Sensor 1");
 80024ba:	482f      	ldr	r0, [pc, #188]	; (8002578 <print_Display+0x2ac>)
 80024bc:	f7fe ff87 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 80024c0:	2101      	movs	r1, #1
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7fe feba 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Consulte Manual");
 80024c8:	482a      	ldr	r0, [pc, #168]	; (8002574 <print_Display+0x2a8>)
 80024ca:	f7fe ff80 	bl	80013ce <HD44780_PrintStr>
			HD44780_NoCursor();
 80024ce:	f7fe fefd 	bl	80012cc <HD44780_NoCursor>
			HD44780_NoBlink();
 80024d2:	f7fe ff27 	bl	8001324 <HD44780_NoBlink>
			break;
 80024d6:	e029      	b.n	800252c <print_Display+0x260>

		case DIS_ERROR_SENSOR_2:
			HD44780_Clear();
 80024d8:	f7fe fe9a 	bl	8001210 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 80024dc:	2100      	movs	r1, #0
 80024de:	2000      	movs	r0, #0
 80024e0:	f7fe feac 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Error Sensor 2");
 80024e4:	4825      	ldr	r0, [pc, #148]	; (800257c <print_Display+0x2b0>)
 80024e6:	f7fe ff72 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 80024ea:	2101      	movs	r1, #1
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe fea5 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Consulte Manual");
 80024f2:	4820      	ldr	r0, [pc, #128]	; (8002574 <print_Display+0x2a8>)
 80024f4:	f7fe ff6b 	bl	80013ce <HD44780_PrintStr>
			HD44780_NoCursor();
 80024f8:	f7fe fee8 	bl	80012cc <HD44780_NoCursor>
			HD44780_NoBlink();
 80024fc:	f7fe ff12 	bl	8001324 <HD44780_NoBlink>
			break;
 8002500:	e014      	b.n	800252c <print_Display+0x260>

		case DIS_MULTIPLES_ERRORES:
			HD44780_Clear();
 8002502:	f7fe fe85 	bl	8001210 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002506:	2100      	movs	r1, #0
 8002508:	2000      	movs	r0, #0
 800250a:	f7fe fe97 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Multi Errores");
 800250e:	481c      	ldr	r0, [pc, #112]	; (8002580 <print_Display+0x2b4>)
 8002510:	f7fe ff5d 	bl	80013ce <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8002514:	2101      	movs	r1, #1
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe fe90 	bl	800123c <HD44780_SetCursor>
			HD44780_PrintStr("Consulte Manual");
 800251c:	4815      	ldr	r0, [pc, #84]	; (8002574 <print_Display+0x2a8>)
 800251e:	f7fe ff56 	bl	80013ce <HD44780_PrintStr>
			HD44780_NoCursor();
 8002522:	f7fe fed3 	bl	80012cc <HD44780_NoCursor>
			HD44780_NoBlink();
 8002526:	f7fe fefd 	bl	8001324 <HD44780_NoBlink>
			break;
 800252a:	bf00      	nop
	}
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	080090ac 	.word	0x080090ac
 8002538:	20000234 	.word	0x20000234
 800253c:	080090b8 	.word	0x080090b8
 8002540:	20000238 	.word	0x20000238
 8002544:	080090bc 	.word	0x080090bc
 8002548:	080090c8 	.word	0x080090c8
 800254c:	080090d4 	.word	0x080090d4
 8002550:	080090e4 	.word	0x080090e4
 8002554:	080090f4 	.word	0x080090f4
 8002558:	080090f8 	.word	0x080090f8
 800255c:	080090fc 	.word	0x080090fc
 8002560:	08009108 	.word	0x08009108
 8002564:	08009114 	.word	0x08009114
 8002568:	0800911c 	.word	0x0800911c
 800256c:	08009128 	.word	0x08009128
 8002570:	08009134 	.word	0x08009134
 8002574:	08009144 	.word	0x08009144
 8002578:	08009154 	.word	0x08009154
 800257c:	08009164 	.word	0x08009164
 8002580:	08009174 	.word	0x08009174

08002584 <InitAll>:
extern char horaStr[3], minutoStr[3];

uint8_t componentes[3];
uint8_t cafe_programado;

void InitAll(void) {
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0

	//SetBuzzer(ON);

	HAL_GPIO_WritePin(GREEN_PORT, GREEN_PIN, ON); // Sistema Prendido y funcionando
 8002588:	2201      	movs	r2, #1
 800258a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800258e:	4811      	ldr	r0, [pc, #68]	; (80025d4 <InitAll+0x50>)
 8002590:	f000 fcf1 	bl	8002f76 <HAL_GPIO_WritePin>

	get_ROMid();
 8002594:	f7fe fc76 	bl	8000e84 <get_ROMid>

	InitLCD();
 8002598:	f000 f826 	bl	80025e8 <InitLCD>

	LecturaSD();
 800259c:	f000 f848 	bl	8002630 <LecturaSD>

	//------------ESTO CAMBIA CUANDO LO LEA LA SD-----------------
	horaProgramada.Hours = 0;
 80025a0:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <InitAll+0x54>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
	horaProgramada.Minutes = 0;
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <InitAll+0x54>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	705a      	strb	r2, [r3, #1]
	horaProgramada.Seconds = 0;
 80025ac:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <InitAll+0x54>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	709a      	strb	r2, [r3, #2]
	sprintf(horaStr, "%d", horaProgramada.Hours);
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <InitAll+0x54>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	4908      	ldr	r1, [pc, #32]	; (80025dc <InitAll+0x58>)
 80025ba:	4809      	ldr	r0, [pc, #36]	; (80025e0 <InitAll+0x5c>)
 80025bc:	f006 f92e 	bl	800881c <siprintf>
	sprintf(minutoStr, "%d", horaProgramada.Minutes);
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <InitAll+0x54>)
 80025c2:	785b      	ldrb	r3, [r3, #1]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4905      	ldr	r1, [pc, #20]	; (80025dc <InitAll+0x58>)
 80025c8:	4806      	ldr	r0, [pc, #24]	; (80025e4 <InitAll+0x60>)
 80025ca:	f006 f927 	bl	800881c <siprintf>
	//------------------------------------------------------------

	//SetBuzzer(OFF);
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40010c00 	.word	0x40010c00
 80025d8:	2000022c 	.word	0x2000022c
 80025dc:	08009184 	.word	0x08009184
 80025e0:	20000234 	.word	0x20000234
 80025e4:	20000238 	.word	0x20000238

080025e8 <InitLCD>:

void InitLCD()
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
	HD44780_Init(2);
 80025ec:	2002      	movs	r0, #2
 80025ee:	f7fe fd8b 	bl	8001108 <HD44780_Init>
	HD44780_NoCursor();
 80025f2:	f7fe fe6b 	bl	80012cc <HD44780_NoCursor>
	HD44780_SetBacklight(100);
 80025f6:	2064      	movs	r0, #100	; 0x64
 80025f8:	f7fe fefe 	bl	80013f8 <HD44780_SetBacklight>
	HD44780_Clear();
 80025fc:	f7fe fe08 	bl	8001210 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 8002600:	2100      	movs	r1, #0
 8002602:	2000      	movs	r0, #0
 8002604:	f7fe fe1a 	bl	800123c <HD44780_SetCursor>
	HD44780_PrintStr("Iniciando");
 8002608:	4807      	ldr	r0, [pc, #28]	; (8002628 <InitLCD+0x40>)
 800260a:	f7fe fee0 	bl	80013ce <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 800260e:	2101      	movs	r1, #1
 8002610:	2000      	movs	r0, #0
 8002612:	f7fe fe13 	bl	800123c <HD44780_SetCursor>
	HD44780_PrintStr("Aguarde...");
 8002616:	4805      	ldr	r0, [pc, #20]	; (800262c <InitLCD+0x44>)
 8002618:	f7fe fed9 	bl	80013ce <HD44780_PrintStr>

	HAL_Delay(500);
 800261c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002620:	f000 f95a 	bl	80028d8 <HAL_Delay>
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	08009188 	.word	0x08009188
 800262c:	08009194 	.word	0x08009194

08002630 <LecturaSD>:

void LecturaSD()
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
	// Leo la SD y actualizo el vector componentes y la variable estado_comp y cafe_programado

	cafe_programado = 1;
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <LecturaSD+0x14>)
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	2000023e 	.word	0x2000023e

08002648 <getKey>:

// ************************ Teclado ************************************************************

char getKey(void)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
	uint8_t aux = NO_KEY;
 800264e:	2300      	movs	r3, #0
 8002650:	71fb      	strb	r3, [r7, #7]

	if (bufferTeclado != NO_KEY)
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <getKey+0x2c>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <getKey+0x1e>
	{
		aux = bufferTeclado;
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <getKey+0x2c>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	71fb      	strb	r3, [r7, #7]
		bufferTeclado = NO_KEY;
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <getKey+0x2c>)
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
	}
	return aux;
 8002666:	79fb      	ldrb	r3, [r7, #7]
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	2000023b 	.word	0x2000023b

08002678 <BarridoTeclado>:

char BarridoTeclado(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(BOTON_OK_GPIO_Port,BOTON_OK_Pin)) 				return BOTON_OK;
 800267c:	2110      	movs	r1, #16
 800267e:	480f      	ldr	r0, [pc, #60]	; (80026bc <BarridoTeclado+0x44>)
 8002680:	f000 fc62 	bl	8002f48 <HAL_GPIO_ReadPin>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <BarridoTeclado+0x16>
 800268a:	2301      	movs	r3, #1
 800268c:	e013      	b.n	80026b6 <BarridoTeclado+0x3e>
	else if(!HAL_GPIO_ReadPin(BOTON_SEL_GPIO_Port,BOTON_SEL_Pin))		return BOTON_SEL;
 800268e:	2108      	movs	r1, #8
 8002690:	480a      	ldr	r0, [pc, #40]	; (80026bc <BarridoTeclado+0x44>)
 8002692:	f000 fc59 	bl	8002f48 <HAL_GPIO_ReadPin>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <BarridoTeclado+0x28>
 800269c:	2302      	movs	r3, #2
 800269e:	e00a      	b.n	80026b6 <BarridoTeclado+0x3e>
	else if(!HAL_GPIO_ReadPin(BOTON_CANCEL_GPIO_Port,BOTON_CANCEL_Pin))	return BOTON_CANCEL;
 80026a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026a4:	4806      	ldr	r0, [pc, #24]	; (80026c0 <BarridoTeclado+0x48>)
 80026a6:	f000 fc4f 	bl	8002f48 <HAL_GPIO_ReadPin>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <BarridoTeclado+0x3c>
 80026b0:	2303      	movs	r3, #3
 80026b2:	e000      	b.n	80026b6 <BarridoTeclado+0x3e>
	else																return NO_KEY;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40010c00 	.word	0x40010c00
 80026c0:	40010800 	.word	0x40010800

080026c4 <DriverTeclado>:

void DriverTeclado(void *p)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	static uint8_t estado = ESPERANDO_TECLA;
	static uint8_t contTeclaEstable = 0;

	while(1)
	{
		codigoActual = BarridoTeclado();
 80026cc:	f7ff ffd4 	bl	8002678 <BarridoTeclado>
 80026d0:	4603      	mov	r3, r0
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <DriverTeclado+0xb0>)
 80026d6:	701a      	strb	r2, [r3, #0]

		switch (estado)
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <DriverTeclado+0xb4>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d031      	beq.n	8002744 <DriverTeclado+0x80>
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	dc39      	bgt.n	8002758 <DriverTeclado+0x94>
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d002      	beq.n	80026ee <DriverTeclado+0x2a>
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d00f      	beq.n	800270c <DriverTeclado+0x48>
 80026ec:	e034      	b.n	8002758 <DriverTeclado+0x94>
		{
			case ESPERANDO_TECLA:
					if (codigoActual != NO_KEY)
 80026ee:	4b21      	ldr	r3, [pc, #132]	; (8002774 <DriverTeclado+0xb0>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d034      	beq.n	8002760 <DriverTeclado+0x9c>
					{
						codigoAnterior = codigoActual;
 80026f6:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <DriverTeclado+0xb0>)
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	4b20      	ldr	r3, [pc, #128]	; (800277c <DriverTeclado+0xb8>)
 80026fc:	701a      	strb	r2, [r3, #0]
						contTeclaEstable = 0;
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <DriverTeclado+0xbc>)
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
						estado = VALIDAR_TECLA;
 8002704:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <DriverTeclado+0xb4>)
 8002706:	2202      	movs	r2, #2
 8002708:	701a      	strb	r2, [r3, #0]
					}
					break;
 800270a:	e029      	b.n	8002760 <DriverTeclado+0x9c>
			case VALIDAR_TECLA:
					if (codigoActual != codigoAnterior)
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <DriverTeclado+0xb0>)
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	4b1a      	ldr	r3, [pc, #104]	; (800277c <DriverTeclado+0xb8>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d003      	beq.n	8002720 <DriverTeclado+0x5c>
					{
						estado = ESPERANDO_TECLA;
 8002718:	4b17      	ldr	r3, [pc, #92]	; (8002778 <DriverTeclado+0xb4>)
 800271a:	2201      	movs	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
						{
							bufferTeclado = codigoActual;
							estado = TECLA_PRESIONADA;
						}
					}
					break;
 800271e:	e021      	b.n	8002764 <DriverTeclado+0xa0>
						contTeclaEstable++;
 8002720:	4b17      	ldr	r3, [pc, #92]	; (8002780 <DriverTeclado+0xbc>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	b2da      	uxtb	r2, r3
 8002728:	4b15      	ldr	r3, [pc, #84]	; (8002780 <DriverTeclado+0xbc>)
 800272a:	701a      	strb	r2, [r3, #0]
						if (contTeclaEstable == CANT_PARA_VALIDAR)
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <DriverTeclado+0xbc>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b0a      	cmp	r3, #10
 8002732:	d117      	bne.n	8002764 <DriverTeclado+0xa0>
							bufferTeclado = codigoActual;
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <DriverTeclado+0xb0>)
 8002736:	781a      	ldrb	r2, [r3, #0]
 8002738:	4b12      	ldr	r3, [pc, #72]	; (8002784 <DriverTeclado+0xc0>)
 800273a:	701a      	strb	r2, [r3, #0]
							estado = TECLA_PRESIONADA;
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <DriverTeclado+0xb4>)
 800273e:	2203      	movs	r2, #3
 8002740:	701a      	strb	r2, [r3, #0]
					break;
 8002742:	e00f      	b.n	8002764 <DriverTeclado+0xa0>
			case TECLA_PRESIONADA:
					if (codigoActual != codigoAnterior)
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <DriverTeclado+0xb0>)
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <DriverTeclado+0xb8>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d00b      	beq.n	8002768 <DriverTeclado+0xa4>
					{
						estado = ESPERANDO_TECLA;
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <DriverTeclado+0xb4>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002756:	e007      	b.n	8002768 <DriverTeclado+0xa4>
			default:
					estado = ESPERANDO_TECLA;
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <DriverTeclado+0xb4>)
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
					break;
 800275e:	e004      	b.n	800276a <DriverTeclado+0xa6>
					break;
 8002760:	bf00      	nop
 8002762:	e002      	b.n	800276a <DriverTeclado+0xa6>
					break;
 8002764:	bf00      	nop
 8002766:	e000      	b.n	800276a <DriverTeclado+0xa6>
					break;
 8002768:	bf00      	nop
		}
		vTaskDelay(10);
 800276a:	200a      	movs	r0, #10
 800276c:	f004 f9a4 	bl	8006ab8 <vTaskDelay>
		codigoActual = BarridoTeclado();
 8002770:	e7ac      	b.n	80026cc <DriverTeclado+0x8>
 8002772:	bf00      	nop
 8002774:	2000023f 	.word	0x2000023f
 8002778:	20000018 	.word	0x20000018
 800277c:	20000240 	.word	0x20000240
 8002780:	20000241 	.word	0x20000241
 8002784:	2000023b 	.word	0x2000023b

08002788 <SetRelay>:


//********************* RELE *******************************

void SetRelay(char estado)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
	if(estado == ON) HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, ON);
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d105      	bne.n	80027a4 <SetRelay+0x1c>
 8002798:	2201      	movs	r2, #1
 800279a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800279e:	4808      	ldr	r0, [pc, #32]	; (80027c0 <SetRelay+0x38>)
 80027a0:	f000 fbe9 	bl	8002f76 <HAL_GPIO_WritePin>
	if(estado == OFF) HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, OFF);
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d105      	bne.n	80027b6 <SetRelay+0x2e>
 80027aa:	2200      	movs	r2, #0
 80027ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027b0:	4803      	ldr	r0, [pc, #12]	; (80027c0 <SetRelay+0x38>)
 80027b2:	f000 fbe0 	bl	8002f76 <HAL_GPIO_WritePin>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40010c00 	.word	0x40010c00

080027c4 <SetLED>:
	if(estado == ON) HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, ON);
	if(estado == OFF) HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, OFF);
}

void SetLED(char estado, char led)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	460a      	mov	r2, r1
 80027ce:	71fb      	strb	r3, [r7, #7]
 80027d0:	4613      	mov	r3, r2
 80027d2:	71bb      	strb	r3, [r7, #6]
	uint16_t pin;

	if(led == VERDE) 	pin = LED_VERDE_Pin;
 80027d4:	79bb      	ldrb	r3, [r7, #6]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d102      	bne.n	80027e0 <SetLED+0x1c>
 80027da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027de:	81fb      	strh	r3, [r7, #14]
	if(led == AMARILLO) pin = LED_AMARILLO_Pin;
 80027e0:	79bb      	ldrb	r3, [r7, #6]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d102      	bne.n	80027ec <SetLED+0x28>
 80027e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027ea:	81fb      	strh	r3, [r7, #14]
	if(led == ROJO) 	pin = LED_ROJO_Pin;
 80027ec:	79bb      	ldrb	r3, [r7, #6]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d102      	bne.n	80027f8 <SetLED+0x34>
 80027f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027f6:	81fb      	strh	r3, [r7, #14]

	if(estado == ON) HAL_GPIO_WritePin(GPIOB, pin, ON);
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d105      	bne.n	800280a <SetLED+0x46>
 80027fe:	89fb      	ldrh	r3, [r7, #14]
 8002800:	2201      	movs	r2, #1
 8002802:	4619      	mov	r1, r3
 8002804:	4807      	ldr	r0, [pc, #28]	; (8002824 <SetLED+0x60>)
 8002806:	f000 fbb6 	bl	8002f76 <HAL_GPIO_WritePin>
	if(estado == OFF) HAL_GPIO_WritePin(GPIOB, pin, OFF);
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d105      	bne.n	800281c <SetLED+0x58>
 8002810:	89fb      	ldrh	r3, [r7, #14]
 8002812:	2200      	movs	r2, #0
 8002814:	4619      	mov	r1, r3
 8002816:	4803      	ldr	r0, [pc, #12]	; (8002824 <SetLED+0x60>)
 8002818:	f000 fbad 	bl	8002f76 <HAL_GPIO_WritePin>
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40010c00 	.word	0x40010c00

08002828 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002828:	480c      	ldr	r0, [pc, #48]	; (800285c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800282a:	490d      	ldr	r1, [pc, #52]	; (8002860 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800282c:	4a0d      	ldr	r2, [pc, #52]	; (8002864 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002830:	e002      	b.n	8002838 <LoopCopyDataInit>

08002832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002836:	3304      	adds	r3, #4

08002838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800283a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800283c:	d3f9      	bcc.n	8002832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002840:	4c0a      	ldr	r4, [pc, #40]	; (800286c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002844:	e001      	b.n	800284a <LoopFillZerobss>

08002846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002848:	3204      	adds	r2, #4

0800284a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800284a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800284c:	d3fb      	bcc.n	8002846 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800284e:	f7ff fa5b 	bl	8001d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002852:	f005 fe99 	bl	8008588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002856:	f7fe fecf 	bl	80015f8 <main>
  bx lr
 800285a:	4770      	bx	lr
  ldr r0, =_sdata
 800285c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002860:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002864:	080092b0 	.word	0x080092b0
  ldr r2, =_sbss
 8002868:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800286c:	20001c60 	.word	0x20001c60

08002870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002870:	e7fe      	b.n	8002870 <ADC1_2_IRQHandler>
	...

08002874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002878:	4b08      	ldr	r3, [pc, #32]	; (800289c <HAL_Init+0x28>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a07      	ldr	r2, [pc, #28]	; (800289c <HAL_Init+0x28>)
 800287e:	f043 0310 	orr.w	r3, r3, #16
 8002882:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002884:	2003      	movs	r0, #3
 8002886:	f000 f8f5 	bl	8002a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800288a:	200f      	movs	r0, #15
 800288c:	f7ff f982 	bl	8001b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002890:	f7ff f89e 	bl	80019d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40022000 	.word	0x40022000

080028a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_IncTick+0x1c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_IncTick+0x20>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a03      	ldr	r2, [pc, #12]	; (80028c0 <HAL_IncTick+0x20>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	20000020 	.word	0x20000020
 80028c0:	20000244 	.word	0x20000244

080028c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return uwTick;
 80028c8:	4b02      	ldr	r3, [pc, #8]	; (80028d4 <HAL_GetTick+0x10>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	20000244 	.word	0x20000244

080028d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e0:	f7ff fff0 	bl	80028c4 <HAL_GetTick>
 80028e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d005      	beq.n	80028fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028f2:	4b0a      	ldr	r3, [pc, #40]	; (800291c <HAL_Delay+0x44>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028fe:	bf00      	nop
 8002900:	f7ff ffe0 	bl	80028c4 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	429a      	cmp	r2, r3
 800290e:	d8f7      	bhi.n	8002900 <HAL_Delay+0x28>
  {
  }
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000020 	.word	0x20000020

08002920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002930:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800294c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002952:	4a04      	ldr	r2, [pc, #16]	; (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	60d3      	str	r3, [r2, #12]
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <__NVIC_GetPriorityGrouping+0x18>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	f003 0307 	and.w	r3, r3, #7
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db0b      	blt.n	80029ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4906      	ldr	r1, [pc, #24]	; (80029b8 <__NVIC_EnableIRQ+0x34>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	2001      	movs	r0, #1
 80029a6:	fa00 f202 	lsl.w	r2, r0, r2
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	; (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	; (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ff4f 	bl	8002920 <__NVIC_SetPriorityGrouping>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a9c:	f7ff ff64 	bl	8002968 <__NVIC_GetPriorityGrouping>
 8002aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f7ff ffb2 	bl	8002a10 <NVIC_EncodePriority>
 8002aac:	4602      	mov	r2, r0
 8002aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff81 	bl	80029bc <__NVIC_SetPriority>
}
 8002aba:	bf00      	nop
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff57 	bl	8002984 <__NVIC_EnableIRQ>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d008      	beq.n	8002b06 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2204      	movs	r2, #4
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e020      	b.n	8002b48 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 020e 	bic.w	r2, r2, #14
 8002b14:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2e:	2101      	movs	r1, #1
 8002b30:	fa01 f202 	lsl.w	r2, r1, r2
 8002b34:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
	...

08002b54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d005      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
 8002b74:	e051      	b.n	8002c1a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 020e 	bic.w	r2, r2, #14
 8002b84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a22      	ldr	r2, [pc, #136]	; (8002c24 <HAL_DMA_Abort_IT+0xd0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d029      	beq.n	8002bf4 <HAL_DMA_Abort_IT+0xa0>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a20      	ldr	r2, [pc, #128]	; (8002c28 <HAL_DMA_Abort_IT+0xd4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d022      	beq.n	8002bf0 <HAL_DMA_Abort_IT+0x9c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1f      	ldr	r2, [pc, #124]	; (8002c2c <HAL_DMA_Abort_IT+0xd8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d01a      	beq.n	8002bea <HAL_DMA_Abort_IT+0x96>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <HAL_DMA_Abort_IT+0xdc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d012      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x90>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <HAL_DMA_Abort_IT+0xe0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d00a      	beq.n	8002bde <HAL_DMA_Abort_IT+0x8a>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1a      	ldr	r2, [pc, #104]	; (8002c38 <HAL_DMA_Abort_IT+0xe4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d102      	bne.n	8002bd8 <HAL_DMA_Abort_IT+0x84>
 8002bd2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bd6:	e00e      	b.n	8002bf6 <HAL_DMA_Abort_IT+0xa2>
 8002bd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bdc:	e00b      	b.n	8002bf6 <HAL_DMA_Abort_IT+0xa2>
 8002bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002be2:	e008      	b.n	8002bf6 <HAL_DMA_Abort_IT+0xa2>
 8002be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be8:	e005      	b.n	8002bf6 <HAL_DMA_Abort_IT+0xa2>
 8002bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bee:	e002      	b.n	8002bf6 <HAL_DMA_Abort_IT+0xa2>
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	e000      	b.n	8002bf6 <HAL_DMA_Abort_IT+0xa2>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	4a11      	ldr	r2, [pc, #68]	; (8002c3c <HAL_DMA_Abort_IT+0xe8>)
 8002bf8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	4798      	blx	r3
    } 
  }
  return status;
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40020008 	.word	0x40020008
 8002c28:	4002001c 	.word	0x4002001c
 8002c2c:	40020030 	.word	0x40020030
 8002c30:	40020044 	.word	0x40020044
 8002c34:	40020058 	.word	0x40020058
 8002c38:	4002006c 	.word	0x4002006c
 8002c3c:	40020000 	.word	0x40020000

08002c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b08b      	sub	sp, #44	; 0x2c
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c52:	e169      	b.n	8002f28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c54:	2201      	movs	r2, #1
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	f040 8158 	bne.w	8002f22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4a9a      	ldr	r2, [pc, #616]	; (8002ee0 <HAL_GPIO_Init+0x2a0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d05e      	beq.n	8002d3a <HAL_GPIO_Init+0xfa>
 8002c7c:	4a98      	ldr	r2, [pc, #608]	; (8002ee0 <HAL_GPIO_Init+0x2a0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d875      	bhi.n	8002d6e <HAL_GPIO_Init+0x12e>
 8002c82:	4a98      	ldr	r2, [pc, #608]	; (8002ee4 <HAL_GPIO_Init+0x2a4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d058      	beq.n	8002d3a <HAL_GPIO_Init+0xfa>
 8002c88:	4a96      	ldr	r2, [pc, #600]	; (8002ee4 <HAL_GPIO_Init+0x2a4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d86f      	bhi.n	8002d6e <HAL_GPIO_Init+0x12e>
 8002c8e:	4a96      	ldr	r2, [pc, #600]	; (8002ee8 <HAL_GPIO_Init+0x2a8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d052      	beq.n	8002d3a <HAL_GPIO_Init+0xfa>
 8002c94:	4a94      	ldr	r2, [pc, #592]	; (8002ee8 <HAL_GPIO_Init+0x2a8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d869      	bhi.n	8002d6e <HAL_GPIO_Init+0x12e>
 8002c9a:	4a94      	ldr	r2, [pc, #592]	; (8002eec <HAL_GPIO_Init+0x2ac>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d04c      	beq.n	8002d3a <HAL_GPIO_Init+0xfa>
 8002ca0:	4a92      	ldr	r2, [pc, #584]	; (8002eec <HAL_GPIO_Init+0x2ac>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d863      	bhi.n	8002d6e <HAL_GPIO_Init+0x12e>
 8002ca6:	4a92      	ldr	r2, [pc, #584]	; (8002ef0 <HAL_GPIO_Init+0x2b0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d046      	beq.n	8002d3a <HAL_GPIO_Init+0xfa>
 8002cac:	4a90      	ldr	r2, [pc, #576]	; (8002ef0 <HAL_GPIO_Init+0x2b0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d85d      	bhi.n	8002d6e <HAL_GPIO_Init+0x12e>
 8002cb2:	2b12      	cmp	r3, #18
 8002cb4:	d82a      	bhi.n	8002d0c <HAL_GPIO_Init+0xcc>
 8002cb6:	2b12      	cmp	r3, #18
 8002cb8:	d859      	bhi.n	8002d6e <HAL_GPIO_Init+0x12e>
 8002cba:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <HAL_GPIO_Init+0x80>)
 8002cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc0:	08002d3b 	.word	0x08002d3b
 8002cc4:	08002d15 	.word	0x08002d15
 8002cc8:	08002d27 	.word	0x08002d27
 8002ccc:	08002d69 	.word	0x08002d69
 8002cd0:	08002d6f 	.word	0x08002d6f
 8002cd4:	08002d6f 	.word	0x08002d6f
 8002cd8:	08002d6f 	.word	0x08002d6f
 8002cdc:	08002d6f 	.word	0x08002d6f
 8002ce0:	08002d6f 	.word	0x08002d6f
 8002ce4:	08002d6f 	.word	0x08002d6f
 8002ce8:	08002d6f 	.word	0x08002d6f
 8002cec:	08002d6f 	.word	0x08002d6f
 8002cf0:	08002d6f 	.word	0x08002d6f
 8002cf4:	08002d6f 	.word	0x08002d6f
 8002cf8:	08002d6f 	.word	0x08002d6f
 8002cfc:	08002d6f 	.word	0x08002d6f
 8002d00:	08002d6f 	.word	0x08002d6f
 8002d04:	08002d1d 	.word	0x08002d1d
 8002d08:	08002d31 	.word	0x08002d31
 8002d0c:	4a79      	ldr	r2, [pc, #484]	; (8002ef4 <HAL_GPIO_Init+0x2b4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d12:	e02c      	b.n	8002d6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	623b      	str	r3, [r7, #32]
          break;
 8002d1a:	e029      	b.n	8002d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	3304      	adds	r3, #4
 8002d22:	623b      	str	r3, [r7, #32]
          break;
 8002d24:	e024      	b.n	8002d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	623b      	str	r3, [r7, #32]
          break;
 8002d2e:	e01f      	b.n	8002d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	330c      	adds	r3, #12
 8002d36:	623b      	str	r3, [r7, #32]
          break;
 8002d38:	e01a      	b.n	8002d70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d42:	2304      	movs	r3, #4
 8002d44:	623b      	str	r3, [r7, #32]
          break;
 8002d46:	e013      	b.n	8002d70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d50:	2308      	movs	r3, #8
 8002d52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	611a      	str	r2, [r3, #16]
          break;
 8002d5a:	e009      	b.n	8002d70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	615a      	str	r2, [r3, #20]
          break;
 8002d66:	e003      	b.n	8002d70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	623b      	str	r3, [r7, #32]
          break;
 8002d6c:	e000      	b.n	8002d70 <HAL_GPIO_Init+0x130>
          break;
 8002d6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2bff      	cmp	r3, #255	; 0xff
 8002d74:	d801      	bhi.n	8002d7a <HAL_GPIO_Init+0x13a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	e001      	b.n	8002d7e <HAL_GPIO_Init+0x13e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2bff      	cmp	r3, #255	; 0xff
 8002d84:	d802      	bhi.n	8002d8c <HAL_GPIO_Init+0x14c>
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	e002      	b.n	8002d92 <HAL_GPIO_Init+0x152>
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	3b08      	subs	r3, #8
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	210f      	movs	r1, #15
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	401a      	ands	r2, r3
 8002da4:	6a39      	ldr	r1, [r7, #32]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	431a      	orrs	r2, r3
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 80b1 	beq.w	8002f22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dc0:	4b4d      	ldr	r3, [pc, #308]	; (8002ef8 <HAL_GPIO_Init+0x2b8>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	4a4c      	ldr	r2, [pc, #304]	; (8002ef8 <HAL_GPIO_Init+0x2b8>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6193      	str	r3, [r2, #24]
 8002dcc:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <HAL_GPIO_Init+0x2b8>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dd8:	4a48      	ldr	r2, [pc, #288]	; (8002efc <HAL_GPIO_Init+0x2bc>)
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	3302      	adds	r3, #2
 8002de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	220f      	movs	r2, #15
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a40      	ldr	r2, [pc, #256]	; (8002f00 <HAL_GPIO_Init+0x2c0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d013      	beq.n	8002e2c <HAL_GPIO_Init+0x1ec>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a3f      	ldr	r2, [pc, #252]	; (8002f04 <HAL_GPIO_Init+0x2c4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00d      	beq.n	8002e28 <HAL_GPIO_Init+0x1e8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a3e      	ldr	r2, [pc, #248]	; (8002f08 <HAL_GPIO_Init+0x2c8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d007      	beq.n	8002e24 <HAL_GPIO_Init+0x1e4>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a3d      	ldr	r2, [pc, #244]	; (8002f0c <HAL_GPIO_Init+0x2cc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d101      	bne.n	8002e20 <HAL_GPIO_Init+0x1e0>
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e006      	b.n	8002e2e <HAL_GPIO_Init+0x1ee>
 8002e20:	2304      	movs	r3, #4
 8002e22:	e004      	b.n	8002e2e <HAL_GPIO_Init+0x1ee>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e002      	b.n	8002e2e <HAL_GPIO_Init+0x1ee>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_GPIO_Init+0x1ee>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e30:	f002 0203 	and.w	r2, r2, #3
 8002e34:	0092      	lsls	r2, r2, #2
 8002e36:	4093      	lsls	r3, r2
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e3e:	492f      	ldr	r1, [pc, #188]	; (8002efc <HAL_GPIO_Init+0x2bc>)
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	089b      	lsrs	r3, r3, #2
 8002e44:	3302      	adds	r3, #2
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d006      	beq.n	8002e66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e58:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	492c      	ldr	r1, [pc, #176]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	600b      	str	r3, [r1, #0]
 8002e64:	e006      	b.n	8002e74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e66:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	4928      	ldr	r1, [pc, #160]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d006      	beq.n	8002e8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e80:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	4922      	ldr	r1, [pc, #136]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
 8002e8c:	e006      	b.n	8002e9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e8e:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	491e      	ldr	r1, [pc, #120]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d006      	beq.n	8002eb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ea8:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	4918      	ldr	r1, [pc, #96]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eb6:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	4914      	ldr	r1, [pc, #80]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d021      	beq.n	8002f14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	490e      	ldr	r1, [pc, #56]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60cb      	str	r3, [r1, #12]
 8002edc:	e021      	b.n	8002f22 <HAL_GPIO_Init+0x2e2>
 8002ede:	bf00      	nop
 8002ee0:	10320000 	.word	0x10320000
 8002ee4:	10310000 	.word	0x10310000
 8002ee8:	10220000 	.word	0x10220000
 8002eec:	10210000 	.word	0x10210000
 8002ef0:	10120000 	.word	0x10120000
 8002ef4:	10110000 	.word	0x10110000
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010000 	.word	0x40010000
 8002f00:	40010800 	.word	0x40010800
 8002f04:	40010c00 	.word	0x40010c00
 8002f08:	40011000 	.word	0x40011000
 8002f0c:	40011400 	.word	0x40011400
 8002f10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	4909      	ldr	r1, [pc, #36]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	3301      	adds	r3, #1
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f47f ae8e 	bne.w	8002c54 <HAL_GPIO_Init+0x14>
  }
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	372c      	adds	r7, #44	; 0x2c
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	40010400 	.word	0x40010400

08002f48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	887b      	ldrh	r3, [r7, #2]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
 8002f64:	e001      	b.n	8002f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr

08002f76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	807b      	strh	r3, [r7, #2]
 8002f82:	4613      	mov	r3, r2
 8002f84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f86:	787b      	ldrb	r3, [r7, #1]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f8c:	887a      	ldrh	r2, [r7, #2]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f92:	e003      	b.n	8002f9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f94:	887b      	ldrh	r3, [r7, #2]
 8002f96:	041a      	lsls	r2, r3, #16
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	611a      	str	r2, [r3, #16]
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr
	...

08002fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e12b      	b.n	8003212 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fe fd36 	bl	8001a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ffa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800300a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800300c:	f000 fff6 	bl	8003ffc <HAL_RCC_GetPCLK1Freq>
 8003010:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4a81      	ldr	r2, [pc, #516]	; (800321c <HAL_I2C_Init+0x274>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d807      	bhi.n	800302c <HAL_I2C_Init+0x84>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a80      	ldr	r2, [pc, #512]	; (8003220 <HAL_I2C_Init+0x278>)
 8003020:	4293      	cmp	r3, r2
 8003022:	bf94      	ite	ls
 8003024:	2301      	movls	r3, #1
 8003026:	2300      	movhi	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e006      	b.n	800303a <HAL_I2C_Init+0x92>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4a7d      	ldr	r2, [pc, #500]	; (8003224 <HAL_I2C_Init+0x27c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	bf94      	ite	ls
 8003034:	2301      	movls	r3, #1
 8003036:	2300      	movhi	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e0e7      	b.n	8003212 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4a78      	ldr	r2, [pc, #480]	; (8003228 <HAL_I2C_Init+0x280>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	0c9b      	lsrs	r3, r3, #18
 800304c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4a6a      	ldr	r2, [pc, #424]	; (800321c <HAL_I2C_Init+0x274>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d802      	bhi.n	800307c <HAL_I2C_Init+0xd4>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	3301      	adds	r3, #1
 800307a:	e009      	b.n	8003090 <HAL_I2C_Init+0xe8>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	4a69      	ldr	r2, [pc, #420]	; (800322c <HAL_I2C_Init+0x284>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	3301      	adds	r3, #1
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	430b      	orrs	r3, r1
 8003096:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	495c      	ldr	r1, [pc, #368]	; (800321c <HAL_I2C_Init+0x274>)
 80030ac:	428b      	cmp	r3, r1
 80030ae:	d819      	bhi.n	80030e4 <HAL_I2C_Init+0x13c>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e59      	subs	r1, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80030be:	1c59      	adds	r1, r3, #1
 80030c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030c4:	400b      	ands	r3, r1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <HAL_I2C_Init+0x138>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1e59      	subs	r1, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030de:	e051      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 80030e0:	2304      	movs	r3, #4
 80030e2:	e04f      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d111      	bne.n	8003110 <HAL_I2C_Init+0x168>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1e58      	subs	r0, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	440b      	add	r3, r1
 80030fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e012      	b.n	8003136 <HAL_I2C_Init+0x18e>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1e58      	subs	r0, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	0099      	lsls	r1, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	fbb0 f3f3 	udiv	r3, r0, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_Init+0x196>
 800313a:	2301      	movs	r3, #1
 800313c:	e022      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10e      	bne.n	8003164 <HAL_I2C_Init+0x1bc>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1e58      	subs	r0, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	460b      	mov	r3, r1
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	440b      	add	r3, r1
 8003154:	fbb0 f3f3 	udiv	r3, r0, r3
 8003158:	3301      	adds	r3, #1
 800315a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003162:	e00f      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e58      	subs	r0, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	0099      	lsls	r1, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	fbb0 f3f3 	udiv	r3, r0, r3
 800317a:	3301      	adds	r3, #1
 800317c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003180:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	6809      	ldr	r1, [r1, #0]
 8003188:	4313      	orrs	r3, r2
 800318a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6911      	ldr	r1, [r2, #16]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68d2      	ldr	r2, [r2, #12]
 80031be:	4311      	orrs	r1, r2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	000186a0 	.word	0x000186a0
 8003220:	001e847f 	.word	0x001e847f
 8003224:	003d08ff 	.word	0x003d08ff
 8003228:	431bde83 	.word	0x431bde83
 800322c:	10624dd3 	.word	0x10624dd3

08003230 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	461a      	mov	r2, r3
 800323c:	460b      	mov	r3, r1
 800323e:	817b      	strh	r3, [r7, #10]
 8003240:	4613      	mov	r3, r2
 8003242:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003244:	f7ff fb3e 	bl	80028c4 <HAL_GetTick>
 8003248:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b20      	cmp	r3, #32
 8003254:	f040 80e0 	bne.w	8003418 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	2319      	movs	r3, #25
 800325e:	2201      	movs	r2, #1
 8003260:	4970      	ldr	r1, [pc, #448]	; (8003424 <HAL_I2C_Master_Transmit+0x1f4>)
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f964 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800326e:	2302      	movs	r3, #2
 8003270:	e0d3      	b.n	800341a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_I2C_Master_Transmit+0x50>
 800327c:	2302      	movs	r3, #2
 800327e:	e0cc      	b.n	800341a <HAL_I2C_Master_Transmit+0x1ea>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	d007      	beq.n	80032a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2221      	movs	r2, #33	; 0x21
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2210      	movs	r2, #16
 80032c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	893a      	ldrh	r2, [r7, #8]
 80032d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a50      	ldr	r2, [pc, #320]	; (8003428 <HAL_I2C_Master_Transmit+0x1f8>)
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032e8:	8979      	ldrh	r1, [r7, #10]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	6a3a      	ldr	r2, [r7, #32]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f89c 	bl	800342c <I2C_MasterRequestWrite>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e08d      	b.n	800341a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003314:	e066      	b.n	80033e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	6a39      	ldr	r1, [r7, #32]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f9de 	bl	80036dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b04      	cmp	r3, #4
 800332c:	d107      	bne.n	800333e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e06b      	b.n	800341a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	781a      	ldrb	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b04      	cmp	r3, #4
 800337e:	d11b      	bne.n	80033b8 <HAL_I2C_Master_Transmit+0x188>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	d017      	beq.n	80033b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	781a      	ldrb	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	6a39      	ldr	r1, [r7, #32]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f9ce 	bl	800375e <I2C_WaitOnBTFFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00d      	beq.n	80033e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d107      	bne.n	80033e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e01a      	b.n	800341a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d194      	bne.n	8003316 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003418:	2302      	movs	r3, #2
  }
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	00100002 	.word	0x00100002
 8003428:	ffff0000 	.word	0xffff0000

0800342c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	460b      	mov	r3, r1
 800343a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b08      	cmp	r3, #8
 8003446:	d006      	beq.n	8003456 <I2C_MasterRequestWrite+0x2a>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d003      	beq.n	8003456 <I2C_MasterRequestWrite+0x2a>
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003454:	d108      	bne.n	8003468 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e00b      	b.n	8003480 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	2b12      	cmp	r3, #18
 800346e:	d107      	bne.n	8003480 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800347e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f84f 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00d      	beq.n	80034b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a6:	d103      	bne.n	80034b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e035      	b.n	8003520 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034bc:	d108      	bne.n	80034d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034be:	897b      	ldrh	r3, [r7, #10]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034cc:	611a      	str	r2, [r3, #16]
 80034ce:	e01b      	b.n	8003508 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034d0:	897b      	ldrh	r3, [r7, #10]
 80034d2:	11db      	asrs	r3, r3, #7
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f003 0306 	and.w	r3, r3, #6
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f063 030f 	orn	r3, r3, #15
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	490e      	ldr	r1, [pc, #56]	; (8003528 <I2C_MasterRequestWrite+0xfc>)
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f875 	bl	80035de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e010      	b.n	8003520 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034fe:	897b      	ldrh	r3, [r7, #10]
 8003500:	b2da      	uxtb	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	4907      	ldr	r1, [pc, #28]	; (800352c <I2C_MasterRequestWrite+0x100>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f865 	bl	80035de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	00010008 	.word	0x00010008
 800352c:	00010002 	.word	0x00010002

08003530 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003540:	e025      	b.n	800358e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d021      	beq.n	800358e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354a:	f7ff f9bb 	bl	80028c4 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d302      	bcc.n	8003560 <I2C_WaitOnFlagUntilTimeout+0x30>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d116      	bne.n	800358e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e023      	b.n	80035d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d10d      	bne.n	80035b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	43da      	mvns	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4013      	ands	r3, r2
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	e00c      	b.n	80035ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	43da      	mvns	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4013      	ands	r3, r2
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d0b6      	beq.n	8003542 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035ec:	e051      	b.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fc:	d123      	bne.n	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003616:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f043 0204 	orr.w	r2, r3, #4
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e046      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d021      	beq.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364e:	f7ff f939 	bl	80028c4 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d116      	bne.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f043 0220 	orr.w	r2, r3, #32
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e020      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d10c      	bne.n	80036b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	43da      	mvns	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4013      	ands	r3, r2
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf14      	ite	ne
 80036ae:	2301      	movne	r3, #1
 80036b0:	2300      	moveq	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	e00b      	b.n	80036ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	43da      	mvns	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d18d      	bne.n	80035ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e8:	e02d      	b.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f878 	bl	80037e0 <I2C_IsAcknowledgeFailed>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e02d      	b.n	8003756 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d021      	beq.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7ff f8df 	bl	80028c4 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d116      	bne.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e007      	b.n	8003756 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003750:	2b80      	cmp	r3, #128	; 0x80
 8003752:	d1ca      	bne.n	80036ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800376a:	e02d      	b.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f837 	bl	80037e0 <I2C_IsAcknowledgeFailed>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e02d      	b.n	80037d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003782:	d021      	beq.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003784:	f7ff f89e 	bl	80028c4 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	429a      	cmp	r2, r3
 8003792:	d302      	bcc.n	800379a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d116      	bne.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e007      	b.n	80037d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d1ca      	bne.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f6:	d11b      	bne.n	8003830 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003800:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	f043 0204 	orr.w	r2, r3, #4
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003842:	2201      	movs	r2, #1
 8003844:	601a      	str	r2, [r3, #0]
}
 8003846:	bf00      	nop
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	420e0020 	.word	0x420e0020

08003854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e272      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8087 	beq.w	8003982 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003874:	4b92      	ldr	r3, [pc, #584]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b04      	cmp	r3, #4
 800387e:	d00c      	beq.n	800389a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003880:	4b8f      	ldr	r3, [pc, #572]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 030c 	and.w	r3, r3, #12
 8003888:	2b08      	cmp	r3, #8
 800388a:	d112      	bne.n	80038b2 <HAL_RCC_OscConfig+0x5e>
 800388c:	4b8c      	ldr	r3, [pc, #560]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003898:	d10b      	bne.n	80038b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389a:	4b89      	ldr	r3, [pc, #548]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d06c      	beq.n	8003980 <HAL_RCC_OscConfig+0x12c>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d168      	bne.n	8003980 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e24c      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ba:	d106      	bne.n	80038ca <HAL_RCC_OscConfig+0x76>
 80038bc:	4b80      	ldr	r3, [pc, #512]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a7f      	ldr	r2, [pc, #508]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	e02e      	b.n	8003928 <HAL_RCC_OscConfig+0xd4>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10c      	bne.n	80038ec <HAL_RCC_OscConfig+0x98>
 80038d2:	4b7b      	ldr	r3, [pc, #492]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a7a      	ldr	r2, [pc, #488]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	4b78      	ldr	r3, [pc, #480]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a77      	ldr	r2, [pc, #476]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e01d      	b.n	8003928 <HAL_RCC_OscConfig+0xd4>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038f4:	d10c      	bne.n	8003910 <HAL_RCC_OscConfig+0xbc>
 80038f6:	4b72      	ldr	r3, [pc, #456]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a71      	ldr	r2, [pc, #452]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	4b6f      	ldr	r3, [pc, #444]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a6e      	ldr	r2, [pc, #440]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	e00b      	b.n	8003928 <HAL_RCC_OscConfig+0xd4>
 8003910:	4b6b      	ldr	r3, [pc, #428]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a6a      	ldr	r2, [pc, #424]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	4b68      	ldr	r3, [pc, #416]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a67      	ldr	r2, [pc, #412]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003926:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d013      	beq.n	8003958 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fe ffc8 	bl	80028c4 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003938:	f7fe ffc4 	bl	80028c4 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b64      	cmp	r3, #100	; 0x64
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e200      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	4b5d      	ldr	r3, [pc, #372]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0xe4>
 8003956:	e014      	b.n	8003982 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fe ffb4 	bl	80028c4 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003960:	f7fe ffb0 	bl	80028c4 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	; 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e1ec      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003972:	4b53      	ldr	r3, [pc, #332]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x10c>
 800397e:	e000      	b.n	8003982 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d063      	beq.n	8003a56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800398e:	4b4c      	ldr	r3, [pc, #304]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00b      	beq.n	80039b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800399a:	4b49      	ldr	r3, [pc, #292]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d11c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x18c>
 80039a6:	4b46      	ldr	r3, [pc, #280]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d116      	bne.n	80039e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b2:	4b43      	ldr	r3, [pc, #268]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_RCC_OscConfig+0x176>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d001      	beq.n	80039ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e1c0      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ca:	4b3d      	ldr	r3, [pc, #244]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4939      	ldr	r1, [pc, #228]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039de:	e03a      	b.n	8003a56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d020      	beq.n	8003a2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e8:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <HAL_RCC_OscConfig+0x270>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ee:	f7fe ff69 	bl	80028c4 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f6:	f7fe ff65 	bl	80028c4 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e1a1      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a08:	4b2d      	ldr	r3, [pc, #180]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0f0      	beq.n	80039f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a14:	4b2a      	ldr	r3, [pc, #168]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4927      	ldr	r1, [pc, #156]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]
 8003a28:	e015      	b.n	8003a56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a2a:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <HAL_RCC_OscConfig+0x270>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7fe ff48 	bl	80028c4 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a38:	f7fe ff44 	bl	80028c4 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e180      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d03a      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d019      	beq.n	8003a9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a6a:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a70:	f7fe ff28 	bl	80028c4 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a78:	f7fe ff24 	bl	80028c4 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e160      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a96:	2001      	movs	r0, #1
 8003a98:	f000 fb08 	bl	80040ac <RCC_Delay>
 8003a9c:	e01c      	b.n	8003ad8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa4:	f7fe ff0e 	bl	80028c4 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aaa:	e00f      	b.n	8003acc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aac:	f7fe ff0a 	bl	80028c4 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d908      	bls.n	8003acc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e146      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	42420000 	.word	0x42420000
 8003ac8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003acc:	4b92      	ldr	r3, [pc, #584]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e9      	bne.n	8003aac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 80a6 	beq.w	8003c32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aea:	4b8b      	ldr	r3, [pc, #556]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10d      	bne.n	8003b12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af6:	4b88      	ldr	r3, [pc, #544]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	4a87      	ldr	r2, [pc, #540]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b00:	61d3      	str	r3, [r2, #28]
 8003b02:	4b85      	ldr	r3, [pc, #532]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b12:	4b82      	ldr	r3, [pc, #520]	; (8003d1c <HAL_RCC_OscConfig+0x4c8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d118      	bne.n	8003b50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b1e:	4b7f      	ldr	r3, [pc, #508]	; (8003d1c <HAL_RCC_OscConfig+0x4c8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a7e      	ldr	r2, [pc, #504]	; (8003d1c <HAL_RCC_OscConfig+0x4c8>)
 8003b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b2a:	f7fe fecb 	bl	80028c4 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b32:	f7fe fec7 	bl	80028c4 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b64      	cmp	r3, #100	; 0x64
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e103      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	4b75      	ldr	r3, [pc, #468]	; (8003d1c <HAL_RCC_OscConfig+0x4c8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d106      	bne.n	8003b66 <HAL_RCC_OscConfig+0x312>
 8003b58:	4b6f      	ldr	r3, [pc, #444]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4a6e      	ldr	r2, [pc, #440]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6213      	str	r3, [r2, #32]
 8003b64:	e02d      	b.n	8003bc2 <HAL_RCC_OscConfig+0x36e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x334>
 8003b6e:	4b6a      	ldr	r3, [pc, #424]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	4a69      	ldr	r2, [pc, #420]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	6213      	str	r3, [r2, #32]
 8003b7a:	4b67      	ldr	r3, [pc, #412]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	4a66      	ldr	r2, [pc, #408]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	f023 0304 	bic.w	r3, r3, #4
 8003b84:	6213      	str	r3, [r2, #32]
 8003b86:	e01c      	b.n	8003bc2 <HAL_RCC_OscConfig+0x36e>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b05      	cmp	r3, #5
 8003b8e:	d10c      	bne.n	8003baa <HAL_RCC_OscConfig+0x356>
 8003b90:	4b61      	ldr	r3, [pc, #388]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	4a60      	ldr	r2, [pc, #384]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b96:	f043 0304 	orr.w	r3, r3, #4
 8003b9a:	6213      	str	r3, [r2, #32]
 8003b9c:	4b5e      	ldr	r3, [pc, #376]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	4a5d      	ldr	r2, [pc, #372]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	6213      	str	r3, [r2, #32]
 8003ba8:	e00b      	b.n	8003bc2 <HAL_RCC_OscConfig+0x36e>
 8003baa:	4b5b      	ldr	r3, [pc, #364]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	4a5a      	ldr	r2, [pc, #360]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	6213      	str	r3, [r2, #32]
 8003bb6:	4b58      	ldr	r3, [pc, #352]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	4a57      	ldr	r2, [pc, #348]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	f023 0304 	bic.w	r3, r3, #4
 8003bc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d015      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bca:	f7fe fe7b 	bl	80028c4 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd0:	e00a      	b.n	8003be8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd2:	f7fe fe77 	bl	80028c4 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e0b1      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be8:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ee      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x37e>
 8003bf4:	e014      	b.n	8003c20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf6:	f7fe fe65 	bl	80028c4 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7fe fe61 	bl	80028c4 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e09b      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c14:	4b40      	ldr	r3, [pc, #256]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1ee      	bne.n	8003bfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c20:	7dfb      	ldrb	r3, [r7, #23]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d105      	bne.n	8003c32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c26:	4b3c      	ldr	r3, [pc, #240]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	4a3b      	ldr	r2, [pc, #236]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8087 	beq.w	8003d4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c3c:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d061      	beq.n	8003d0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d146      	bne.n	8003cde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c50:	4b33      	ldr	r3, [pc, #204]	; (8003d20 <HAL_RCC_OscConfig+0x4cc>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fe fe35 	bl	80028c4 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5e:	f7fe fe31 	bl	80028c4 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e06d      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c70:	4b29      	ldr	r3, [pc, #164]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c84:	d108      	bne.n	8003c98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c86:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	4921      	ldr	r1, [pc, #132]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c98:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a19      	ldr	r1, [r3, #32]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	491b      	ldr	r1, [pc, #108]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb0:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <HAL_RCC_OscConfig+0x4cc>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fe fe05 	bl	80028c4 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fe fe01 	bl	80028c4 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e03d      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cd0:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x46a>
 8003cdc:	e035      	b.n	8003d4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cde:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <HAL_RCC_OscConfig+0x4cc>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce4:	f7fe fdee 	bl	80028c4 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fe fdea 	bl	80028c4 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e026      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_RCC_OscConfig+0x4c4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x498>
 8003d0a:	e01e      	b.n	8003d4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d107      	bne.n	8003d24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e019      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40007000 	.word	0x40007000
 8003d20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCC_OscConfig+0x500>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d106      	bne.n	8003d46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d001      	beq.n	8003d4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40021000 	.word	0x40021000

08003d58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0d0      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6c:	4b6a      	ldr	r3, [pc, #424]	; (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d910      	bls.n	8003d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7a:	4b67      	ldr	r3, [pc, #412]	; (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 0207 	bic.w	r2, r3, #7
 8003d82:	4965      	ldr	r1, [pc, #404]	; (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b63      	ldr	r3, [pc, #396]	; (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0b8      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d020      	beq.n	8003dea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003db4:	4b59      	ldr	r3, [pc, #356]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	4a58      	ldr	r2, [pc, #352]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dcc:	4b53      	ldr	r3, [pc, #332]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	4a52      	ldr	r2, [pc, #328]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003dd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003dd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd8:	4b50      	ldr	r3, [pc, #320]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	494d      	ldr	r1, [pc, #308]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d040      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d115      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e07f      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e16:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e073      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e26:	4b3d      	ldr	r3, [pc, #244]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e06b      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e36:	4b39      	ldr	r3, [pc, #228]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f023 0203 	bic.w	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4936      	ldr	r1, [pc, #216]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e48:	f7fe fd3c 	bl	80028c4 <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e50:	f7fe fd38 	bl	80028c4 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e053      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	4b2d      	ldr	r3, [pc, #180]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 020c 	and.w	r2, r3, #12
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d1eb      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e78:	4b27      	ldr	r3, [pc, #156]	; (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d210      	bcs.n	8003ea8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 0207 	bic.w	r2, r3, #7
 8003e8e:	4922      	ldr	r1, [pc, #136]	; (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e96:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e032      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb4:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4916      	ldr	r1, [pc, #88]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ed2:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	490e      	ldr	r1, [pc, #56]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ee6:	f000 f821 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 8003eea:	4602      	mov	r2, r0
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	091b      	lsrs	r3, r3, #4
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	490a      	ldr	r1, [pc, #40]	; (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef8:	5ccb      	ldrb	r3, [r1, r3]
 8003efa:	fa22 f303 	lsr.w	r3, r2, r3
 8003efe:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <HAL_RCC_ClockConfig+0x1cc>)
 8003f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <HAL_RCC_ClockConfig+0x1d0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fd fe44 	bl	8001b94 <HAL_InitTick>

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40022000 	.word	0x40022000
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	080091fc 	.word	0x080091fc
 8003f24:	20000014 	.word	0x20000014
 8003f28:	2000001c 	.word	0x2000001c

08003f2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f2c:	b490      	push	{r4, r7}
 8003f2e:	b08a      	sub	sp, #40	; 0x28
 8003f30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f32:	4b29      	ldr	r3, [pc, #164]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003f34:	1d3c      	adds	r4, r7, #4
 8003f36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f3c:	f240 2301 	movw	r3, #513	; 0x201
 8003f40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	2300      	movs	r3, #0
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f56:	4b21      	ldr	r3, [pc, #132]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d002      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0x40>
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d003      	beq.n	8003f72 <HAL_RCC_GetSysClockFreq+0x46>
 8003f6a:	e02b      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f6c:	4b1c      	ldr	r3, [pc, #112]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f6e:	623b      	str	r3, [r7, #32]
      break;
 8003f70:	e02b      	b.n	8003fca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	0c9b      	lsrs	r3, r3, #18
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	3328      	adds	r3, #40	; 0x28
 8003f7c:	443b      	add	r3, r7
 8003f7e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f82:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d012      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f8e:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	0c5b      	lsrs	r3, r3, #17
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	3328      	adds	r3, #40	; 0x28
 8003f9a:	443b      	add	r3, r7
 8003f9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003fa0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	4a0e      	ldr	r2, [pc, #56]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fa6:	fb03 f202 	mul.w	r2, r3, r2
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb2:	e004      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	4a0b      	ldr	r2, [pc, #44]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fb8:	fb02 f303 	mul.w	r3, r2, r3
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	623b      	str	r3, [r7, #32]
      break;
 8003fc2:	e002      	b.n	8003fca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fc6:	623b      	str	r3, [r7, #32]
      break;
 8003fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fca:	6a3b      	ldr	r3, [r7, #32]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3728      	adds	r7, #40	; 0x28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc90      	pop	{r4, r7}
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	080091a0 	.word	0x080091a0
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	007a1200 	.word	0x007a1200
 8003fe4:	003d0900 	.word	0x003d0900

08003fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fec:	4b02      	ldr	r3, [pc, #8]	; (8003ff8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	20000014 	.word	0x20000014

08003ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004000:	f7ff fff2 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	0a1b      	lsrs	r3, r3, #8
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	4903      	ldr	r1, [pc, #12]	; (8004020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004012:	5ccb      	ldrb	r3, [r1, r3]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000
 8004020:	0800920c 	.word	0x0800920c

08004024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004028:	f7ff ffde 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 800402c:	4602      	mov	r2, r0
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	0adb      	lsrs	r3, r3, #11
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	4903      	ldr	r1, [pc, #12]	; (8004048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800403a:	5ccb      	ldrb	r3, [r1, r3]
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000
 8004048:	0800920c 	.word	0x0800920c

0800404c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	220f      	movs	r2, #15
 800405a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <HAL_RCC_GetClockConfig+0x58>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 0203 	and.w	r2, r3, #3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <HAL_RCC_GetClockConfig+0x58>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_RCC_GetClockConfig+0x58>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004080:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <HAL_RCC_GetClockConfig+0x58>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	08db      	lsrs	r3, r3, #3
 8004086:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_RCC_GetClockConfig+0x5c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0207 	and.w	r2, r3, #7
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40022000 	.word	0x40022000

080040ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <RCC_Delay+0x34>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0a      	ldr	r2, [pc, #40]	; (80040e4 <RCC_Delay+0x38>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	0a5b      	lsrs	r3, r3, #9
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040c8:	bf00      	nop
  }
  while (Delay --);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1e5a      	subs	r2, r3, #1
 80040ce:	60fa      	str	r2, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f9      	bne.n	80040c8 <RCC_Delay+0x1c>
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	20000014 	.word	0x20000014
 80040e4:	10624dd3 	.word	0x10624dd3

080040e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d07d      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004104:	2300      	movs	r3, #0
 8004106:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004108:	4b4f      	ldr	r3, [pc, #316]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10d      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004114:	4b4c      	ldr	r3, [pc, #304]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	4a4b      	ldr	r2, [pc, #300]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411e:	61d3      	str	r3, [r2, #28]
 8004120:	4b49      	ldr	r3, [pc, #292]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800412c:	2301      	movs	r3, #1
 800412e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004130:	4b46      	ldr	r3, [pc, #280]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d118      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800413c:	4b43      	ldr	r3, [pc, #268]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a42      	ldr	r2, [pc, #264]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004146:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004148:	f7fe fbbc 	bl	80028c4 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414e:	e008      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004150:	f7fe fbb8 	bl	80028c4 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e06d      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004162:	4b3a      	ldr	r3, [pc, #232]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800416e:	4b36      	ldr	r3, [pc, #216]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004176:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d02e      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	429a      	cmp	r2, r3
 800418a:	d027      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800418c:	4b2e      	ldr	r3, [pc, #184]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004194:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004196:	4b2e      	ldr	r3, [pc, #184]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004198:	2201      	movs	r2, #1
 800419a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800419c:	4b2c      	ldr	r3, [pc, #176]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041a2:	4a29      	ldr	r2, [pc, #164]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d014      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b2:	f7fe fb87 	bl	80028c4 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b8:	e00a      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ba:	f7fe fb83 	bl	80028c4 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e036      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d0:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0ee      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041dc:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4917      	ldr	r1, [pc, #92]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041ee:	7dfb      	ldrb	r3, [r7, #23]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d105      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f4:	4b14      	ldr	r3, [pc, #80]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	4a13      	ldr	r2, [pc, #76]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800420c:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	490b      	ldr	r1, [pc, #44]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421a:	4313      	orrs	r3, r2
 800421c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	4904      	ldr	r1, [pc, #16]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004238:	4313      	orrs	r3, r2
 800423a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40021000 	.word	0x40021000
 800424c:	40007000 	.word	0x40007000
 8004250:	42420440 	.word	0x42420440

08004254 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b08d      	sub	sp, #52	; 0x34
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800425c:	4b58      	ldr	r3, [pc, #352]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800425e:	f107 040c 	add.w	r4, r7, #12
 8004262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004268:	f240 2301 	movw	r3, #513	; 0x201
 800426c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
 8004272:	2300      	movs	r3, #0
 8004274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004276:	2300      	movs	r3, #0
 8004278:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
 800427e:	2300      	movs	r3, #0
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b10      	cmp	r3, #16
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b10      	cmp	r3, #16
 800428c:	f200 808e 	bhi.w	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d049      	beq.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d079      	beq.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800429c:	e086      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800429e:	4b49      	ldr	r3, [pc, #292]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80042a4:	4b47      	ldr	r3, [pc, #284]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d07f      	beq.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	0c9b      	lsrs	r3, r3, #18
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	3330      	adds	r3, #48	; 0x30
 80042ba:	443b      	add	r3, r7
 80042bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80042c0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d017      	beq.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042cc:	4b3d      	ldr	r3, [pc, #244]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	0c5b      	lsrs	r3, r3, #17
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	3330      	adds	r3, #48	; 0x30
 80042d8:	443b      	add	r3, r7
 80042da:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00d      	beq.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80042ea:	4a37      	ldr	r2, [pc, #220]	; (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	fb02 f303 	mul.w	r3, r2, r3
 80042f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042fa:	e004      	b.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	4a33      	ldr	r2, [pc, #204]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004300:	fb02 f303 	mul.w	r3, r2, r3
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004306:	4b2f      	ldr	r3, [pc, #188]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004312:	d102      	bne.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8004314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004318:	e04a      	b.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4a2c      	ldr	r2, [pc, #176]	; (80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004320:	fba2 2303 	umull	r2, r3, r2, r3
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004328:	e042      	b.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800432a:	4b26      	ldr	r3, [pc, #152]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800433a:	d108      	bne.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8004346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434a:	62bb      	str	r3, [r7, #40]	; 0x28
 800434c:	e01f      	b.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004358:	d109      	bne.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800435a:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8004366:	f649 4340 	movw	r3, #40000	; 0x9c40
 800436a:	62bb      	str	r3, [r7, #40]	; 0x28
 800436c:	e00f      	b.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004374:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004378:	d11c      	bne.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d016      	beq.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8004386:	f24f 4324 	movw	r3, #62500	; 0xf424
 800438a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800438c:	e012      	b.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800438e:	e011      	b.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004390:	f7ff fe48 	bl	8004024 <HAL_RCC_GetPCLK2Freq>
 8004394:	4602      	mov	r2, r0
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	0b9b      	lsrs	r3, r3, #14
 800439c:	f003 0303 	and.w	r3, r3, #3
 80043a0:	3301      	adds	r3, #1
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80043aa:	e004      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80043ac:	bf00      	nop
 80043ae:	e002      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80043b0:	bf00      	nop
 80043b2:	e000      	b.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80043b4:	bf00      	nop
    }
  }
  return (frequency);
 80043b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3734      	adds	r7, #52	; 0x34
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd90      	pop	{r4, r7, pc}
 80043c0:	080091b0 	.word	0x080091b0
 80043c4:	40021000 	.word	0x40021000
 80043c8:	007a1200 	.word	0x007a1200
 80043cc:	003d0900 	.word	0x003d0900
 80043d0:	aaaaaaab 	.word	0xaaaaaaab

080043d4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e084      	b.n	80044f4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	7c5b      	ldrb	r3, [r3, #17]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d105      	bne.n	8004400 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fd fb5e 	bl	8001abc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f952 	bl	80046b0 <HAL_RTC_WaitForSynchro>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d004      	beq.n	800441c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2204      	movs	r2, #4
 8004416:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e06b      	b.n	80044f4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fa0b 	bl	8004838 <RTC_EnterInitMode>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2204      	movs	r2, #4
 800442c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e060      	b.n	80044f4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0207 	bic.w	r2, r2, #7
 8004440:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800444a:	4b2c      	ldr	r3, [pc, #176]	; (80044fc <HAL_RTC_Init+0x128>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	4a2b      	ldr	r2, [pc, #172]	; (80044fc <HAL_RTC_Init+0x128>)
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004456:	4b29      	ldr	r3, [pc, #164]	; (80044fc <HAL_RTC_Init+0x128>)
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	4926      	ldr	r1, [pc, #152]	; (80044fc <HAL_RTC_Init+0x128>)
 8004464:	4313      	orrs	r3, r2
 8004466:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004470:	d003      	beq.n	800447a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e00e      	b.n	8004498 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800447a:	2001      	movs	r0, #1
 800447c:	f7ff feea 	bl	8004254 <HAL_RCCEx_GetPeriphCLKFreq>
 8004480:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d104      	bne.n	8004492 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2204      	movs	r2, #4
 800448c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e030      	b.n	80044f4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3b01      	subs	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f023 010f 	bic.w	r1, r3, #15
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	0c1a      	lsrs	r2, r3, #16
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	0c1b      	lsrs	r3, r3, #16
 80044b6:	041b      	lsls	r3, r3, #16
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	b291      	uxth	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	430b      	orrs	r3, r1
 80044c2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f9df 	bl	8004888 <RTC_ExitInitMode>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2204      	movs	r2, #4
 80044d4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e00c      	b.n	80044f4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80044f2:	2300      	movs	r3, #0
  }
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40006c00 	.word	0x40006c00

08004500 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	2300      	movs	r3, #0
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	2300      	movs	r3, #0
 800451a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_RTC_GetTime+0x28>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0b5      	b.n	8004698 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e0ac      	b.n	8004698 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 f8e3 	bl	800470a <RTC_ReadTimeCounter>
 8004544:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	4a55      	ldr	r2, [pc, #340]	; (80046a0 <HAL_RTC_GetTime+0x1a0>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	0adb      	lsrs	r3, r3, #11
 8004550:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4b52      	ldr	r3, [pc, #328]	; (80046a0 <HAL_RTC_GetTime+0x1a0>)
 8004556:	fba3 1302 	umull	r1, r3, r3, r2
 800455a:	0adb      	lsrs	r3, r3, #11
 800455c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004560:	fb01 f303 	mul.w	r3, r1, r3
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	4a4f      	ldr	r2, [pc, #316]	; (80046a4 <HAL_RTC_GetTime+0x1a4>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	b2da      	uxtb	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	4a4a      	ldr	r2, [pc, #296]	; (80046a0 <HAL_RTC_GetTime+0x1a0>)
 8004578:	fba2 1203 	umull	r1, r2, r2, r3
 800457c:	0ad2      	lsrs	r2, r2, #11
 800457e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004582:	fb01 f202 	mul.w	r2, r1, r2
 8004586:	1a9a      	subs	r2, r3, r2
 8004588:	4b46      	ldr	r3, [pc, #280]	; (80046a4 <HAL_RTC_GetTime+0x1a4>)
 800458a:	fba3 1302 	umull	r1, r3, r3, r2
 800458e:	0959      	lsrs	r1, r3, #5
 8004590:	460b      	mov	r3, r1
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	1a5b      	subs	r3, r3, r1
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	1ad1      	subs	r1, r2, r3
 800459a:	b2ca      	uxtb	r2, r1
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b17      	cmp	r3, #23
 80045a4:	d955      	bls.n	8004652 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4a3f      	ldr	r2, [pc, #252]	; (80046a8 <HAL_RTC_GetTime+0x1a8>)
 80045aa:	fba2 2303 	umull	r2, r3, r2, r3
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80045b2:	6939      	ldr	r1, [r7, #16]
 80045b4:	4b3c      	ldr	r3, [pc, #240]	; (80046a8 <HAL_RTC_GetTime+0x1a8>)
 80045b6:	fba3 2301 	umull	r2, r3, r3, r1
 80045ba:	091a      	lsrs	r2, r3, #4
 80045bc:	4613      	mov	r3, r2
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4413      	add	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	1aca      	subs	r2, r1, r3
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f8f3 	bl	80047b8 <RTC_ReadAlarmCounter>
 80045d2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045da:	d008      	beq.n	80045ee <HAL_RTC_GetTime+0xee>
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d904      	bls.n	80045ee <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	e002      	b.n	80045f4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80045ee:	f04f 33ff 	mov.w	r3, #4294967295
 80045f2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	4a2d      	ldr	r2, [pc, #180]	; (80046ac <HAL_RTC_GetTime+0x1ac>)
 80045f8:	fb02 f303 	mul.w	r3, r2, r3
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004602:	69b9      	ldr	r1, [r7, #24]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f8b0 	bl	800476a <RTC_WriteTimeCounter>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e041      	b.n	8004698 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461a:	d00c      	beq.n	8004636 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	4413      	add	r3, r2
 8004622:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004624:	69f9      	ldr	r1, [r7, #28]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f8df 	bl	80047ea <RTC_WriteAlarmCounter>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e030      	b.n	8004698 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004636:	69f9      	ldr	r1, [r7, #28]
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 f8d6 	bl	80047ea <RTC_WriteAlarmCounter>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e027      	b.n	8004698 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004648:	6979      	ldr	r1, [r7, #20]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f961 	bl	8004912 <RTC_DateUpdate>
 8004650:	e003      	b.n	800465a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01a      	beq.n	8004696 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f000 f937 	bl	80048d8 <RTC_ByteToBcd2>
 800466a:	4603      	mov	r3, r0
 800466c:	461a      	mov	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	785b      	ldrb	r3, [r3, #1]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f92e 	bl	80048d8 <RTC_ByteToBcd2>
 800467c:	4603      	mov	r3, r0
 800467e:	461a      	mov	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	789b      	ldrb	r3, [r3, #2]
 8004688:	4618      	mov	r0, r3
 800468a:	f000 f925 	bl	80048d8 <RTC_ByteToBcd2>
 800468e:	4603      	mov	r3, r0
 8004690:	461a      	mov	r2, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3720      	adds	r7, #32
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	91a2b3c5 	.word	0x91a2b3c5
 80046a4:	88888889 	.word	0x88888889
 80046a8:	aaaaaaab 	.word	0xaaaaaaab
 80046ac:	00015180 	.word	0x00015180

080046b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e01d      	b.n	8004702 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0208 	bic.w	r2, r2, #8
 80046d4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80046d6:	f7fe f8f5 	bl	80028c4 <HAL_GetTick>
 80046da:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80046dc:	e009      	b.n	80046f2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80046de:	f7fe f8f1 	bl	80028c4 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046ec:	d901      	bls.n	80046f2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e007      	b.n	8004702 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0ee      	beq.n	80046de <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800470a:	b480      	push	{r7}
 800470c:	b087      	sub	sp, #28
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	827b      	strh	r3, [r7, #18]
 8004716:	2300      	movs	r3, #0
 8004718:	823b      	strh	r3, [r7, #16]
 800471a:	2300      	movs	r3, #0
 800471c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800473a:	8a7a      	ldrh	r2, [r7, #18]
 800473c:	8a3b      	ldrh	r3, [r7, #16]
 800473e:	429a      	cmp	r2, r3
 8004740:	d008      	beq.n	8004754 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004742:	8a3b      	ldrh	r3, [r7, #16]
 8004744:	041a      	lsls	r2, r3, #16
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	b29b      	uxth	r3, r3
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	e004      	b.n	800475e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004754:	8a7b      	ldrh	r3, [r7, #18]
 8004756:	041a      	lsls	r2, r3, #16
 8004758:	89fb      	ldrh	r3, [r7, #14]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800475e:	697b      	ldr	r3, [r7, #20]
}
 8004760:	4618      	mov	r0, r3
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	bc80      	pop	{r7}
 8004768:	4770      	bx	lr

0800476a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f85d 	bl	8004838 <RTC_EnterInitMode>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
 8004788:	e011      	b.n	80047ae <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	0c12      	lsrs	r2, r2, #16
 8004792:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	b292      	uxth	r2, r2
 800479c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f872 	bl	8004888 <RTC_ExitInitMode>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	81fb      	strh	r3, [r7, #14]
 80047c4:	2300      	movs	r3, #0
 80047c6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80047d8:	89fb      	ldrh	r3, [r7, #14]
 80047da:	041a      	lsls	r2, r3, #16
 80047dc:	89bb      	ldrh	r3, [r7, #12]
 80047de:	4313      	orrs	r3, r2
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr

080047ea <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f81d 	bl	8004838 <RTC_EnterInitMode>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	73fb      	strb	r3, [r7, #15]
 8004808:	e011      	b.n	800482e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	0c12      	lsrs	r2, r2, #16
 8004812:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	b292      	uxth	r2, r2
 800481c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f832 	bl	8004888 <RTC_ExitInitMode>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800482e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004844:	f7fe f83e 	bl	80028c4 <HAL_GetTick>
 8004848:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800484a:	e009      	b.n	8004860 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800484c:	f7fe f83a 	bl	80028c4 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800485a:	d901      	bls.n	8004860 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e00f      	b.n	8004880 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0ee      	beq.n	800484c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0210 	orr.w	r2, r2, #16
 800487c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0210 	bic.w	r2, r2, #16
 80048a2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80048a4:	f7fe f80e 	bl	80028c4 <HAL_GetTick>
 80048a8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80048aa:	e009      	b.n	80048c0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80048ac:	f7fe f80a 	bl	80028c4 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ba:	d901      	bls.n	80048c0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e007      	b.n	80048d0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0ee      	beq.n	80048ac <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80048e6:	e005      	b.n	80048f4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	3301      	adds	r3, #1
 80048ec:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	3b0a      	subs	r3, #10
 80048f2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	2b09      	cmp	r3, #9
 80048f8:	d8f6      	bhi.n	80048e8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	b2da      	uxtb	r2, r3
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	4313      	orrs	r3, r2
 8004906:	b2db      	uxtb	r3, r3
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr

08004912 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b086      	sub	sp, #24
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	2300      	movs	r3, #0
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	7bdb      	ldrb	r3, [r3, #15]
 8004930:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	7b5b      	ldrb	r3, [r3, #13]
 8004936:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	7b9b      	ldrb	r3, [r3, #14]
 800493c:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800493e:	2300      	movs	r3, #0
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	e06f      	b.n	8004a24 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d011      	beq.n	800496e <RTC_DateUpdate+0x5c>
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b03      	cmp	r3, #3
 800494e:	d00e      	beq.n	800496e <RTC_DateUpdate+0x5c>
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	2b05      	cmp	r3, #5
 8004954:	d00b      	beq.n	800496e <RTC_DateUpdate+0x5c>
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	2b07      	cmp	r3, #7
 800495a:	d008      	beq.n	800496e <RTC_DateUpdate+0x5c>
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b08      	cmp	r3, #8
 8004960:	d005      	beq.n	800496e <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b0a      	cmp	r3, #10
 8004966:	d002      	beq.n	800496e <RTC_DateUpdate+0x5c>
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d117      	bne.n	800499e <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2b1e      	cmp	r3, #30
 8004972:	d803      	bhi.n	800497c <RTC_DateUpdate+0x6a>
      {
        day++;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3301      	adds	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800497a:	e050      	b.n	8004a1e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b0c      	cmp	r3, #12
 8004980:	d005      	beq.n	800498e <RTC_DateUpdate+0x7c>
        {
          month++;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	3301      	adds	r3, #1
 8004986:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004988:	2301      	movs	r3, #1
 800498a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800498c:	e047      	b.n	8004a1e <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800498e:	2301      	movs	r3, #1
 8004990:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004992:	2301      	movs	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]
          year++;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	3301      	adds	r3, #1
 800499a:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800499c:	e03f      	b.n	8004a1e <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d008      	beq.n	80049b6 <RTC_DateUpdate+0xa4>
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	2b06      	cmp	r3, #6
 80049a8:	d005      	beq.n	80049b6 <RTC_DateUpdate+0xa4>
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b09      	cmp	r3, #9
 80049ae:	d002      	beq.n	80049b6 <RTC_DateUpdate+0xa4>
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b0b      	cmp	r3, #11
 80049b4:	d10c      	bne.n	80049d0 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b1d      	cmp	r3, #29
 80049ba:	d803      	bhi.n	80049c4 <RTC_DateUpdate+0xb2>
      {
        day++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3301      	adds	r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80049c2:	e02c      	b.n	8004a1e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	3301      	adds	r3, #1
 80049c8:	613b      	str	r3, [r7, #16]
        day = 1U;
 80049ca:	2301      	movs	r3, #1
 80049cc:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80049ce:	e026      	b.n	8004a1e <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d123      	bne.n	8004a1e <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b1b      	cmp	r3, #27
 80049da:	d803      	bhi.n	80049e4 <RTC_DateUpdate+0xd2>
      {
        day++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3301      	adds	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	e01c      	b.n	8004a1e <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b1c      	cmp	r3, #28
 80049e8:	d111      	bne.n	8004a0e <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 f838 	bl	8004a64 <RTC_IsLeapYear>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <RTC_DateUpdate+0xf0>
        {
          day++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3301      	adds	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e00d      	b.n	8004a1e <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	3301      	adds	r3, #1
 8004a06:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	e007      	b.n	8004a1e <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b1d      	cmp	r3, #29
 8004a12:	d104      	bne.n	8004a1e <RTC_DateUpdate+0x10c>
      {
        month++;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	3301      	adds	r3, #1
 8004a18:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	3301      	adds	r3, #1
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d38b      	bcc.n	8004944 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6978      	ldr	r0, [r7, #20]
 8004a50:	f000 f83a 	bl	8004ac8 <RTC_WeekDayNum>
 8004a54:	4603      	mov	r3, r0
 8004a56:	461a      	mov	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	731a      	strb	r2, [r3, #12]
}
 8004a5c:	bf00      	nop
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e01d      	b.n	8004aba <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	4a10      	ldr	r2, [pc, #64]	; (8004ac4 <RTC_IsLeapYear+0x60>)
 8004a82:	fba2 1203 	umull	r1, r2, r2, r3
 8004a86:	0952      	lsrs	r2, r2, #5
 8004a88:	2164      	movs	r1, #100	; 0x64
 8004a8a:	fb01 f202 	mul.w	r2, r1, r2
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e00f      	b.n	8004aba <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004a9a:	88fb      	ldrh	r3, [r7, #6]
 8004a9c:	4a09      	ldr	r2, [pc, #36]	; (8004ac4 <RTC_IsLeapYear+0x60>)
 8004a9e:	fba2 1203 	umull	r1, r2, r2, r3
 8004aa2:	09d2      	lsrs	r2, r2, #7
 8004aa4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004aa8:	fb01 f202 	mul.w	r2, r1, r2
 8004aac:	1a9b      	subs	r3, r3, r2
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004ab8:	2300      	movs	r3, #0
  }
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr
 8004ac4:	51eb851f 	.word	0x51eb851f

08004ac8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	70fb      	strb	r3, [r7, #3]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60bb      	str	r3, [r7, #8]
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004ae6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d82d      	bhi.n	8004b4a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004aee:	78fa      	ldrb	r2, [r7, #3]
 8004af0:	4613      	mov	r3, r2
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	4413      	add	r3, r2
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	1a9b      	subs	r3, r3, r2
 8004afa:	4a2c      	ldr	r2, [pc, #176]	; (8004bac <RTC_WeekDayNum+0xe4>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	085a      	lsrs	r2, r3, #1
 8004b02:	78bb      	ldrb	r3, [r7, #2]
 8004b04:	441a      	add	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	441a      	add	r2, r3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	089b      	lsrs	r3, r3, #2
 8004b10:	441a      	add	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	4926      	ldr	r1, [pc, #152]	; (8004bb0 <RTC_WeekDayNum+0xe8>)
 8004b18:	fba1 1303 	umull	r1, r3, r1, r3
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	1ad2      	subs	r2, r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	4922      	ldr	r1, [pc, #136]	; (8004bb0 <RTC_WeekDayNum+0xe8>)
 8004b26:	fba1 1303 	umull	r1, r3, r1, r3
 8004b2a:	09db      	lsrs	r3, r3, #7
 8004b2c:	4413      	add	r3, r2
 8004b2e:	1d1a      	adds	r2, r3, #4
 8004b30:	4b20      	ldr	r3, [pc, #128]	; (8004bb4 <RTC_WeekDayNum+0xec>)
 8004b32:	fba3 1302 	umull	r1, r3, r3, r2
 8004b36:	1ad1      	subs	r1, r2, r3
 8004b38:	0849      	lsrs	r1, r1, #1
 8004b3a:	440b      	add	r3, r1
 8004b3c:	0899      	lsrs	r1, r3, #2
 8004b3e:	460b      	mov	r3, r1
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	1a5b      	subs	r3, r3, r1
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e029      	b.n	8004b9e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004b4a:	78fa      	ldrb	r2, [r7, #3]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	4413      	add	r3, r2
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	4a15      	ldr	r2, [pc, #84]	; (8004bac <RTC_WeekDayNum+0xe4>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	085a      	lsrs	r2, r3, #1
 8004b5e:	78bb      	ldrb	r3, [r7, #2]
 8004b60:	441a      	add	r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	441a      	add	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	089b      	lsrs	r3, r3, #2
 8004b6a:	441a      	add	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4910      	ldr	r1, [pc, #64]	; (8004bb0 <RTC_WeekDayNum+0xe8>)
 8004b70:	fba1 1303 	umull	r1, r3, r1, r3
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	1ad2      	subs	r2, r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	490d      	ldr	r1, [pc, #52]	; (8004bb0 <RTC_WeekDayNum+0xe8>)
 8004b7c:	fba1 1303 	umull	r1, r3, r1, r3
 8004b80:	09db      	lsrs	r3, r3, #7
 8004b82:	4413      	add	r3, r2
 8004b84:	1c9a      	adds	r2, r3, #2
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <RTC_WeekDayNum+0xec>)
 8004b88:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8c:	1ad1      	subs	r1, r2, r3
 8004b8e:	0849      	lsrs	r1, r1, #1
 8004b90:	440b      	add	r3, r1
 8004b92:	0899      	lsrs	r1, r3, #2
 8004b94:	460b      	mov	r3, r1
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	1a5b      	subs	r3, r3, r1
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	b2db      	uxtb	r3, r3
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr
 8004bac:	38e38e39 	.word	0x38e38e39
 8004bb0:	51eb851f 	.word	0x51eb851f
 8004bb4:	24924925 	.word	0x24924925

08004bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e041      	b.n	8004c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f839 	bl	8004c56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	f000 f9b4 	bl	8004f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d001      	beq.n	8004c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e03a      	b.n	8004cf6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a18      	ldr	r2, [pc, #96]	; (8004d00 <HAL_TIM_Base_Start_IT+0x98>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00e      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x58>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004caa:	d009      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x58>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a14      	ldr	r2, [pc, #80]	; (8004d04 <HAL_TIM_Base_Start_IT+0x9c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x58>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <HAL_TIM_Base_Start_IT+0xa0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d111      	bne.n	8004ce4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b06      	cmp	r3, #6
 8004cd0:	d010      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0201 	orr.w	r2, r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce2:	e007      	b.n	8004cf4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0201 	orr.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800

08004d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d122      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d11b      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0202 	mvn.w	r2, #2
 8004d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f8ed 	bl	8004f2e <HAL_TIM_IC_CaptureCallback>
 8004d54:	e005      	b.n	8004d62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f8e0 	bl	8004f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f8ef 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d122      	bne.n	8004dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d11b      	bne.n	8004dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0204 	mvn.w	r2, #4
 8004d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2202      	movs	r2, #2
 8004d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f8c3 	bl	8004f2e <HAL_TIM_IC_CaptureCallback>
 8004da8:	e005      	b.n	8004db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f8b6 	bl	8004f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f8c5 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d122      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d11b      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0208 	mvn.w	r2, #8
 8004de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2204      	movs	r2, #4
 8004de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f899 	bl	8004f2e <HAL_TIM_IC_CaptureCallback>
 8004dfc:	e005      	b.n	8004e0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f88c 	bl	8004f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f89b 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b10      	cmp	r3, #16
 8004e1c:	d122      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d11b      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0210 	mvn.w	r2, #16
 8004e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2208      	movs	r2, #8
 8004e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f86f 	bl	8004f2e <HAL_TIM_IC_CaptureCallback>
 8004e50:	e005      	b.n	8004e5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f862 	bl	8004f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f871 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d10e      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d107      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0201 	mvn.w	r2, #1
 8004e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fc fd88 	bl	80019a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9a:	2b80      	cmp	r3, #128	; 0x80
 8004e9c:	d10e      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea8:	2b80      	cmp	r3, #128	; 0x80
 8004eaa:	d107      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f8bf 	bl	800503a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec6:	2b40      	cmp	r3, #64	; 0x40
 8004ec8:	d10e      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d107      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f835 	bl	8004f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	d10e      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d107      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0220 	mvn.w	r2, #32
 8004f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f88a 	bl	8005028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bc80      	pop	{r7}
 8004f2c:	4770      	bx	lr

08004f2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr

08004f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a29      	ldr	r2, [pc, #164]	; (800501c <TIM_Base_SetConfig+0xb8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00b      	beq.n	8004f94 <TIM_Base_SetConfig+0x30>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f82:	d007      	beq.n	8004f94 <TIM_Base_SetConfig+0x30>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a26      	ldr	r2, [pc, #152]	; (8005020 <TIM_Base_SetConfig+0xbc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_Base_SetConfig+0x30>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a25      	ldr	r2, [pc, #148]	; (8005024 <TIM_Base_SetConfig+0xc0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d108      	bne.n	8004fa6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a1c      	ldr	r2, [pc, #112]	; (800501c <TIM_Base_SetConfig+0xb8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00b      	beq.n	8004fc6 <TIM_Base_SetConfig+0x62>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb4:	d007      	beq.n	8004fc6 <TIM_Base_SetConfig+0x62>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a19      	ldr	r2, [pc, #100]	; (8005020 <TIM_Base_SetConfig+0xbc>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d003      	beq.n	8004fc6 <TIM_Base_SetConfig+0x62>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a18      	ldr	r2, [pc, #96]	; (8005024 <TIM_Base_SetConfig+0xc0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d108      	bne.n	8004fd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a07      	ldr	r2, [pc, #28]	; (800501c <TIM_Base_SetConfig+0xb8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d103      	bne.n	800500c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	615a      	str	r2, [r3, #20]
}
 8005012:	bf00      	nop
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800

08005028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr

0800503a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr

0800504c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e047      	b.n	80050ee <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fc fd46 	bl	8001b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2224      	movs	r2, #36	; 0x24
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800508e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fb51 	bl	8005738 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695a      	ldr	r2, [r3, #20]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80050b4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695a      	ldr	r2, [r3, #20]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0208 	orr.w	r2, r2, #8
 80050c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08a      	sub	sp, #40	; 0x28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005118:	2300      	movs	r3, #0
 800511a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10d      	bne.n	800514a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <HAL_UART_IRQHandler+0x52>
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa4f 	bl	80055e6 <UART_Receive_IT>
      return;
 8005148:	e17b      	b.n	8005442 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 80b1 	beq.w	80052b4 <HAL_UART_IRQHandler+0x1bc>
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d105      	bne.n	8005168 <HAL_UART_IRQHandler+0x70>
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 80a6 	beq.w	80052b4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <HAL_UART_IRQHandler+0x90>
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	f043 0201 	orr.w	r2, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_UART_IRQHandler+0xb0>
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	f043 0202 	orr.w	r2, r3, #2
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <HAL_UART_IRQHandler+0xd0>
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	f043 0204 	orr.w	r2, r3, #4
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00f      	beq.n	80051f2 <HAL_UART_IRQHandler+0xfa>
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	f003 0320 	and.w	r3, r3, #32
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <HAL_UART_IRQHandler+0xee>
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f043 0208 	orr.w	r2, r3, #8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 811e 	beq.w	8005438 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b00      	cmp	r3, #0
 8005204:	d007      	beq.n	8005216 <HAL_UART_IRQHandler+0x11e>
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	f003 0320 	and.w	r3, r3, #32
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f9e8 	bl	80055e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005220:	2b00      	cmp	r3, #0
 8005222:	bf14      	ite	ne
 8005224:	2301      	movne	r3, #1
 8005226:	2300      	moveq	r3, #0
 8005228:	b2db      	uxtb	r3, r3
 800522a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b00      	cmp	r3, #0
 8005236:	d102      	bne.n	800523e <HAL_UART_IRQHandler+0x146>
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d031      	beq.n	80052a2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f92a 	bl	8005498 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524e:	2b00      	cmp	r3, #0
 8005250:	d023      	beq.n	800529a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695a      	ldr	r2, [r3, #20]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005260:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	2b00      	cmp	r3, #0
 8005268:	d013      	beq.n	8005292 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	4a76      	ldr	r2, [pc, #472]	; (8005448 <HAL_UART_IRQHandler+0x350>)
 8005270:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	4618      	mov	r0, r3
 8005278:	f7fd fc6c 	bl	8002b54 <HAL_DMA_Abort_IT>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d016      	beq.n	80052b0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800528c:	4610      	mov	r0, r2
 800528e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005290:	e00e      	b.n	80052b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f8ec 	bl	8005470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005298:	e00a      	b.n	80052b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f8e8 	bl	8005470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a0:	e006      	b.n	80052b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f8e4 	bl	8005470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80052ae:	e0c3      	b.n	8005438 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b0:	bf00      	nop
    return;
 80052b2:	e0c1      	b.n	8005438 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	f040 80a1 	bne.w	8005400 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 809b 	beq.w	8005400 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 8095 	beq.w	8005400 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d04e      	beq.n	8005398 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005304:	8a3b      	ldrh	r3, [r7, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 8098 	beq.w	800543c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005310:	8a3a      	ldrh	r2, [r7, #16]
 8005312:	429a      	cmp	r2, r3
 8005314:	f080 8092 	bcs.w	800543c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	8a3a      	ldrh	r2, [r7, #16]
 800531c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	2b20      	cmp	r3, #32
 8005326:	d02b      	beq.n	8005380 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005336:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695a      	ldr	r2, [r3, #20]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695a      	ldr	r2, [r3, #20]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005356:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68da      	ldr	r2, [r3, #12]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 0210 	bic.w	r2, r2, #16
 8005374:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	4618      	mov	r0, r3
 800537c:	f7fd fbaf 	bl	8002ade <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005388:	b29b      	uxth	r3, r3
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	b29b      	uxth	r3, r3
 800538e:	4619      	mov	r1, r3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f876 	bl	8005482 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005396:	e051      	b.n	800543c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d047      	beq.n	8005440 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80053b0:	8a7b      	ldrh	r3, [r7, #18]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d044      	beq.n	8005440 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053c4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695a      	ldr	r2, [r3, #20]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0201 	bic.w	r2, r2, #1
 80053d4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0210 	bic.w	r2, r2, #16
 80053f2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053f4:	8a7b      	ldrh	r3, [r7, #18]
 80053f6:	4619      	mov	r1, r3
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f842 	bl	8005482 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80053fe:	e01f      	b.n	8005440 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005406:	2b00      	cmp	r3, #0
 8005408:	d008      	beq.n	800541c <HAL_UART_IRQHandler+0x324>
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f87f 	bl	8005518 <UART_Transmit_IT>
    return;
 800541a:	e012      	b.n	8005442 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00d      	beq.n	8005442 <HAL_UART_IRQHandler+0x34a>
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f8c0 	bl	80055b6 <UART_EndTransmit_IT>
    return;
 8005436:	e004      	b.n	8005442 <HAL_UART_IRQHandler+0x34a>
    return;
 8005438:	bf00      	nop
 800543a:	e002      	b.n	8005442 <HAL_UART_IRQHandler+0x34a>
      return;
 800543c:	bf00      	nop
 800543e:	e000      	b.n	8005442 <HAL_UART_IRQHandler+0x34a>
      return;
 8005440:	bf00      	nop
  }
}
 8005442:	3728      	adds	r7, #40	; 0x28
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	080054f1 	.word	0x080054f1

0800544c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr

0800545e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr

08005470 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr

08005482 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	460b      	mov	r3, r1
 800548c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr

08005498 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80054ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695a      	ldr	r2, [r3, #20]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0201 	bic.w	r2, r2, #1
 80054be:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d107      	bne.n	80054d8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0210 	bic.w	r2, r2, #16
 80054d6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr

080054f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f7ff ffb0 	bl	8005470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005510:	bf00      	nop
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b21      	cmp	r3, #33	; 0x21
 800552a:	d13e      	bne.n	80055aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005534:	d114      	bne.n	8005560 <UART_Transmit_IT+0x48>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d110      	bne.n	8005560 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005552:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	1c9a      	adds	r2, r3, #2
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	621a      	str	r2, [r3, #32]
 800555e:	e008      	b.n	8005572 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	1c59      	adds	r1, r3, #1
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6211      	str	r1, [r2, #32]
 800556a:	781a      	ldrb	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	b29b      	uxth	r3, r3
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	4619      	mov	r1, r3
 8005580:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10f      	bne.n	80055a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005594:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	e000      	b.n	80055ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055aa:	2302      	movs	r3, #2
  }
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr

080055b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b082      	sub	sp, #8
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff ff38 	bl	800544c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b086      	sub	sp, #24
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b22      	cmp	r3, #34	; 0x22
 80055f8:	f040 8099 	bne.w	800572e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005604:	d117      	bne.n	8005636 <UART_Receive_IT+0x50>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d113      	bne.n	8005636 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800560e:	2300      	movs	r3, #0
 8005610:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	b29b      	uxth	r3, r3
 8005620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005624:	b29a      	uxth	r2, r3
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	1c9a      	adds	r2, r3, #2
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	629a      	str	r2, [r3, #40]	; 0x28
 8005634:	e026      	b.n	8005684 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800563c:	2300      	movs	r3, #0
 800563e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005648:	d007      	beq.n	800565a <UART_Receive_IT+0x74>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10a      	bne.n	8005668 <UART_Receive_IT+0x82>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	b2da      	uxtb	r2, r3
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	e008      	b.n	800567a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	b2db      	uxtb	r3, r3
 8005670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005674:	b2da      	uxtb	r2, r3
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005688:	b29b      	uxth	r3, r3
 800568a:	3b01      	subs	r3, #1
 800568c:	b29b      	uxth	r3, r3
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	4619      	mov	r1, r3
 8005692:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005694:	2b00      	cmp	r3, #0
 8005696:	d148      	bne.n	800572a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0220 	bic.w	r2, r2, #32
 80056a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0201 	bic.w	r2, r2, #1
 80056c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d123      	bne.n	8005720 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0210 	bic.w	r2, r2, #16
 80056ec:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	2b10      	cmp	r3, #16
 80056fa:	d10a      	bne.n	8005712 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff feb2 	bl	8005482 <HAL_UARTEx_RxEventCallback>
 800571e:	e002      	b.n	8005726 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7ff fe9c 	bl	800545e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	e002      	b.n	8005730 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	e000      	b.n	8005730 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800572e:	2302      	movs	r3, #2
  }
}
 8005730:	4618      	mov	r0, r3
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005772:	f023 030c 	bic.w	r3, r3, #12
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6812      	ldr	r2, [r2, #0]
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	430b      	orrs	r3, r1
 800577e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a2c      	ldr	r2, [pc, #176]	; (800584c <UART_SetConfig+0x114>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d103      	bne.n	80057a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057a0:	f7fe fc40 	bl	8004024 <HAL_RCC_GetPCLK2Freq>
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	e002      	b.n	80057ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057a8:	f7fe fc28 	bl	8003ffc <HAL_RCC_GetPCLK1Freq>
 80057ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	009a      	lsls	r2, r3, #2
 80057b8:	441a      	add	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c4:	4a22      	ldr	r2, [pc, #136]	; (8005850 <UART_SetConfig+0x118>)
 80057c6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	0119      	lsls	r1, r3, #4
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	009a      	lsls	r2, r3, #2
 80057d8:	441a      	add	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057e4:	4b1a      	ldr	r3, [pc, #104]	; (8005850 <UART_SetConfig+0x118>)
 80057e6:	fba3 0302 	umull	r0, r3, r3, r2
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	2064      	movs	r0, #100	; 0x64
 80057ee:	fb00 f303 	mul.w	r3, r0, r3
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	3332      	adds	r3, #50	; 0x32
 80057f8:	4a15      	ldr	r2, [pc, #84]	; (8005850 <UART_SetConfig+0x118>)
 80057fa:	fba2 2303 	umull	r2, r3, r2, r3
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005804:	4419      	add	r1, r3
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	009a      	lsls	r2, r3, #2
 8005810:	441a      	add	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	fbb2 f2f3 	udiv	r2, r2, r3
 800581c:	4b0c      	ldr	r3, [pc, #48]	; (8005850 <UART_SetConfig+0x118>)
 800581e:	fba3 0302 	umull	r0, r3, r3, r2
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	2064      	movs	r0, #100	; 0x64
 8005826:	fb00 f303 	mul.w	r3, r0, r3
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	3332      	adds	r3, #50	; 0x32
 8005830:	4a07      	ldr	r2, [pc, #28]	; (8005850 <UART_SetConfig+0x118>)
 8005832:	fba2 2303 	umull	r2, r3, r2, r3
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	f003 020f 	and.w	r2, r3, #15
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	440a      	add	r2, r1
 8005842:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40013800 	.word	0x40013800
 8005850:	51eb851f 	.word	0x51eb851f

08005854 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800585a:	f3ef 8305 	mrs	r3, IPSR
 800585e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005860:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10f      	bne.n	8005886 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005866:	f3ef 8310 	mrs	r3, PRIMASK
 800586a:	607b      	str	r3, [r7, #4]
  return(result);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d109      	bne.n	8005886 <osKernelInitialize+0x32>
 8005872:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <osKernelInitialize+0x60>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b02      	cmp	r3, #2
 8005878:	d109      	bne.n	800588e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800587a:	f3ef 8311 	mrs	r3, BASEPRI
 800587e:	603b      	str	r3, [r7, #0]
  return(result);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005886:	f06f 0305 	mvn.w	r3, #5
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e00c      	b.n	80058a8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800588e:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <osKernelInitialize+0x60>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d105      	bne.n	80058a2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005896:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <osKernelInitialize+0x60>)
 8005898:	2201      	movs	r2, #1
 800589a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	e002      	b.n	80058a8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80058a2:	f04f 33ff 	mov.w	r3, #4294967295
 80058a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80058a8:	68fb      	ldr	r3, [r7, #12]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bc80      	pop	{r7}
 80058b2:	4770      	bx	lr
 80058b4:	20000248 	.word	0x20000248

080058b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058be:	f3ef 8305 	mrs	r3, IPSR
 80058c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80058c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10f      	bne.n	80058ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ca:	f3ef 8310 	mrs	r3, PRIMASK
 80058ce:	607b      	str	r3, [r7, #4]
  return(result);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <osKernelStart+0x32>
 80058d6:	4b11      	ldr	r3, [pc, #68]	; (800591c <osKernelStart+0x64>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d109      	bne.n	80058f2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058de:	f3ef 8311 	mrs	r3, BASEPRI
 80058e2:	603b      	str	r3, [r7, #0]
  return(result);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80058ea:	f06f 0305 	mvn.w	r3, #5
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	e00e      	b.n	8005910 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80058f2:	4b0a      	ldr	r3, [pc, #40]	; (800591c <osKernelStart+0x64>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d107      	bne.n	800590a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80058fa:	4b08      	ldr	r3, [pc, #32]	; (800591c <osKernelStart+0x64>)
 80058fc:	2202      	movs	r2, #2
 80058fe:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005900:	f001 fa1c 	bl	8006d3c <vTaskStartScheduler>
      stat = osOK;
 8005904:	2300      	movs	r3, #0
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	e002      	b.n	8005910 <osKernelStart+0x58>
    } else {
      stat = osError;
 800590a:	f04f 33ff 	mov.w	r3, #4294967295
 800590e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005910:	68fb      	ldr	r3, [r7, #12]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20000248 	.word	0x20000248

08005920 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005920:	b580      	push	{r7, lr}
 8005922:	b092      	sub	sp, #72	; 0x48
 8005924:	af04      	add	r7, sp, #16
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005930:	f3ef 8305 	mrs	r3, IPSR
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005938:	2b00      	cmp	r3, #0
 800593a:	f040 8094 	bne.w	8005a66 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800593e:	f3ef 8310 	mrs	r3, PRIMASK
 8005942:	623b      	str	r3, [r7, #32]
  return(result);
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	2b00      	cmp	r3, #0
 8005948:	f040 808d 	bne.w	8005a66 <osThreadNew+0x146>
 800594c:	4b48      	ldr	r3, [pc, #288]	; (8005a70 <osThreadNew+0x150>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b02      	cmp	r3, #2
 8005952:	d106      	bne.n	8005962 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005954:	f3ef 8311 	mrs	r3, BASEPRI
 8005958:	61fb      	str	r3, [r7, #28]
  return(result);
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	2b00      	cmp	r3, #0
 800595e:	f040 8082 	bne.w	8005a66 <osThreadNew+0x146>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d07e      	beq.n	8005a66 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800596c:	2318      	movs	r3, #24
 800596e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005970:	2300      	movs	r3, #0
 8005972:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005974:	f107 031b 	add.w	r3, r7, #27
 8005978:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800597a:	f04f 33ff 	mov.w	r3, #4294967295
 800597e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d045      	beq.n	8005a12 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <osThreadNew+0x74>
        name = attr->name;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <osThreadNew+0x9a>
 80059a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059aa:	2b38      	cmp	r3, #56	; 0x38
 80059ac:	d805      	bhi.n	80059ba <osThreadNew+0x9a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <osThreadNew+0x9e>
        return (NULL);
 80059ba:	2300      	movs	r3, #0
 80059bc:	e054      	b.n	8005a68 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	089b      	lsrs	r3, r3, #2
 80059cc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00e      	beq.n	80059f4 <osThreadNew+0xd4>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	2bbb      	cmp	r3, #187	; 0xbb
 80059dc:	d90a      	bls.n	80059f4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d006      	beq.n	80059f4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <osThreadNew+0xd4>
        mem = 1;
 80059ee:	2301      	movs	r3, #1
 80059f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80059f2:	e010      	b.n	8005a16 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10c      	bne.n	8005a16 <osThreadNew+0xf6>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d108      	bne.n	8005a16 <osThreadNew+0xf6>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d104      	bne.n	8005a16 <osThreadNew+0xf6>
          mem = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a10:	e001      	b.n	8005a16 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005a12:	2300      	movs	r3, #0
 8005a14:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d110      	bne.n	8005a3e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a24:	9202      	str	r2, [sp, #8]
 8005a26:	9301      	str	r3, [sp, #4]
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 fe12 	bl	800665c <xTaskCreateStatic>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	e013      	b.n	8005a66 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d110      	bne.n	8005a66 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	f107 0314 	add.w	r3, r7, #20
 8005a4c:	9301      	str	r3, [sp, #4]
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 fe5c 	bl	8006714 <xTaskCreate>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d001      	beq.n	8005a66 <osThreadNew+0x146>
          hTask = NULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a66:	697b      	ldr	r3, [r7, #20]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3738      	adds	r7, #56	; 0x38
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000248 	.word	0x20000248

08005a74 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a7c:	f3ef 8305 	mrs	r3, IPSR
 8005a80:	613b      	str	r3, [r7, #16]
  return(result);
 8005a82:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10f      	bne.n	8005aa8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a88:	f3ef 8310 	mrs	r3, PRIMASK
 8005a8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d109      	bne.n	8005aa8 <osDelay+0x34>
 8005a94:	4b0d      	ldr	r3, [pc, #52]	; (8005acc <osDelay+0x58>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d109      	bne.n	8005ab0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a9c:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <osDelay+0x3c>
    stat = osErrorISR;
 8005aa8:	f06f 0305 	mvn.w	r3, #5
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e007      	b.n	8005ac0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fffc 	bl	8006ab8 <vTaskDelay>
    }
  }

  return (stat);
 8005ac0:	697b      	ldr	r3, [r7, #20]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000248 	.word	0x20000248

08005ad0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4a06      	ldr	r2, [pc, #24]	; (8005af8 <vApplicationGetIdleTaskMemory+0x28>)
 8005ae0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	4a05      	ldr	r2, [pc, #20]	; (8005afc <vApplicationGetIdleTaskMemory+0x2c>)
 8005ae6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2280      	movs	r2, #128	; 0x80
 8005aec:	601a      	str	r2, [r3, #0]
}
 8005aee:	bf00      	nop
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bc80      	pop	{r7}
 8005af6:	4770      	bx	lr
 8005af8:	2000024c 	.word	0x2000024c
 8005afc:	20000308 	.word	0x20000308

08005b00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4a07      	ldr	r2, [pc, #28]	; (8005b2c <vApplicationGetTimerTaskMemory+0x2c>)
 8005b10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	4a06      	ldr	r2, [pc, #24]	; (8005b30 <vApplicationGetTimerTaskMemory+0x30>)
 8005b16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b1e:	601a      	str	r2, [r3, #0]
}
 8005b20:	bf00      	nop
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bc80      	pop	{r7}
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20000508 	.word	0x20000508
 8005b30:	200005c4 	.word	0x200005c4

08005b34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f103 0208 	add.w	r2, r3, #8
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f103 0208 	add.w	r2, r3, #8
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f103 0208 	add.w	r2, r3, #8
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr

08005b72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	601a      	str	r2, [r3, #0]
}
 8005bc6:	bf00      	nop
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr

08005bd0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be6:	d103      	bne.n	8005bf0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	e00c      	b.n	8005c0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	e002      	b.n	8005bfe <vListInsert+0x2e>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d2f6      	bcs.n	8005bf8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	601a      	str	r2, [r3, #0]
}
 8005c36:	bf00      	nop
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bc80      	pop	{r7}
 8005c3e:	4770      	bx	lr

08005c40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6892      	ldr	r2, [r2, #8]
 8005c56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6852      	ldr	r2, [r2, #4]
 8005c60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d103      	bne.n	8005c74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	1e5a      	subs	r2, r3, #1
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bc80      	pop	{r7}
 8005c90:	4770      	bx	lr
	...

08005c94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005cbe:	f002 f985 	bl	8007fcc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cce:	fb01 f303 	mul.w	r3, r1, r3
 8005cd2:	441a      	add	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	68f9      	ldr	r1, [r7, #12]
 8005cf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cf4:	fb01 f303 	mul.w	r3, r1, r3
 8005cf8:	441a      	add	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	22ff      	movs	r2, #255	; 0xff
 8005d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	22ff      	movs	r2, #255	; 0xff
 8005d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d114      	bne.n	8005d3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d01a      	beq.n	8005d52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3310      	adds	r3, #16
 8005d20:	4618      	mov	r0, r3
 8005d22:	f001 faa7 	bl	8007274 <xTaskRemoveFromEventList>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d012      	beq.n	8005d52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d2c:	4b0c      	ldr	r3, [pc, #48]	; (8005d60 <xQueueGenericReset+0xcc>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	e009      	b.n	8005d52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3310      	adds	r3, #16
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff fef6 	bl	8005b34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3324      	adds	r3, #36	; 0x24
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff fef1 	bl	8005b34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d52:	f002 f96b 	bl	800802c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d56:	2301      	movs	r3, #1
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	e000ed04 	.word	0xe000ed04

08005d64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08e      	sub	sp, #56	; 0x38
 8005d68:	af02      	add	r7, sp, #8
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <xQueueGenericCreateStatic+0x52>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <xQueueGenericCreateStatic+0x56>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <xQueueGenericCreateStatic+0x58>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10a      	bne.n	8005dd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	623b      	str	r3, [r7, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	e7fe      	b.n	8005dd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d102      	bne.n	8005de2 <xQueueGenericCreateStatic+0x7e>
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <xQueueGenericCreateStatic+0x82>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <xQueueGenericCreateStatic+0x84>
 8005de6:	2300      	movs	r3, #0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	61fb      	str	r3, [r7, #28]
}
 8005dfe:	bf00      	nop
 8005e00:	e7fe      	b.n	8005e00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e02:	2350      	movs	r3, #80	; 0x50
 8005e04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b50      	cmp	r3, #80	; 0x50
 8005e0a:	d00a      	beq.n	8005e22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	61bb      	str	r3, [r7, #24]
}
 8005e1e:	bf00      	nop
 8005e20:	e7fe      	b.n	8005e20 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00d      	beq.n	8005e48 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e34:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	68b9      	ldr	r1, [r7, #8]
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 f805 	bl	8005e52 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3730      	adds	r7, #48	; 0x30
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	607a      	str	r2, [r7, #4]
 8005e5e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d103      	bne.n	8005e6e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	e002      	b.n	8005e74 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e80:	2101      	movs	r1, #1
 8005e82:	69b8      	ldr	r0, [r7, #24]
 8005e84:	f7ff ff06 	bl	8005c94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	78fa      	ldrb	r2, [r7, #3]
 8005e8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e90:	bf00      	nop
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08e      	sub	sp, #56	; 0x38
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <xQueueGenericSend+0x32>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ec6:	bf00      	nop
 8005ec8:	e7fe      	b.n	8005ec8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d103      	bne.n	8005ed8 <xQueueGenericSend+0x40>
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <xQueueGenericSend+0x44>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <xQueueGenericSend+0x46>
 8005edc:	2300      	movs	r3, #0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10a      	bne.n	8005ef8 <xQueueGenericSend+0x60>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ef4:	bf00      	nop
 8005ef6:	e7fe      	b.n	8005ef6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d103      	bne.n	8005f06 <xQueueGenericSend+0x6e>
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <xQueueGenericSend+0x72>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e000      	b.n	8005f0c <xQueueGenericSend+0x74>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10a      	bne.n	8005f26 <xQueueGenericSend+0x8e>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	623b      	str	r3, [r7, #32]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f26:	f001 fb6b 	bl	8007600 <xTaskGetSchedulerState>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d102      	bne.n	8005f36 <xQueueGenericSend+0x9e>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <xQueueGenericSend+0xa2>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <xQueueGenericSend+0xa4>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <xQueueGenericSend+0xbe>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	61fb      	str	r3, [r7, #28]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f56:	f002 f839 	bl	8007fcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d302      	bcc.n	8005f6c <xQueueGenericSend+0xd4>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d129      	bne.n	8005fc0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	68b9      	ldr	r1, [r7, #8]
 8005f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f72:	f000 fa07 	bl	8006384 <prvCopyDataToQueue>
 8005f76:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d010      	beq.n	8005fa2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	3324      	adds	r3, #36	; 0x24
 8005f84:	4618      	mov	r0, r3
 8005f86:	f001 f975 	bl	8007274 <xTaskRemoveFromEventList>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d013      	beq.n	8005fb8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f90:	4b3f      	ldr	r3, [pc, #252]	; (8006090 <xQueueGenericSend+0x1f8>)
 8005f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	e00a      	b.n	8005fb8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d007      	beq.n	8005fb8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fa8:	4b39      	ldr	r3, [pc, #228]	; (8006090 <xQueueGenericSend+0x1f8>)
 8005faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fb8:	f002 f838 	bl	800802c <vPortExitCritical>
				return pdPASS;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e063      	b.n	8006088 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d103      	bne.n	8005fce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fc6:	f002 f831 	bl	800802c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e05c      	b.n	8006088 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fd4:	f107 0314 	add.w	r3, r7, #20
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f001 f9af 	bl	800733c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fe2:	f002 f823 	bl	800802c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fe6:	f000 ff19 	bl	8006e1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fea:	f001 ffef 	bl	8007fcc <vPortEnterCritical>
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ff4:	b25b      	sxtb	r3, r3
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffa:	d103      	bne.n	8006004 <xQueueGenericSend+0x16c>
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800600a:	b25b      	sxtb	r3, r3
 800600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006010:	d103      	bne.n	800601a <xQueueGenericSend+0x182>
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800601a:	f002 f807 	bl	800802c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800601e:	1d3a      	adds	r2, r7, #4
 8006020:	f107 0314 	add.w	r3, r7, #20
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f001 f99e 	bl	8007368 <xTaskCheckForTimeOut>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d124      	bne.n	800607c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006034:	f000 fa9e 	bl	8006574 <prvIsQueueFull>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d018      	beq.n	8006070 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	3310      	adds	r3, #16
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	4611      	mov	r1, r2
 8006046:	4618      	mov	r0, r3
 8006048:	f001 f8c4 	bl	80071d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800604c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800604e:	f000 fa29 	bl	80064a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006052:	f000 fef1 	bl	8006e38 <xTaskResumeAll>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	f47f af7c 	bne.w	8005f56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800605e:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <xQueueGenericSend+0x1f8>)
 8006060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	e772      	b.n	8005f56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006072:	f000 fa17 	bl	80064a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006076:	f000 fedf 	bl	8006e38 <xTaskResumeAll>
 800607a:	e76c      	b.n	8005f56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800607c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800607e:	f000 fa11 	bl	80064a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006082:	f000 fed9 	bl	8006e38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006086:	2300      	movs	r3, #0
		}
	}
}
 8006088:	4618      	mov	r0, r3
 800608a:	3738      	adds	r7, #56	; 0x38
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	e000ed04 	.word	0xe000ed04

08006094 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08e      	sub	sp, #56	; 0x38
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10a      	bne.n	80060c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060be:	bf00      	nop
 80060c0:	e7fe      	b.n	80060c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d103      	bne.n	80060d0 <xQueueGenericSendFromISR+0x3c>
 80060c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <xQueueGenericSendFromISR+0x40>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <xQueueGenericSendFromISR+0x42>
 80060d4:	2300      	movs	r3, #0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	623b      	str	r3, [r7, #32]
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d103      	bne.n	80060fe <xQueueGenericSendFromISR+0x6a>
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d101      	bne.n	8006102 <xQueueGenericSendFromISR+0x6e>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <xQueueGenericSendFromISR+0x70>
 8006102:	2300      	movs	r3, #0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	61fb      	str	r3, [r7, #28]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800611e:	f002 f817 	bl	8008150 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006122:	f3ef 8211 	mrs	r2, BASEPRI
 8006126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	61ba      	str	r2, [r7, #24]
 8006138:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800613a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800613c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006146:	429a      	cmp	r2, r3
 8006148:	d302      	bcc.n	8006150 <xQueueGenericSendFromISR+0xbc>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d12c      	bne.n	80061aa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006160:	f000 f910 	bl	8006384 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006164:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616c:	d112      	bne.n	8006194 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	2b00      	cmp	r3, #0
 8006174:	d016      	beq.n	80061a4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	3324      	adds	r3, #36	; 0x24
 800617a:	4618      	mov	r0, r3
 800617c:	f001 f87a 	bl	8007274 <xTaskRemoveFromEventList>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00e      	beq.n	80061a4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00b      	beq.n	80061a4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	e007      	b.n	80061a4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006194:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006198:	3301      	adds	r3, #1
 800619a:	b2db      	uxtb	r3, r3
 800619c:	b25a      	sxtb	r2, r3
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061a4:	2301      	movs	r3, #1
 80061a6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80061a8:	e001      	b.n	80061ae <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
 80061ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3738      	adds	r7, #56	; 0x38
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08c      	sub	sp, #48	; 0x30
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061d0:	2300      	movs	r3, #0
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10a      	bne.n	80061f4 <xQueueReceive+0x30>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	623b      	str	r3, [r7, #32]
}
 80061f0:	bf00      	nop
 80061f2:	e7fe      	b.n	80061f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d103      	bne.n	8006202 <xQueueReceive+0x3e>
 80061fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <xQueueReceive+0x42>
 8006202:	2301      	movs	r3, #1
 8006204:	e000      	b.n	8006208 <xQueueReceive+0x44>
 8006206:	2300      	movs	r3, #0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <xQueueReceive+0x5e>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	61fb      	str	r3, [r7, #28]
}
 800621e:	bf00      	nop
 8006220:	e7fe      	b.n	8006220 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006222:	f001 f9ed 	bl	8007600 <xTaskGetSchedulerState>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d102      	bne.n	8006232 <xQueueReceive+0x6e>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <xQueueReceive+0x72>
 8006232:	2301      	movs	r3, #1
 8006234:	e000      	b.n	8006238 <xQueueReceive+0x74>
 8006236:	2300      	movs	r3, #0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10a      	bne.n	8006252 <xQueueReceive+0x8e>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	61bb      	str	r3, [r7, #24]
}
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006252:	f001 febb 	bl	8007fcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	2b00      	cmp	r3, #0
 8006260:	d01f      	beq.n	80062a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006262:	68b9      	ldr	r1, [r7, #8]
 8006264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006266:	f000 f8f7 	bl	8006458 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	1e5a      	subs	r2, r3, #1
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00f      	beq.n	800629a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	3310      	adds	r3, #16
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fff8 	bl	8007274 <xTaskRemoveFromEventList>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d007      	beq.n	800629a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800628a:	4b3d      	ldr	r3, [pc, #244]	; (8006380 <xQueueReceive+0x1bc>)
 800628c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800629a:	f001 fec7 	bl	800802c <vPortExitCritical>
				return pdPASS;
 800629e:	2301      	movs	r3, #1
 80062a0:	e069      	b.n	8006376 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d103      	bne.n	80062b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062a8:	f001 fec0 	bl	800802c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062ac:	2300      	movs	r3, #0
 80062ae:	e062      	b.n	8006376 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062b6:	f107 0310 	add.w	r3, r7, #16
 80062ba:	4618      	mov	r0, r3
 80062bc:	f001 f83e 	bl	800733c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062c0:	2301      	movs	r3, #1
 80062c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062c4:	f001 feb2 	bl	800802c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062c8:	f000 fda8 	bl	8006e1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062cc:	f001 fe7e 	bl	8007fcc <vPortEnterCritical>
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062d6:	b25b      	sxtb	r3, r3
 80062d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062dc:	d103      	bne.n	80062e6 <xQueueReceive+0x122>
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ec:	b25b      	sxtb	r3, r3
 80062ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f2:	d103      	bne.n	80062fc <xQueueReceive+0x138>
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062fc:	f001 fe96 	bl	800802c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006300:	1d3a      	adds	r2, r7, #4
 8006302:	f107 0310 	add.w	r3, r7, #16
 8006306:	4611      	mov	r1, r2
 8006308:	4618      	mov	r0, r3
 800630a:	f001 f82d 	bl	8007368 <xTaskCheckForTimeOut>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d123      	bne.n	800635c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006316:	f000 f917 	bl	8006548 <prvIsQueueEmpty>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d017      	beq.n	8006350 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	3324      	adds	r3, #36	; 0x24
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	4611      	mov	r1, r2
 8006328:	4618      	mov	r0, r3
 800632a:	f000 ff53 	bl	80071d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800632e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006330:	f000 f8b8 	bl	80064a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006334:	f000 fd80 	bl	8006e38 <xTaskResumeAll>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d189      	bne.n	8006252 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800633e:	4b10      	ldr	r3, [pc, #64]	; (8006380 <xQueueReceive+0x1bc>)
 8006340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	e780      	b.n	8006252 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006352:	f000 f8a7 	bl	80064a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006356:	f000 fd6f 	bl	8006e38 <xTaskResumeAll>
 800635a:	e77a      	b.n	8006252 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800635c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800635e:	f000 f8a1 	bl	80064a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006362:	f000 fd69 	bl	8006e38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006368:	f000 f8ee 	bl	8006548 <prvIsQueueEmpty>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	f43f af6f 	beq.w	8006252 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006374:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006376:	4618      	mov	r0, r3
 8006378:	3730      	adds	r7, #48	; 0x30
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	e000ed04 	.word	0xe000ed04

08006384 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10d      	bne.n	80063be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d14d      	bne.n	8006446 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f001 f944 	bl	800763c <xTaskPriorityDisinherit>
 80063b4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	605a      	str	r2, [r3, #4]
 80063bc:	e043      	b.n	8006446 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d119      	bne.n	80063f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6898      	ldr	r0, [r3, #8]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	461a      	mov	r2, r3
 80063ce:	68b9      	ldr	r1, [r7, #8]
 80063d0:	f002 f900 	bl	80085d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063dc:	441a      	add	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d32b      	bcc.n	8006446 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	609a      	str	r2, [r3, #8]
 80063f6:	e026      	b.n	8006446 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	68d8      	ldr	r0, [r3, #12]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	461a      	mov	r2, r3
 8006402:	68b9      	ldr	r1, [r7, #8]
 8006404:	f002 f8e6 	bl	80085d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006410:	425b      	negs	r3, r3
 8006412:	441a      	add	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	68da      	ldr	r2, [r3, #12]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d207      	bcs.n	8006434 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	425b      	negs	r3, r3
 800642e:	441a      	add	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b02      	cmp	r3, #2
 8006438:	d105      	bne.n	8006446 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	3b01      	subs	r3, #1
 8006444:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800644e:	697b      	ldr	r3, [r7, #20]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3718      	adds	r7, #24
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	2b00      	cmp	r3, #0
 8006468:	d018      	beq.n	800649c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	441a      	add	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68da      	ldr	r2, [r3, #12]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	429a      	cmp	r2, r3
 8006482:	d303      	bcc.n	800648c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68d9      	ldr	r1, [r3, #12]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	461a      	mov	r2, r3
 8006496:	6838      	ldr	r0, [r7, #0]
 8006498:	f002 f89c 	bl	80085d4 <memcpy>
	}
}
 800649c:	bf00      	nop
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064ac:	f001 fd8e 	bl	8007fcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064b8:	e011      	b.n	80064de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d012      	beq.n	80064e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3324      	adds	r3, #36	; 0x24
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fed4 	bl	8007274 <xTaskRemoveFromEventList>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064d2:	f000 ffab 	bl	800742c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064d6:	7bfb      	ldrb	r3, [r7, #15]
 80064d8:	3b01      	subs	r3, #1
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	dce9      	bgt.n	80064ba <prvUnlockQueue+0x16>
 80064e6:	e000      	b.n	80064ea <prvUnlockQueue+0x46>
					break;
 80064e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	22ff      	movs	r2, #255	; 0xff
 80064ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80064f2:	f001 fd9b 	bl	800802c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064f6:	f001 fd69 	bl	8007fcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006500:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006502:	e011      	b.n	8006528 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d012      	beq.n	8006532 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3310      	adds	r3, #16
 8006510:	4618      	mov	r0, r3
 8006512:	f000 feaf 	bl	8007274 <xTaskRemoveFromEventList>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800651c:	f000 ff86 	bl	800742c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006520:	7bbb      	ldrb	r3, [r7, #14]
 8006522:	3b01      	subs	r3, #1
 8006524:	b2db      	uxtb	r3, r3
 8006526:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006528:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800652c:	2b00      	cmp	r3, #0
 800652e:	dce9      	bgt.n	8006504 <prvUnlockQueue+0x60>
 8006530:	e000      	b.n	8006534 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006532:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	22ff      	movs	r2, #255	; 0xff
 8006538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800653c:	f001 fd76 	bl	800802c <vPortExitCritical>
}
 8006540:	bf00      	nop
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006550:	f001 fd3c 	bl	8007fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006558:	2b00      	cmp	r3, #0
 800655a:	d102      	bne.n	8006562 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800655c:	2301      	movs	r3, #1
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	e001      	b.n	8006566 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006566:	f001 fd61 	bl	800802c <vPortExitCritical>

	return xReturn;
 800656a:	68fb      	ldr	r3, [r7, #12]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800657c:	f001 fd26 	bl	8007fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006588:	429a      	cmp	r2, r3
 800658a:	d102      	bne.n	8006592 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800658c:	2301      	movs	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	e001      	b.n	8006596 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006596:	f001 fd49 	bl	800802c <vPortExitCritical>

	return xReturn;
 800659a:	68fb      	ldr	r3, [r7, #12]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	e014      	b.n	80065de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80065b4:	4a0e      	ldr	r2, [pc, #56]	; (80065f0 <vQueueAddToRegistry+0x4c>)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10b      	bne.n	80065d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80065c0:	490b      	ldr	r1, [pc, #44]	; (80065f0 <vQueueAddToRegistry+0x4c>)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065ca:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <vQueueAddToRegistry+0x4c>)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	4413      	add	r3, r2
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065d6:	e006      	b.n	80065e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3301      	adds	r3, #1
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b07      	cmp	r3, #7
 80065e2:	d9e7      	bls.n	80065b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bc80      	pop	{r7}
 80065ee:	4770      	bx	lr
 80065f0:	200009c4 	.word	0x200009c4

080065f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006604:	f001 fce2 	bl	8007fcc <vPortEnterCritical>
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800660e:	b25b      	sxtb	r3, r3
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006614:	d103      	bne.n	800661e <vQueueWaitForMessageRestricted+0x2a>
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006624:	b25b      	sxtb	r3, r3
 8006626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662a:	d103      	bne.n	8006634 <vQueueWaitForMessageRestricted+0x40>
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006634:	f001 fcfa 	bl	800802c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	2b00      	cmp	r3, #0
 800663e:	d106      	bne.n	800664e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	3324      	adds	r3, #36	; 0x24
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fde7 	bl	800721c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800664e:	6978      	ldr	r0, [r7, #20]
 8006650:	f7ff ff28 	bl	80064a4 <prvUnlockQueue>
	}
 8006654:	bf00      	nop
 8006656:	3718      	adds	r7, #24
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08e      	sub	sp, #56	; 0x38
 8006660:	af04      	add	r7, sp, #16
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800666a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10a      	bne.n	8006686 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	623b      	str	r3, [r7, #32]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10a      	bne.n	80066a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	61fb      	str	r3, [r7, #28]
}
 800669e:	bf00      	nop
 80066a0:	e7fe      	b.n	80066a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066a2:	23bc      	movs	r3, #188	; 0xbc
 80066a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	2bbc      	cmp	r3, #188	; 0xbc
 80066aa:	d00a      	beq.n	80066c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	61bb      	str	r3, [r7, #24]
}
 80066be:	bf00      	nop
 80066c0:	e7fe      	b.n	80066c0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01e      	beq.n	8006706 <xTaskCreateStatic+0xaa>
 80066c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d01b      	beq.n	8006706 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066e0:	2300      	movs	r3, #0
 80066e2:	9303      	str	r3, [sp, #12]
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	9302      	str	r3, [sp, #8]
 80066e8:	f107 0314 	add.w	r3, r7, #20
 80066ec:	9301      	str	r3, [sp, #4]
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 f851 	bl	80067a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006700:	f000 f8ec 	bl	80068dc <prvAddNewTaskToReadyList>
 8006704:	e001      	b.n	800670a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006706:	2300      	movs	r3, #0
 8006708:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800670a:	697b      	ldr	r3, [r7, #20]
	}
 800670c:	4618      	mov	r0, r3
 800670e:	3728      	adds	r7, #40	; 0x28
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006714:	b580      	push	{r7, lr}
 8006716:	b08c      	sub	sp, #48	; 0x30
 8006718:	af04      	add	r7, sp, #16
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	603b      	str	r3, [r7, #0]
 8006720:	4613      	mov	r3, r2
 8006722:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006724:	88fb      	ldrh	r3, [r7, #6]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4618      	mov	r0, r3
 800672a:	f001 fd4f 	bl	80081cc <pvPortMalloc>
 800672e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00e      	beq.n	8006754 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006736:	20bc      	movs	r0, #188	; 0xbc
 8006738:	f001 fd48 	bl	80081cc <pvPortMalloc>
 800673c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	631a      	str	r2, [r3, #48]	; 0x30
 800674a:	e005      	b.n	8006758 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800674c:	6978      	ldr	r0, [r7, #20]
 800674e:	f001 fe01 	bl	8008354 <vPortFree>
 8006752:	e001      	b.n	8006758 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006754:	2300      	movs	r3, #0
 8006756:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d017      	beq.n	800678e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006766:	88fa      	ldrh	r2, [r7, #6]
 8006768:	2300      	movs	r3, #0
 800676a:	9303      	str	r3, [sp, #12]
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	9302      	str	r3, [sp, #8]
 8006770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006772:	9301      	str	r3, [sp, #4]
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	68b9      	ldr	r1, [r7, #8]
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 f80f 	bl	80067a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006782:	69f8      	ldr	r0, [r7, #28]
 8006784:	f000 f8aa 	bl	80068dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006788:	2301      	movs	r3, #1
 800678a:	61bb      	str	r3, [r7, #24]
 800678c:	e002      	b.n	8006794 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800678e:	f04f 33ff 	mov.w	r3, #4294967295
 8006792:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006794:	69bb      	ldr	r3, [r7, #24]
	}
 8006796:	4618      	mov	r0, r3
 8006798:	3720      	adds	r7, #32
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	461a      	mov	r2, r3
 80067b8:	21a5      	movs	r1, #165	; 0xa5
 80067ba:	f001 ff19 	bl	80085f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067c8:	3b01      	subs	r3, #1
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	f023 0307 	bic.w	r3, r3, #7
 80067d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00a      	beq.n	80067f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	617b      	str	r3, [r7, #20]
}
 80067f4:	bf00      	nop
 80067f6:	e7fe      	b.n	80067f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067f8:	2300      	movs	r3, #0
 80067fa:	61fb      	str	r3, [r7, #28]
 80067fc:	e012      	b.n	8006824 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	4413      	add	r3, r2
 8006804:	7819      	ldrb	r1, [r3, #0]
 8006806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	4413      	add	r3, r2
 800680c:	3334      	adds	r3, #52	; 0x34
 800680e:	460a      	mov	r2, r1
 8006810:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	4413      	add	r3, r2
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d006      	beq.n	800682c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	3301      	adds	r3, #1
 8006822:	61fb      	str	r3, [r7, #28]
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	2b0f      	cmp	r3, #15
 8006828:	d9e9      	bls.n	80067fe <prvInitialiseNewTask+0x5e>
 800682a:	e000      	b.n	800682e <prvInitialiseNewTask+0x8e>
		{
			break;
 800682c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	2b37      	cmp	r3, #55	; 0x37
 800683a:	d901      	bls.n	8006840 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800683c:	2337      	movs	r3, #55	; 0x37
 800683e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006844:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800684a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	2200      	movs	r2, #0
 8006850:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	3304      	adds	r3, #4
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff f98b 	bl	8005b72 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	3318      	adds	r3, #24
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff f986 	bl	8005b72 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800686a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800687a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	2200      	movs	r2, #0
 8006888:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	3354      	adds	r3, #84	; 0x54
 8006890:	2260      	movs	r2, #96	; 0x60
 8006892:	2100      	movs	r1, #0
 8006894:	4618      	mov	r0, r3
 8006896:	f001 feab 	bl	80085f0 <memset>
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	4a0c      	ldr	r2, [pc, #48]	; (80068d0 <prvInitialiseNewTask+0x130>)
 800689e:	659a      	str	r2, [r3, #88]	; 0x58
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	4a0c      	ldr	r2, [pc, #48]	; (80068d4 <prvInitialiseNewTask+0x134>)
 80068a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	4a0b      	ldr	r2, [pc, #44]	; (80068d8 <prvInitialiseNewTask+0x138>)
 80068aa:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	68f9      	ldr	r1, [r7, #12]
 80068b0:	69b8      	ldr	r0, [r7, #24]
 80068b2:	f001 fa97 	bl	8007de4 <pxPortInitialiseStack>
 80068b6:	4602      	mov	r2, r0
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068c8:	bf00      	nop
 80068ca:	3720      	adds	r7, #32
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	08009234 	.word	0x08009234
 80068d4:	08009254 	.word	0x08009254
 80068d8:	08009214 	.word	0x08009214

080068dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068e4:	f001 fb72 	bl	8007fcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068e8:	4b2d      	ldr	r3, [pc, #180]	; (80069a0 <prvAddNewTaskToReadyList+0xc4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3301      	adds	r3, #1
 80068ee:	4a2c      	ldr	r2, [pc, #176]	; (80069a0 <prvAddNewTaskToReadyList+0xc4>)
 80068f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068f2:	4b2c      	ldr	r3, [pc, #176]	; (80069a4 <prvAddNewTaskToReadyList+0xc8>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d109      	bne.n	800690e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068fa:	4a2a      	ldr	r2, [pc, #168]	; (80069a4 <prvAddNewTaskToReadyList+0xc8>)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006900:	4b27      	ldr	r3, [pc, #156]	; (80069a0 <prvAddNewTaskToReadyList+0xc4>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d110      	bne.n	800692a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006908:	f000 fdb4 	bl	8007474 <prvInitialiseTaskLists>
 800690c:	e00d      	b.n	800692a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800690e:	4b26      	ldr	r3, [pc, #152]	; (80069a8 <prvAddNewTaskToReadyList+0xcc>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d109      	bne.n	800692a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006916:	4b23      	ldr	r3, [pc, #140]	; (80069a4 <prvAddNewTaskToReadyList+0xc8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006920:	429a      	cmp	r2, r3
 8006922:	d802      	bhi.n	800692a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006924:	4a1f      	ldr	r2, [pc, #124]	; (80069a4 <prvAddNewTaskToReadyList+0xc8>)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800692a:	4b20      	ldr	r3, [pc, #128]	; (80069ac <prvAddNewTaskToReadyList+0xd0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3301      	adds	r3, #1
 8006930:	4a1e      	ldr	r2, [pc, #120]	; (80069ac <prvAddNewTaskToReadyList+0xd0>)
 8006932:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006934:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <prvAddNewTaskToReadyList+0xd0>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006940:	4b1b      	ldr	r3, [pc, #108]	; (80069b0 <prvAddNewTaskToReadyList+0xd4>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d903      	bls.n	8006950 <prvAddNewTaskToReadyList+0x74>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	4a18      	ldr	r2, [pc, #96]	; (80069b0 <prvAddNewTaskToReadyList+0xd4>)
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006954:	4613      	mov	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4a15      	ldr	r2, [pc, #84]	; (80069b4 <prvAddNewTaskToReadyList+0xd8>)
 800695e:	441a      	add	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3304      	adds	r3, #4
 8006964:	4619      	mov	r1, r3
 8006966:	4610      	mov	r0, r2
 8006968:	f7ff f90f 	bl	8005b8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800696c:	f001 fb5e 	bl	800802c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006970:	4b0d      	ldr	r3, [pc, #52]	; (80069a8 <prvAddNewTaskToReadyList+0xcc>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00e      	beq.n	8006996 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006978:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <prvAddNewTaskToReadyList+0xc8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006982:	429a      	cmp	r2, r3
 8006984:	d207      	bcs.n	8006996 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006986:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <prvAddNewTaskToReadyList+0xdc>)
 8006988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006996:	bf00      	nop
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20000ed8 	.word	0x20000ed8
 80069a4:	20000a04 	.word	0x20000a04
 80069a8:	20000ee4 	.word	0x20000ee4
 80069ac:	20000ef4 	.word	0x20000ef4
 80069b0:	20000ee0 	.word	0x20000ee0
 80069b4:	20000a08 	.word	0x20000a08
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08a      	sub	sp, #40	; 0x28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80069c6:	2300      	movs	r3, #0
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	617b      	str	r3, [r7, #20]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10a      	bne.n	8006a02 <vTaskDelayUntil+0x46>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	613b      	str	r3, [r7, #16]
}
 80069fe:	bf00      	nop
 8006a00:	e7fe      	b.n	8006a00 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006a02:	4b2a      	ldr	r3, [pc, #168]	; (8006aac <vTaskDelayUntil+0xf0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <vTaskDelayUntil+0x64>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	60fb      	str	r3, [r7, #12]
}
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006a20:	f000 f9fc 	bl	8006e1c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006a24:	4b22      	ldr	r3, [pc, #136]	; (8006ab0 <vTaskDelayUntil+0xf4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	4413      	add	r3, r2
 8006a32:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6a3a      	ldr	r2, [r7, #32]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d20b      	bcs.n	8006a56 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d211      	bcs.n	8006a6c <vTaskDelayUntil+0xb0>
 8006a48:	69fa      	ldr	r2, [r7, #28]
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d90d      	bls.n	8006a6c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006a50:	2301      	movs	r3, #1
 8006a52:	627b      	str	r3, [r7, #36]	; 0x24
 8006a54:	e00a      	b.n	8006a6c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69fa      	ldr	r2, [r7, #28]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d303      	bcc.n	8006a68 <vTaskDelayUntil+0xac>
 8006a60:	69fa      	ldr	r2, [r7, #28]
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d901      	bls.n	8006a6c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	69fa      	ldr	r2, [r7, #28]
 8006a70:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d006      	beq.n	8006a86 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006a78:	69fa      	ldr	r2, [r7, #28]
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	2100      	movs	r1, #0
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fe49 	bl	8007718 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006a86:	f000 f9d7 	bl	8006e38 <xTaskResumeAll>
 8006a8a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d107      	bne.n	8006aa2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006a92:	4b08      	ldr	r3, [pc, #32]	; (8006ab4 <vTaskDelayUntil+0xf8>)
 8006a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006aa2:	bf00      	nop
 8006aa4:	3728      	adds	r7, #40	; 0x28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20000f00 	.word	0x20000f00
 8006ab0:	20000edc 	.word	0x20000edc
 8006ab4:	e000ed04 	.word	0xe000ed04

08006ab8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d017      	beq.n	8006afa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006aca:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <vTaskDelay+0x60>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <vTaskDelay+0x30>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	60bb      	str	r3, [r7, #8]
}
 8006ae4:	bf00      	nop
 8006ae6:	e7fe      	b.n	8006ae6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ae8:	f000 f998 	bl	8006e1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006aec:	2100      	movs	r1, #0
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fe12 	bl	8007718 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006af4:	f000 f9a0 	bl	8006e38 <xTaskResumeAll>
 8006af8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d107      	bne.n	8006b10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006b00:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <vTaskDelay+0x64>)
 8006b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b10:	bf00      	nop
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	20000f00 	.word	0x20000f00
 8006b1c:	e000ed04 	.word	0xe000ed04

08006b20 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006b28:	f001 fa50 	bl	8007fcc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d102      	bne.n	8006b38 <vTaskSuspend+0x18>
 8006b32:	4b30      	ldr	r3, [pc, #192]	; (8006bf4 <vTaskSuspend+0xd4>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	e000      	b.n	8006b3a <vTaskSuspend+0x1a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff f87d 	bl	8005c40 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3318      	adds	r3, #24
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff f874 	bl	8005c40 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4826      	ldr	r0, [pc, #152]	; (8006bf8 <vTaskSuspend+0xd8>)
 8006b60:	f7ff f813 	bl	8005b8a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d103      	bne.n	8006b78 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006b78:	f001 fa58 	bl	800802c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006b7c:	4b1f      	ldr	r3, [pc, #124]	; (8006bfc <vTaskSuspend+0xdc>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d005      	beq.n	8006b90 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006b84:	f001 fa22 	bl	8007fcc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006b88:	f000 fd16 	bl	80075b8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006b8c:	f001 fa4e 	bl	800802c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006b90:	4b18      	ldr	r3, [pc, #96]	; (8006bf4 <vTaskSuspend+0xd4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d127      	bne.n	8006bea <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8006b9a:	4b18      	ldr	r3, [pc, #96]	; (8006bfc <vTaskSuspend+0xdc>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d017      	beq.n	8006bd2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006ba2:	4b17      	ldr	r3, [pc, #92]	; (8006c00 <vTaskSuspend+0xe0>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00a      	beq.n	8006bc0 <vTaskSuspend+0xa0>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	60bb      	str	r3, [r7, #8]
}
 8006bbc:	bf00      	nop
 8006bbe:	e7fe      	b.n	8006bbe <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8006bc0:	4b10      	ldr	r3, [pc, #64]	; (8006c04 <vTaskSuspend+0xe4>)
 8006bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bd0:	e00b      	b.n	8006bea <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8006bd2:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <vTaskSuspend+0xd8>)
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <vTaskSuspend+0xe8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d103      	bne.n	8006be6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8006bde:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <vTaskSuspend+0xd4>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	601a      	str	r2, [r3, #0]
	}
 8006be4:	e001      	b.n	8006bea <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8006be6:	f000 fa91 	bl	800710c <vTaskSwitchContext>
	}
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000a04 	.word	0x20000a04
 8006bf8:	20000ec4 	.word	0x20000ec4
 8006bfc:	20000ee4 	.word	0x20000ee4
 8006c00:	20000f00 	.word	0x20000f00
 8006c04:	e000ed04 	.word	0xe000ed04
 8006c08:	20000ed8 	.word	0x20000ed8

08006c0c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	60fb      	str	r3, [r7, #12]
}
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	4a0e      	ldr	r2, [pc, #56]	; (8006c78 <prvTaskIsTaskSuspended+0x6c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d101      	bne.n	8006c46 <prvTaskIsTaskSuspended+0x3a>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <prvTaskIsTaskSuspended+0x3c>
 8006c46:	2300      	movs	r3, #0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00f      	beq.n	8006c6c <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c50:	4a0a      	ldr	r2, [pc, #40]	; (8006c7c <prvTaskIsTaskSuspended+0x70>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00a      	beq.n	8006c6c <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <prvTaskIsTaskSuspended+0x56>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e000      	b.n	8006c64 <prvTaskIsTaskSuspended+0x58>
 8006c62:	2300      	movs	r3, #0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c6c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006c6e:	4618      	mov	r0, r3
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bc80      	pop	{r7}
 8006c76:	4770      	bx	lr
 8006c78:	20000ec4 	.word	0x20000ec4
 8006c7c:	20000e98 	.word	0x20000e98

08006c80 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10a      	bne.n	8006ca8 <vTaskResume+0x28>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	60bb      	str	r3, [r7, #8]
}
 8006ca4:	bf00      	nop
 8006ca6:	e7fe      	b.n	8006ca6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d03a      	beq.n	8006d24 <vTaskResume+0xa4>
 8006cae:	4b1f      	ldr	r3, [pc, #124]	; (8006d2c <vTaskResume+0xac>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d035      	beq.n	8006d24 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8006cb8:	f001 f988 	bl	8007fcc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f7ff ffa5 	bl	8006c0c <prvTaskIsTaskSuspended>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d02b      	beq.n	8006d20 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3304      	adds	r3, #4
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fe ffb7 	bl	8005c40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd6:	4b16      	ldr	r3, [pc, #88]	; (8006d30 <vTaskResume+0xb0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d903      	bls.n	8006ce6 <vTaskResume+0x66>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce2:	4a13      	ldr	r2, [pc, #76]	; (8006d30 <vTaskResume+0xb0>)
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4a10      	ldr	r2, [pc, #64]	; (8006d34 <vTaskResume+0xb4>)
 8006cf4:	441a      	add	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	f7fe ff44 	bl	8005b8a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d06:	4b09      	ldr	r3, [pc, #36]	; (8006d2c <vTaskResume+0xac>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d307      	bcc.n	8006d20 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006d10:	4b09      	ldr	r3, [pc, #36]	; (8006d38 <vTaskResume+0xb8>)
 8006d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006d20:	f001 f984 	bl	800802c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d24:	bf00      	nop
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	20000a04 	.word	0x20000a04
 8006d30:	20000ee0 	.word	0x20000ee0
 8006d34:	20000a08 	.word	0x20000a08
 8006d38:	e000ed04 	.word	0xe000ed04

08006d3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08a      	sub	sp, #40	; 0x28
 8006d40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d4a:	463a      	mov	r2, r7
 8006d4c:	1d39      	adds	r1, r7, #4
 8006d4e:	f107 0308 	add.w	r3, r7, #8
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe febc 	bl	8005ad0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	9202      	str	r2, [sp, #8]
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	2300      	movs	r3, #0
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	2300      	movs	r3, #0
 8006d68:	460a      	mov	r2, r1
 8006d6a:	4924      	ldr	r1, [pc, #144]	; (8006dfc <vTaskStartScheduler+0xc0>)
 8006d6c:	4824      	ldr	r0, [pc, #144]	; (8006e00 <vTaskStartScheduler+0xc4>)
 8006d6e:	f7ff fc75 	bl	800665c <xTaskCreateStatic>
 8006d72:	4603      	mov	r3, r0
 8006d74:	4a23      	ldr	r2, [pc, #140]	; (8006e04 <vTaskStartScheduler+0xc8>)
 8006d76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d78:	4b22      	ldr	r3, [pc, #136]	; (8006e04 <vTaskStartScheduler+0xc8>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d002      	beq.n	8006d86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d80:	2301      	movs	r3, #1
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	e001      	b.n	8006d8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d102      	bne.n	8006d96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d90:	f000 fd16 	bl	80077c0 <xTimerCreateTimerTask>
 8006d94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d11b      	bne.n	8006dd4 <vTaskStartScheduler+0x98>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	613b      	str	r3, [r7, #16]
}
 8006dae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006db0:	4b15      	ldr	r3, [pc, #84]	; (8006e08 <vTaskStartScheduler+0xcc>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3354      	adds	r3, #84	; 0x54
 8006db6:	4a15      	ldr	r2, [pc, #84]	; (8006e0c <vTaskStartScheduler+0xd0>)
 8006db8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dba:	4b15      	ldr	r3, [pc, #84]	; (8006e10 <vTaskStartScheduler+0xd4>)
 8006dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dc2:	4b14      	ldr	r3, [pc, #80]	; (8006e14 <vTaskStartScheduler+0xd8>)
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006dc8:	4b13      	ldr	r3, [pc, #76]	; (8006e18 <vTaskStartScheduler+0xdc>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dce:	f001 f88b 	bl	8007ee8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dd2:	e00e      	b.n	8006df2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dda:	d10a      	bne.n	8006df2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	60fb      	str	r3, [r7, #12]
}
 8006dee:	bf00      	nop
 8006df0:	e7fe      	b.n	8006df0 <vTaskStartScheduler+0xb4>
}
 8006df2:	bf00      	nop
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	080091c0 	.word	0x080091c0
 8006e00:	08007445 	.word	0x08007445
 8006e04:	20000efc 	.word	0x20000efc
 8006e08:	20000a04 	.word	0x20000a04
 8006e0c:	20000028 	.word	0x20000028
 8006e10:	20000ef8 	.word	0x20000ef8
 8006e14:	20000ee4 	.word	0x20000ee4
 8006e18:	20000edc 	.word	0x20000edc

08006e1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e20:	4b04      	ldr	r3, [pc, #16]	; (8006e34 <vTaskSuspendAll+0x18>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3301      	adds	r3, #1
 8006e26:	4a03      	ldr	r2, [pc, #12]	; (8006e34 <vTaskSuspendAll+0x18>)
 8006e28:	6013      	str	r3, [r2, #0]
}
 8006e2a:	bf00      	nop
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bc80      	pop	{r7}
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	20000f00 	.word	0x20000f00

08006e38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e46:	4b42      	ldr	r3, [pc, #264]	; (8006f50 <xTaskResumeAll+0x118>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	603b      	str	r3, [r7, #0]
}
 8006e60:	bf00      	nop
 8006e62:	e7fe      	b.n	8006e62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e64:	f001 f8b2 	bl	8007fcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e68:	4b39      	ldr	r3, [pc, #228]	; (8006f50 <xTaskResumeAll+0x118>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	4a38      	ldr	r2, [pc, #224]	; (8006f50 <xTaskResumeAll+0x118>)
 8006e70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e72:	4b37      	ldr	r3, [pc, #220]	; (8006f50 <xTaskResumeAll+0x118>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d162      	bne.n	8006f40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e7a:	4b36      	ldr	r3, [pc, #216]	; (8006f54 <xTaskResumeAll+0x11c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d05e      	beq.n	8006f40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e82:	e02f      	b.n	8006ee4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006e84:	4b34      	ldr	r3, [pc, #208]	; (8006f58 <xTaskResumeAll+0x120>)
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3318      	adds	r3, #24
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fe fed5 	bl	8005c40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fe fed0 	bl	8005c40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea4:	4b2d      	ldr	r3, [pc, #180]	; (8006f5c <xTaskResumeAll+0x124>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d903      	bls.n	8006eb4 <xTaskResumeAll+0x7c>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	4a2a      	ldr	r2, [pc, #168]	; (8006f5c <xTaskResumeAll+0x124>)
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4a27      	ldr	r2, [pc, #156]	; (8006f60 <xTaskResumeAll+0x128>)
 8006ec2:	441a      	add	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f7fe fe5d 	bl	8005b8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed4:	4b23      	ldr	r3, [pc, #140]	; (8006f64 <xTaskResumeAll+0x12c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d302      	bcc.n	8006ee4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ede:	4b22      	ldr	r3, [pc, #136]	; (8006f68 <xTaskResumeAll+0x130>)
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ee4:	4b1c      	ldr	r3, [pc, #112]	; (8006f58 <xTaskResumeAll+0x120>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1cb      	bne.n	8006e84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ef2:	f000 fb61 	bl	80075b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006ef6:	4b1d      	ldr	r3, [pc, #116]	; (8006f6c <xTaskResumeAll+0x134>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d010      	beq.n	8006f24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f02:	f000 f845 	bl	8006f90 <xTaskIncrementTick>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f0c:	4b16      	ldr	r3, [pc, #88]	; (8006f68 <xTaskResumeAll+0x130>)
 8006f0e:	2201      	movs	r2, #1
 8006f10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1f1      	bne.n	8006f02 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006f1e:	4b13      	ldr	r3, [pc, #76]	; (8006f6c <xTaskResumeAll+0x134>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f24:	4b10      	ldr	r3, [pc, #64]	; (8006f68 <xTaskResumeAll+0x130>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d009      	beq.n	8006f40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f30:	4b0f      	ldr	r3, [pc, #60]	; (8006f70 <xTaskResumeAll+0x138>)
 8006f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f40:	f001 f874 	bl	800802c <vPortExitCritical>

	return xAlreadyYielded;
 8006f44:	68bb      	ldr	r3, [r7, #8]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000f00 	.word	0x20000f00
 8006f54:	20000ed8 	.word	0x20000ed8
 8006f58:	20000e98 	.word	0x20000e98
 8006f5c:	20000ee0 	.word	0x20000ee0
 8006f60:	20000a08 	.word	0x20000a08
 8006f64:	20000a04 	.word	0x20000a04
 8006f68:	20000eec 	.word	0x20000eec
 8006f6c:	20000ee8 	.word	0x20000ee8
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f7a:	4b04      	ldr	r3, [pc, #16]	; (8006f8c <xTaskGetTickCount+0x18>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f80:	687b      	ldr	r3, [r7, #4]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr
 8006f8c:	20000edc 	.word	0x20000edc

08006f90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f96:	2300      	movs	r3, #0
 8006f98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f9a:	4b51      	ldr	r3, [pc, #324]	; (80070e0 <xTaskIncrementTick+0x150>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f040 808e 	bne.w	80070c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fa4:	4b4f      	ldr	r3, [pc, #316]	; (80070e4 <xTaskIncrementTick+0x154>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fac:	4a4d      	ldr	r2, [pc, #308]	; (80070e4 <xTaskIncrementTick+0x154>)
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d120      	bne.n	8006ffa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fb8:	4b4b      	ldr	r3, [pc, #300]	; (80070e8 <xTaskIncrementTick+0x158>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	603b      	str	r3, [r7, #0]
}
 8006fd4:	bf00      	nop
 8006fd6:	e7fe      	b.n	8006fd6 <xTaskIncrementTick+0x46>
 8006fd8:	4b43      	ldr	r3, [pc, #268]	; (80070e8 <xTaskIncrementTick+0x158>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	4b43      	ldr	r3, [pc, #268]	; (80070ec <xTaskIncrementTick+0x15c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a41      	ldr	r2, [pc, #260]	; (80070e8 <xTaskIncrementTick+0x158>)
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	4a41      	ldr	r2, [pc, #260]	; (80070ec <xTaskIncrementTick+0x15c>)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	4b40      	ldr	r3, [pc, #256]	; (80070f0 <xTaskIncrementTick+0x160>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	4a3f      	ldr	r2, [pc, #252]	; (80070f0 <xTaskIncrementTick+0x160>)
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	f000 fadf 	bl	80075b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ffa:	4b3e      	ldr	r3, [pc, #248]	; (80070f4 <xTaskIncrementTick+0x164>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	429a      	cmp	r2, r3
 8007002:	d34e      	bcc.n	80070a2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007004:	4b38      	ldr	r3, [pc, #224]	; (80070e8 <xTaskIncrementTick+0x158>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <xTaskIncrementTick+0x82>
 800700e:	2301      	movs	r3, #1
 8007010:	e000      	b.n	8007014 <xTaskIncrementTick+0x84>
 8007012:	2300      	movs	r3, #0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007018:	4b36      	ldr	r3, [pc, #216]	; (80070f4 <xTaskIncrementTick+0x164>)
 800701a:	f04f 32ff 	mov.w	r2, #4294967295
 800701e:	601a      	str	r2, [r3, #0]
					break;
 8007020:	e03f      	b.n	80070a2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007022:	4b31      	ldr	r3, [pc, #196]	; (80070e8 <xTaskIncrementTick+0x158>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	429a      	cmp	r2, r3
 8007038:	d203      	bcs.n	8007042 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800703a:	4a2e      	ldr	r2, [pc, #184]	; (80070f4 <xTaskIncrementTick+0x164>)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6013      	str	r3, [r2, #0]
						break;
 8007040:	e02f      	b.n	80070a2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	3304      	adds	r3, #4
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe fdfa 	bl	8005c40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007050:	2b00      	cmp	r3, #0
 8007052:	d004      	beq.n	800705e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	3318      	adds	r3, #24
 8007058:	4618      	mov	r0, r3
 800705a:	f7fe fdf1 	bl	8005c40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007062:	4b25      	ldr	r3, [pc, #148]	; (80070f8 <xTaskIncrementTick+0x168>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d903      	bls.n	8007072 <xTaskIncrementTick+0xe2>
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706e:	4a22      	ldr	r2, [pc, #136]	; (80070f8 <xTaskIncrementTick+0x168>)
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007076:	4613      	mov	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4a1f      	ldr	r2, [pc, #124]	; (80070fc <xTaskIncrementTick+0x16c>)
 8007080:	441a      	add	r2, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	3304      	adds	r3, #4
 8007086:	4619      	mov	r1, r3
 8007088:	4610      	mov	r0, r2
 800708a:	f7fe fd7e 	bl	8005b8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007092:	4b1b      	ldr	r3, [pc, #108]	; (8007100 <xTaskIncrementTick+0x170>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007098:	429a      	cmp	r2, r3
 800709a:	d3b3      	bcc.n	8007004 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800709c:	2301      	movs	r3, #1
 800709e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070a0:	e7b0      	b.n	8007004 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070a2:	4b17      	ldr	r3, [pc, #92]	; (8007100 <xTaskIncrementTick+0x170>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a8:	4914      	ldr	r1, [pc, #80]	; (80070fc <xTaskIncrementTick+0x16c>)
 80070aa:	4613      	mov	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	440b      	add	r3, r1
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d907      	bls.n	80070ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80070ba:	2301      	movs	r3, #1
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	e004      	b.n	80070ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80070c0:	4b10      	ldr	r3, [pc, #64]	; (8007104 <xTaskIncrementTick+0x174>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3301      	adds	r3, #1
 80070c6:	4a0f      	ldr	r2, [pc, #60]	; (8007104 <xTaskIncrementTick+0x174>)
 80070c8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80070ca:	4b0f      	ldr	r3, [pc, #60]	; (8007108 <xTaskIncrementTick+0x178>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80070d2:	2301      	movs	r3, #1
 80070d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80070d6:	697b      	ldr	r3, [r7, #20]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000f00 	.word	0x20000f00
 80070e4:	20000edc 	.word	0x20000edc
 80070e8:	20000e90 	.word	0x20000e90
 80070ec:	20000e94 	.word	0x20000e94
 80070f0:	20000ef0 	.word	0x20000ef0
 80070f4:	20000ef8 	.word	0x20000ef8
 80070f8:	20000ee0 	.word	0x20000ee0
 80070fc:	20000a08 	.word	0x20000a08
 8007100:	20000a04 	.word	0x20000a04
 8007104:	20000ee8 	.word	0x20000ee8
 8007108:	20000eec 	.word	0x20000eec

0800710c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007112:	4b2a      	ldr	r3, [pc, #168]	; (80071bc <vTaskSwitchContext+0xb0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800711a:	4b29      	ldr	r3, [pc, #164]	; (80071c0 <vTaskSwitchContext+0xb4>)
 800711c:	2201      	movs	r2, #1
 800711e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007120:	e046      	b.n	80071b0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007122:	4b27      	ldr	r3, [pc, #156]	; (80071c0 <vTaskSwitchContext+0xb4>)
 8007124:	2200      	movs	r2, #0
 8007126:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007128:	4b26      	ldr	r3, [pc, #152]	; (80071c4 <vTaskSwitchContext+0xb8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	60fb      	str	r3, [r7, #12]
 800712e:	e010      	b.n	8007152 <vTaskSwitchContext+0x46>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10a      	bne.n	800714c <vTaskSwitchContext+0x40>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	607b      	str	r3, [r7, #4]
}
 8007148:	bf00      	nop
 800714a:	e7fe      	b.n	800714a <vTaskSwitchContext+0x3e>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3b01      	subs	r3, #1
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	491d      	ldr	r1, [pc, #116]	; (80071c8 <vTaskSwitchContext+0xbc>)
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4613      	mov	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	440b      	add	r3, r1
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0e4      	beq.n	8007130 <vTaskSwitchContext+0x24>
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4a15      	ldr	r2, [pc, #84]	; (80071c8 <vTaskSwitchContext+0xbc>)
 8007172:	4413      	add	r3, r2
 8007174:	60bb      	str	r3, [r7, #8]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	605a      	str	r2, [r3, #4]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	3308      	adds	r3, #8
 8007188:	429a      	cmp	r2, r3
 800718a:	d104      	bne.n	8007196 <vTaskSwitchContext+0x8a>
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	605a      	str	r2, [r3, #4]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	4a0b      	ldr	r2, [pc, #44]	; (80071cc <vTaskSwitchContext+0xc0>)
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	4a08      	ldr	r2, [pc, #32]	; (80071c4 <vTaskSwitchContext+0xb8>)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071a6:	4b09      	ldr	r3, [pc, #36]	; (80071cc <vTaskSwitchContext+0xc0>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3354      	adds	r3, #84	; 0x54
 80071ac:	4a08      	ldr	r2, [pc, #32]	; (80071d0 <vTaskSwitchContext+0xc4>)
 80071ae:	6013      	str	r3, [r2, #0]
}
 80071b0:	bf00      	nop
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bc80      	pop	{r7}
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	20000f00 	.word	0x20000f00
 80071c0:	20000eec 	.word	0x20000eec
 80071c4:	20000ee0 	.word	0x20000ee0
 80071c8:	20000a08 	.word	0x20000a08
 80071cc:	20000a04 	.word	0x20000a04
 80071d0:	20000028 	.word	0x20000028

080071d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10a      	bne.n	80071fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	60fb      	str	r3, [r7, #12]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071fa:	4b07      	ldr	r3, [pc, #28]	; (8007218 <vTaskPlaceOnEventList+0x44>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3318      	adds	r3, #24
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fe fce4 	bl	8005bd0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007208:	2101      	movs	r1, #1
 800720a:	6838      	ldr	r0, [r7, #0]
 800720c:	f000 fa84 	bl	8007718 <prvAddCurrentTaskToDelayedList>
}
 8007210:	bf00      	nop
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	20000a04 	.word	0x20000a04

0800721c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10a      	bne.n	8007244 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	617b      	str	r3, [r7, #20]
}
 8007240:	bf00      	nop
 8007242:	e7fe      	b.n	8007242 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007244:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <vTaskPlaceOnEventListRestricted+0x54>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3318      	adds	r3, #24
 800724a:	4619      	mov	r1, r3
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7fe fc9c 	bl	8005b8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007258:	f04f 33ff 	mov.w	r3, #4294967295
 800725c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800725e:	6879      	ldr	r1, [r7, #4]
 8007260:	68b8      	ldr	r0, [r7, #8]
 8007262:	f000 fa59 	bl	8007718 <prvAddCurrentTaskToDelayedList>
	}
 8007266:	bf00      	nop
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	20000a04 	.word	0x20000a04

08007274 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10a      	bne.n	80072a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	60fb      	str	r3, [r7, #12]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	3318      	adds	r3, #24
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fe fccb 	bl	8005c40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072aa:	4b1e      	ldr	r3, [pc, #120]	; (8007324 <xTaskRemoveFromEventList+0xb0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d11d      	bne.n	80072ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	3304      	adds	r3, #4
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe fcc2 	bl	8005c40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c0:	4b19      	ldr	r3, [pc, #100]	; (8007328 <xTaskRemoveFromEventList+0xb4>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d903      	bls.n	80072d0 <xTaskRemoveFromEventList+0x5c>
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072cc:	4a16      	ldr	r2, [pc, #88]	; (8007328 <xTaskRemoveFromEventList+0xb4>)
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4a13      	ldr	r2, [pc, #76]	; (800732c <xTaskRemoveFromEventList+0xb8>)
 80072de:	441a      	add	r2, r3
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	3304      	adds	r3, #4
 80072e4:	4619      	mov	r1, r3
 80072e6:	4610      	mov	r0, r2
 80072e8:	f7fe fc4f 	bl	8005b8a <vListInsertEnd>
 80072ec:	e005      	b.n	80072fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	3318      	adds	r3, #24
 80072f2:	4619      	mov	r1, r3
 80072f4:	480e      	ldr	r0, [pc, #56]	; (8007330 <xTaskRemoveFromEventList+0xbc>)
 80072f6:	f7fe fc48 	bl	8005b8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fe:	4b0d      	ldr	r3, [pc, #52]	; (8007334 <xTaskRemoveFromEventList+0xc0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007304:	429a      	cmp	r2, r3
 8007306:	d905      	bls.n	8007314 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007308:	2301      	movs	r3, #1
 800730a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <xTaskRemoveFromEventList+0xc4>)
 800730e:	2201      	movs	r2, #1
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	e001      	b.n	8007318 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007314:	2300      	movs	r3, #0
 8007316:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007318:	697b      	ldr	r3, [r7, #20]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	20000f00 	.word	0x20000f00
 8007328:	20000ee0 	.word	0x20000ee0
 800732c:	20000a08 	.word	0x20000a08
 8007330:	20000e98 	.word	0x20000e98
 8007334:	20000a04 	.word	0x20000a04
 8007338:	20000eec 	.word	0x20000eec

0800733c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007344:	4b06      	ldr	r3, [pc, #24]	; (8007360 <vTaskInternalSetTimeOutState+0x24>)
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800734c:	4b05      	ldr	r3, [pc, #20]	; (8007364 <vTaskInternalSetTimeOutState+0x28>)
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	605a      	str	r2, [r3, #4]
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	bc80      	pop	{r7}
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	20000ef0 	.word	0x20000ef0
 8007364:	20000edc 	.word	0x20000edc

08007368 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b088      	sub	sp, #32
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10a      	bne.n	800738e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	613b      	str	r3, [r7, #16]
}
 800738a:	bf00      	nop
 800738c:	e7fe      	b.n	800738c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	60fb      	str	r3, [r7, #12]
}
 80073a6:	bf00      	nop
 80073a8:	e7fe      	b.n	80073a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80073aa:	f000 fe0f 	bl	8007fcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073ae:	4b1d      	ldr	r3, [pc, #116]	; (8007424 <xTaskCheckForTimeOut+0xbc>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c6:	d102      	bne.n	80073ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073c8:	2300      	movs	r3, #0
 80073ca:	61fb      	str	r3, [r7, #28]
 80073cc:	e023      	b.n	8007416 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	4b15      	ldr	r3, [pc, #84]	; (8007428 <xTaskCheckForTimeOut+0xc0>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d007      	beq.n	80073ea <xTaskCheckForTimeOut+0x82>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d302      	bcc.n	80073ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073e4:	2301      	movs	r3, #1
 80073e6:	61fb      	str	r3, [r7, #28]
 80073e8:	e015      	b.n	8007416 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d20b      	bcs.n	800740c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	1ad2      	subs	r2, r2, r3
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff ff9b 	bl	800733c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007406:	2300      	movs	r3, #0
 8007408:	61fb      	str	r3, [r7, #28]
 800740a:	e004      	b.n	8007416 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007412:	2301      	movs	r3, #1
 8007414:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007416:	f000 fe09 	bl	800802c <vPortExitCritical>

	return xReturn;
 800741a:	69fb      	ldr	r3, [r7, #28]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3720      	adds	r7, #32
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	20000edc 	.word	0x20000edc
 8007428:	20000ef0 	.word	0x20000ef0

0800742c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007430:	4b03      	ldr	r3, [pc, #12]	; (8007440 <vTaskMissedYield+0x14>)
 8007432:	2201      	movs	r2, #1
 8007434:	601a      	str	r2, [r3, #0]
}
 8007436:	bf00      	nop
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	20000eec 	.word	0x20000eec

08007444 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800744c:	f000 f852 	bl	80074f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007450:	4b06      	ldr	r3, [pc, #24]	; (800746c <prvIdleTask+0x28>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d9f9      	bls.n	800744c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007458:	4b05      	ldr	r3, [pc, #20]	; (8007470 <prvIdleTask+0x2c>)
 800745a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007468:	e7f0      	b.n	800744c <prvIdleTask+0x8>
 800746a:	bf00      	nop
 800746c:	20000a08 	.word	0x20000a08
 8007470:	e000ed04 	.word	0xe000ed04

08007474 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800747a:	2300      	movs	r3, #0
 800747c:	607b      	str	r3, [r7, #4]
 800747e:	e00c      	b.n	800749a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	4613      	mov	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4a12      	ldr	r2, [pc, #72]	; (80074d4 <prvInitialiseTaskLists+0x60>)
 800748c:	4413      	add	r3, r2
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe fb50 	bl	8005b34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3301      	adds	r3, #1
 8007498:	607b      	str	r3, [r7, #4]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b37      	cmp	r3, #55	; 0x37
 800749e:	d9ef      	bls.n	8007480 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074a0:	480d      	ldr	r0, [pc, #52]	; (80074d8 <prvInitialiseTaskLists+0x64>)
 80074a2:	f7fe fb47 	bl	8005b34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074a6:	480d      	ldr	r0, [pc, #52]	; (80074dc <prvInitialiseTaskLists+0x68>)
 80074a8:	f7fe fb44 	bl	8005b34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074ac:	480c      	ldr	r0, [pc, #48]	; (80074e0 <prvInitialiseTaskLists+0x6c>)
 80074ae:	f7fe fb41 	bl	8005b34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074b2:	480c      	ldr	r0, [pc, #48]	; (80074e4 <prvInitialiseTaskLists+0x70>)
 80074b4:	f7fe fb3e 	bl	8005b34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074b8:	480b      	ldr	r0, [pc, #44]	; (80074e8 <prvInitialiseTaskLists+0x74>)
 80074ba:	f7fe fb3b 	bl	8005b34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074be:	4b0b      	ldr	r3, [pc, #44]	; (80074ec <prvInitialiseTaskLists+0x78>)
 80074c0:	4a05      	ldr	r2, [pc, #20]	; (80074d8 <prvInitialiseTaskLists+0x64>)
 80074c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074c4:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <prvInitialiseTaskLists+0x7c>)
 80074c6:	4a05      	ldr	r2, [pc, #20]	; (80074dc <prvInitialiseTaskLists+0x68>)
 80074c8:	601a      	str	r2, [r3, #0]
}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	20000a08 	.word	0x20000a08
 80074d8:	20000e68 	.word	0x20000e68
 80074dc:	20000e7c 	.word	0x20000e7c
 80074e0:	20000e98 	.word	0x20000e98
 80074e4:	20000eac 	.word	0x20000eac
 80074e8:	20000ec4 	.word	0x20000ec4
 80074ec:	20000e90 	.word	0x20000e90
 80074f0:	20000e94 	.word	0x20000e94

080074f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074fa:	e019      	b.n	8007530 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074fc:	f000 fd66 	bl	8007fcc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007500:	4b10      	ldr	r3, [pc, #64]	; (8007544 <prvCheckTasksWaitingTermination+0x50>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3304      	adds	r3, #4
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe fb97 	bl	8005c40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007512:	4b0d      	ldr	r3, [pc, #52]	; (8007548 <prvCheckTasksWaitingTermination+0x54>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3b01      	subs	r3, #1
 8007518:	4a0b      	ldr	r2, [pc, #44]	; (8007548 <prvCheckTasksWaitingTermination+0x54>)
 800751a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800751c:	4b0b      	ldr	r3, [pc, #44]	; (800754c <prvCheckTasksWaitingTermination+0x58>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3b01      	subs	r3, #1
 8007522:	4a0a      	ldr	r2, [pc, #40]	; (800754c <prvCheckTasksWaitingTermination+0x58>)
 8007524:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007526:	f000 fd81 	bl	800802c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f810 	bl	8007550 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007530:	4b06      	ldr	r3, [pc, #24]	; (800754c <prvCheckTasksWaitingTermination+0x58>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e1      	bne.n	80074fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007538:	bf00      	nop
 800753a:	bf00      	nop
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20000eac 	.word	0x20000eac
 8007548:	20000ed8 	.word	0x20000ed8
 800754c:	20000ec0 	.word	0x20000ec0

08007550 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3354      	adds	r3, #84	; 0x54
 800755c:	4618      	mov	r0, r3
 800755e:	f001 f8f1 	bl	8008744 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007568:	2b00      	cmp	r3, #0
 800756a:	d108      	bne.n	800757e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007570:	4618      	mov	r0, r3
 8007572:	f000 feef 	bl	8008354 <vPortFree>
				vPortFree( pxTCB );
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 feec 	bl	8008354 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800757c:	e018      	b.n	80075b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007584:	2b01      	cmp	r3, #1
 8007586:	d103      	bne.n	8007590 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fee3 	bl	8008354 <vPortFree>
	}
 800758e:	e00f      	b.n	80075b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007596:	2b02      	cmp	r3, #2
 8007598:	d00a      	beq.n	80075b0 <prvDeleteTCB+0x60>
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	60fb      	str	r3, [r7, #12]
}
 80075ac:	bf00      	nop
 80075ae:	e7fe      	b.n	80075ae <prvDeleteTCB+0x5e>
	}
 80075b0:	bf00      	nop
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075be:	4b0e      	ldr	r3, [pc, #56]	; (80075f8 <prvResetNextTaskUnblockTime+0x40>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <prvResetNextTaskUnblockTime+0x14>
 80075c8:	2301      	movs	r3, #1
 80075ca:	e000      	b.n	80075ce <prvResetNextTaskUnblockTime+0x16>
 80075cc:	2300      	movs	r3, #0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d004      	beq.n	80075dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075d2:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <prvResetNextTaskUnblockTime+0x44>)
 80075d4:	f04f 32ff 	mov.w	r2, #4294967295
 80075d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075da:	e008      	b.n	80075ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80075dc:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <prvResetNextTaskUnblockTime+0x40>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	4a04      	ldr	r2, [pc, #16]	; (80075fc <prvResetNextTaskUnblockTime+0x44>)
 80075ec:	6013      	str	r3, [r2, #0]
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bc80      	pop	{r7}
 80075f6:	4770      	bx	lr
 80075f8:	20000e90 	.word	0x20000e90
 80075fc:	20000ef8 	.word	0x20000ef8

08007600 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007606:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <xTaskGetSchedulerState+0x34>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d102      	bne.n	8007614 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800760e:	2301      	movs	r3, #1
 8007610:	607b      	str	r3, [r7, #4]
 8007612:	e008      	b.n	8007626 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007614:	4b08      	ldr	r3, [pc, #32]	; (8007638 <xTaskGetSchedulerState+0x38>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d102      	bne.n	8007622 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800761c:	2302      	movs	r3, #2
 800761e:	607b      	str	r3, [r7, #4]
 8007620:	e001      	b.n	8007626 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007622:	2300      	movs	r3, #0
 8007624:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007626:	687b      	ldr	r3, [r7, #4]
	}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	bc80      	pop	{r7}
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	20000ee4 	.word	0x20000ee4
 8007638:	20000f00 	.word	0x20000f00

0800763c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007648:	2300      	movs	r3, #0
 800764a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d056      	beq.n	8007700 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007652:	4b2e      	ldr	r3, [pc, #184]	; (800770c <xTaskPriorityDisinherit+0xd0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	429a      	cmp	r2, r3
 800765a:	d00a      	beq.n	8007672 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	60fb      	str	r3, [r7, #12]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10a      	bne.n	8007690 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	60bb      	str	r3, [r7, #8]
}
 800768c:	bf00      	nop
 800768e:	e7fe      	b.n	800768e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007694:	1e5a      	subs	r2, r3, #1
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d02c      	beq.n	8007700 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d128      	bne.n	8007700 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	3304      	adds	r3, #4
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fe fac4 	bl	8005c40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d0:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <xTaskPriorityDisinherit+0xd4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d903      	bls.n	80076e0 <xTaskPriorityDisinherit+0xa4>
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	4a0c      	ldr	r2, [pc, #48]	; (8007710 <xTaskPriorityDisinherit+0xd4>)
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4a09      	ldr	r2, [pc, #36]	; (8007714 <xTaskPriorityDisinherit+0xd8>)
 80076ee:	441a      	add	r2, r3
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	3304      	adds	r3, #4
 80076f4:	4619      	mov	r1, r3
 80076f6:	4610      	mov	r0, r2
 80076f8:	f7fe fa47 	bl	8005b8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076fc:	2301      	movs	r3, #1
 80076fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007700:	697b      	ldr	r3, [r7, #20]
	}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20000a04 	.word	0x20000a04
 8007710:	20000ee0 	.word	0x20000ee0
 8007714:	20000a08 	.word	0x20000a08

08007718 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007722:	4b21      	ldr	r3, [pc, #132]	; (80077a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007728:	4b20      	ldr	r3, [pc, #128]	; (80077ac <prvAddCurrentTaskToDelayedList+0x94>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3304      	adds	r3, #4
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fa86 	bl	8005c40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773a:	d10a      	bne.n	8007752 <prvAddCurrentTaskToDelayedList+0x3a>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d007      	beq.n	8007752 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007742:	4b1a      	ldr	r3, [pc, #104]	; (80077ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3304      	adds	r3, #4
 8007748:	4619      	mov	r1, r3
 800774a:	4819      	ldr	r0, [pc, #100]	; (80077b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800774c:	f7fe fa1d 	bl	8005b8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007750:	e026      	b.n	80077a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4413      	add	r3, r2
 8007758:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800775a:	4b14      	ldr	r3, [pc, #80]	; (80077ac <prvAddCurrentTaskToDelayedList+0x94>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	429a      	cmp	r2, r3
 8007768:	d209      	bcs.n	800777e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800776a:	4b12      	ldr	r3, [pc, #72]	; (80077b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	4b0f      	ldr	r3, [pc, #60]	; (80077ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3304      	adds	r3, #4
 8007774:	4619      	mov	r1, r3
 8007776:	4610      	mov	r0, r2
 8007778:	f7fe fa2a 	bl	8005bd0 <vListInsert>
}
 800777c:	e010      	b.n	80077a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800777e:	4b0e      	ldr	r3, [pc, #56]	; (80077b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	4b0a      	ldr	r3, [pc, #40]	; (80077ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3304      	adds	r3, #4
 8007788:	4619      	mov	r1, r3
 800778a:	4610      	mov	r0, r2
 800778c:	f7fe fa20 	bl	8005bd0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007790:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	429a      	cmp	r2, r3
 8007798:	d202      	bcs.n	80077a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800779a:	4a08      	ldr	r2, [pc, #32]	; (80077bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	6013      	str	r3, [r2, #0]
}
 80077a0:	bf00      	nop
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000edc 	.word	0x20000edc
 80077ac:	20000a04 	.word	0x20000a04
 80077b0:	20000ec4 	.word	0x20000ec4
 80077b4:	20000e94 	.word	0x20000e94
 80077b8:	20000e90 	.word	0x20000e90
 80077bc:	20000ef8 	.word	0x20000ef8

080077c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b08a      	sub	sp, #40	; 0x28
 80077c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80077ca:	f000 facb 	bl	8007d64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80077ce:	4b1c      	ldr	r3, [pc, #112]	; (8007840 <xTimerCreateTimerTask+0x80>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d021      	beq.n	800781a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80077da:	2300      	movs	r3, #0
 80077dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80077de:	1d3a      	adds	r2, r7, #4
 80077e0:	f107 0108 	add.w	r1, r7, #8
 80077e4:	f107 030c 	add.w	r3, r7, #12
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fe f989 	bl	8005b00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	9202      	str	r2, [sp, #8]
 80077f6:	9301      	str	r3, [sp, #4]
 80077f8:	2302      	movs	r3, #2
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	2300      	movs	r3, #0
 80077fe:	460a      	mov	r2, r1
 8007800:	4910      	ldr	r1, [pc, #64]	; (8007844 <xTimerCreateTimerTask+0x84>)
 8007802:	4811      	ldr	r0, [pc, #68]	; (8007848 <xTimerCreateTimerTask+0x88>)
 8007804:	f7fe ff2a 	bl	800665c <xTaskCreateStatic>
 8007808:	4603      	mov	r3, r0
 800780a:	4a10      	ldr	r2, [pc, #64]	; (800784c <xTimerCreateTimerTask+0x8c>)
 800780c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800780e:	4b0f      	ldr	r3, [pc, #60]	; (800784c <xTimerCreateTimerTask+0x8c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007816:	2301      	movs	r3, #1
 8007818:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10a      	bne.n	8007836 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	613b      	str	r3, [r7, #16]
}
 8007832:	bf00      	nop
 8007834:	e7fe      	b.n	8007834 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007836:	697b      	ldr	r3, [r7, #20]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	20000f34 	.word	0x20000f34
 8007844:	080091c8 	.word	0x080091c8
 8007848:	0800796d 	.word	0x0800796d
 800784c:	20000f38 	.word	0x20000f38

08007850 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08a      	sub	sp, #40	; 0x28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800785e:	2300      	movs	r3, #0
 8007860:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10a      	bne.n	800787e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	623b      	str	r3, [r7, #32]
}
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800787e:	4b1a      	ldr	r3, [pc, #104]	; (80078e8 <xTimerGenericCommand+0x98>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d02a      	beq.n	80078dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2b05      	cmp	r3, #5
 8007896:	dc18      	bgt.n	80078ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007898:	f7ff feb2 	bl	8007600 <xTaskGetSchedulerState>
 800789c:	4603      	mov	r3, r0
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d109      	bne.n	80078b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078a2:	4b11      	ldr	r3, [pc, #68]	; (80078e8 <xTimerGenericCommand+0x98>)
 80078a4:	6818      	ldr	r0, [r3, #0]
 80078a6:	f107 0110 	add.w	r1, r7, #16
 80078aa:	2300      	movs	r3, #0
 80078ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ae:	f7fe faf3 	bl	8005e98 <xQueueGenericSend>
 80078b2:	6278      	str	r0, [r7, #36]	; 0x24
 80078b4:	e012      	b.n	80078dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078b6:	4b0c      	ldr	r3, [pc, #48]	; (80078e8 <xTimerGenericCommand+0x98>)
 80078b8:	6818      	ldr	r0, [r3, #0]
 80078ba:	f107 0110 	add.w	r1, r7, #16
 80078be:	2300      	movs	r3, #0
 80078c0:	2200      	movs	r2, #0
 80078c2:	f7fe fae9 	bl	8005e98 <xQueueGenericSend>
 80078c6:	6278      	str	r0, [r7, #36]	; 0x24
 80078c8:	e008      	b.n	80078dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078ca:	4b07      	ldr	r3, [pc, #28]	; (80078e8 <xTimerGenericCommand+0x98>)
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	f107 0110 	add.w	r1, r7, #16
 80078d2:	2300      	movs	r3, #0
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	f7fe fbdd 	bl	8006094 <xQueueGenericSendFromISR>
 80078da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3728      	adds	r7, #40	; 0x28
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20000f34 	.word	0x20000f34

080078ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b088      	sub	sp, #32
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078f6:	4b1c      	ldr	r3, [pc, #112]	; (8007968 <prvProcessExpiredTimer+0x7c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	3304      	adds	r3, #4
 8007904:	4618      	mov	r0, r3
 8007906:	f7fe f99b 	bl	8005c40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d122      	bne.n	8007958 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	699a      	ldr	r2, [r3, #24]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	18d1      	adds	r1, r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	6978      	ldr	r0, [r7, #20]
 8007920:	f000 f8c8 	bl	8007ab4 <prvInsertTimerInActiveList>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d016      	beq.n	8007958 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800792a:	2300      	movs	r3, #0
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	2300      	movs	r3, #0
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	2100      	movs	r1, #0
 8007934:	6978      	ldr	r0, [r7, #20]
 8007936:	f7ff ff8b 	bl	8007850 <xTimerGenericCommand>
 800793a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	60fb      	str	r3, [r7, #12]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	6978      	ldr	r0, [r7, #20]
 800795e:	4798      	blx	r3
}
 8007960:	bf00      	nop
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20000f2c 	.word	0x20000f2c

0800796c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007974:	f107 0308 	add.w	r3, r7, #8
 8007978:	4618      	mov	r0, r3
 800797a:	f000 f857 	bl	8007a2c <prvGetNextExpireTime>
 800797e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4619      	mov	r1, r3
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f803 	bl	8007990 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800798a:	f000 f8d5 	bl	8007b38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800798e:	e7f1      	b.n	8007974 <prvTimerTask+0x8>

08007990 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800799a:	f7ff fa3f 	bl	8006e1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800799e:	f107 0308 	add.w	r3, r7, #8
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 f866 	bl	8007a74 <prvSampleTimeNow>
 80079a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d130      	bne.n	8007a12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10a      	bne.n	80079cc <prvProcessTimerOrBlockTask+0x3c>
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d806      	bhi.n	80079cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80079be:	f7ff fa3b 	bl	8006e38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80079c2:	68f9      	ldr	r1, [r7, #12]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff ff91 	bl	80078ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80079ca:	e024      	b.n	8007a16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d008      	beq.n	80079e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079d2:	4b13      	ldr	r3, [pc, #76]	; (8007a20 <prvProcessTimerOrBlockTask+0x90>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	bf0c      	ite	eq
 80079dc:	2301      	moveq	r3, #1
 80079de:	2300      	movne	r3, #0
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80079e4:	4b0f      	ldr	r3, [pc, #60]	; (8007a24 <prvProcessTimerOrBlockTask+0x94>)
 80079e6:	6818      	ldr	r0, [r3, #0]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	4619      	mov	r1, r3
 80079f2:	f7fe fdff 	bl	80065f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079f6:	f7ff fa1f 	bl	8006e38 <xTaskResumeAll>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10a      	bne.n	8007a16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a00:	4b09      	ldr	r3, [pc, #36]	; (8007a28 <prvProcessTimerOrBlockTask+0x98>)
 8007a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	f3bf 8f6f 	isb	sy
}
 8007a10:	e001      	b.n	8007a16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a12:	f7ff fa11 	bl	8006e38 <xTaskResumeAll>
}
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000f30 	.word	0x20000f30
 8007a24:	20000f34 	.word	0x20000f34
 8007a28:	e000ed04 	.word	0xe000ed04

08007a2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a34:	4b0e      	ldr	r3, [pc, #56]	; (8007a70 <prvGetNextExpireTime+0x44>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	bf0c      	ite	eq
 8007a3e:	2301      	moveq	r3, #1
 8007a40:	2300      	movne	r3, #0
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	461a      	mov	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d105      	bne.n	8007a5e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a52:	4b07      	ldr	r3, [pc, #28]	; (8007a70 <prvGetNextExpireTime+0x44>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]
 8007a5c:	e001      	b.n	8007a62 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a62:	68fb      	ldr	r3, [r7, #12]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bc80      	pop	{r7}
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	20000f2c 	.word	0x20000f2c

08007a74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a7c:	f7ff fa7a 	bl	8006f74 <xTaskGetTickCount>
 8007a80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a82:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <prvSampleTimeNow+0x3c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d205      	bcs.n	8007a98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a8c:	f000 f908 	bl	8007ca0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	e002      	b.n	8007a9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a9e:	4a04      	ldr	r2, [pc, #16]	; (8007ab0 <prvSampleTimeNow+0x3c>)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20000f3c 	.word	0x20000f3c

08007ab4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d812      	bhi.n	8007b00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	1ad2      	subs	r2, r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d302      	bcc.n	8007aee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	e01b      	b.n	8007b26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007aee:	4b10      	ldr	r3, [pc, #64]	; (8007b30 <prvInsertTimerInActiveList+0x7c>)
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3304      	adds	r3, #4
 8007af6:	4619      	mov	r1, r3
 8007af8:	4610      	mov	r0, r2
 8007afa:	f7fe f869 	bl	8005bd0 <vListInsert>
 8007afe:	e012      	b.n	8007b26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d206      	bcs.n	8007b16 <prvInsertTimerInActiveList+0x62>
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d302      	bcc.n	8007b16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b10:	2301      	movs	r3, #1
 8007b12:	617b      	str	r3, [r7, #20]
 8007b14:	e007      	b.n	8007b26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b16:	4b07      	ldr	r3, [pc, #28]	; (8007b34 <prvInsertTimerInActiveList+0x80>)
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4610      	mov	r0, r2
 8007b22:	f7fe f855 	bl	8005bd0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b26:	697b      	ldr	r3, [r7, #20]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	20000f30 	.word	0x20000f30
 8007b34:	20000f2c 	.word	0x20000f2c

08007b38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08e      	sub	sp, #56	; 0x38
 8007b3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b3e:	e09d      	b.n	8007c7c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	da18      	bge.n	8007b78 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b46:	1d3b      	adds	r3, r7, #4
 8007b48:	3304      	adds	r3, #4
 8007b4a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10a      	bne.n	8007b68 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	61fb      	str	r3, [r7, #28]
}
 8007b64:	bf00      	nop
 8007b66:	e7fe      	b.n	8007b66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b6e:	6850      	ldr	r0, [r2, #4]
 8007b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b72:	6892      	ldr	r2, [r2, #8]
 8007b74:	4611      	mov	r1, r2
 8007b76:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	db7d      	blt.n	8007c7a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d004      	beq.n	8007b94 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fe f856 	bl	8005c40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b94:	463b      	mov	r3, r7
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff ff6c 	bl	8007a74 <prvSampleTimeNow>
 8007b9c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b09      	cmp	r3, #9
 8007ba2:	d86b      	bhi.n	8007c7c <prvProcessReceivedCommands+0x144>
 8007ba4:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <prvProcessReceivedCommands+0x74>)
 8007ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007baa:	bf00      	nop
 8007bac:	08007bd5 	.word	0x08007bd5
 8007bb0:	08007bd5 	.word	0x08007bd5
 8007bb4:	08007bd5 	.word	0x08007bd5
 8007bb8:	08007c7d 	.word	0x08007c7d
 8007bbc:	08007c31 	.word	0x08007c31
 8007bc0:	08007c69 	.word	0x08007c69
 8007bc4:	08007bd5 	.word	0x08007bd5
 8007bc8:	08007bd5 	.word	0x08007bd5
 8007bcc:	08007c7d 	.word	0x08007c7d
 8007bd0:	08007c31 	.word	0x08007c31
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	18d1      	adds	r1, r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007be2:	f7ff ff67 	bl	8007ab4 <prvInsertTimerInActiveList>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d047      	beq.n	8007c7c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d13f      	bne.n	8007c7c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	441a      	add	r2, r3
 8007c04:	2300      	movs	r3, #0
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c0e:	f7ff fe1f 	bl	8007850 <xTimerGenericCommand>
 8007c12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d130      	bne.n	8007c7c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	61bb      	str	r3, [r7, #24]
}
 8007c2c:	bf00      	nop
 8007c2e:	e7fe      	b.n	8007c2e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10a      	bne.n	8007c54 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	617b      	str	r3, [r7, #20]
}
 8007c50:	bf00      	nop
 8007c52:	e7fe      	b.n	8007c52 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	699a      	ldr	r2, [r3, #24]
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	18d1      	adds	r1, r2, r3
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c62:	f7ff ff27 	bl	8007ab4 <prvInsertTimerInActiveList>
					break;
 8007c66:	e009      	b.n	8007c7c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d104      	bne.n	8007c7c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c74:	f000 fb6e 	bl	8008354 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c78:	e000      	b.n	8007c7c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007c7a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c7c:	4b07      	ldr	r3, [pc, #28]	; (8007c9c <prvProcessReceivedCommands+0x164>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	1d39      	adds	r1, r7, #4
 8007c82:	2200      	movs	r2, #0
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fe fa9d 	bl	80061c4 <xQueueReceive>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f47f af57 	bne.w	8007b40 <prvProcessReceivedCommands+0x8>
	}
}
 8007c92:	bf00      	nop
 8007c94:	bf00      	nop
 8007c96:	3730      	adds	r7, #48	; 0x30
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	20000f34 	.word	0x20000f34

08007ca0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b088      	sub	sp, #32
 8007ca4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ca6:	e045      	b.n	8007d34 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ca8:	4b2c      	ldr	r3, [pc, #176]	; (8007d5c <prvSwitchTimerLists+0xbc>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cb2:	4b2a      	ldr	r3, [pc, #168]	; (8007d5c <prvSwitchTimerLists+0xbc>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fd ffbd 	bl	8005c40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d12e      	bne.n	8007d34 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	4413      	add	r3, r2
 8007cde:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d90e      	bls.n	8007d06 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cf4:	4b19      	ldr	r3, [pc, #100]	; (8007d5c <prvSwitchTimerLists+0xbc>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	4610      	mov	r0, r2
 8007d00:	f7fd ff66 	bl	8005bd0 <vListInsert>
 8007d04:	e016      	b.n	8007d34 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d06:	2300      	movs	r3, #0
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	2100      	movs	r1, #0
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7ff fd9d 	bl	8007850 <xTimerGenericCommand>
 8007d16:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10a      	bne.n	8007d34 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	603b      	str	r3, [r7, #0]
}
 8007d30:	bf00      	nop
 8007d32:	e7fe      	b.n	8007d32 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d34:	4b09      	ldr	r3, [pc, #36]	; (8007d5c <prvSwitchTimerLists+0xbc>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1b4      	bne.n	8007ca8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d3e:	4b07      	ldr	r3, [pc, #28]	; (8007d5c <prvSwitchTimerLists+0xbc>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d44:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <prvSwitchTimerLists+0xc0>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a04      	ldr	r2, [pc, #16]	; (8007d5c <prvSwitchTimerLists+0xbc>)
 8007d4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d4c:	4a04      	ldr	r2, [pc, #16]	; (8007d60 <prvSwitchTimerLists+0xc0>)
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	6013      	str	r3, [r2, #0]
}
 8007d52:	bf00      	nop
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000f2c 	.word	0x20000f2c
 8007d60:	20000f30 	.word	0x20000f30

08007d64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d6a:	f000 f92f 	bl	8007fcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d6e:	4b15      	ldr	r3, [pc, #84]	; (8007dc4 <prvCheckForValidListAndQueue+0x60>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d120      	bne.n	8007db8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d76:	4814      	ldr	r0, [pc, #80]	; (8007dc8 <prvCheckForValidListAndQueue+0x64>)
 8007d78:	f7fd fedc 	bl	8005b34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d7c:	4813      	ldr	r0, [pc, #76]	; (8007dcc <prvCheckForValidListAndQueue+0x68>)
 8007d7e:	f7fd fed9 	bl	8005b34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d82:	4b13      	ldr	r3, [pc, #76]	; (8007dd0 <prvCheckForValidListAndQueue+0x6c>)
 8007d84:	4a10      	ldr	r2, [pc, #64]	; (8007dc8 <prvCheckForValidListAndQueue+0x64>)
 8007d86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d88:	4b12      	ldr	r3, [pc, #72]	; (8007dd4 <prvCheckForValidListAndQueue+0x70>)
 8007d8a:	4a10      	ldr	r2, [pc, #64]	; (8007dcc <prvCheckForValidListAndQueue+0x68>)
 8007d8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d8e:	2300      	movs	r3, #0
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	4b11      	ldr	r3, [pc, #68]	; (8007dd8 <prvCheckForValidListAndQueue+0x74>)
 8007d94:	4a11      	ldr	r2, [pc, #68]	; (8007ddc <prvCheckForValidListAndQueue+0x78>)
 8007d96:	2110      	movs	r1, #16
 8007d98:	200a      	movs	r0, #10
 8007d9a:	f7fd ffe3 	bl	8005d64 <xQueueGenericCreateStatic>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	4a08      	ldr	r2, [pc, #32]	; (8007dc4 <prvCheckForValidListAndQueue+0x60>)
 8007da2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007da4:	4b07      	ldr	r3, [pc, #28]	; (8007dc4 <prvCheckForValidListAndQueue+0x60>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d005      	beq.n	8007db8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007dac:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <prvCheckForValidListAndQueue+0x60>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	490b      	ldr	r1, [pc, #44]	; (8007de0 <prvCheckForValidListAndQueue+0x7c>)
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fe fbf6 	bl	80065a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007db8:	f000 f938 	bl	800802c <vPortExitCritical>
}
 8007dbc:	bf00      	nop
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20000f34 	.word	0x20000f34
 8007dc8:	20000f04 	.word	0x20000f04
 8007dcc:	20000f18 	.word	0x20000f18
 8007dd0:	20000f2c 	.word	0x20000f2c
 8007dd4:	20000f30 	.word	0x20000f30
 8007dd8:	20000fe0 	.word	0x20000fe0
 8007ddc:	20000f40 	.word	0x20000f40
 8007de0:	080091d0 	.word	0x080091d0

08007de4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3b04      	subs	r3, #4
 8007df4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3b04      	subs	r3, #4
 8007e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	f023 0201 	bic.w	r2, r3, #1
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3b04      	subs	r3, #4
 8007e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e14:	4a08      	ldr	r2, [pc, #32]	; (8007e38 <pxPortInitialiseStack+0x54>)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3b14      	subs	r3, #20
 8007e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3b20      	subs	r3, #32
 8007e2a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bc80      	pop	{r7}
 8007e36:	4770      	bx	lr
 8007e38:	08007e3d 	.word	0x08007e3d

08007e3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e46:	4b12      	ldr	r3, [pc, #72]	; (8007e90 <prvTaskExitError+0x54>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4e:	d00a      	beq.n	8007e66 <prvTaskExitError+0x2a>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	60fb      	str	r3, [r7, #12]
}
 8007e62:	bf00      	nop
 8007e64:	e7fe      	b.n	8007e64 <prvTaskExitError+0x28>
	__asm volatile
 8007e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	60bb      	str	r3, [r7, #8]
}
 8007e78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e7a:	bf00      	nop
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d0fc      	beq.n	8007e7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e82:	bf00      	nop
 8007e84:	bf00      	nop
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	20000024 	.word	0x20000024
	...

08007ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ea0:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <pxCurrentTCBConst2>)
 8007ea2:	6819      	ldr	r1, [r3, #0]
 8007ea4:	6808      	ldr	r0, [r1, #0]
 8007ea6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007eaa:	f380 8809 	msr	PSP, r0
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f04f 0000 	mov.w	r0, #0
 8007eb6:	f380 8811 	msr	BASEPRI, r0
 8007eba:	f04e 0e0d 	orr.w	lr, lr, #13
 8007ebe:	4770      	bx	lr

08007ec0 <pxCurrentTCBConst2>:
 8007ec0:	20000a04 	.word	0x20000a04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop

08007ec8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007ec8:	4806      	ldr	r0, [pc, #24]	; (8007ee4 <prvPortStartFirstTask+0x1c>)
 8007eca:	6800      	ldr	r0, [r0, #0]
 8007ecc:	6800      	ldr	r0, [r0, #0]
 8007ece:	f380 8808 	msr	MSP, r0
 8007ed2:	b662      	cpsie	i
 8007ed4:	b661      	cpsie	f
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	df00      	svc	0
 8007ee0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007ee2:	bf00      	nop
 8007ee4:	e000ed08 	.word	0xe000ed08

08007ee8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007eee:	4b32      	ldr	r3, [pc, #200]	; (8007fb8 <xPortStartScheduler+0xd0>)
 8007ef0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	22ff      	movs	r2, #255	; 0xff
 8007efe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f08:	78fb      	ldrb	r3, [r7, #3]
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	4b2a      	ldr	r3, [pc, #168]	; (8007fbc <xPortStartScheduler+0xd4>)
 8007f14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f16:	4b2a      	ldr	r3, [pc, #168]	; (8007fc0 <xPortStartScheduler+0xd8>)
 8007f18:	2207      	movs	r2, #7
 8007f1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f1c:	e009      	b.n	8007f32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007f1e:	4b28      	ldr	r3, [pc, #160]	; (8007fc0 <xPortStartScheduler+0xd8>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	4a26      	ldr	r2, [pc, #152]	; (8007fc0 <xPortStartScheduler+0xd8>)
 8007f26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f28:	78fb      	ldrb	r3, [r7, #3]
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f32:	78fb      	ldrb	r3, [r7, #3]
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f3a:	2b80      	cmp	r3, #128	; 0x80
 8007f3c:	d0ef      	beq.n	8007f1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f3e:	4b20      	ldr	r3, [pc, #128]	; (8007fc0 <xPortStartScheduler+0xd8>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f1c3 0307 	rsb	r3, r3, #7
 8007f46:	2b04      	cmp	r3, #4
 8007f48:	d00a      	beq.n	8007f60 <xPortStartScheduler+0x78>
	__asm volatile
 8007f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	60bb      	str	r3, [r7, #8]
}
 8007f5c:	bf00      	nop
 8007f5e:	e7fe      	b.n	8007f5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f60:	4b17      	ldr	r3, [pc, #92]	; (8007fc0 <xPortStartScheduler+0xd8>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	4a16      	ldr	r2, [pc, #88]	; (8007fc0 <xPortStartScheduler+0xd8>)
 8007f68:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f6a:	4b15      	ldr	r3, [pc, #84]	; (8007fc0 <xPortStartScheduler+0xd8>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f72:	4a13      	ldr	r2, [pc, #76]	; (8007fc0 <xPortStartScheduler+0xd8>)
 8007f74:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f7e:	4b11      	ldr	r3, [pc, #68]	; (8007fc4 <xPortStartScheduler+0xdc>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a10      	ldr	r2, [pc, #64]	; (8007fc4 <xPortStartScheduler+0xdc>)
 8007f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f8a:	4b0e      	ldr	r3, [pc, #56]	; (8007fc4 <xPortStartScheduler+0xdc>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a0d      	ldr	r2, [pc, #52]	; (8007fc4 <xPortStartScheduler+0xdc>)
 8007f90:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f94:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f96:	f000 f8b9 	bl	800810c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f9a:	4b0b      	ldr	r3, [pc, #44]	; (8007fc8 <xPortStartScheduler+0xe0>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fa0:	f7ff ff92 	bl	8007ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fa4:	f7ff f8b2 	bl	800710c <vTaskSwitchContext>
	prvTaskExitError();
 8007fa8:	f7ff ff48 	bl	8007e3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	e000e400 	.word	0xe000e400
 8007fbc:	20001030 	.word	0x20001030
 8007fc0:	20001034 	.word	0x20001034
 8007fc4:	e000ed20 	.word	0xe000ed20
 8007fc8:	20000024 	.word	0x20000024

08007fcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	607b      	str	r3, [r7, #4]
}
 8007fe4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007fe6:	4b0f      	ldr	r3, [pc, #60]	; (8008024 <vPortEnterCritical+0x58>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3301      	adds	r3, #1
 8007fec:	4a0d      	ldr	r2, [pc, #52]	; (8008024 <vPortEnterCritical+0x58>)
 8007fee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ff0:	4b0c      	ldr	r3, [pc, #48]	; (8008024 <vPortEnterCritical+0x58>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d10f      	bne.n	8008018 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ff8:	4b0b      	ldr	r3, [pc, #44]	; (8008028 <vPortEnterCritical+0x5c>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00a      	beq.n	8008018 <vPortEnterCritical+0x4c>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	603b      	str	r3, [r7, #0]
}
 8008014:	bf00      	nop
 8008016:	e7fe      	b.n	8008016 <vPortEnterCritical+0x4a>
	}
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	bc80      	pop	{r7}
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	20000024 	.word	0x20000024
 8008028:	e000ed04 	.word	0xe000ed04

0800802c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008032:	4b11      	ldr	r3, [pc, #68]	; (8008078 <vPortExitCritical+0x4c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10a      	bne.n	8008050 <vPortExitCritical+0x24>
	__asm volatile
 800803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	607b      	str	r3, [r7, #4]
}
 800804c:	bf00      	nop
 800804e:	e7fe      	b.n	800804e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008050:	4b09      	ldr	r3, [pc, #36]	; (8008078 <vPortExitCritical+0x4c>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3b01      	subs	r3, #1
 8008056:	4a08      	ldr	r2, [pc, #32]	; (8008078 <vPortExitCritical+0x4c>)
 8008058:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800805a:	4b07      	ldr	r3, [pc, #28]	; (8008078 <vPortExitCritical+0x4c>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d105      	bne.n	800806e <vPortExitCritical+0x42>
 8008062:	2300      	movs	r3, #0
 8008064:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	f383 8811 	msr	BASEPRI, r3
}
 800806c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800806e:	bf00      	nop
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	bc80      	pop	{r7}
 8008076:	4770      	bx	lr
 8008078:	20000024 	.word	0x20000024
 800807c:	00000000 	.word	0x00000000

08008080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008080:	f3ef 8009 	mrs	r0, PSP
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	4b0d      	ldr	r3, [pc, #52]	; (80080c0 <pxCurrentTCBConst>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008090:	6010      	str	r0, [r2, #0]
 8008092:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008096:	f04f 0050 	mov.w	r0, #80	; 0x50
 800809a:	f380 8811 	msr	BASEPRI, r0
 800809e:	f7ff f835 	bl	800710c <vTaskSwitchContext>
 80080a2:	f04f 0000 	mov.w	r0, #0
 80080a6:	f380 8811 	msr	BASEPRI, r0
 80080aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80080ae:	6819      	ldr	r1, [r3, #0]
 80080b0:	6808      	ldr	r0, [r1, #0]
 80080b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80080b6:	f380 8809 	msr	PSP, r0
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	4770      	bx	lr

080080c0 <pxCurrentTCBConst>:
 80080c0:	20000a04 	.word	0x20000a04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop

080080c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	607b      	str	r3, [r7, #4]
}
 80080e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080e2:	f7fe ff55 	bl	8006f90 <xTaskIncrementTick>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080ec:	4b06      	ldr	r3, [pc, #24]	; (8008108 <SysTick_Handler+0x40>)
 80080ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	2300      	movs	r3, #0
 80080f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	f383 8811 	msr	BASEPRI, r3
}
 80080fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008100:	bf00      	nop
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800810c:	b480      	push	{r7}
 800810e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008110:	4b0a      	ldr	r3, [pc, #40]	; (800813c <vPortSetupTimerInterrupt+0x30>)
 8008112:	2200      	movs	r2, #0
 8008114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008116:	4b0a      	ldr	r3, [pc, #40]	; (8008140 <vPortSetupTimerInterrupt+0x34>)
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800811c:	4b09      	ldr	r3, [pc, #36]	; (8008144 <vPortSetupTimerInterrupt+0x38>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a09      	ldr	r2, [pc, #36]	; (8008148 <vPortSetupTimerInterrupt+0x3c>)
 8008122:	fba2 2303 	umull	r2, r3, r2, r3
 8008126:	099b      	lsrs	r3, r3, #6
 8008128:	4a08      	ldr	r2, [pc, #32]	; (800814c <vPortSetupTimerInterrupt+0x40>)
 800812a:	3b01      	subs	r3, #1
 800812c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800812e:	4b03      	ldr	r3, [pc, #12]	; (800813c <vPortSetupTimerInterrupt+0x30>)
 8008130:	2207      	movs	r2, #7
 8008132:	601a      	str	r2, [r3, #0]
}
 8008134:	bf00      	nop
 8008136:	46bd      	mov	sp, r7
 8008138:	bc80      	pop	{r7}
 800813a:	4770      	bx	lr
 800813c:	e000e010 	.word	0xe000e010
 8008140:	e000e018 	.word	0xe000e018
 8008144:	20000014 	.word	0x20000014
 8008148:	10624dd3 	.word	0x10624dd3
 800814c:	e000e014 	.word	0xe000e014

08008150 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008156:	f3ef 8305 	mrs	r3, IPSR
 800815a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b0f      	cmp	r3, #15
 8008160:	d914      	bls.n	800818c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008162:	4a16      	ldr	r2, [pc, #88]	; (80081bc <vPortValidateInterruptPriority+0x6c>)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4413      	add	r3, r2
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800816c:	4b14      	ldr	r3, [pc, #80]	; (80081c0 <vPortValidateInterruptPriority+0x70>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	7afa      	ldrb	r2, [r7, #11]
 8008172:	429a      	cmp	r2, r3
 8008174:	d20a      	bcs.n	800818c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	607b      	str	r3, [r7, #4]
}
 8008188:	bf00      	nop
 800818a:	e7fe      	b.n	800818a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800818c:	4b0d      	ldr	r3, [pc, #52]	; (80081c4 <vPortValidateInterruptPriority+0x74>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008194:	4b0c      	ldr	r3, [pc, #48]	; (80081c8 <vPortValidateInterruptPriority+0x78>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	429a      	cmp	r2, r3
 800819a:	d90a      	bls.n	80081b2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800819c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a0:	f383 8811 	msr	BASEPRI, r3
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	603b      	str	r3, [r7, #0]
}
 80081ae:	bf00      	nop
 80081b0:	e7fe      	b.n	80081b0 <vPortValidateInterruptPriority+0x60>
	}
 80081b2:	bf00      	nop
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bc80      	pop	{r7}
 80081ba:	4770      	bx	lr
 80081bc:	e000e3f0 	.word	0xe000e3f0
 80081c0:	20001030 	.word	0x20001030
 80081c4:	e000ed0c 	.word	0xe000ed0c
 80081c8:	20001034 	.word	0x20001034

080081cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08a      	sub	sp, #40	; 0x28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80081d8:	f7fe fe20 	bl	8006e1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80081dc:	4b58      	ldr	r3, [pc, #352]	; (8008340 <pvPortMalloc+0x174>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80081e4:	f000 f910 	bl	8008408 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80081e8:	4b56      	ldr	r3, [pc, #344]	; (8008344 <pvPortMalloc+0x178>)
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4013      	ands	r3, r2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f040 808e 	bne.w	8008312 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d01d      	beq.n	8008238 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80081fc:	2208      	movs	r2, #8
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4413      	add	r3, r2
 8008202:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f003 0307 	and.w	r3, r3, #7
 800820a:	2b00      	cmp	r3, #0
 800820c:	d014      	beq.n	8008238 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f023 0307 	bic.w	r3, r3, #7
 8008214:	3308      	adds	r3, #8
 8008216:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f003 0307 	and.w	r3, r3, #7
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00a      	beq.n	8008238 <pvPortMalloc+0x6c>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	617b      	str	r3, [r7, #20]
}
 8008234:	bf00      	nop
 8008236:	e7fe      	b.n	8008236 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d069      	beq.n	8008312 <pvPortMalloc+0x146>
 800823e:	4b42      	ldr	r3, [pc, #264]	; (8008348 <pvPortMalloc+0x17c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	429a      	cmp	r2, r3
 8008246:	d864      	bhi.n	8008312 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008248:	4b40      	ldr	r3, [pc, #256]	; (800834c <pvPortMalloc+0x180>)
 800824a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800824c:	4b3f      	ldr	r3, [pc, #252]	; (800834c <pvPortMalloc+0x180>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008252:	e004      	b.n	800825e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	429a      	cmp	r2, r3
 8008266:	d903      	bls.n	8008270 <pvPortMalloc+0xa4>
 8008268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1f1      	bne.n	8008254 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008270:	4b33      	ldr	r3, [pc, #204]	; (8008340 <pvPortMalloc+0x174>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008276:	429a      	cmp	r2, r3
 8008278:	d04b      	beq.n	8008312 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2208      	movs	r2, #8
 8008280:	4413      	add	r3, r2
 8008282:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	1ad2      	subs	r2, r2, r3
 8008294:	2308      	movs	r3, #8
 8008296:	005b      	lsls	r3, r3, #1
 8008298:	429a      	cmp	r2, r3
 800829a:	d91f      	bls.n	80082dc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800829c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4413      	add	r3, r2
 80082a2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00a      	beq.n	80082c4 <pvPortMalloc+0xf8>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	613b      	str	r3, [r7, #16]
}
 80082c0:	bf00      	nop
 80082c2:	e7fe      	b.n	80082c2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	1ad2      	subs	r2, r2, r3
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082d6:	69b8      	ldr	r0, [r7, #24]
 80082d8:	f000 f8f8 	bl	80084cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082dc:	4b1a      	ldr	r3, [pc, #104]	; (8008348 <pvPortMalloc+0x17c>)
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	4a18      	ldr	r2, [pc, #96]	; (8008348 <pvPortMalloc+0x17c>)
 80082e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80082ea:	4b17      	ldr	r3, [pc, #92]	; (8008348 <pvPortMalloc+0x17c>)
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	4b18      	ldr	r3, [pc, #96]	; (8008350 <pvPortMalloc+0x184>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d203      	bcs.n	80082fe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082f6:	4b14      	ldr	r3, [pc, #80]	; (8008348 <pvPortMalloc+0x17c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a15      	ldr	r2, [pc, #84]	; (8008350 <pvPortMalloc+0x184>)
 80082fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	4b10      	ldr	r3, [pc, #64]	; (8008344 <pvPortMalloc+0x178>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	431a      	orrs	r2, r3
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	2200      	movs	r2, #0
 8008310:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008312:	f7fe fd91 	bl	8006e38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00a      	beq.n	8008336 <pvPortMalloc+0x16a>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	60fb      	str	r3, [r7, #12]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <pvPortMalloc+0x168>
	return pvReturn;
 8008336:	69fb      	ldr	r3, [r7, #28]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3728      	adds	r7, #40	; 0x28
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	20001c40 	.word	0x20001c40
 8008344:	20001c4c 	.word	0x20001c4c
 8008348:	20001c44 	.word	0x20001c44
 800834c:	20001c38 	.word	0x20001c38
 8008350:	20001c48 	.word	0x20001c48

08008354 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d048      	beq.n	80083f8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008366:	2308      	movs	r3, #8
 8008368:	425b      	negs	r3, r3
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	4413      	add	r3, r2
 800836e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	685a      	ldr	r2, [r3, #4]
 8008378:	4b21      	ldr	r3, [pc, #132]	; (8008400 <vPortFree+0xac>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4013      	ands	r3, r2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10a      	bne.n	8008398 <vPortFree+0x44>
	__asm volatile
 8008382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	60fb      	str	r3, [r7, #12]
}
 8008394:	bf00      	nop
 8008396:	e7fe      	b.n	8008396 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00a      	beq.n	80083b6 <vPortFree+0x62>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	60bb      	str	r3, [r7, #8]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	4b11      	ldr	r3, [pc, #68]	; (8008400 <vPortFree+0xac>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4013      	ands	r3, r2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d019      	beq.n	80083f8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d115      	bne.n	80083f8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	4b0b      	ldr	r3, [pc, #44]	; (8008400 <vPortFree+0xac>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	43db      	mvns	r3, r3
 80083d6:	401a      	ands	r2, r3
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80083dc:	f7fe fd1e 	bl	8006e1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	4b07      	ldr	r3, [pc, #28]	; (8008404 <vPortFree+0xb0>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4413      	add	r3, r2
 80083ea:	4a06      	ldr	r2, [pc, #24]	; (8008404 <vPortFree+0xb0>)
 80083ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083ee:	6938      	ldr	r0, [r7, #16]
 80083f0:	f000 f86c 	bl	80084cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80083f4:	f7fe fd20 	bl	8006e38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083f8:	bf00      	nop
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	20001c4c 	.word	0x20001c4c
 8008404:	20001c44 	.word	0x20001c44

08008408 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800840e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008412:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008414:	4b27      	ldr	r3, [pc, #156]	; (80084b4 <prvHeapInit+0xac>)
 8008416:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f003 0307 	and.w	r3, r3, #7
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00c      	beq.n	800843c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	3307      	adds	r3, #7
 8008426:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f023 0307 	bic.w	r3, r3, #7
 800842e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	4a1f      	ldr	r2, [pc, #124]	; (80084b4 <prvHeapInit+0xac>)
 8008438:	4413      	add	r3, r2
 800843a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008440:	4a1d      	ldr	r2, [pc, #116]	; (80084b8 <prvHeapInit+0xb0>)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008446:	4b1c      	ldr	r3, [pc, #112]	; (80084b8 <prvHeapInit+0xb0>)
 8008448:	2200      	movs	r2, #0
 800844a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	4413      	add	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008454:	2208      	movs	r2, #8
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	1a9b      	subs	r3, r3, r2
 800845a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f023 0307 	bic.w	r3, r3, #7
 8008462:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	4a15      	ldr	r2, [pc, #84]	; (80084bc <prvHeapInit+0xb4>)
 8008468:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800846a:	4b14      	ldr	r3, [pc, #80]	; (80084bc <prvHeapInit+0xb4>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2200      	movs	r2, #0
 8008470:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008472:	4b12      	ldr	r3, [pc, #72]	; (80084bc <prvHeapInit+0xb4>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	1ad2      	subs	r2, r2, r3
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008488:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <prvHeapInit+0xb4>)
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	4a0a      	ldr	r2, [pc, #40]	; (80084c0 <prvHeapInit+0xb8>)
 8008496:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	4a09      	ldr	r2, [pc, #36]	; (80084c4 <prvHeapInit+0xbc>)
 800849e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80084a0:	4b09      	ldr	r3, [pc, #36]	; (80084c8 <prvHeapInit+0xc0>)
 80084a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80084a6:	601a      	str	r2, [r3, #0]
}
 80084a8:	bf00      	nop
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bc80      	pop	{r7}
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	20001038 	.word	0x20001038
 80084b8:	20001c38 	.word	0x20001c38
 80084bc:	20001c40 	.word	0x20001c40
 80084c0:	20001c48 	.word	0x20001c48
 80084c4:	20001c44 	.word	0x20001c44
 80084c8:	20001c4c 	.word	0x20001c4c

080084cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084d4:	4b27      	ldr	r3, [pc, #156]	; (8008574 <prvInsertBlockIntoFreeList+0xa8>)
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	e002      	b.n	80084e0 <prvInsertBlockIntoFreeList+0x14>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d8f7      	bhi.n	80084da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	4413      	add	r3, r2
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d108      	bne.n	800850e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	441a      	add	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	441a      	add	r2, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	429a      	cmp	r2, r3
 8008520:	d118      	bne.n	8008554 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	4b14      	ldr	r3, [pc, #80]	; (8008578 <prvInsertBlockIntoFreeList+0xac>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	429a      	cmp	r2, r3
 800852c:	d00d      	beq.n	800854a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	441a      	add	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	e008      	b.n	800855c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800854a:	4b0b      	ldr	r3, [pc, #44]	; (8008578 <prvInsertBlockIntoFreeList+0xac>)
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	e003      	b.n	800855c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	429a      	cmp	r2, r3
 8008562:	d002      	beq.n	800856a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800856a:	bf00      	nop
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	bc80      	pop	{r7}
 8008572:	4770      	bx	lr
 8008574:	20001c38 	.word	0x20001c38
 8008578:	20001c40 	.word	0x20001c40

0800857c <__errno>:
 800857c:	4b01      	ldr	r3, [pc, #4]	; (8008584 <__errno+0x8>)
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	20000028 	.word	0x20000028

08008588 <__libc_init_array>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	2600      	movs	r6, #0
 800858c:	4d0c      	ldr	r5, [pc, #48]	; (80085c0 <__libc_init_array+0x38>)
 800858e:	4c0d      	ldr	r4, [pc, #52]	; (80085c4 <__libc_init_array+0x3c>)
 8008590:	1b64      	subs	r4, r4, r5
 8008592:	10a4      	asrs	r4, r4, #2
 8008594:	42a6      	cmp	r6, r4
 8008596:	d109      	bne.n	80085ac <__libc_init_array+0x24>
 8008598:	f000 fd06 	bl	8008fa8 <_init>
 800859c:	2600      	movs	r6, #0
 800859e:	4d0a      	ldr	r5, [pc, #40]	; (80085c8 <__libc_init_array+0x40>)
 80085a0:	4c0a      	ldr	r4, [pc, #40]	; (80085cc <__libc_init_array+0x44>)
 80085a2:	1b64      	subs	r4, r4, r5
 80085a4:	10a4      	asrs	r4, r4, #2
 80085a6:	42a6      	cmp	r6, r4
 80085a8:	d105      	bne.n	80085b6 <__libc_init_array+0x2e>
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b0:	4798      	blx	r3
 80085b2:	3601      	adds	r6, #1
 80085b4:	e7ee      	b.n	8008594 <__libc_init_array+0xc>
 80085b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ba:	4798      	blx	r3
 80085bc:	3601      	adds	r6, #1
 80085be:	e7f2      	b.n	80085a6 <__libc_init_array+0x1e>
 80085c0:	080092a8 	.word	0x080092a8
 80085c4:	080092a8 	.word	0x080092a8
 80085c8:	080092a8 	.word	0x080092a8
 80085cc:	080092ac 	.word	0x080092ac

080085d0 <__retarget_lock_acquire_recursive>:
 80085d0:	4770      	bx	lr

080085d2 <__retarget_lock_release_recursive>:
 80085d2:	4770      	bx	lr

080085d4 <memcpy>:
 80085d4:	440a      	add	r2, r1
 80085d6:	4291      	cmp	r1, r2
 80085d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80085dc:	d100      	bne.n	80085e0 <memcpy+0xc>
 80085de:	4770      	bx	lr
 80085e0:	b510      	push	{r4, lr}
 80085e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085e6:	4291      	cmp	r1, r2
 80085e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ec:	d1f9      	bne.n	80085e2 <memcpy+0xe>
 80085ee:	bd10      	pop	{r4, pc}

080085f0 <memset>:
 80085f0:	4603      	mov	r3, r0
 80085f2:	4402      	add	r2, r0
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d100      	bne.n	80085fa <memset+0xa>
 80085f8:	4770      	bx	lr
 80085fa:	f803 1b01 	strb.w	r1, [r3], #1
 80085fe:	e7f9      	b.n	80085f4 <memset+0x4>

08008600 <sbrk_aligned>:
 8008600:	b570      	push	{r4, r5, r6, lr}
 8008602:	4e0e      	ldr	r6, [pc, #56]	; (800863c <sbrk_aligned+0x3c>)
 8008604:	460c      	mov	r4, r1
 8008606:	6831      	ldr	r1, [r6, #0]
 8008608:	4605      	mov	r5, r0
 800860a:	b911      	cbnz	r1, 8008612 <sbrk_aligned+0x12>
 800860c:	f000 f8f6 	bl	80087fc <_sbrk_r>
 8008610:	6030      	str	r0, [r6, #0]
 8008612:	4621      	mov	r1, r4
 8008614:	4628      	mov	r0, r5
 8008616:	f000 f8f1 	bl	80087fc <_sbrk_r>
 800861a:	1c43      	adds	r3, r0, #1
 800861c:	d00a      	beq.n	8008634 <sbrk_aligned+0x34>
 800861e:	1cc4      	adds	r4, r0, #3
 8008620:	f024 0403 	bic.w	r4, r4, #3
 8008624:	42a0      	cmp	r0, r4
 8008626:	d007      	beq.n	8008638 <sbrk_aligned+0x38>
 8008628:	1a21      	subs	r1, r4, r0
 800862a:	4628      	mov	r0, r5
 800862c:	f000 f8e6 	bl	80087fc <_sbrk_r>
 8008630:	3001      	adds	r0, #1
 8008632:	d101      	bne.n	8008638 <sbrk_aligned+0x38>
 8008634:	f04f 34ff 	mov.w	r4, #4294967295
 8008638:	4620      	mov	r0, r4
 800863a:	bd70      	pop	{r4, r5, r6, pc}
 800863c:	20001c58 	.word	0x20001c58

08008640 <_malloc_r>:
 8008640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008644:	1ccd      	adds	r5, r1, #3
 8008646:	f025 0503 	bic.w	r5, r5, #3
 800864a:	3508      	adds	r5, #8
 800864c:	2d0c      	cmp	r5, #12
 800864e:	bf38      	it	cc
 8008650:	250c      	movcc	r5, #12
 8008652:	2d00      	cmp	r5, #0
 8008654:	4607      	mov	r7, r0
 8008656:	db01      	blt.n	800865c <_malloc_r+0x1c>
 8008658:	42a9      	cmp	r1, r5
 800865a:	d905      	bls.n	8008668 <_malloc_r+0x28>
 800865c:	230c      	movs	r3, #12
 800865e:	2600      	movs	r6, #0
 8008660:	603b      	str	r3, [r7, #0]
 8008662:	4630      	mov	r0, r6
 8008664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008668:	4e2e      	ldr	r6, [pc, #184]	; (8008724 <_malloc_r+0xe4>)
 800866a:	f000 f8f7 	bl	800885c <__malloc_lock>
 800866e:	6833      	ldr	r3, [r6, #0]
 8008670:	461c      	mov	r4, r3
 8008672:	bb34      	cbnz	r4, 80086c2 <_malloc_r+0x82>
 8008674:	4629      	mov	r1, r5
 8008676:	4638      	mov	r0, r7
 8008678:	f7ff ffc2 	bl	8008600 <sbrk_aligned>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	4604      	mov	r4, r0
 8008680:	d14d      	bne.n	800871e <_malloc_r+0xde>
 8008682:	6834      	ldr	r4, [r6, #0]
 8008684:	4626      	mov	r6, r4
 8008686:	2e00      	cmp	r6, #0
 8008688:	d140      	bne.n	800870c <_malloc_r+0xcc>
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	4631      	mov	r1, r6
 800868e:	4638      	mov	r0, r7
 8008690:	eb04 0803 	add.w	r8, r4, r3
 8008694:	f000 f8b2 	bl	80087fc <_sbrk_r>
 8008698:	4580      	cmp	r8, r0
 800869a:	d13a      	bne.n	8008712 <_malloc_r+0xd2>
 800869c:	6821      	ldr	r1, [r4, #0]
 800869e:	3503      	adds	r5, #3
 80086a0:	1a6d      	subs	r5, r5, r1
 80086a2:	f025 0503 	bic.w	r5, r5, #3
 80086a6:	3508      	adds	r5, #8
 80086a8:	2d0c      	cmp	r5, #12
 80086aa:	bf38      	it	cc
 80086ac:	250c      	movcc	r5, #12
 80086ae:	4638      	mov	r0, r7
 80086b0:	4629      	mov	r1, r5
 80086b2:	f7ff ffa5 	bl	8008600 <sbrk_aligned>
 80086b6:	3001      	adds	r0, #1
 80086b8:	d02b      	beq.n	8008712 <_malloc_r+0xd2>
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	442b      	add	r3, r5
 80086be:	6023      	str	r3, [r4, #0]
 80086c0:	e00e      	b.n	80086e0 <_malloc_r+0xa0>
 80086c2:	6822      	ldr	r2, [r4, #0]
 80086c4:	1b52      	subs	r2, r2, r5
 80086c6:	d41e      	bmi.n	8008706 <_malloc_r+0xc6>
 80086c8:	2a0b      	cmp	r2, #11
 80086ca:	d916      	bls.n	80086fa <_malloc_r+0xba>
 80086cc:	1961      	adds	r1, r4, r5
 80086ce:	42a3      	cmp	r3, r4
 80086d0:	6025      	str	r5, [r4, #0]
 80086d2:	bf18      	it	ne
 80086d4:	6059      	strne	r1, [r3, #4]
 80086d6:	6863      	ldr	r3, [r4, #4]
 80086d8:	bf08      	it	eq
 80086da:	6031      	streq	r1, [r6, #0]
 80086dc:	5162      	str	r2, [r4, r5]
 80086de:	604b      	str	r3, [r1, #4]
 80086e0:	4638      	mov	r0, r7
 80086e2:	f104 060b 	add.w	r6, r4, #11
 80086e6:	f000 f8bf 	bl	8008868 <__malloc_unlock>
 80086ea:	f026 0607 	bic.w	r6, r6, #7
 80086ee:	1d23      	adds	r3, r4, #4
 80086f0:	1af2      	subs	r2, r6, r3
 80086f2:	d0b6      	beq.n	8008662 <_malloc_r+0x22>
 80086f4:	1b9b      	subs	r3, r3, r6
 80086f6:	50a3      	str	r3, [r4, r2]
 80086f8:	e7b3      	b.n	8008662 <_malloc_r+0x22>
 80086fa:	6862      	ldr	r2, [r4, #4]
 80086fc:	42a3      	cmp	r3, r4
 80086fe:	bf0c      	ite	eq
 8008700:	6032      	streq	r2, [r6, #0]
 8008702:	605a      	strne	r2, [r3, #4]
 8008704:	e7ec      	b.n	80086e0 <_malloc_r+0xa0>
 8008706:	4623      	mov	r3, r4
 8008708:	6864      	ldr	r4, [r4, #4]
 800870a:	e7b2      	b.n	8008672 <_malloc_r+0x32>
 800870c:	4634      	mov	r4, r6
 800870e:	6876      	ldr	r6, [r6, #4]
 8008710:	e7b9      	b.n	8008686 <_malloc_r+0x46>
 8008712:	230c      	movs	r3, #12
 8008714:	4638      	mov	r0, r7
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	f000 f8a6 	bl	8008868 <__malloc_unlock>
 800871c:	e7a1      	b.n	8008662 <_malloc_r+0x22>
 800871e:	6025      	str	r5, [r4, #0]
 8008720:	e7de      	b.n	80086e0 <_malloc_r+0xa0>
 8008722:	bf00      	nop
 8008724:	20001c54 	.word	0x20001c54

08008728 <cleanup_glue>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	460c      	mov	r4, r1
 800872c:	6809      	ldr	r1, [r1, #0]
 800872e:	4605      	mov	r5, r0
 8008730:	b109      	cbz	r1, 8008736 <cleanup_glue+0xe>
 8008732:	f7ff fff9 	bl	8008728 <cleanup_glue>
 8008736:	4621      	mov	r1, r4
 8008738:	4628      	mov	r0, r5
 800873a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800873e:	f000 b899 	b.w	8008874 <_free_r>
	...

08008744 <_reclaim_reent>:
 8008744:	4b2c      	ldr	r3, [pc, #176]	; (80087f8 <_reclaim_reent+0xb4>)
 8008746:	b570      	push	{r4, r5, r6, lr}
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4604      	mov	r4, r0
 800874c:	4283      	cmp	r3, r0
 800874e:	d051      	beq.n	80087f4 <_reclaim_reent+0xb0>
 8008750:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008752:	b143      	cbz	r3, 8008766 <_reclaim_reent+0x22>
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d14a      	bne.n	80087f0 <_reclaim_reent+0xac>
 800875a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800875c:	6819      	ldr	r1, [r3, #0]
 800875e:	b111      	cbz	r1, 8008766 <_reclaim_reent+0x22>
 8008760:	4620      	mov	r0, r4
 8008762:	f000 f887 	bl	8008874 <_free_r>
 8008766:	6961      	ldr	r1, [r4, #20]
 8008768:	b111      	cbz	r1, 8008770 <_reclaim_reent+0x2c>
 800876a:	4620      	mov	r0, r4
 800876c:	f000 f882 	bl	8008874 <_free_r>
 8008770:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008772:	b111      	cbz	r1, 800877a <_reclaim_reent+0x36>
 8008774:	4620      	mov	r0, r4
 8008776:	f000 f87d 	bl	8008874 <_free_r>
 800877a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800877c:	b111      	cbz	r1, 8008784 <_reclaim_reent+0x40>
 800877e:	4620      	mov	r0, r4
 8008780:	f000 f878 	bl	8008874 <_free_r>
 8008784:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008786:	b111      	cbz	r1, 800878e <_reclaim_reent+0x4a>
 8008788:	4620      	mov	r0, r4
 800878a:	f000 f873 	bl	8008874 <_free_r>
 800878e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008790:	b111      	cbz	r1, 8008798 <_reclaim_reent+0x54>
 8008792:	4620      	mov	r0, r4
 8008794:	f000 f86e 	bl	8008874 <_free_r>
 8008798:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800879a:	b111      	cbz	r1, 80087a2 <_reclaim_reent+0x5e>
 800879c:	4620      	mov	r0, r4
 800879e:	f000 f869 	bl	8008874 <_free_r>
 80087a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80087a4:	b111      	cbz	r1, 80087ac <_reclaim_reent+0x68>
 80087a6:	4620      	mov	r0, r4
 80087a8:	f000 f864 	bl	8008874 <_free_r>
 80087ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087ae:	b111      	cbz	r1, 80087b6 <_reclaim_reent+0x72>
 80087b0:	4620      	mov	r0, r4
 80087b2:	f000 f85f 	bl	8008874 <_free_r>
 80087b6:	69a3      	ldr	r3, [r4, #24]
 80087b8:	b1e3      	cbz	r3, 80087f4 <_reclaim_reent+0xb0>
 80087ba:	4620      	mov	r0, r4
 80087bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80087be:	4798      	blx	r3
 80087c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80087c2:	b1b9      	cbz	r1, 80087f4 <_reclaim_reent+0xb0>
 80087c4:	4620      	mov	r0, r4
 80087c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80087ca:	f7ff bfad 	b.w	8008728 <cleanup_glue>
 80087ce:	5949      	ldr	r1, [r1, r5]
 80087d0:	b941      	cbnz	r1, 80087e4 <_reclaim_reent+0xa0>
 80087d2:	3504      	adds	r5, #4
 80087d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087d6:	2d80      	cmp	r5, #128	; 0x80
 80087d8:	68d9      	ldr	r1, [r3, #12]
 80087da:	d1f8      	bne.n	80087ce <_reclaim_reent+0x8a>
 80087dc:	4620      	mov	r0, r4
 80087de:	f000 f849 	bl	8008874 <_free_r>
 80087e2:	e7ba      	b.n	800875a <_reclaim_reent+0x16>
 80087e4:	680e      	ldr	r6, [r1, #0]
 80087e6:	4620      	mov	r0, r4
 80087e8:	f000 f844 	bl	8008874 <_free_r>
 80087ec:	4631      	mov	r1, r6
 80087ee:	e7ef      	b.n	80087d0 <_reclaim_reent+0x8c>
 80087f0:	2500      	movs	r5, #0
 80087f2:	e7ef      	b.n	80087d4 <_reclaim_reent+0x90>
 80087f4:	bd70      	pop	{r4, r5, r6, pc}
 80087f6:	bf00      	nop
 80087f8:	20000028 	.word	0x20000028

080087fc <_sbrk_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	2300      	movs	r3, #0
 8008800:	4d05      	ldr	r5, [pc, #20]	; (8008818 <_sbrk_r+0x1c>)
 8008802:	4604      	mov	r4, r0
 8008804:	4608      	mov	r0, r1
 8008806:	602b      	str	r3, [r5, #0]
 8008808:	f7f9 fa48 	bl	8001c9c <_sbrk>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_sbrk_r+0x1a>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b103      	cbz	r3, 8008816 <_sbrk_r+0x1a>
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	20001c5c 	.word	0x20001c5c

0800881c <siprintf>:
 800881c:	b40e      	push	{r1, r2, r3}
 800881e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008822:	b500      	push	{lr}
 8008824:	b09c      	sub	sp, #112	; 0x70
 8008826:	ab1d      	add	r3, sp, #116	; 0x74
 8008828:	9002      	str	r0, [sp, #8]
 800882a:	9006      	str	r0, [sp, #24]
 800882c:	9107      	str	r1, [sp, #28]
 800882e:	9104      	str	r1, [sp, #16]
 8008830:	4808      	ldr	r0, [pc, #32]	; (8008854 <siprintf+0x38>)
 8008832:	4909      	ldr	r1, [pc, #36]	; (8008858 <siprintf+0x3c>)
 8008834:	f853 2b04 	ldr.w	r2, [r3], #4
 8008838:	9105      	str	r1, [sp, #20]
 800883a:	6800      	ldr	r0, [r0, #0]
 800883c:	a902      	add	r1, sp, #8
 800883e:	9301      	str	r3, [sp, #4]
 8008840:	f000 f8bc 	bl	80089bc <_svfiprintf_r>
 8008844:	2200      	movs	r2, #0
 8008846:	9b02      	ldr	r3, [sp, #8]
 8008848:	701a      	strb	r2, [r3, #0]
 800884a:	b01c      	add	sp, #112	; 0x70
 800884c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008850:	b003      	add	sp, #12
 8008852:	4770      	bx	lr
 8008854:	20000028 	.word	0x20000028
 8008858:	ffff0208 	.word	0xffff0208

0800885c <__malloc_lock>:
 800885c:	4801      	ldr	r0, [pc, #4]	; (8008864 <__malloc_lock+0x8>)
 800885e:	f7ff beb7 	b.w	80085d0 <__retarget_lock_acquire_recursive>
 8008862:	bf00      	nop
 8008864:	20001c50 	.word	0x20001c50

08008868 <__malloc_unlock>:
 8008868:	4801      	ldr	r0, [pc, #4]	; (8008870 <__malloc_unlock+0x8>)
 800886a:	f7ff beb2 	b.w	80085d2 <__retarget_lock_release_recursive>
 800886e:	bf00      	nop
 8008870:	20001c50 	.word	0x20001c50

08008874 <_free_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4605      	mov	r5, r0
 8008878:	2900      	cmp	r1, #0
 800887a:	d040      	beq.n	80088fe <_free_r+0x8a>
 800887c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008880:	1f0c      	subs	r4, r1, #4
 8008882:	2b00      	cmp	r3, #0
 8008884:	bfb8      	it	lt
 8008886:	18e4      	addlt	r4, r4, r3
 8008888:	f7ff ffe8 	bl	800885c <__malloc_lock>
 800888c:	4a1c      	ldr	r2, [pc, #112]	; (8008900 <_free_r+0x8c>)
 800888e:	6813      	ldr	r3, [r2, #0]
 8008890:	b933      	cbnz	r3, 80088a0 <_free_r+0x2c>
 8008892:	6063      	str	r3, [r4, #4]
 8008894:	6014      	str	r4, [r2, #0]
 8008896:	4628      	mov	r0, r5
 8008898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800889c:	f7ff bfe4 	b.w	8008868 <__malloc_unlock>
 80088a0:	42a3      	cmp	r3, r4
 80088a2:	d908      	bls.n	80088b6 <_free_r+0x42>
 80088a4:	6820      	ldr	r0, [r4, #0]
 80088a6:	1821      	adds	r1, r4, r0
 80088a8:	428b      	cmp	r3, r1
 80088aa:	bf01      	itttt	eq
 80088ac:	6819      	ldreq	r1, [r3, #0]
 80088ae:	685b      	ldreq	r3, [r3, #4]
 80088b0:	1809      	addeq	r1, r1, r0
 80088b2:	6021      	streq	r1, [r4, #0]
 80088b4:	e7ed      	b.n	8008892 <_free_r+0x1e>
 80088b6:	461a      	mov	r2, r3
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	b10b      	cbz	r3, 80088c0 <_free_r+0x4c>
 80088bc:	42a3      	cmp	r3, r4
 80088be:	d9fa      	bls.n	80088b6 <_free_r+0x42>
 80088c0:	6811      	ldr	r1, [r2, #0]
 80088c2:	1850      	adds	r0, r2, r1
 80088c4:	42a0      	cmp	r0, r4
 80088c6:	d10b      	bne.n	80088e0 <_free_r+0x6c>
 80088c8:	6820      	ldr	r0, [r4, #0]
 80088ca:	4401      	add	r1, r0
 80088cc:	1850      	adds	r0, r2, r1
 80088ce:	4283      	cmp	r3, r0
 80088d0:	6011      	str	r1, [r2, #0]
 80088d2:	d1e0      	bne.n	8008896 <_free_r+0x22>
 80088d4:	6818      	ldr	r0, [r3, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	4401      	add	r1, r0
 80088da:	6011      	str	r1, [r2, #0]
 80088dc:	6053      	str	r3, [r2, #4]
 80088de:	e7da      	b.n	8008896 <_free_r+0x22>
 80088e0:	d902      	bls.n	80088e8 <_free_r+0x74>
 80088e2:	230c      	movs	r3, #12
 80088e4:	602b      	str	r3, [r5, #0]
 80088e6:	e7d6      	b.n	8008896 <_free_r+0x22>
 80088e8:	6820      	ldr	r0, [r4, #0]
 80088ea:	1821      	adds	r1, r4, r0
 80088ec:	428b      	cmp	r3, r1
 80088ee:	bf01      	itttt	eq
 80088f0:	6819      	ldreq	r1, [r3, #0]
 80088f2:	685b      	ldreq	r3, [r3, #4]
 80088f4:	1809      	addeq	r1, r1, r0
 80088f6:	6021      	streq	r1, [r4, #0]
 80088f8:	6063      	str	r3, [r4, #4]
 80088fa:	6054      	str	r4, [r2, #4]
 80088fc:	e7cb      	b.n	8008896 <_free_r+0x22>
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	20001c54 	.word	0x20001c54

08008904 <__ssputs_r>:
 8008904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008908:	688e      	ldr	r6, [r1, #8]
 800890a:	4682      	mov	sl, r0
 800890c:	429e      	cmp	r6, r3
 800890e:	460c      	mov	r4, r1
 8008910:	4690      	mov	r8, r2
 8008912:	461f      	mov	r7, r3
 8008914:	d838      	bhi.n	8008988 <__ssputs_r+0x84>
 8008916:	898a      	ldrh	r2, [r1, #12]
 8008918:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800891c:	d032      	beq.n	8008984 <__ssputs_r+0x80>
 800891e:	6825      	ldr	r5, [r4, #0]
 8008920:	6909      	ldr	r1, [r1, #16]
 8008922:	3301      	adds	r3, #1
 8008924:	eba5 0901 	sub.w	r9, r5, r1
 8008928:	6965      	ldr	r5, [r4, #20]
 800892a:	444b      	add	r3, r9
 800892c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008930:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008934:	106d      	asrs	r5, r5, #1
 8008936:	429d      	cmp	r5, r3
 8008938:	bf38      	it	cc
 800893a:	461d      	movcc	r5, r3
 800893c:	0553      	lsls	r3, r2, #21
 800893e:	d531      	bpl.n	80089a4 <__ssputs_r+0xa0>
 8008940:	4629      	mov	r1, r5
 8008942:	f7ff fe7d 	bl	8008640 <_malloc_r>
 8008946:	4606      	mov	r6, r0
 8008948:	b950      	cbnz	r0, 8008960 <__ssputs_r+0x5c>
 800894a:	230c      	movs	r3, #12
 800894c:	f04f 30ff 	mov.w	r0, #4294967295
 8008950:	f8ca 3000 	str.w	r3, [sl]
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800895a:	81a3      	strh	r3, [r4, #12]
 800895c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008960:	464a      	mov	r2, r9
 8008962:	6921      	ldr	r1, [r4, #16]
 8008964:	f7ff fe36 	bl	80085d4 <memcpy>
 8008968:	89a3      	ldrh	r3, [r4, #12]
 800896a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800896e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008972:	81a3      	strh	r3, [r4, #12]
 8008974:	6126      	str	r6, [r4, #16]
 8008976:	444e      	add	r6, r9
 8008978:	6026      	str	r6, [r4, #0]
 800897a:	463e      	mov	r6, r7
 800897c:	6165      	str	r5, [r4, #20]
 800897e:	eba5 0509 	sub.w	r5, r5, r9
 8008982:	60a5      	str	r5, [r4, #8]
 8008984:	42be      	cmp	r6, r7
 8008986:	d900      	bls.n	800898a <__ssputs_r+0x86>
 8008988:	463e      	mov	r6, r7
 800898a:	4632      	mov	r2, r6
 800898c:	4641      	mov	r1, r8
 800898e:	6820      	ldr	r0, [r4, #0]
 8008990:	f000 fab8 	bl	8008f04 <memmove>
 8008994:	68a3      	ldr	r3, [r4, #8]
 8008996:	2000      	movs	r0, #0
 8008998:	1b9b      	subs	r3, r3, r6
 800899a:	60a3      	str	r3, [r4, #8]
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	4433      	add	r3, r6
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	e7db      	b.n	800895c <__ssputs_r+0x58>
 80089a4:	462a      	mov	r2, r5
 80089a6:	f000 fac7 	bl	8008f38 <_realloc_r>
 80089aa:	4606      	mov	r6, r0
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d1e1      	bne.n	8008974 <__ssputs_r+0x70>
 80089b0:	4650      	mov	r0, sl
 80089b2:	6921      	ldr	r1, [r4, #16]
 80089b4:	f7ff ff5e 	bl	8008874 <_free_r>
 80089b8:	e7c7      	b.n	800894a <__ssputs_r+0x46>
	...

080089bc <_svfiprintf_r>:
 80089bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c0:	4698      	mov	r8, r3
 80089c2:	898b      	ldrh	r3, [r1, #12]
 80089c4:	4607      	mov	r7, r0
 80089c6:	061b      	lsls	r3, r3, #24
 80089c8:	460d      	mov	r5, r1
 80089ca:	4614      	mov	r4, r2
 80089cc:	b09d      	sub	sp, #116	; 0x74
 80089ce:	d50e      	bpl.n	80089ee <_svfiprintf_r+0x32>
 80089d0:	690b      	ldr	r3, [r1, #16]
 80089d2:	b963      	cbnz	r3, 80089ee <_svfiprintf_r+0x32>
 80089d4:	2140      	movs	r1, #64	; 0x40
 80089d6:	f7ff fe33 	bl	8008640 <_malloc_r>
 80089da:	6028      	str	r0, [r5, #0]
 80089dc:	6128      	str	r0, [r5, #16]
 80089de:	b920      	cbnz	r0, 80089ea <_svfiprintf_r+0x2e>
 80089e0:	230c      	movs	r3, #12
 80089e2:	603b      	str	r3, [r7, #0]
 80089e4:	f04f 30ff 	mov.w	r0, #4294967295
 80089e8:	e0d1      	b.n	8008b8e <_svfiprintf_r+0x1d2>
 80089ea:	2340      	movs	r3, #64	; 0x40
 80089ec:	616b      	str	r3, [r5, #20]
 80089ee:	2300      	movs	r3, #0
 80089f0:	9309      	str	r3, [sp, #36]	; 0x24
 80089f2:	2320      	movs	r3, #32
 80089f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089f8:	2330      	movs	r3, #48	; 0x30
 80089fa:	f04f 0901 	mov.w	r9, #1
 80089fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ba8 <_svfiprintf_r+0x1ec>
 8008a06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a0a:	4623      	mov	r3, r4
 8008a0c:	469a      	mov	sl, r3
 8008a0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a12:	b10a      	cbz	r2, 8008a18 <_svfiprintf_r+0x5c>
 8008a14:	2a25      	cmp	r2, #37	; 0x25
 8008a16:	d1f9      	bne.n	8008a0c <_svfiprintf_r+0x50>
 8008a18:	ebba 0b04 	subs.w	fp, sl, r4
 8008a1c:	d00b      	beq.n	8008a36 <_svfiprintf_r+0x7a>
 8008a1e:	465b      	mov	r3, fp
 8008a20:	4622      	mov	r2, r4
 8008a22:	4629      	mov	r1, r5
 8008a24:	4638      	mov	r0, r7
 8008a26:	f7ff ff6d 	bl	8008904 <__ssputs_r>
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	f000 80aa 	beq.w	8008b84 <_svfiprintf_r+0x1c8>
 8008a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a32:	445a      	add	r2, fp
 8008a34:	9209      	str	r2, [sp, #36]	; 0x24
 8008a36:	f89a 3000 	ldrb.w	r3, [sl]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 80a2 	beq.w	8008b84 <_svfiprintf_r+0x1c8>
 8008a40:	2300      	movs	r3, #0
 8008a42:	f04f 32ff 	mov.w	r2, #4294967295
 8008a46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a4a:	f10a 0a01 	add.w	sl, sl, #1
 8008a4e:	9304      	str	r3, [sp, #16]
 8008a50:	9307      	str	r3, [sp, #28]
 8008a52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a56:	931a      	str	r3, [sp, #104]	; 0x68
 8008a58:	4654      	mov	r4, sl
 8008a5a:	2205      	movs	r2, #5
 8008a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a60:	4851      	ldr	r0, [pc, #324]	; (8008ba8 <_svfiprintf_r+0x1ec>)
 8008a62:	f000 fa41 	bl	8008ee8 <memchr>
 8008a66:	9a04      	ldr	r2, [sp, #16]
 8008a68:	b9d8      	cbnz	r0, 8008aa2 <_svfiprintf_r+0xe6>
 8008a6a:	06d0      	lsls	r0, r2, #27
 8008a6c:	bf44      	itt	mi
 8008a6e:	2320      	movmi	r3, #32
 8008a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a74:	0711      	lsls	r1, r2, #28
 8008a76:	bf44      	itt	mi
 8008a78:	232b      	movmi	r3, #43	; 0x2b
 8008a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a82:	2b2a      	cmp	r3, #42	; 0x2a
 8008a84:	d015      	beq.n	8008ab2 <_svfiprintf_r+0xf6>
 8008a86:	4654      	mov	r4, sl
 8008a88:	2000      	movs	r0, #0
 8008a8a:	f04f 0c0a 	mov.w	ip, #10
 8008a8e:	9a07      	ldr	r2, [sp, #28]
 8008a90:	4621      	mov	r1, r4
 8008a92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a96:	3b30      	subs	r3, #48	; 0x30
 8008a98:	2b09      	cmp	r3, #9
 8008a9a:	d94e      	bls.n	8008b3a <_svfiprintf_r+0x17e>
 8008a9c:	b1b0      	cbz	r0, 8008acc <_svfiprintf_r+0x110>
 8008a9e:	9207      	str	r2, [sp, #28]
 8008aa0:	e014      	b.n	8008acc <_svfiprintf_r+0x110>
 8008aa2:	eba0 0308 	sub.w	r3, r0, r8
 8008aa6:	fa09 f303 	lsl.w	r3, r9, r3
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	46a2      	mov	sl, r4
 8008aae:	9304      	str	r3, [sp, #16]
 8008ab0:	e7d2      	b.n	8008a58 <_svfiprintf_r+0x9c>
 8008ab2:	9b03      	ldr	r3, [sp, #12]
 8008ab4:	1d19      	adds	r1, r3, #4
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	9103      	str	r1, [sp, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	bfbb      	ittet	lt
 8008abe:	425b      	neglt	r3, r3
 8008ac0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ac4:	9307      	strge	r3, [sp, #28]
 8008ac6:	9307      	strlt	r3, [sp, #28]
 8008ac8:	bfb8      	it	lt
 8008aca:	9204      	strlt	r2, [sp, #16]
 8008acc:	7823      	ldrb	r3, [r4, #0]
 8008ace:	2b2e      	cmp	r3, #46	; 0x2e
 8008ad0:	d10c      	bne.n	8008aec <_svfiprintf_r+0x130>
 8008ad2:	7863      	ldrb	r3, [r4, #1]
 8008ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad6:	d135      	bne.n	8008b44 <_svfiprintf_r+0x188>
 8008ad8:	9b03      	ldr	r3, [sp, #12]
 8008ada:	3402      	adds	r4, #2
 8008adc:	1d1a      	adds	r2, r3, #4
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	9203      	str	r2, [sp, #12]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	bfb8      	it	lt
 8008ae6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008aea:	9305      	str	r3, [sp, #20]
 8008aec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008bac <_svfiprintf_r+0x1f0>
 8008af0:	2203      	movs	r2, #3
 8008af2:	4650      	mov	r0, sl
 8008af4:	7821      	ldrb	r1, [r4, #0]
 8008af6:	f000 f9f7 	bl	8008ee8 <memchr>
 8008afa:	b140      	cbz	r0, 8008b0e <_svfiprintf_r+0x152>
 8008afc:	2340      	movs	r3, #64	; 0x40
 8008afe:	eba0 000a 	sub.w	r0, r0, sl
 8008b02:	fa03 f000 	lsl.w	r0, r3, r0
 8008b06:	9b04      	ldr	r3, [sp, #16]
 8008b08:	3401      	adds	r4, #1
 8008b0a:	4303      	orrs	r3, r0
 8008b0c:	9304      	str	r3, [sp, #16]
 8008b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b12:	2206      	movs	r2, #6
 8008b14:	4826      	ldr	r0, [pc, #152]	; (8008bb0 <_svfiprintf_r+0x1f4>)
 8008b16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b1a:	f000 f9e5 	bl	8008ee8 <memchr>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d038      	beq.n	8008b94 <_svfiprintf_r+0x1d8>
 8008b22:	4b24      	ldr	r3, [pc, #144]	; (8008bb4 <_svfiprintf_r+0x1f8>)
 8008b24:	bb1b      	cbnz	r3, 8008b6e <_svfiprintf_r+0x1b2>
 8008b26:	9b03      	ldr	r3, [sp, #12]
 8008b28:	3307      	adds	r3, #7
 8008b2a:	f023 0307 	bic.w	r3, r3, #7
 8008b2e:	3308      	adds	r3, #8
 8008b30:	9303      	str	r3, [sp, #12]
 8008b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b34:	4433      	add	r3, r6
 8008b36:	9309      	str	r3, [sp, #36]	; 0x24
 8008b38:	e767      	b.n	8008a0a <_svfiprintf_r+0x4e>
 8008b3a:	460c      	mov	r4, r1
 8008b3c:	2001      	movs	r0, #1
 8008b3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b42:	e7a5      	b.n	8008a90 <_svfiprintf_r+0xd4>
 8008b44:	2300      	movs	r3, #0
 8008b46:	f04f 0c0a 	mov.w	ip, #10
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	3401      	adds	r4, #1
 8008b4e:	9305      	str	r3, [sp, #20]
 8008b50:	4620      	mov	r0, r4
 8008b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b56:	3a30      	subs	r2, #48	; 0x30
 8008b58:	2a09      	cmp	r2, #9
 8008b5a:	d903      	bls.n	8008b64 <_svfiprintf_r+0x1a8>
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d0c5      	beq.n	8008aec <_svfiprintf_r+0x130>
 8008b60:	9105      	str	r1, [sp, #20]
 8008b62:	e7c3      	b.n	8008aec <_svfiprintf_r+0x130>
 8008b64:	4604      	mov	r4, r0
 8008b66:	2301      	movs	r3, #1
 8008b68:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b6c:	e7f0      	b.n	8008b50 <_svfiprintf_r+0x194>
 8008b6e:	ab03      	add	r3, sp, #12
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	462a      	mov	r2, r5
 8008b74:	4638      	mov	r0, r7
 8008b76:	4b10      	ldr	r3, [pc, #64]	; (8008bb8 <_svfiprintf_r+0x1fc>)
 8008b78:	a904      	add	r1, sp, #16
 8008b7a:	f3af 8000 	nop.w
 8008b7e:	1c42      	adds	r2, r0, #1
 8008b80:	4606      	mov	r6, r0
 8008b82:	d1d6      	bne.n	8008b32 <_svfiprintf_r+0x176>
 8008b84:	89ab      	ldrh	r3, [r5, #12]
 8008b86:	065b      	lsls	r3, r3, #25
 8008b88:	f53f af2c 	bmi.w	80089e4 <_svfiprintf_r+0x28>
 8008b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b8e:	b01d      	add	sp, #116	; 0x74
 8008b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b94:	ab03      	add	r3, sp, #12
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	462a      	mov	r2, r5
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	4b06      	ldr	r3, [pc, #24]	; (8008bb8 <_svfiprintf_r+0x1fc>)
 8008b9e:	a904      	add	r1, sp, #16
 8008ba0:	f000 f87c 	bl	8008c9c <_printf_i>
 8008ba4:	e7eb      	b.n	8008b7e <_svfiprintf_r+0x1c2>
 8008ba6:	bf00      	nop
 8008ba8:	08009274 	.word	0x08009274
 8008bac:	0800927a 	.word	0x0800927a
 8008bb0:	0800927e 	.word	0x0800927e
 8008bb4:	00000000 	.word	0x00000000
 8008bb8:	08008905 	.word	0x08008905

08008bbc <_printf_common>:
 8008bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc0:	4616      	mov	r6, r2
 8008bc2:	4699      	mov	r9, r3
 8008bc4:	688a      	ldr	r2, [r1, #8]
 8008bc6:	690b      	ldr	r3, [r1, #16]
 8008bc8:	4607      	mov	r7, r0
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	bfb8      	it	lt
 8008bce:	4613      	movlt	r3, r2
 8008bd0:	6033      	str	r3, [r6, #0]
 8008bd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bdc:	b10a      	cbz	r2, 8008be2 <_printf_common+0x26>
 8008bde:	3301      	adds	r3, #1
 8008be0:	6033      	str	r3, [r6, #0]
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	0699      	lsls	r1, r3, #26
 8008be6:	bf42      	ittt	mi
 8008be8:	6833      	ldrmi	r3, [r6, #0]
 8008bea:	3302      	addmi	r3, #2
 8008bec:	6033      	strmi	r3, [r6, #0]
 8008bee:	6825      	ldr	r5, [r4, #0]
 8008bf0:	f015 0506 	ands.w	r5, r5, #6
 8008bf4:	d106      	bne.n	8008c04 <_printf_common+0x48>
 8008bf6:	f104 0a19 	add.w	sl, r4, #25
 8008bfa:	68e3      	ldr	r3, [r4, #12]
 8008bfc:	6832      	ldr	r2, [r6, #0]
 8008bfe:	1a9b      	subs	r3, r3, r2
 8008c00:	42ab      	cmp	r3, r5
 8008c02:	dc28      	bgt.n	8008c56 <_printf_common+0x9a>
 8008c04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c08:	1e13      	subs	r3, r2, #0
 8008c0a:	6822      	ldr	r2, [r4, #0]
 8008c0c:	bf18      	it	ne
 8008c0e:	2301      	movne	r3, #1
 8008c10:	0692      	lsls	r2, r2, #26
 8008c12:	d42d      	bmi.n	8008c70 <_printf_common+0xb4>
 8008c14:	4649      	mov	r1, r9
 8008c16:	4638      	mov	r0, r7
 8008c18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c1c:	47c0      	blx	r8
 8008c1e:	3001      	adds	r0, #1
 8008c20:	d020      	beq.n	8008c64 <_printf_common+0xa8>
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	68e5      	ldr	r5, [r4, #12]
 8008c26:	f003 0306 	and.w	r3, r3, #6
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	bf18      	it	ne
 8008c2e:	2500      	movne	r5, #0
 8008c30:	6832      	ldr	r2, [r6, #0]
 8008c32:	f04f 0600 	mov.w	r6, #0
 8008c36:	68a3      	ldr	r3, [r4, #8]
 8008c38:	bf08      	it	eq
 8008c3a:	1aad      	subeq	r5, r5, r2
 8008c3c:	6922      	ldr	r2, [r4, #16]
 8008c3e:	bf08      	it	eq
 8008c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c44:	4293      	cmp	r3, r2
 8008c46:	bfc4      	itt	gt
 8008c48:	1a9b      	subgt	r3, r3, r2
 8008c4a:	18ed      	addgt	r5, r5, r3
 8008c4c:	341a      	adds	r4, #26
 8008c4e:	42b5      	cmp	r5, r6
 8008c50:	d11a      	bne.n	8008c88 <_printf_common+0xcc>
 8008c52:	2000      	movs	r0, #0
 8008c54:	e008      	b.n	8008c68 <_printf_common+0xac>
 8008c56:	2301      	movs	r3, #1
 8008c58:	4652      	mov	r2, sl
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	4638      	mov	r0, r7
 8008c5e:	47c0      	blx	r8
 8008c60:	3001      	adds	r0, #1
 8008c62:	d103      	bne.n	8008c6c <_printf_common+0xb0>
 8008c64:	f04f 30ff 	mov.w	r0, #4294967295
 8008c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c6c:	3501      	adds	r5, #1
 8008c6e:	e7c4      	b.n	8008bfa <_printf_common+0x3e>
 8008c70:	2030      	movs	r0, #48	; 0x30
 8008c72:	18e1      	adds	r1, r4, r3
 8008c74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c78:	1c5a      	adds	r2, r3, #1
 8008c7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c7e:	4422      	add	r2, r4
 8008c80:	3302      	adds	r3, #2
 8008c82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c86:	e7c5      	b.n	8008c14 <_printf_common+0x58>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	4649      	mov	r1, r9
 8008c8e:	4638      	mov	r0, r7
 8008c90:	47c0      	blx	r8
 8008c92:	3001      	adds	r0, #1
 8008c94:	d0e6      	beq.n	8008c64 <_printf_common+0xa8>
 8008c96:	3601      	adds	r6, #1
 8008c98:	e7d9      	b.n	8008c4e <_printf_common+0x92>
	...

08008c9c <_printf_i>:
 8008c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca0:	7e0f      	ldrb	r7, [r1, #24]
 8008ca2:	4691      	mov	r9, r2
 8008ca4:	2f78      	cmp	r7, #120	; 0x78
 8008ca6:	4680      	mov	r8, r0
 8008ca8:	460c      	mov	r4, r1
 8008caa:	469a      	mov	sl, r3
 8008cac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cb2:	d807      	bhi.n	8008cc4 <_printf_i+0x28>
 8008cb4:	2f62      	cmp	r7, #98	; 0x62
 8008cb6:	d80a      	bhi.n	8008cce <_printf_i+0x32>
 8008cb8:	2f00      	cmp	r7, #0
 8008cba:	f000 80d9 	beq.w	8008e70 <_printf_i+0x1d4>
 8008cbe:	2f58      	cmp	r7, #88	; 0x58
 8008cc0:	f000 80a4 	beq.w	8008e0c <_printf_i+0x170>
 8008cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ccc:	e03a      	b.n	8008d44 <_printf_i+0xa8>
 8008cce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cd2:	2b15      	cmp	r3, #21
 8008cd4:	d8f6      	bhi.n	8008cc4 <_printf_i+0x28>
 8008cd6:	a101      	add	r1, pc, #4	; (adr r1, 8008cdc <_printf_i+0x40>)
 8008cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cdc:	08008d35 	.word	0x08008d35
 8008ce0:	08008d49 	.word	0x08008d49
 8008ce4:	08008cc5 	.word	0x08008cc5
 8008ce8:	08008cc5 	.word	0x08008cc5
 8008cec:	08008cc5 	.word	0x08008cc5
 8008cf0:	08008cc5 	.word	0x08008cc5
 8008cf4:	08008d49 	.word	0x08008d49
 8008cf8:	08008cc5 	.word	0x08008cc5
 8008cfc:	08008cc5 	.word	0x08008cc5
 8008d00:	08008cc5 	.word	0x08008cc5
 8008d04:	08008cc5 	.word	0x08008cc5
 8008d08:	08008e57 	.word	0x08008e57
 8008d0c:	08008d79 	.word	0x08008d79
 8008d10:	08008e39 	.word	0x08008e39
 8008d14:	08008cc5 	.word	0x08008cc5
 8008d18:	08008cc5 	.word	0x08008cc5
 8008d1c:	08008e79 	.word	0x08008e79
 8008d20:	08008cc5 	.word	0x08008cc5
 8008d24:	08008d79 	.word	0x08008d79
 8008d28:	08008cc5 	.word	0x08008cc5
 8008d2c:	08008cc5 	.word	0x08008cc5
 8008d30:	08008e41 	.word	0x08008e41
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	1d1a      	adds	r2, r3, #4
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	602a      	str	r2, [r5, #0]
 8008d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d44:	2301      	movs	r3, #1
 8008d46:	e0a4      	b.n	8008e92 <_printf_i+0x1f6>
 8008d48:	6820      	ldr	r0, [r4, #0]
 8008d4a:	6829      	ldr	r1, [r5, #0]
 8008d4c:	0606      	lsls	r6, r0, #24
 8008d4e:	f101 0304 	add.w	r3, r1, #4
 8008d52:	d50a      	bpl.n	8008d6a <_printf_i+0xce>
 8008d54:	680e      	ldr	r6, [r1, #0]
 8008d56:	602b      	str	r3, [r5, #0]
 8008d58:	2e00      	cmp	r6, #0
 8008d5a:	da03      	bge.n	8008d64 <_printf_i+0xc8>
 8008d5c:	232d      	movs	r3, #45	; 0x2d
 8008d5e:	4276      	negs	r6, r6
 8008d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d64:	230a      	movs	r3, #10
 8008d66:	485e      	ldr	r0, [pc, #376]	; (8008ee0 <_printf_i+0x244>)
 8008d68:	e019      	b.n	8008d9e <_printf_i+0x102>
 8008d6a:	680e      	ldr	r6, [r1, #0]
 8008d6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d70:	602b      	str	r3, [r5, #0]
 8008d72:	bf18      	it	ne
 8008d74:	b236      	sxthne	r6, r6
 8008d76:	e7ef      	b.n	8008d58 <_printf_i+0xbc>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	6820      	ldr	r0, [r4, #0]
 8008d7c:	1d19      	adds	r1, r3, #4
 8008d7e:	6029      	str	r1, [r5, #0]
 8008d80:	0601      	lsls	r1, r0, #24
 8008d82:	d501      	bpl.n	8008d88 <_printf_i+0xec>
 8008d84:	681e      	ldr	r6, [r3, #0]
 8008d86:	e002      	b.n	8008d8e <_printf_i+0xf2>
 8008d88:	0646      	lsls	r6, r0, #25
 8008d8a:	d5fb      	bpl.n	8008d84 <_printf_i+0xe8>
 8008d8c:	881e      	ldrh	r6, [r3, #0]
 8008d8e:	2f6f      	cmp	r7, #111	; 0x6f
 8008d90:	bf0c      	ite	eq
 8008d92:	2308      	moveq	r3, #8
 8008d94:	230a      	movne	r3, #10
 8008d96:	4852      	ldr	r0, [pc, #328]	; (8008ee0 <_printf_i+0x244>)
 8008d98:	2100      	movs	r1, #0
 8008d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d9e:	6865      	ldr	r5, [r4, #4]
 8008da0:	2d00      	cmp	r5, #0
 8008da2:	bfa8      	it	ge
 8008da4:	6821      	ldrge	r1, [r4, #0]
 8008da6:	60a5      	str	r5, [r4, #8]
 8008da8:	bfa4      	itt	ge
 8008daa:	f021 0104 	bicge.w	r1, r1, #4
 8008dae:	6021      	strge	r1, [r4, #0]
 8008db0:	b90e      	cbnz	r6, 8008db6 <_printf_i+0x11a>
 8008db2:	2d00      	cmp	r5, #0
 8008db4:	d04d      	beq.n	8008e52 <_printf_i+0x1b6>
 8008db6:	4615      	mov	r5, r2
 8008db8:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dbc:	fb03 6711 	mls	r7, r3, r1, r6
 8008dc0:	5dc7      	ldrb	r7, [r0, r7]
 8008dc2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008dc6:	4637      	mov	r7, r6
 8008dc8:	42bb      	cmp	r3, r7
 8008dca:	460e      	mov	r6, r1
 8008dcc:	d9f4      	bls.n	8008db8 <_printf_i+0x11c>
 8008dce:	2b08      	cmp	r3, #8
 8008dd0:	d10b      	bne.n	8008dea <_printf_i+0x14e>
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	07de      	lsls	r6, r3, #31
 8008dd6:	d508      	bpl.n	8008dea <_printf_i+0x14e>
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	6861      	ldr	r1, [r4, #4]
 8008ddc:	4299      	cmp	r1, r3
 8008dde:	bfde      	ittt	le
 8008de0:	2330      	movle	r3, #48	; 0x30
 8008de2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008de6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dea:	1b52      	subs	r2, r2, r5
 8008dec:	6122      	str	r2, [r4, #16]
 8008dee:	464b      	mov	r3, r9
 8008df0:	4621      	mov	r1, r4
 8008df2:	4640      	mov	r0, r8
 8008df4:	f8cd a000 	str.w	sl, [sp]
 8008df8:	aa03      	add	r2, sp, #12
 8008dfa:	f7ff fedf 	bl	8008bbc <_printf_common>
 8008dfe:	3001      	adds	r0, #1
 8008e00:	d14c      	bne.n	8008e9c <_printf_i+0x200>
 8008e02:	f04f 30ff 	mov.w	r0, #4294967295
 8008e06:	b004      	add	sp, #16
 8008e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0c:	4834      	ldr	r0, [pc, #208]	; (8008ee0 <_printf_i+0x244>)
 8008e0e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e12:	6829      	ldr	r1, [r5, #0]
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e1a:	6029      	str	r1, [r5, #0]
 8008e1c:	061d      	lsls	r5, r3, #24
 8008e1e:	d514      	bpl.n	8008e4a <_printf_i+0x1ae>
 8008e20:	07df      	lsls	r7, r3, #31
 8008e22:	bf44      	itt	mi
 8008e24:	f043 0320 	orrmi.w	r3, r3, #32
 8008e28:	6023      	strmi	r3, [r4, #0]
 8008e2a:	b91e      	cbnz	r6, 8008e34 <_printf_i+0x198>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	f023 0320 	bic.w	r3, r3, #32
 8008e32:	6023      	str	r3, [r4, #0]
 8008e34:	2310      	movs	r3, #16
 8008e36:	e7af      	b.n	8008d98 <_printf_i+0xfc>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	f043 0320 	orr.w	r3, r3, #32
 8008e3e:	6023      	str	r3, [r4, #0]
 8008e40:	2378      	movs	r3, #120	; 0x78
 8008e42:	4828      	ldr	r0, [pc, #160]	; (8008ee4 <_printf_i+0x248>)
 8008e44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e48:	e7e3      	b.n	8008e12 <_printf_i+0x176>
 8008e4a:	0659      	lsls	r1, r3, #25
 8008e4c:	bf48      	it	mi
 8008e4e:	b2b6      	uxthmi	r6, r6
 8008e50:	e7e6      	b.n	8008e20 <_printf_i+0x184>
 8008e52:	4615      	mov	r5, r2
 8008e54:	e7bb      	b.n	8008dce <_printf_i+0x132>
 8008e56:	682b      	ldr	r3, [r5, #0]
 8008e58:	6826      	ldr	r6, [r4, #0]
 8008e5a:	1d18      	adds	r0, r3, #4
 8008e5c:	6961      	ldr	r1, [r4, #20]
 8008e5e:	6028      	str	r0, [r5, #0]
 8008e60:	0635      	lsls	r5, r6, #24
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	d501      	bpl.n	8008e6a <_printf_i+0x1ce>
 8008e66:	6019      	str	r1, [r3, #0]
 8008e68:	e002      	b.n	8008e70 <_printf_i+0x1d4>
 8008e6a:	0670      	lsls	r0, r6, #25
 8008e6c:	d5fb      	bpl.n	8008e66 <_printf_i+0x1ca>
 8008e6e:	8019      	strh	r1, [r3, #0]
 8008e70:	2300      	movs	r3, #0
 8008e72:	4615      	mov	r5, r2
 8008e74:	6123      	str	r3, [r4, #16]
 8008e76:	e7ba      	b.n	8008dee <_printf_i+0x152>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	1d1a      	adds	r2, r3, #4
 8008e7e:	602a      	str	r2, [r5, #0]
 8008e80:	681d      	ldr	r5, [r3, #0]
 8008e82:	6862      	ldr	r2, [r4, #4]
 8008e84:	4628      	mov	r0, r5
 8008e86:	f000 f82f 	bl	8008ee8 <memchr>
 8008e8a:	b108      	cbz	r0, 8008e90 <_printf_i+0x1f4>
 8008e8c:	1b40      	subs	r0, r0, r5
 8008e8e:	6060      	str	r0, [r4, #4]
 8008e90:	6863      	ldr	r3, [r4, #4]
 8008e92:	6123      	str	r3, [r4, #16]
 8008e94:	2300      	movs	r3, #0
 8008e96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e9a:	e7a8      	b.n	8008dee <_printf_i+0x152>
 8008e9c:	462a      	mov	r2, r5
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	6923      	ldr	r3, [r4, #16]
 8008ea4:	47d0      	blx	sl
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	d0ab      	beq.n	8008e02 <_printf_i+0x166>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	079b      	lsls	r3, r3, #30
 8008eae:	d413      	bmi.n	8008ed8 <_printf_i+0x23c>
 8008eb0:	68e0      	ldr	r0, [r4, #12]
 8008eb2:	9b03      	ldr	r3, [sp, #12]
 8008eb4:	4298      	cmp	r0, r3
 8008eb6:	bfb8      	it	lt
 8008eb8:	4618      	movlt	r0, r3
 8008eba:	e7a4      	b.n	8008e06 <_printf_i+0x16a>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	4632      	mov	r2, r6
 8008ec0:	4649      	mov	r1, r9
 8008ec2:	4640      	mov	r0, r8
 8008ec4:	47d0      	blx	sl
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	d09b      	beq.n	8008e02 <_printf_i+0x166>
 8008eca:	3501      	adds	r5, #1
 8008ecc:	68e3      	ldr	r3, [r4, #12]
 8008ece:	9903      	ldr	r1, [sp, #12]
 8008ed0:	1a5b      	subs	r3, r3, r1
 8008ed2:	42ab      	cmp	r3, r5
 8008ed4:	dcf2      	bgt.n	8008ebc <_printf_i+0x220>
 8008ed6:	e7eb      	b.n	8008eb0 <_printf_i+0x214>
 8008ed8:	2500      	movs	r5, #0
 8008eda:	f104 0619 	add.w	r6, r4, #25
 8008ede:	e7f5      	b.n	8008ecc <_printf_i+0x230>
 8008ee0:	08009285 	.word	0x08009285
 8008ee4:	08009296 	.word	0x08009296

08008ee8 <memchr>:
 8008ee8:	4603      	mov	r3, r0
 8008eea:	b510      	push	{r4, lr}
 8008eec:	b2c9      	uxtb	r1, r1
 8008eee:	4402      	add	r2, r0
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	d101      	bne.n	8008efa <memchr+0x12>
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	e003      	b.n	8008f02 <memchr+0x1a>
 8008efa:	7804      	ldrb	r4, [r0, #0]
 8008efc:	3301      	adds	r3, #1
 8008efe:	428c      	cmp	r4, r1
 8008f00:	d1f6      	bne.n	8008ef0 <memchr+0x8>
 8008f02:	bd10      	pop	{r4, pc}

08008f04 <memmove>:
 8008f04:	4288      	cmp	r0, r1
 8008f06:	b510      	push	{r4, lr}
 8008f08:	eb01 0402 	add.w	r4, r1, r2
 8008f0c:	d902      	bls.n	8008f14 <memmove+0x10>
 8008f0e:	4284      	cmp	r4, r0
 8008f10:	4623      	mov	r3, r4
 8008f12:	d807      	bhi.n	8008f24 <memmove+0x20>
 8008f14:	1e43      	subs	r3, r0, #1
 8008f16:	42a1      	cmp	r1, r4
 8008f18:	d008      	beq.n	8008f2c <memmove+0x28>
 8008f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f22:	e7f8      	b.n	8008f16 <memmove+0x12>
 8008f24:	4601      	mov	r1, r0
 8008f26:	4402      	add	r2, r0
 8008f28:	428a      	cmp	r2, r1
 8008f2a:	d100      	bne.n	8008f2e <memmove+0x2a>
 8008f2c:	bd10      	pop	{r4, pc}
 8008f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f36:	e7f7      	b.n	8008f28 <memmove+0x24>

08008f38 <_realloc_r>:
 8008f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3c:	4680      	mov	r8, r0
 8008f3e:	4614      	mov	r4, r2
 8008f40:	460e      	mov	r6, r1
 8008f42:	b921      	cbnz	r1, 8008f4e <_realloc_r+0x16>
 8008f44:	4611      	mov	r1, r2
 8008f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4a:	f7ff bb79 	b.w	8008640 <_malloc_r>
 8008f4e:	b92a      	cbnz	r2, 8008f5c <_realloc_r+0x24>
 8008f50:	f7ff fc90 	bl	8008874 <_free_r>
 8008f54:	4625      	mov	r5, r4
 8008f56:	4628      	mov	r0, r5
 8008f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f5c:	f000 f81b 	bl	8008f96 <_malloc_usable_size_r>
 8008f60:	4284      	cmp	r4, r0
 8008f62:	4607      	mov	r7, r0
 8008f64:	d802      	bhi.n	8008f6c <_realloc_r+0x34>
 8008f66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f6a:	d812      	bhi.n	8008f92 <_realloc_r+0x5a>
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4640      	mov	r0, r8
 8008f70:	f7ff fb66 	bl	8008640 <_malloc_r>
 8008f74:	4605      	mov	r5, r0
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d0ed      	beq.n	8008f56 <_realloc_r+0x1e>
 8008f7a:	42bc      	cmp	r4, r7
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	4631      	mov	r1, r6
 8008f80:	bf28      	it	cs
 8008f82:	463a      	movcs	r2, r7
 8008f84:	f7ff fb26 	bl	80085d4 <memcpy>
 8008f88:	4631      	mov	r1, r6
 8008f8a:	4640      	mov	r0, r8
 8008f8c:	f7ff fc72 	bl	8008874 <_free_r>
 8008f90:	e7e1      	b.n	8008f56 <_realloc_r+0x1e>
 8008f92:	4635      	mov	r5, r6
 8008f94:	e7df      	b.n	8008f56 <_realloc_r+0x1e>

08008f96 <_malloc_usable_size_r>:
 8008f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f9a:	1f18      	subs	r0, r3, #4
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	bfbc      	itt	lt
 8008fa0:	580b      	ldrlt	r3, [r1, r0]
 8008fa2:	18c0      	addlt	r0, r0, r3
 8008fa4:	4770      	bx	lr
	...

08008fa8 <_init>:
 8008fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008faa:	bf00      	nop
 8008fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fae:	bc08      	pop	{r3}
 8008fb0:	469e      	mov	lr, r3
 8008fb2:	4770      	bx	lr

08008fb4 <_fini>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	bf00      	nop
 8008fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fba:	bc08      	pop	{r3}
 8008fbc:	469e      	mov	lr, r3
 8008fbe:	4770      	bx	lr
