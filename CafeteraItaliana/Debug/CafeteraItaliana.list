
CafeteraItaliana.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e444  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800e554  0800e554  0001e554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea98  0800ea98  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800ea98  0800ea98  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ea98  0800ea98  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea98  0800ea98  0001ea98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea9c  0800ea9c  0001ea9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800eaa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e94  200000ac  0800eb4c  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003f40  0800eb4c  00023f40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002179a  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054d2  00000000  00000000  0004186f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f40  00000000  00000000  00046d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d30  00000000  00000000  00048c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e7a4  00000000  00000000  0004a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000269af  00000000  00000000  0006915c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c87d  00000000  00000000  0008fb0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c388  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008888  00000000  00000000  0012c3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000ac 	.word	0x200000ac
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e53c 	.word	0x0800e53c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b0 	.word	0x200000b0
 800014c:	0800e53c 	.word	0x0800e53c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_frsub>:
 8000174:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__addsf3>
 800017a:	bf00      	nop

0800017c <__aeabi_fsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000180 <__addsf3>:
 8000180:	0042      	lsls	r2, r0, #1
 8000182:	bf1f      	itttt	ne
 8000184:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000188:	ea92 0f03 	teqne	r2, r3
 800018c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000190:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000194:	d06a      	beq.n	800026c <__addsf3+0xec>
 8000196:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800019a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019e:	bfc1      	itttt	gt
 80001a0:	18d2      	addgt	r2, r2, r3
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	4048      	eorgt	r0, r1
 80001a6:	4041      	eorgt	r1, r0
 80001a8:	bfb8      	it	lt
 80001aa:	425b      	neglt	r3, r3
 80001ac:	2b19      	cmp	r3, #25
 80001ae:	bf88      	it	hi
 80001b0:	4770      	bxhi	lr
 80001b2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001be:	bf18      	it	ne
 80001c0:	4240      	negne	r0, r0
 80001c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ce:	bf18      	it	ne
 80001d0:	4249      	negne	r1, r1
 80001d2:	ea92 0f03 	teq	r2, r3
 80001d6:	d03f      	beq.n	8000258 <__addsf3+0xd8>
 80001d8:	f1a2 0201 	sub.w	r2, r2, #1
 80001dc:	fa41 fc03 	asr.w	ip, r1, r3
 80001e0:	eb10 000c 	adds.w	r0, r0, ip
 80001e4:	f1c3 0320 	rsb	r3, r3, #32
 80001e8:	fa01 f103 	lsl.w	r1, r1, r3
 80001ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f0:	d502      	bpl.n	80001f8 <__addsf3+0x78>
 80001f2:	4249      	negs	r1, r1
 80001f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001fc:	d313      	bcc.n	8000226 <__addsf3+0xa6>
 80001fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000202:	d306      	bcc.n	8000212 <__addsf3+0x92>
 8000204:	0840      	lsrs	r0, r0, #1
 8000206:	ea4f 0131 	mov.w	r1, r1, rrx
 800020a:	f102 0201 	add.w	r2, r2, #1
 800020e:	2afe      	cmp	r2, #254	; 0xfe
 8000210:	d251      	bcs.n	80002b6 <__addsf3+0x136>
 8000212:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000216:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800021a:	bf08      	it	eq
 800021c:	f020 0001 	biceq.w	r0, r0, #1
 8000220:	ea40 0003 	orr.w	r0, r0, r3
 8000224:	4770      	bx	lr
 8000226:	0049      	lsls	r1, r1, #1
 8000228:	eb40 0000 	adc.w	r0, r0, r0
 800022c:	3a01      	subs	r2, #1
 800022e:	bf28      	it	cs
 8000230:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000234:	d2ed      	bcs.n	8000212 <__addsf3+0x92>
 8000236:	fab0 fc80 	clz	ip, r0
 800023a:	f1ac 0c08 	sub.w	ip, ip, #8
 800023e:	ebb2 020c 	subs.w	r2, r2, ip
 8000242:	fa00 f00c 	lsl.w	r0, r0, ip
 8000246:	bfaa      	itet	ge
 8000248:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800024c:	4252      	neglt	r2, r2
 800024e:	4318      	orrge	r0, r3
 8000250:	bfbc      	itt	lt
 8000252:	40d0      	lsrlt	r0, r2
 8000254:	4318      	orrlt	r0, r3
 8000256:	4770      	bx	lr
 8000258:	f092 0f00 	teq	r2, #0
 800025c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000260:	bf06      	itte	eq
 8000262:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000266:	3201      	addeq	r2, #1
 8000268:	3b01      	subne	r3, #1
 800026a:	e7b5      	b.n	80001d8 <__addsf3+0x58>
 800026c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000270:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000274:	bf18      	it	ne
 8000276:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800027a:	d021      	beq.n	80002c0 <__addsf3+0x140>
 800027c:	ea92 0f03 	teq	r2, r3
 8000280:	d004      	beq.n	800028c <__addsf3+0x10c>
 8000282:	f092 0f00 	teq	r2, #0
 8000286:	bf08      	it	eq
 8000288:	4608      	moveq	r0, r1
 800028a:	4770      	bx	lr
 800028c:	ea90 0f01 	teq	r0, r1
 8000290:	bf1c      	itt	ne
 8000292:	2000      	movne	r0, #0
 8000294:	4770      	bxne	lr
 8000296:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800029a:	d104      	bne.n	80002a6 <__addsf3+0x126>
 800029c:	0040      	lsls	r0, r0, #1
 800029e:	bf28      	it	cs
 80002a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	4770      	bx	lr
 80002a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002aa:	bf3c      	itt	cc
 80002ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b0:	4770      	bxcc	lr
 80002b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002be:	4770      	bx	lr
 80002c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c4:	bf16      	itet	ne
 80002c6:	4608      	movne	r0, r1
 80002c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002cc:	4601      	movne	r1, r0
 80002ce:	0242      	lsls	r2, r0, #9
 80002d0:	bf06      	itte	eq
 80002d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d6:	ea90 0f01 	teqeq	r0, r1
 80002da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002de:	4770      	bx	lr

080002e0 <__aeabi_ui2f>:
 80002e0:	f04f 0300 	mov.w	r3, #0
 80002e4:	e004      	b.n	80002f0 <__aeabi_i2f+0x8>
 80002e6:	bf00      	nop

080002e8 <__aeabi_i2f>:
 80002e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002ec:	bf48      	it	mi
 80002ee:	4240      	negmi	r0, r0
 80002f0:	ea5f 0c00 	movs.w	ip, r0
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002fc:	4601      	mov	r1, r0
 80002fe:	f04f 0000 	mov.w	r0, #0
 8000302:	e01c      	b.n	800033e <__aeabi_l2f+0x2a>

08000304 <__aeabi_ul2f>:
 8000304:	ea50 0201 	orrs.w	r2, r0, r1
 8000308:	bf08      	it	eq
 800030a:	4770      	bxeq	lr
 800030c:	f04f 0300 	mov.w	r3, #0
 8000310:	e00a      	b.n	8000328 <__aeabi_l2f+0x14>
 8000312:	bf00      	nop

08000314 <__aeabi_l2f>:
 8000314:	ea50 0201 	orrs.w	r2, r0, r1
 8000318:	bf08      	it	eq
 800031a:	4770      	bxeq	lr
 800031c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000320:	d502      	bpl.n	8000328 <__aeabi_l2f+0x14>
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	ea5f 0c01 	movs.w	ip, r1
 800032c:	bf02      	ittt	eq
 800032e:	4684      	moveq	ip, r0
 8000330:	4601      	moveq	r1, r0
 8000332:	2000      	moveq	r0, #0
 8000334:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000338:	bf08      	it	eq
 800033a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000342:	fabc f28c 	clz	r2, ip
 8000346:	3a08      	subs	r2, #8
 8000348:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800034c:	db10      	blt.n	8000370 <__aeabi_l2f+0x5c>
 800034e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000352:	4463      	add	r3, ip
 8000354:	fa00 fc02 	lsl.w	ip, r0, r2
 8000358:	f1c2 0220 	rsb	r2, r2, #32
 800035c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000360:	fa20 f202 	lsr.w	r2, r0, r2
 8000364:	eb43 0002 	adc.w	r0, r3, r2
 8000368:	bf08      	it	eq
 800036a:	f020 0001 	biceq.w	r0, r0, #1
 800036e:	4770      	bx	lr
 8000370:	f102 0220 	add.w	r2, r2, #32
 8000374:	fa01 fc02 	lsl.w	ip, r1, r2
 8000378:	f1c2 0220 	rsb	r2, r2, #32
 800037c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000380:	fa21 f202 	lsr.w	r2, r1, r2
 8000384:	eb43 0002 	adc.w	r0, r3, r2
 8000388:	bf08      	it	eq
 800038a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038e:	4770      	bx	lr

08000390 <__aeabi_fmul>:
 8000390:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000394:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000398:	bf1e      	ittt	ne
 800039a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039e:	ea92 0f0c 	teqne	r2, ip
 80003a2:	ea93 0f0c 	teqne	r3, ip
 80003a6:	d06f      	beq.n	8000488 <__aeabi_fmul+0xf8>
 80003a8:	441a      	add	r2, r3
 80003aa:	ea80 0c01 	eor.w	ip, r0, r1
 80003ae:	0240      	lsls	r0, r0, #9
 80003b0:	bf18      	it	ne
 80003b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b6:	d01e      	beq.n	80003f6 <__aeabi_fmul+0x66>
 80003b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c4:	fba0 3101 	umull	r3, r1, r0, r1
 80003c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d0:	bf3e      	ittt	cc
 80003d2:	0049      	lslcc	r1, r1, #1
 80003d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d8:	005b      	lslcc	r3, r3, #1
 80003da:	ea40 0001 	orr.w	r0, r0, r1
 80003de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003e2:	2afd      	cmp	r2, #253	; 0xfd
 80003e4:	d81d      	bhi.n	8000422 <__aeabi_fmul+0x92>
 80003e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ee:	bf08      	it	eq
 80003f0:	f020 0001 	biceq.w	r0, r0, #1
 80003f4:	4770      	bx	lr
 80003f6:	f090 0f00 	teq	r0, #0
 80003fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fe:	bf08      	it	eq
 8000400:	0249      	lsleq	r1, r1, #9
 8000402:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000406:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800040a:	3a7f      	subs	r2, #127	; 0x7f
 800040c:	bfc2      	ittt	gt
 800040e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000412:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000416:	4770      	bxgt	lr
 8000418:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800041c:	f04f 0300 	mov.w	r3, #0
 8000420:	3a01      	subs	r2, #1
 8000422:	dc5d      	bgt.n	80004e0 <__aeabi_fmul+0x150>
 8000424:	f112 0f19 	cmn.w	r2, #25
 8000428:	bfdc      	itt	le
 800042a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042e:	4770      	bxle	lr
 8000430:	f1c2 0200 	rsb	r2, r2, #0
 8000434:	0041      	lsls	r1, r0, #1
 8000436:	fa21 f102 	lsr.w	r1, r1, r2
 800043a:	f1c2 0220 	rsb	r2, r2, #32
 800043e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000442:	ea5f 0031 	movs.w	r0, r1, rrx
 8000446:	f140 0000 	adc.w	r0, r0, #0
 800044a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044e:	bf08      	it	eq
 8000450:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000454:	4770      	bx	lr
 8000456:	f092 0f00 	teq	r2, #0
 800045a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0040      	lsleq	r0, r0, #1
 8000462:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000466:	3a01      	subeq	r2, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xce>
 800046a:	ea40 000c 	orr.w	r0, r0, ip
 800046e:	f093 0f00 	teq	r3, #0
 8000472:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000476:	bf02      	ittt	eq
 8000478:	0049      	lsleq	r1, r1, #1
 800047a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047e:	3b01      	subeq	r3, #1
 8000480:	d0f9      	beq.n	8000476 <__aeabi_fmul+0xe6>
 8000482:	ea41 010c 	orr.w	r1, r1, ip
 8000486:	e78f      	b.n	80003a8 <__aeabi_fmul+0x18>
 8000488:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800048c:	ea92 0f0c 	teq	r2, ip
 8000490:	bf18      	it	ne
 8000492:	ea93 0f0c 	teqne	r3, ip
 8000496:	d00a      	beq.n	80004ae <__aeabi_fmul+0x11e>
 8000498:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800049c:	bf18      	it	ne
 800049e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004a2:	d1d8      	bne.n	8000456 <__aeabi_fmul+0xc6>
 80004a4:	ea80 0001 	eor.w	r0, r0, r1
 80004a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ac:	4770      	bx	lr
 80004ae:	f090 0f00 	teq	r0, #0
 80004b2:	bf17      	itett	ne
 80004b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b8:	4608      	moveq	r0, r1
 80004ba:	f091 0f00 	teqne	r1, #0
 80004be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004c2:	d014      	beq.n	80004ee <__aeabi_fmul+0x15e>
 80004c4:	ea92 0f0c 	teq	r2, ip
 80004c8:	d101      	bne.n	80004ce <__aeabi_fmul+0x13e>
 80004ca:	0242      	lsls	r2, r0, #9
 80004cc:	d10f      	bne.n	80004ee <__aeabi_fmul+0x15e>
 80004ce:	ea93 0f0c 	teq	r3, ip
 80004d2:	d103      	bne.n	80004dc <__aeabi_fmul+0x14c>
 80004d4:	024b      	lsls	r3, r1, #9
 80004d6:	bf18      	it	ne
 80004d8:	4608      	movne	r0, r1
 80004da:	d108      	bne.n	80004ee <__aeabi_fmul+0x15e>
 80004dc:	ea80 0001 	eor.w	r0, r0, r1
 80004e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004ec:	4770      	bx	lr
 80004ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_fdiv>:
 80004f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000500:	bf1e      	ittt	ne
 8000502:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000506:	ea92 0f0c 	teqne	r2, ip
 800050a:	ea93 0f0c 	teqne	r3, ip
 800050e:	d069      	beq.n	80005e4 <__aeabi_fdiv+0xec>
 8000510:	eba2 0203 	sub.w	r2, r2, r3
 8000514:	ea80 0c01 	eor.w	ip, r0, r1
 8000518:	0249      	lsls	r1, r1, #9
 800051a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051e:	d037      	beq.n	8000590 <__aeabi_fdiv+0x98>
 8000520:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000524:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000528:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800052c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000530:	428b      	cmp	r3, r1
 8000532:	bf38      	it	cc
 8000534:	005b      	lslcc	r3, r3, #1
 8000536:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800053a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053e:	428b      	cmp	r3, r1
 8000540:	bf24      	itt	cs
 8000542:	1a5b      	subcs	r3, r3, r1
 8000544:	ea40 000c 	orrcs.w	r0, r0, ip
 8000548:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800054c:	bf24      	itt	cs
 800054e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000552:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000556:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800055a:	bf24      	itt	cs
 800055c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000560:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000564:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000568:	bf24      	itt	cs
 800056a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	bf18      	it	ne
 8000576:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800057a:	d1e0      	bne.n	800053e <__aeabi_fdiv+0x46>
 800057c:	2afd      	cmp	r2, #253	; 0xfd
 800057e:	f63f af50 	bhi.w	8000422 <__aeabi_fmul+0x92>
 8000582:	428b      	cmp	r3, r1
 8000584:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000588:	bf08      	it	eq
 800058a:	f020 0001 	biceq.w	r0, r0, #1
 800058e:	4770      	bx	lr
 8000590:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000594:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000598:	327f      	adds	r2, #127	; 0x7f
 800059a:	bfc2      	ittt	gt
 800059c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a4:	4770      	bxgt	lr
 80005a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005aa:	f04f 0300 	mov.w	r3, #0
 80005ae:	3a01      	subs	r2, #1
 80005b0:	e737      	b.n	8000422 <__aeabi_fmul+0x92>
 80005b2:	f092 0f00 	teq	r2, #0
 80005b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0040      	lsleq	r0, r0, #1
 80005be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005c2:	3a01      	subeq	r2, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xc2>
 80005c6:	ea40 000c 	orr.w	r0, r0, ip
 80005ca:	f093 0f00 	teq	r3, #0
 80005ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005d2:	bf02      	ittt	eq
 80005d4:	0049      	lsleq	r1, r1, #1
 80005d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005da:	3b01      	subeq	r3, #1
 80005dc:	d0f9      	beq.n	80005d2 <__aeabi_fdiv+0xda>
 80005de:	ea41 010c 	orr.w	r1, r1, ip
 80005e2:	e795      	b.n	8000510 <__aeabi_fdiv+0x18>
 80005e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e8:	ea92 0f0c 	teq	r2, ip
 80005ec:	d108      	bne.n	8000600 <__aeabi_fdiv+0x108>
 80005ee:	0242      	lsls	r2, r0, #9
 80005f0:	f47f af7d 	bne.w	80004ee <__aeabi_fmul+0x15e>
 80005f4:	ea93 0f0c 	teq	r3, ip
 80005f8:	f47f af70 	bne.w	80004dc <__aeabi_fmul+0x14c>
 80005fc:	4608      	mov	r0, r1
 80005fe:	e776      	b.n	80004ee <__aeabi_fmul+0x15e>
 8000600:	ea93 0f0c 	teq	r3, ip
 8000604:	d104      	bne.n	8000610 <__aeabi_fdiv+0x118>
 8000606:	024b      	lsls	r3, r1, #9
 8000608:	f43f af4c 	beq.w	80004a4 <__aeabi_fmul+0x114>
 800060c:	4608      	mov	r0, r1
 800060e:	e76e      	b.n	80004ee <__aeabi_fmul+0x15e>
 8000610:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000614:	bf18      	it	ne
 8000616:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800061a:	d1ca      	bne.n	80005b2 <__aeabi_fdiv+0xba>
 800061c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000620:	f47f af5c 	bne.w	80004dc <__aeabi_fmul+0x14c>
 8000624:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000628:	f47f af3c 	bne.w	80004a4 <__aeabi_fmul+0x114>
 800062c:	e75f      	b.n	80004ee <__aeabi_fmul+0x15e>
 800062e:	bf00      	nop

08000630 <__gesf2>:
 8000630:	f04f 3cff 	mov.w	ip, #4294967295
 8000634:	e006      	b.n	8000644 <__cmpsf2+0x4>
 8000636:	bf00      	nop

08000638 <__lesf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	e002      	b.n	8000644 <__cmpsf2+0x4>
 800063e:	bf00      	nop

08000640 <__cmpsf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000648:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800064c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000650:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000654:	bf18      	it	ne
 8000656:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800065a:	d011      	beq.n	8000680 <__cmpsf2+0x40>
 800065c:	b001      	add	sp, #4
 800065e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000662:	bf18      	it	ne
 8000664:	ea90 0f01 	teqne	r0, r1
 8000668:	bf58      	it	pl
 800066a:	ebb2 0003 	subspl.w	r0, r2, r3
 800066e:	bf88      	it	hi
 8000670:	17c8      	asrhi	r0, r1, #31
 8000672:	bf38      	it	cc
 8000674:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000678:	bf18      	it	ne
 800067a:	f040 0001 	orrne.w	r0, r0, #1
 800067e:	4770      	bx	lr
 8000680:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000684:	d102      	bne.n	800068c <__cmpsf2+0x4c>
 8000686:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800068a:	d105      	bne.n	8000698 <__cmpsf2+0x58>
 800068c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000690:	d1e4      	bne.n	800065c <__cmpsf2+0x1c>
 8000692:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000696:	d0e1      	beq.n	800065c <__cmpsf2+0x1c>
 8000698:	f85d 0b04 	ldr.w	r0, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <__aeabi_cfrcmple>:
 80006a0:	4684      	mov	ip, r0
 80006a2:	4608      	mov	r0, r1
 80006a4:	4661      	mov	r1, ip
 80006a6:	e7ff      	b.n	80006a8 <__aeabi_cfcmpeq>

080006a8 <__aeabi_cfcmpeq>:
 80006a8:	b50f      	push	{r0, r1, r2, r3, lr}
 80006aa:	f7ff ffc9 	bl	8000640 <__cmpsf2>
 80006ae:	2800      	cmp	r0, #0
 80006b0:	bf48      	it	mi
 80006b2:	f110 0f00 	cmnmi.w	r0, #0
 80006b6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b8 <__aeabi_fcmpeq>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff fff4 	bl	80006a8 <__aeabi_cfcmpeq>
 80006c0:	bf0c      	ite	eq
 80006c2:	2001      	moveq	r0, #1
 80006c4:	2000      	movne	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmplt>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffea 	bl	80006a8 <__aeabi_cfcmpeq>
 80006d4:	bf34      	ite	cc
 80006d6:	2001      	movcc	r0, #1
 80006d8:	2000      	movcs	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmple>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffe0 	bl	80006a8 <__aeabi_cfcmpeq>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpge>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffd2 	bl	80006a0 <__aeabi_cfrcmple>
 80006fc:	bf94      	ite	ls
 80006fe:	2001      	movls	r0, #1
 8000700:	2000      	movhi	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_fcmpgt>:
 8000708:	f84d ed08 	str.w	lr, [sp, #-8]!
 800070c:	f7ff ffc8 	bl	80006a0 <__aeabi_cfrcmple>
 8000710:	bf34      	ite	cc
 8000712:	2001      	movcc	r0, #1
 8000714:	2000      	movcs	r0, #0
 8000716:	f85d fb08 	ldr.w	pc, [sp], #8
 800071a:	bf00      	nop

0800071c <Mount_SD>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

FRESULT Mount_SD (const TCHAR* path)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	return(f_mount(&fs, path, 1));
 8000724:	2201      	movs	r2, #1
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <Mount_SD+0x1c>)
 800072a:	f009 f99b 	bl	8009a64 <f_mount>
 800072e:	4603      	mov	r3, r0
}
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000c8 	.word	0x200000c8

0800073c <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000744:	2201      	movs	r2, #1
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	2000      	movs	r0, #0
 800074a:	f009 f98b 	bl	8009a64 <f_mount>
 800074e:	4603      	mov	r3, r0
 8000750:	461a      	mov	r2, r3
 8000752:	4b03      	ldr	r3, [pc, #12]	; (8000760 <Unmount_SD+0x24>)
 8000754:	701a      	strb	r2, [r3, #0]
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000540 	.word	0x20000540

08000764 <Write_File>:


FRESULT Write_File (char *name, char *data, uint32_t size)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]

	fresult = f_stat (name, &fno);
 8000770:	491a      	ldr	r1, [pc, #104]	; (80007dc <Write_File+0x78>)
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f00a fbd7 	bl	800af26 <f_stat>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <Write_File+0x7c>)
 800077e:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&fil, name, FA_OPEN_EXISTING | FA_WRITE);
 8000780:	2202      	movs	r2, #2
 8000782:	68f9      	ldr	r1, [r7, #12]
 8000784:	4817      	ldr	r0, [pc, #92]	; (80007e4 <Write_File+0x80>)
 8000786:	f009 f9d5 	bl	8009b34 <f_open>
 800078a:	4603      	mov	r3, r0
 800078c:	461a      	mov	r2, r3
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <Write_File+0x7c>)
 8000790:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <Write_File+0x7c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d002      	beq.n	80007a0 <Write_File+0x3c>
	{
		return fresult;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <Write_File+0x7c>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	e019      	b.n	80007d4 <Write_File+0x70>
	}

	else
	{
	  	fresult = f_write(&fil, data, size, &bw);
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <Write_File+0x84>)
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	480f      	ldr	r0, [pc, #60]	; (80007e4 <Write_File+0x80>)
 80007a8:	f009 fdfe 	bl	800a3a8 <f_write>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <Write_File+0x7c>)
 80007b2:	701a      	strb	r2, [r3, #0]
	   	if (fresult != FR_OK)
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <Write_File+0x7c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d002      	beq.n	80007c2 <Write_File+0x5e>
	   	{
	    		return fresult;
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <Write_File+0x7c>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	e008      	b.n	80007d4 <Write_File+0x70>
	    }

	    fresult = f_close(&fil);
 80007c2:	4808      	ldr	r0, [pc, #32]	; (80007e4 <Write_File+0x80>)
 80007c4:	f00a f8b0 	bl	800a928 <f_close>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <Write_File+0x7c>)
 80007ce:	701a      	strb	r2, [r3, #0]
	}
	    return fresult;
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <Write_File+0x7c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000528 	.word	0x20000528
 80007e0:	20000540 	.word	0x20000540
 80007e4:	200002fc 	.word	0x200002fc
 80007e8:	20000548 	.word	0x20000548

080007ec <Read_File>:

FRESULT Read_File (char *name,char *lectura)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80007f6:	4931      	ldr	r1, [pc, #196]	; (80008bc <Read_File+0xd0>)
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f00a fb94 	bl	800af26 <f_stat>
 80007fe:	4603      	mov	r3, r0
 8000800:	461a      	mov	r2, r3
 8000802:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <Read_File+0xd4>)
 8000804:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000806:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <Read_File+0xd4>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <Read_File+0x28>
	{
	    return fresult;
 800080e:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <Read_File+0xd4>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	e04f      	b.n	80008b4 <Read_File+0xc8>
	}

	else
	{
		fresult = f_open(&fil, name, FA_READ);
 8000814:	2201      	movs	r2, #1
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	482a      	ldr	r0, [pc, #168]	; (80008c4 <Read_File+0xd8>)
 800081a:	f009 f98b 	bl	8009b34 <f_open>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <Read_File+0xd4>)
 8000824:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <Read_File+0xd4>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d002      	beq.n	8000834 <Read_File+0x48>
		{

		    return fresult;
 800082e:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <Read_File+0xd4>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	e03f      	b.n	80008b4 <Read_File+0xc8>
		}

		size_t tam = sizeof(f_size(&fil));
 8000834:	2304      	movs	r3, #4
 8000836:	613b      	str	r3, [r7, #16]
		char *buffer = pvPortMalloc(tam);
 8000838:	6938      	ldr	r0, [r7, #16]
 800083a:	f00c ff07 	bl	800d64c <pvPortMalloc>
 800083e:	60f8      	str	r0, [r7, #12]
		fresult = f_read (&fil, buffer, sizeof(lectura), &br);
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <Read_File+0xdc>)
 8000842:	2204      	movs	r2, #4
 8000844:	68f9      	ldr	r1, [r7, #12]
 8000846:	481f      	ldr	r0, [pc, #124]	; (80008c4 <Read_File+0xd8>)
 8000848:	f009 fbf9 	bl	800a03e <f_read>
 800084c:	4603      	mov	r3, r0
 800084e:	461a      	mov	r2, r3
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <Read_File+0xd4>)
 8000852:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <Read_File+0xd4>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <Read_File+0x76>
		{
			return fresult;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <Read_File+0xd4>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	e028      	b.n	80008b4 <Read_File+0xc8>
		}

		else
		{
			for(int i=0;i<=sizeof(lectura);i++)
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	e016      	b.n	8000896 <Read_File+0xaa>
			{
				if(buffer[i] == 0) lectura[i] = '0';
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	4413      	add	r3, r2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d105      	bne.n	8000880 <Read_File+0x94>
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	4413      	add	r3, r2
 800087a:	2230      	movs	r2, #48	; 0x30
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	e007      	b.n	8000890 <Read_File+0xa4>
				else lectura[i] = buffer[i];
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	441a      	add	r2, r3
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	6839      	ldr	r1, [r7, #0]
 800088a:	440b      	add	r3, r1
 800088c:	7812      	ldrb	r2, [r2, #0]
 800088e:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<=sizeof(lectura);i++)
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	3301      	adds	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	2b04      	cmp	r3, #4
 800089a:	d9e5      	bls.n	8000868 <Read_File+0x7c>
			}
			vPortFree(buffer);
 800089c:	68f8      	ldr	r0, [r7, #12]
 800089e:	f00c ff99 	bl	800d7d4 <vPortFree>


		fresult = f_close(&fil);
 80008a2:	4808      	ldr	r0, [pc, #32]	; (80008c4 <Read_File+0xd8>)
 80008a4:	f00a f840 	bl	800a928 <f_close>
 80008a8:	4603      	mov	r3, r0
 80008aa:	461a      	mov	r2, r3
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <Read_File+0xd4>)
 80008ae:	701a      	strb	r2, [r3, #0]
		}
	    return fresult;
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <Read_File+0xd4>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
	}
	return fresult;
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000528 	.word	0x20000528
 80008c0:	20000540 	.word	0x20000540
 80008c4:	200002fc 	.word	0x200002fc
 80008c8:	20000544 	.word	0x20000544

080008cc <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
	fresult = f_stat (name, &fno);
 80008d6:	4923      	ldr	r1, [pc, #140]	; (8000964 <Update_File+0x98>)
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f00a fb24 	bl	800af26 <f_stat>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <Update_File+0x9c>)
 80008e4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <Update_File+0x9c>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d002      	beq.n	80008f4 <Update_File+0x28>
	{
	    return fresult;
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <Update_File+0x9c>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	e033      	b.n	800095c <Update_File+0x90>
	}

	else
	{
	    fresult = f_open(&fil, name, FA_OPEN_ALWAYS | FA_WRITE);
 80008f4:	2212      	movs	r2, #18
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	481c      	ldr	r0, [pc, #112]	; (800096c <Update_File+0xa0>)
 80008fa:	f009 f91b 	bl	8009b34 <f_open>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <Update_File+0x9c>)
 8000904:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <Update_File+0x9c>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <Update_File+0x48>
	    {
	        return fresult;
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <Update_File+0x9c>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	e023      	b.n	800095c <Update_File+0x90>
	    }

	    f_lseek(&fil, fil.fsize);
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <Update_File+0xa0>)
 8000916:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800091a:	4619      	mov	r1, r3
 800091c:	4813      	ldr	r0, [pc, #76]	; (800096c <Update_File+0xa0>)
 800091e:	f00a f833 	bl	800a988 <f_lseek>
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8000922:	6838      	ldr	r0, [r7, #0]
 8000924:	f7ff fc1e 	bl	8000164 <strlen>
 8000928:	4602      	mov	r2, r0
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <Update_File+0xa4>)
 800092c:	6839      	ldr	r1, [r7, #0]
 800092e:	480f      	ldr	r0, [pc, #60]	; (800096c <Update_File+0xa0>)
 8000930:	f009 fd3a 	bl	800a3a8 <f_write>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <Update_File+0x9c>)
 800093a:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <Update_File+0x9c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <Update_File+0x7e>
	    {
	    	return fresult;
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <Update_File+0x9c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	e008      	b.n	800095c <Update_File+0x90>
	    }

	    fresult = f_close(&fil);
 800094a:	4808      	ldr	r0, [pc, #32]	; (800096c <Update_File+0xa0>)
 800094c:	f009 ffec 	bl	800a928 <f_close>
 8000950:	4603      	mov	r3, r0
 8000952:	461a      	mov	r2, r3
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <Update_File+0x9c>)
 8000956:	701a      	strb	r2, [r3, #0]
	}
    return fresult;
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <Update_File+0x9c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000528 	.word	0x20000528
 8000968:	20000540 	.word	0x20000540
 800096c:	200002fc 	.word	0x200002fc
 8000970:	20000548 	.word	0x20000548

08000974 <USART_ReceiveData>:


char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	b29b      	uxth	r3, r3
 8000982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000986:	b29b      	uxth	r3, r3
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	460b      	mov	r3, r1
 800099c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800099e:	887b      	ldrh	r3, [r7, #2]
 80009a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	605a      	str	r2, [r3, #4]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
	...

080009b4 <usart_setup>:


uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <usart_setup+0x60>)
 80009be:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <usart_setup+0x64>)
 80009c0:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 80009c2:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <usart_setup+0x60>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <usart_setup+0x60>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <usart_setup+0x60>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <usart_setup+0x60>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <usart_setup+0x60>)
 80009dc:	220c      	movs	r2, #12
 80009de:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <usart_setup+0x60>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <usart_setup+0x60>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <usart_setup+0x60>)
 80009ee:	f006 fc8d 	bl	800730c <HAL_HalfDuplex_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d000      	beq.n	80009fa <usart_setup+0x46>
	{
		//	    Error_Handler();
		__asm__("NOP");
 80009f8:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <usart_setup+0x60>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	68da      	ldr	r2, [r3, #12]
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <usart_setup+0x60>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f042 0220 	orr.w	r2, r2, #32
 8000a08:	60da      	str	r2, [r3, #12]
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200009c4 	.word	0x200009c4
 8000a18:	40013800 	.word	0x40013800

08000a1c <owInit>:

void owInit(OneWire *ow) {
 8000a1c:	b480      	push	{r7}
 8000a1e:	b087      	sub	sp, #28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8000a2c:	e015      	b.n	8000a5a <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];      
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]
    k=0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 8000a3c:	e007      	b.n	8000a4e <owInit+0x32>
    r[k] = 0;
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	4413      	add	r3, r2
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	2b07      	cmp	r3, #7
 8000a52:	ddf4      	ble.n	8000a3e <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	3301      	adds	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	dde6      	ble.n	8000a2e <owInit+0x12>
  }
  k=0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 8000a64:	e008      	b.n	8000a78 <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	3314      	adds	r3, #20
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	3301      	adds	r3, #1
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	2b07      	cmp	r3, #7
 8000a7c:	ddf3      	ble.n	8000a66 <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2240      	movs	r2, #64	; 0x40
 8000a82:	611a      	str	r2, [r3, #16]

}
 8000a84:	bf00      	nop
 8000a86:	371c      	adds	r7, #28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
	...

08000a90 <owReadHandler>:

void owReadHandler() { //обработчик прерыания USART
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 8000a96:	f000 f850 	bl	8000b3a <getUsartIndex>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  /* Проверяем, что мы вызвали прерывание из-за RXNE. */
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <owReadHandler+0x70>)
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	f003 0320 	and.w	r3, r3, #32
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d025      	beq.n	8000af6 <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <owReadHandler+0x70>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d01f      	beq.n	8000af6 <owReadHandler+0x66>

    /* Получаем данные из периферии и сбрасываем флаг*/
		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 8000ab6:	bf00      	nop
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <owReadHandler+0x70>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f003 0320 	and.w	r3, r3, #32
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f9      	beq.n	8000ab8 <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);              
 8000ac4:	79fc      	ldrb	r4, [r7, #7]
 8000ac6:	480e      	ldr	r0, [pc, #56]	; (8000b00 <owReadHandler+0x70>)
 8000ac8:	f7ff ff54 	bl	8000974 <USART_ReceiveData>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <owReadHandler+0x74>)
 8000ad2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);//сбрасываем флаг ответ получен после 
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	b25a      	sxtb	r2, r3
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <owReadHandler+0x78>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	b25b      	sxtb	r3, r3
 8000aec:	4013      	ands	r3, r2
 8000aee:	b25b      	sxtb	r3, r3
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <owReadHandler+0x78>)
 8000af4:	701a      	strb	r2, [r3, #0]
  }
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd90      	pop	{r4, r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40013800 	.word	0x40013800
 8000b04:	20000550 	.word	0x20000550
 8000b08:	2000054c 	.word	0x2000054c

08000b0c <owResetCmd>:
 *
 * @param N usart -- выбранный для реализации 1wire usart
 * @return Возвращает 1 если на шине кто-то есть и 0 в противном случае
 */

  uint16_t owResetCmd() {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
	uint16_t owPresence;
	
	usart_setup(9600);
 8000b12:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000b16:	f7ff ff4d 	bl	80009b4 <usart_setup>

  owSend(0xF0); // Send RESET отправляем импуль сброса
 8000b1a:	20f0      	movs	r0, #240	; 0xf0
 8000b1c:	f000 f814 	bl	8000b48 <owSend>
  owPresence = owEchoRead(); // Ждём PRESENCE на шине и вовзращаем, что есть
 8000b20:	f000 f850 	bl	8000bc4 <owEchoRead>
 8000b24:	4603      	mov	r3, r0
 8000b26:	80fb      	strh	r3, [r7, #6]

	usart_setup(115200);// перенастраиваем скорость UART
 8000b28:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000b2c:	f7ff ff42 	bl	80009b4 <usart_setup>
  return owPresence;
 8000b30:	88fb      	ldrh	r3, [r7, #6]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <getUsartIndex>:

uint8_t getUsartIndex() {// смотрит по номеру UART c каким будет идти работа
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <owSend>:

void owSend(uint16_t data) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());//устанавливаем флаг если попадем в обработчик прерывания там он сбросится
 8000b52:	f7ff fff2 	bl	8000b3a <getUsartIndex>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	4093      	lsls	r3, r2
 8000b5e:	b25a      	sxtb	r2, r3
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <owSend+0x50>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <owSend+0x50>)
 8000b70:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);//отправляем данные
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	4619      	mov	r1, r3
 8000b76:	4809      	ldr	r0, [pc, #36]	; (8000b9c <owSend+0x54>)
 8000b78:	f7ff ff0b 	bl	8000992 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);//ждем пока передача закончится
 8000b7c:	bf00      	nop
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <owSend+0x58>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b88:	2b40      	cmp	r3, #64	; 0x40
 8000b8a:	d1f8      	bne.n	8000b7e <owSend+0x36>
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000054c 	.word	0x2000054c
 8000b9c:	40013800 	.word	0x40013800
 8000ba0:	200009c4 	.word	0x200009c4

08000ba4 <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {//читаем у нас пришла единица или ноль в ответ
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0; //если пришло 0xFF, то бит = 1, что то другое бит = 0
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	2bff      	cmp	r3, #255	; 0xff
 8000bb2:	bf0c      	ite	eq
 8000bb4:	2301      	moveq	r3, #1
 8000bb6:	2300      	movne	r3, #0
 8000bb8:	b2db      	uxtb	r3, r3
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <owEchoRead>:

uint16_t owEchoRead() {//
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();//получаем номер USART
 8000bca:	f7ff ffb6 	bl	8000b3a <getUsartIndex>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);// ждем пока кто-то не ответит но не больше паузы
 8000bd8:	bf00      	nop
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <owEchoRead+0x48>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	797b      	ldrb	r3, [r7, #5]
 8000be4:	fa42 f303 	asr.w	r3, r2, r3
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d004      	beq.n	8000bfa <owEchoRead+0x36>
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	80fa      	strh	r2, [r7, #6]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1ef      	bne.n	8000bda <owEchoRead+0x16>
  return rc_buffer[i];//в зависимости от используемого номера UART 
 8000bfa:	797b      	ldrb	r3, [r7, #5]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <owEchoRead+0x4c>)
 8000bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c02:	b29b      	uxth	r3, r3
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	2000054c 	.word	0x2000054c
 8000c10:	20000550 	.word	0x20000550

08000c14 <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {//разлагаем 1 байт на 8 байт ,кодируем так скасказать в посылку для 1wire
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]
 8000c24:	e014      	b.n	8000c50 <byteToBits+0x3c>
    if (ow_byte & 0x01) {//если текущий бит в байте ==1 то
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <byteToBits+0x24>
      *bits = WIRE_1; //заменяем на число которое при передаче по USART для 1wire будет единцией t.e 0xFF
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	22ff      	movs	r2, #255	; 0xff
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e002      	b.n	8000c3e <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;// тоже самое только для 0
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	3301      	adds	r3, #1
 8000c42:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1; //сдвигаем обработанный бит
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	085b      	lsrs	r3, r3, #1
 8000c48:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	2b07      	cmp	r3, #7
 8000c54:	d9e7      	bls.n	8000c26 <byteToBits+0x12>
  }
  return bits; //возвращае массив для передачи 
 8000c56:	683b      	ldr	r3, [r7, #0]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <owSendByte>:
/**
 * Метод пересылает последовательно 8 байт по одному на каждый бит в data
 * @param usart -- выбранный для эмуляции 1wire UART
 * @param d -- данные
 */
void owSendByte(uint8_t d) {
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);//преобразовываем байт в биты "массив байт для  передачи UART и эмуляции 1WIRE"
 8000c6c:	f107 020c 	add.w	r2, r7, #12
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ffcd 	bl	8000c14 <byteToBits>
  for (i = 0; i < 8; ++i) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e00b      	b.n	8000c98 <owSendByte+0x36>
    owSend(data[i]);
 8000c80:	f107 020c 	add.w	r2, r7, #12
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	4413      	add	r3, r2
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff5b 	bl	8000b48 <owSend>
  for (i = 0; i < 8; ++i) {
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	3301      	adds	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	2b07      	cmp	r3, #7
 8000c9c:	ddf0      	ble.n	8000c80 <owSendByte+0x1e>
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <owCRC>:
  }
  return target_byte; //возвращаем полученный байт
}

/* Подсчет CRC8 массива mas длиной Len */
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	733b      	strb	r3, [r7, #12]
  crc = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 8000cbc:	7b3b      	ldrb	r3, [r7, #12]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	73fb      	strb	r3, [r7, #15]
 8000cca:	e018      	b.n	8000cfe <owCRC+0x56>
      fb = crc ^ dat;
 8000ccc:	7b7a      	ldrb	r2, [r7, #13]
 8000cce:	7bbb      	ldrb	r3, [r7, #14]
 8000cd0:	4053      	eors	r3, r2
 8000cd2:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 8000cd4:	7afb      	ldrb	r3, [r7, #11]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 8000cdc:	7b7b      	ldrb	r3, [r7, #13]
 8000cde:	085b      	lsrs	r3, r3, #1
 8000ce0:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 8000ce2:	7bbb      	ldrb	r3, [r7, #14]
 8000ce4:	085b      	lsrs	r3, r3, #1
 8000ce6:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c; // полином
 8000ce8:	7afb      	ldrb	r3, [r7, #11]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d104      	bne.n	8000cf8 <owCRC+0x50>
 8000cee:	7b7b      	ldrb	r3, [r7, #13]
 8000cf0:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	d9e3      	bls.n	8000ccc <owCRC+0x24>
    }
    st_byt++;
 8000d04:	7b3b      	ldrb	r3, [r7, #12]
 8000d06:	3301      	adds	r3, #1
 8000d08:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len); // счетчик байтов в массиве
 8000d0a:	7b3a      	ldrb	r2, [r7, #12]
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3d4      	bcc.n	8000cbc <owCRC+0x14>
  return crc;
 8000d12:	7b7b      	ldrb	r3, [r7, #13]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);                        
 8000d26:	2107      	movs	r1, #7
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ffbd 	bl	8000ca8 <owCRC>
 8000d2e:	4603      	mov	r3, r0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <hasNextRom>:
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 * переделать на функции обратного вызова для реакции на ошибки
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {//
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) { //есть ли кто на шине
 8000d50:	f7ff fedc 	bl	8000b0c <owResetCmd>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2bf0      	cmp	r3, #240	; 0xf0
 8000d58:	d101      	bne.n	8000d5e <hasNextRom+0x26>
    return 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e097      	b.n	8000e8e <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);//
 8000d5e:	20f0      	movs	r0, #240	; 0xf0
 8000d60:	f7ff ff7f 	bl	8000c62 <owSendByte>
  do {
		uint8_t answerBit =0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 8000d68:	7ffb      	ldrb	r3, [r7, #31]
 8000d6a:	08db      	lsrs	r3, r3, #3
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	4413      	add	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ); // чтение прямого бита
 8000d7c:	20ff      	movs	r0, #255	; 0xff
 8000d7e:	f7ff fee3 	bl	8000b48 <owSend>
    cB = owReadSlot(owEchoRead());//ответ от датчика
 8000d82:	f7ff ff1f 	bl	8000bc4 <owEchoRead>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff0b 	bl	8000ba4 <owReadSlot>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ); // чтение инверсного бита
 8000d92:	20ff      	movs	r0, #255	; 0xff
 8000d94:	f7ff fed8 	bl	8000b48 <owSend>
    cmp_cB = owReadSlot(owEchoRead());//ответ от датчика
 8000d98:	f7ff ff14 	bl	8000bc4 <owEchoRead>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff00 	bl	8000ba4 <owReadSlot>
 8000da4:	4603      	mov	r3, r0
 8000da6:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)//сравниваем два ответа
 8000da8:	7afa      	ldrb	r2, [r7, #11]
 8000daa:	7abb      	ldrb	r3, [r7, #10]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d105      	bne.n	8000dbc <hasNextRom+0x84>
 8000db0:	7afb      	ldrb	r3, [r7, #11]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d102      	bne.n	8000dbc <hasNextRom+0x84>
      return -1;//ошибка никто не ответил 
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e068      	b.n	8000e8e <hasNextRom+0x156>
    if (cB != cmp_cB) { //нормальная ситуация пришло либо 10 либо 01
 8000dbc:	7afa      	ldrb	r2, [r7, #11]
 8000dbe:	7abb      	ldrb	r3, [r7, #10]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d002      	beq.n	8000dca <hasNextRom+0x92>
      searchDirection = cB;//выбираем в каком направлении будем двигатся дальше
 8000dc4:	7afb      	ldrb	r3, [r7, #11]
 8000dc6:	75bb      	strb	r3, [r7, #22]
 8000dc8:	e023      	b.n	8000e12 <hasNextRom+0xda>
			} else {//колизия пришло 00 т.е текущий бит у ROM-ов разный
				if (ui32BitNumber == ow->lastDiscrepancy)//если текущая позиция колизии равна прошлой
 8000dca:	7ffa      	ldrb	r2, [r7, #31]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d102      	bne.n	8000dda <hasNextRom+0xa2>
        searchDirection = 1;//выбираем в каком направлении будем двигатся дальше
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	75bb      	strb	r3, [r7, #22]
 8000dd8:	e01b      	b.n	8000e12 <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {//если мы зашили дальше
 8000dda:	7ffa      	ldrb	r2, [r7, #31]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dd02      	ble.n	8000dea <hasNextRom+0xb2>
          searchDirection = 0;//выбираем в каком направлении будем двигатся дальше 
 8000de4:	2300      	movs	r3, #0
 8000de6:	75bb      	strb	r3, [r7, #22]
 8000de8:	e00e      	b.n	8000e08 <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4413      	add	r3, r2
 8000df0:	3314      	adds	r3, #20
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	7ffb      	ldrb	r3, [r7, #31]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	fa42 f303 	asr.w	r3, r2, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 8000e08:	7dbb      	ldrb	r3, [r7, #22]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <hasNextRom+0xda>
          zeroFork = ui32BitNumber;//запоминаем развилку
 8000e0e:	7ffb      	ldrb	r3, [r7, #31]
 8000e10:	61bb      	str	r3, [r7, #24]
      }
    }
    // сохраняем бит
    if (searchDirection)
 8000e12:	7dbb      	ldrb	r3, [r7, #22]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00e      	beq.n	8000e36 <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;//выставляем бит в текущем байте байте
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b25a      	sxtb	r2, r3
 8000e1e:	7ffb      	ldrb	r3, [r7, #31]
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	2101      	movs	r1, #1
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);// решаем кого отключить
 8000e36:	7dbb      	ldrb	r3, [r7, #22]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <hasNextRom+0x108>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e000      	b.n	8000e42 <hasNextRom+0x10a>
 8000e40:	23ff      	movs	r3, #255	; 0xff
 8000e42:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);//вырубаем "мешающие" устройсва
 8000e44:	7d7b      	ldrb	r3, [r7, #21]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fe7d 	bl	8000b48 <owSend>
    ui32BitNumber++;//ищем следующий бит
 8000e4e:	7ffb      	ldrb	r3, [r7, #31]
 8000e50:	3301      	adds	r3, #1
 8000e52:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);//пока не найден весь ROM все биты
 8000e54:	7ffb      	ldrb	r3, [r7, #31]
 8000e56:	2b3f      	cmp	r3, #63	; 0x3f
 8000e58:	d984      	bls.n	8000d64 <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;//запоминаем развилку
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	611a      	str	r2, [r3, #16]
  for (; i < 7; i++)
 8000e60:	e00b      	b.n	8000e7a <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];//запоминаем последний ROM
 8000e62:	7dfb      	ldrb	r3, [r7, #23]
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	441a      	add	r2, r3
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
 8000e6a:	7811      	ldrb	r1, [r2, #0]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	4413      	add	r3, r2
 8000e70:	460a      	mov	r2, r1
 8000e72:	751a      	strb	r2, [r3, #20]
  for (; i < 7; i++)
 8000e74:	7dfb      	ldrb	r3, [r7, #23]
 8000e76:	3301      	adds	r3, #1
 8000e78:	75fb      	strb	r3, [r7, #23]
 8000e7a:	7dfb      	ldrb	r3, [r7, #23]
 8000e7c:	2b06      	cmp	r3, #6
 8000e7e:	d9f0      	bls.n	8000e62 <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	bfcc      	ite	gt
 8000e88:	2301      	movgt	r3, #1
 8000e8a:	2300      	movle	r3, #0
 8000e8c:	b2db      	uxtb	r3, r3
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3720      	adds	r7, #32
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <owSearchCmd>:

// Возвращает количество устройств на шине или код ошибки, если значение меньше 0
int owSearchCmd(OneWire *ow) {
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff fdba 	bl	8000a1c <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //передаем указатель на структуру куда положить след.ROM
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff40 	bl	8000d38 <hasNextRom>
 8000eb8:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	da02      	bge.n	8000ec6 <owSearchCmd+0x30>
      return -1;
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	e009      	b.n	8000eda <owSearchCmd+0x44>
    device++;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//ищем пока кто-то есть и этих кто-то не больше дефайна
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <owSearchCmd+0x42>
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	dde7      	ble.n	8000ea8 <owSearchCmd+0x12>
		return device;//возвращаем порядковый номер датчика (устройства) на шине
 8000ed8:	68fb      	ldr	r3, [r7, #12]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {//отправляет команду пропуска ROM после этого следующая команда будет
  owResetCmd();                 //для всех устройств на шине
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {//позволяет мастеру обращаться к конкретному  ведомому устройству
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 8000eee:	f7ff fe0d 	bl	8000b0c <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);//обращаемся к конкретному устройсву
 8000ef2:	2055      	movs	r0, #85	; 0x55
 8000ef4:	f7ff feb5 	bl	8000c62 <owSendByte>
  for (; i < 8; i++)
 8000ef8:	e009      	b.n	8000f0e <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));//"перебираемся по структуре как по массиву" первой звездочкой получаем i тый байт из структуры
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	4413      	add	r3, r2
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fead 	bl	8000c62 <owSendByte>
  for (; i < 8; i++)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2b07      	cmp	r3, #7
 8000f12:	ddf2      	ble.n	8000efa <owMatchRomCmd+0x18>
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);//позволяет мастеру обращаться к конкретному  ведомому устройству
 8000f28:	6838      	ldr	r0, [r7, #0]
 8000f2a:	f7ff ffda 	bl	8000ee2 <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);//говорим датчику пора бы преобразовать температуру
 8000f2e:	2044      	movs	r0, #68	; 0x44
 8000f30:	f7ff fe97 	bl	8000c62 <owSendByte>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <owReadScratchpadCmd>:
 * @param ow -- OneWire pointer
 * @param rom -- selected device on the bus
 * @param data -- buffer for data
 * @return data
 */
uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {//читаем память датчика
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b10      	cmp	r3, #16
 8000f52:	d001      	beq.n	8000f58 <owReadScratchpadCmd+0x1c>
 8000f54:	2b28      	cmp	r3, #40	; 0x28
 8000f56:	d109      	bne.n	8000f6c <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;  //9*8 =72 == равняется 9 байт данных
 8000f58:	2348      	movs	r3, #72	; 0x48
 8000f5a:	82bb      	strh	r3, [r7, #20]
      break;
 8000f5c:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 8000f5e:	68b8      	ldr	r0, [r7, #8]
 8000f60:	f7ff ffbf 	bl	8000ee2 <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);//отправляем команду на чтение памяти
 8000f64:	20be      	movs	r0, #190	; 0xbe
 8000f66:	f7ff fe7c 	bl	8000c62 <owSendByte>
  while (b < p) {// пока мы не обработали 9 байт 
 8000f6a:	e048      	b.n	8000ffe <owReadScratchpadCmd+0xc2>
      return data;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	e04b      	b.n	8001008 <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8)); //позиция обрабатываемого байта
 8000f70:	8abb      	ldrh	r3, [r7, #20]
 8000f72:	3b08      	subs	r3, #8
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da00      	bge.n	8000f7a <owReadScratchpadCmd+0x3e>
 8000f78:	3307      	adds	r3, #7
 8000f7a:	10db      	asrs	r3, r3, #3
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	8afb      	ldrh	r3, [r7, #22]
 8000f80:	08db      	lsrs	r3, r3, #3
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	74fb      	strb	r3, [r7, #19]
    uint8_t bt; 
		owSend(OW_READ);
 8000f8a:	20ff      	movs	r0, #255	; 0xff
 8000f8c:	f7ff fddc 	bl	8000b48 <owSend>
    bt = owReadSlot(owEchoRead());//читаем данные 
 8000f90:	f7ff fe18 	bl	8000bc4 <owEchoRead>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fe04 	bl	8000ba4 <owReadSlot>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 8000fa0:	7cbb      	ldrb	r3, [r7, #18]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d113      	bne.n	8000fce <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;//выставляем бит в нужной позиции
 8000fa6:	7cfb      	ldrb	r3, [r7, #19]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	b25a      	sxtb	r2, r3
 8000fb0:	8afb      	ldrh	r3, [r7, #22]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b259      	sxtb	r1, r3
 8000fc2:	7cfb      	ldrb	r3, [r7, #19]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b2ca      	uxtb	r2, r1
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	e014      	b.n	8000ff8 <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);//сбрасываем бит в нужной позиции
 8000fce:	7cfb      	ldrb	r3, [r7, #19]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b25a      	sxtb	r2, r3
 8000fd8:	8afb      	ldrh	r3, [r7, #22]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	2101      	movs	r1, #1
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	4013      	ands	r3, r2
 8000fec:	b259      	sxtb	r1, r3
 8000fee:	7cfb      	ldrb	r3, [r7, #19]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	b2ca      	uxtb	r2, r1
 8000ff6:	701a      	strb	r2, [r3, #0]
    b++;//следующий бит
 8000ff8:	8afb      	ldrh	r3, [r7, #22]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	82fb      	strh	r3, [r7, #22]
  while (b < p) {// пока мы не обработали 9 байт 
 8000ffe:	8afa      	ldrh	r2, [r7, #22]
 8001000:	8abb      	ldrh	r3, [r7, #20]
 8001002:	429a      	cmp	r2, r3
 8001004:	d3b4      	bcc.n	8000f70 <owReadScratchpadCmd+0x34>
  }
  return data;
 8001006:	687b      	ldr	r3, [r7, #4]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <readTemperature>:
 * @param ow -- OneWire bus pointer
 * @param rom -- selected device
 * @param reSense -- do you want resense temp for next time?
 * @return struct with data
 */
Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b08c      	sub	sp, #48	; 0x30
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	4613      	mov	r3, r2
 800101c:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 800101e:	2300      	movs	r3, #0
 8001020:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 8001024:	2300      	movs	r3, #0
 8001026:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sp = (Scratchpad_DS18B20 *) &pad; 
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
  switch (rom->family) {
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b10      	cmp	r3, #16
 800103c:	d022      	beq.n	8001084 <readTemperature+0x74>
 800103e:	2b28      	cmp	r3, #40	; 0x28
 8001040:	d13a      	bne.n	80010b8 <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18B20
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	461a      	mov	r2, r3
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f7ff ff76 	bl	8000f3c <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);//целая часть
 8001050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001052:	79db      	ldrb	r3, [r3, #7]
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	b25a      	sxtb	r2, r3
 8001058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105a:	7a1b      	ldrb	r3, [r3, #8]
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	b2db      	uxtb	r3, r3
 8001060:	b25b      	sxtb	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b25b      	sxtb	r3, r3
 8001066:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);//дробная
 800106a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106c:	7a1b      	ldrb	r3, [r3, #8]
 800106e:	f003 020f 	and.w	r2, r3, #15
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	111b      	asrs	r3, r3, #4
 800107c:	b2db      	uxtb	r3, r3
 800107e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 8001082:	e01c      	b.n	80010be <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18S20
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	461a      	mov	r2, r3
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f7ff ff55 	bl	8000f3c <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 8001092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001094:	7a1b      	ldrb	r3, [r3, #8]
 8001096:	085b      	lsrs	r3, r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	b25b      	sxtb	r3, r3
 800109c:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 80010a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a2:	7a1b      	ldrb	r3, [r3, #8]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	0092      	lsls	r2, r2, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 80010b6:	e002      	b.n	80010be <readTemperature+0xae>
    default:
      return t;
 80010b8:	8c3b      	ldrh	r3, [r7, #32]
 80010ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80010bc:	e008      	b.n	80010d0 <readTemperature+0xc0>
  }
  if (reSense) {
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);//можно сразу после как забрали данные отдаем датчику команду на преобразования температуры
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f7ff ff29 	bl	8000f1e <owConvertTemperatureCmd>
  }
  return t;
 80010cc:	8c3b      	ldrh	r3, [r7, #32]
 80010ce:	84bb      	strh	r3, [r7, #36]	; 0x24
}
 80010d0:	2300      	movs	r3, #0
 80010d2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80010d6:	f362 0307 	bfi	r3, r2, #0, #8
 80010da:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80010de:	f362 230f 	bfi	r3, r2, #8, #8
 80010e2:	4618      	mov	r0, r3
 80010e4:	3730      	adds	r7, #48	; 0x30
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <get_ROMid>:
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}


int get_ROMid (void){
 80010ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ee:	b089      	sub	sp, #36	; 0x24
 80010f0:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {    // is anybody on the bus?
 80010f2:	f7ff fd0b 	bl	8000b0c <owResetCmd>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2bf0      	cmp	r3, #240	; 0xf0
 80010fa:	d079      	beq.n	80011f0 <get_ROMid+0x104>
		devices = owSearchCmd(&ow);        // получить ROMid в�?ех у�?трой�?т на шине или вернуть код ошибки
 80010fc:	484e      	ldr	r0, [pc, #312]	; (8001238 <get_ROMid+0x14c>)
 80010fe:	f7ff feca 	bl	8000e96 <owSearchCmd>
 8001102:	4603      	mov	r3, r0
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b4d      	ldr	r3, [pc, #308]	; (800123c <get_ROMid+0x150>)
 8001108:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 800110a:	4b4c      	ldr	r3, [pc, #304]	; (800123c <get_ROMid+0x150>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d113      	bne.n	800113a <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 8001112:	4b4b      	ldr	r3, [pc, #300]	; (8001240 <get_ROMid+0x154>)
 8001114:	4a4b      	ldr	r2, [pc, #300]	; (8001244 <get_ROMid+0x158>)
 8001116:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 8001118:	4b4b      	ldr	r3, [pc, #300]	; (8001248 <get_ROMid+0x15c>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	e005      	b.n	800112c <get_ROMid+0x40>
					__asm__("nop");
 8001120:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 8001122:	4b49      	ldr	r3, [pc, #292]	; (8001248 <get_ROMid+0x15c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	4a47      	ldr	r2, [pc, #284]	; (8001248 <get_ROMid+0x15c>)
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b46      	ldr	r3, [pc, #280]	; (8001248 <get_ROMid+0x15c>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b43      	ldr	r3, [pc, #268]	; (8001240 <get_ROMid+0x154>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d3f3      	bcc.n	8001120 <get_ROMid+0x34>
				pDelay = 1000000;
 8001138:	e7eb      	b.n	8001112 <get_ROMid+0x26>
			}

		}
		i = 0;
 800113a:	4b43      	ldr	r3, [pc, #268]	; (8001248 <get_ROMid+0x15c>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 8001140:	e04f      	b.n	80011e2 <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 8001142:	4b41      	ldr	r3, [pc, #260]	; (8001248 <get_ROMid+0x15c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4a3b      	ldr	r2, [pc, #236]	; (8001238 <get_ROMid+0x14c>)
 800114a:	4413      	add	r3, r2
 800114c:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff fde5 	bl	8000d1e <owCRC8>
 8001154:	4603      	mov	r3, r0
 8001156:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	79db      	ldrb	r3, [r3, #7]
 800115c:	78fa      	ldrb	r2, [r7, #3]
 800115e:	429a      	cmp	r2, r3
 8001160:	d101      	bne.n	8001166 <get_ROMid+0x7a>
 8001162:	4b3a      	ldr	r3, [pc, #232]	; (800124c <get_ROMid+0x160>)
 8001164:	e000      	b.n	8001168 <get_ROMid+0x7c>
 8001166:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <get_ROMid+0x164>)
 8001168:	4a3a      	ldr	r2, [pc, #232]	; (8001254 <get_ROMid+0x168>)
 800116a:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 800116c:	4b36      	ldr	r3, [pc, #216]	; (8001248 <get_ROMid+0x15c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b39      	ldr	r3, [pc, #228]	; (8001258 <get_ROMid+0x16c>)
 8001174:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461e      	mov	r6, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	799b      	ldrb	r3, [r3, #6]
 8001180:	469c      	mov	ip, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	795b      	ldrb	r3, [r3, #5]
 8001186:	461a      	mov	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	791b      	ldrb	r3, [r3, #4]
 800118c:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001192:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001198:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800119e:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 80011a4:	9305      	str	r3, [sp, #20]
 80011a6:	9504      	str	r5, [sp, #16]
 80011a8:	9403      	str	r4, [sp, #12]
 80011aa:	9002      	str	r0, [sp, #8]
 80011ac:	9101      	str	r1, [sp, #4]
 80011ae:	9200      	str	r2, [sp, #0]
 80011b0:	4663      	mov	r3, ip
 80011b2:	4632      	mov	r2, r6
 80011b4:	4929      	ldr	r1, [pc, #164]	; (800125c <get_ROMid+0x170>)
 80011b6:	482a      	ldr	r0, [pc, #168]	; (8001260 <get_ROMid+0x174>)
 80011b8:	f00c fd74 	bl	800dca4 <siprintf>

			if (crc != r->crc) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	79db      	ldrb	r3, [r3, #7]
 80011c0:	78fa      	ldrb	r2, [r7, #3]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d008      	beq.n	80011d8 <get_ROMid+0xec>
				devInfo.device = i;
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <get_ROMid+0x15c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <get_ROMid+0x16c>)
 80011ce:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 80011d0:	4924      	ldr	r1, [pc, #144]	; (8001264 <get_ROMid+0x178>)
 80011d2:	4823      	ldr	r0, [pc, #140]	; (8001260 <get_ROMid+0x174>)
 80011d4:	f00c fd66 	bl	800dca4 <siprintf>
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <get_ROMid+0x15c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <get_ROMid+0x15c>)
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <get_ROMid+0x150>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <get_ROMid+0x15c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8a8      	bhi.n	8001142 <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <get_ROMid+0x154>)
 80011f2:	4a14      	ldr	r2, [pc, #80]	; (8001244 <get_ROMid+0x158>)
 80011f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <get_ROMid+0x15c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e005      	b.n	800120a <get_ROMid+0x11e>
		__asm__("nop");
 80011fe:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <get_ROMid+0x15c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	4a10      	ldr	r2, [pc, #64]	; (8001248 <get_ROMid+0x15c>)
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <get_ROMid+0x15c>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <get_ROMid+0x154>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d3f3      	bcc.n	80011fe <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <get_ROMid+0x168>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	490c      	ldr	r1, [pc, #48]	; (800124c <get_ROMid+0x160>)
 800121c:	4618      	mov	r0, r3
 800121e:	f7fe ff97 	bl	8000150 <strcmp>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <get_ROMid+0x140>
 8001228:	2300      	movs	r3, #0
 800122a:	e001      	b.n	8001230 <get_ROMid+0x144>
	else return -1;
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001238:	2000058c 	.word	0x2000058c
 800123c:	20000588 	.word	0x20000588
 8001240:	20000000 	.word	0x20000000
 8001244:	000f4240 	.word	0x000f4240
 8001248:	200005a8 	.word	0x200005a8
 800124c:	0800e554 	.word	0x0800e554
 8001250:	0800e55c 	.word	0x0800e55c
 8001254:	200005b0 	.word	0x200005b0
 8001258:	20000564 	.word	0x20000564
 800125c:	0800e568 	.word	0x0800e568
 8001260:	20000568 	.word	0x20000568
 8001264:	0800e590 	.word	0x0800e590

08001268 <get_Temperature>:

void get_Temperature (void)
{
 8001268:	b598      	push	{r3, r4, r7, lr}
 800126a:	af00      	add	r7, sp, #0
	i=0;
 800126c:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <get_Temperature+0xf0>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 8001272:	e067      	b.n	8001344 <get_Temperature+0xdc>
		switch ((ow.ids[i]).family) {//че у нас за датчик
 8001274:	4b38      	ldr	r3, [pc, #224]	; (8001358 <get_Temperature+0xf0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a38      	ldr	r2, [pc, #224]	; (800135c <get_Temperature+0xf4>)
 800127a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800127e:	2b28      	cmp	r3, #40	; 0x28
 8001280:	d006      	beq.n	8001290 <get_Temperature+0x28>
 8001282:	2b28      	cmp	r3, #40	; 0x28
 8001284:	dc56      	bgt.n	8001334 <get_Temperature+0xcc>
 8001286:	2b00      	cmp	r3, #0
 8001288:	d056      	beq.n	8001338 <get_Temperature+0xd0>
 800128a:	2b10      	cmp	r3, #16
 800128c:	d029      	beq.n	80012e2 <get_Temperature+0x7a>
			break;
		case 0x00:
			break;
		default:
			// error handler
			break;
 800128e:	e051      	b.n	8001334 <get_Temperature+0xcc>
			t = readTemperature(&ow, &ow.ids[i], 1);
 8001290:	4b31      	ldr	r3, [pc, #196]	; (8001358 <get_Temperature+0xf0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	4a31      	ldr	r2, [pc, #196]	; (800135c <get_Temperature+0xf4>)
 8001298:	4413      	add	r3, r2
 800129a:	2201      	movs	r2, #1
 800129c:	4619      	mov	r1, r3
 800129e:	482f      	ldr	r0, [pc, #188]	; (800135c <get_Temperature+0xf4>)
 80012a0:	f7ff feb6 	bl	8001010 <readTemperature>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a2e      	ldr	r2, [pc, #184]	; (8001360 <get_Temperature+0xf8>)
 80012a8:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <get_Temperature+0xf8>)
 80012ac:	f993 3000 	ldrsb.w	r3, [r3]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b28      	ldr	r3, [pc, #160]	; (8001360 <get_Temperature+0xf8>)
 80012be:	785b      	ldrb	r3, [r3, #1]
 80012c0:	4413      	add	r3, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f810 	bl	80002e8 <__aeabi_i2f>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a23      	ldr	r2, [pc, #140]	; (8001358 <get_Temperature+0xf0>)
 80012cc:	6814      	ldr	r4, [r2, #0]
 80012ce:	4925      	ldr	r1, [pc, #148]	; (8001364 <get_Temperature+0xfc>)
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f911 	bl	80004f8 <__aeabi_fdiv>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	4b23      	ldr	r3, [pc, #140]	; (8001368 <get_Temperature+0x100>)
 80012dc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 80012e0:	e02b      	b.n	800133a <get_Temperature+0xd2>
			t = readTemperature(&ow, &ow.ids[i], 1);
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <get_Temperature+0xf0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4a1c      	ldr	r2, [pc, #112]	; (800135c <get_Temperature+0xf4>)
 80012ea:	4413      	add	r3, r2
 80012ec:	2201      	movs	r2, #1
 80012ee:	4619      	mov	r1, r3
 80012f0:	481a      	ldr	r0, [pc, #104]	; (800135c <get_Temperature+0xf4>)
 80012f2:	f7ff fe8d 	bl	8001010 <readTemperature>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4a19      	ldr	r2, [pc, #100]	; (8001360 <get_Temperature+0xf8>)
 80012fa:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <get_Temperature+0xf8>)
 80012fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001302:	461a      	mov	r2, r3
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	461a      	mov	r2, r3
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <get_Temperature+0xf8>)
 8001310:	785b      	ldrb	r3, [r3, #1]
 8001312:	4413      	add	r3, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7fe ffe7 	bl	80002e8 <__aeabi_i2f>
 800131a:	4603      	mov	r3, r0
 800131c:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <get_Temperature+0xf0>)
 800131e:	6814      	ldr	r4, [r2, #0]
 8001320:	4910      	ldr	r1, [pc, #64]	; (8001364 <get_Temperature+0xfc>)
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f8e8 	bl	80004f8 <__aeabi_fdiv>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <get_Temperature+0x100>)
 800132e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 8001332:	e002      	b.n	800133a <get_Temperature+0xd2>
			break;
 8001334:	bf00      	nop
 8001336:	e000      	b.n	800133a <get_Temperature+0xd2>
			break;
 8001338:	bf00      	nop
	for (; i < devices; i++) {
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <get_Temperature+0xf0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	4a05      	ldr	r2, [pc, #20]	; (8001358 <get_Temperature+0xf0>)
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <get_Temperature+0x104>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b03      	ldr	r3, [pc, #12]	; (8001358 <get_Temperature+0xf0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d890      	bhi.n	8001274 <get_Temperature+0xc>
		}
	}
//	pDelay = 4000000;
//	for (i = 0; i < pDelay * 1; i++){}   /* Wait a bit. */
}
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	bd98      	pop	{r3, r4, r7, pc}
 8001358:	200005a8 	.word	0x200005a8
 800135c:	2000058c 	.word	0x2000058c
 8001360:	200005ac 	.word	0x200005ac
 8001364:	41200000 	.word	0x41200000
 8001368:	2000055c 	.word	0x2000055c
 800136c:	20000588 	.word	0x20000588

08001370 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2101      	movs	r1, #1
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <SELECT+0x14>)
 800137a:	f003 f996 	bl	80046aa <HAL_GPIO_WritePin>
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40010c00 	.word	0x40010c00

08001388 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	2101      	movs	r1, #1
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <DESELECT+0x14>)
 8001392:	f003 f98a 	bl	80046aa <HAL_GPIO_WritePin>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40010c00 	.word	0x40010c00

080013a0 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013aa:	bf00      	nop
 80013ac:	4808      	ldr	r0, [pc, #32]	; (80013d0 <SPI_TxByte+0x30>)
 80013ae:	f005 faff 	bl	80069b0 <HAL_SPI_GetState>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d1f9      	bne.n	80013ac <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80013b8:	1df9      	adds	r1, r7, #7
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	2201      	movs	r2, #1
 80013c0:	4803      	ldr	r0, [pc, #12]	; (80013d0 <SPI_TxByte+0x30>)
 80013c2:	f005 f817 	bl	80063f4 <HAL_SPI_Transmit>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200008dc 	.word	0x200008dc

080013d4 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80013da:	23ff      	movs	r3, #255	; 0xff
 80013dc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80013e2:	bf00      	nop
 80013e4:	4809      	ldr	r0, [pc, #36]	; (800140c <SPI_RxByte+0x38>)
 80013e6:	f005 fae3 	bl	80069b0 <HAL_SPI_GetState>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d1f9      	bne.n	80013e4 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80013f0:	1dba      	adds	r2, r7, #6
 80013f2:	1df9      	adds	r1, r7, #7
 80013f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2301      	movs	r3, #1
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <SPI_RxByte+0x38>)
 80013fe:	f005 f935 	bl	800666c <HAL_SPI_TransmitReceive>
  
  return data;
 8001402:	79bb      	ldrb	r3, [r7, #6]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200008dc 	.word	0x200008dc

08001410 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001418:	f7ff ffdc 	bl	80013d4 <SPI_RxByte>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	701a      	strb	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <SD_ReadyWait+0x34>)
 8001434:	2232      	movs	r2, #50	; 0x32
 8001436:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8001438:	f7ff ffcc 	bl	80013d4 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 800143c:	f7ff ffca 	bl	80013d4 <SPI_RxByte>
 8001440:	4603      	mov	r3, r0
 8001442:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	2bff      	cmp	r3, #255	; 0xff
 8001448:	d004      	beq.n	8001454 <SD_ReadyWait+0x28>
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SD_ReadyWait+0x34>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f3      	bne.n	800143c <SD_ReadyWait+0x10>
  
  return res;
 8001454:	79fb      	ldrb	r3, [r7, #7]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000a6a 	.word	0x20000a6a

08001464 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800146a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800146e:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8001470:	f7ff ff8a 	bl	8001388 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	e005      	b.n	8001486 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800147a:	20ff      	movs	r0, #255	; 0xff
 800147c:	f7ff ff90 	bl	80013a0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	3301      	adds	r3, #1
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	2b09      	cmp	r3, #9
 800148a:	ddf6      	ble.n	800147a <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 800148c:	f7ff ff70 	bl	8001370 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8001490:	2340      	movs	r3, #64	; 0x40
 8001492:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80014a4:	2395      	movs	r3, #149	; 0x95
 80014a6:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	e009      	b.n	80014c2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80014ae:	1d3a      	adds	r2, r7, #4
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff72 	bl	80013a0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3301      	adds	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	ddf2      	ble.n	80014ae <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80014c8:	e002      	b.n	80014d0 <SD_PowerOn+0x6c>
  {
    Count--;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80014d0:	f7ff ff80 	bl	80013d4 <SPI_RxByte>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d002      	beq.n	80014e0 <SD_PowerOn+0x7c>
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f4      	bne.n	80014ca <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80014e0:	f7ff ff52 	bl	8001388 <DESELECT>
  SPI_TxByte(0XFF);
 80014e4:	20ff      	movs	r0, #255	; 0xff
 80014e6:	f7ff ff5b 	bl	80013a0 <SPI_TxByte>
  
  PowerFlag = 1;
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <SD_PowerOn+0x94>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
}
 80014f0:	bf00      	nop
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200005b5 	.word	0x200005b5

080014fc <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <SD_PowerOff+0x14>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	200005b5 	.word	0x200005b5

08001514 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001518:	4b02      	ldr	r3, [pc, #8]	; (8001524 <SD_CheckPower+0x10>)
 800151a:	781b      	ldrb	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	200005b5 	.word	0x200005b5

08001528 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <SD_RxDataBlock+0x68>)
 8001534:	220a      	movs	r2, #10
 8001536:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001538:	f7ff ff4c 	bl	80013d4 <SPI_RxByte>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	2bff      	cmp	r3, #255	; 0xff
 8001544:	d104      	bne.n	8001550 <SD_RxDataBlock+0x28>
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <SD_RxDataBlock+0x68>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f3      	bne.n	8001538 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	2bfe      	cmp	r3, #254	; 0xfe
 8001554:	d001      	beq.n	800155a <SD_RxDataBlock+0x32>
    return FALSE;
 8001556:	2300      	movs	r3, #0
 8001558:	e016      	b.n	8001588 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff55 	bl	8001410 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff4f 	bl	8001410 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	3b02      	subs	r3, #2
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1ed      	bne.n	800155a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800157e:	f7ff ff29 	bl	80013d4 <SPI_RxByte>
  SPI_RxByte();
 8001582:	f7ff ff27 	bl	80013d4 <SPI_RxByte>
  
  return TRUE;
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000a69 	.word	0x20000a69

08001594 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80015a4:	f7ff ff42 	bl	800142c <SD_ReadyWait>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2bff      	cmp	r3, #255	; 0xff
 80015ac:	d001      	beq.n	80015b2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e040      	b.n	8001634 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fef3 	bl	80013a0 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	2bfd      	cmp	r3, #253	; 0xfd
 80015be:	d031      	beq.n	8001624 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fee7 	bl	80013a0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fee0 	bl	80013a0 <SPI_TxByte>
    } while (--wc);
 80015e0:	7bbb      	ldrb	r3, [r7, #14]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	73bb      	strb	r3, [r7, #14]
 80015e6:	7bbb      	ldrb	r3, [r7, #14]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1eb      	bne.n	80015c4 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80015ec:	f7ff fef2 	bl	80013d4 <SPI_RxByte>
    SPI_RxByte();
 80015f0:	f7ff fef0 	bl	80013d4 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80015f4:	e00b      	b.n	800160e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80015f6:	f7ff feed 	bl	80013d4 <SPI_RxByte>
 80015fa:	4603      	mov	r3, r0
 80015fc:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	f003 031f 	and.w	r3, r3, #31
 8001604:	2b05      	cmp	r3, #5
 8001606:	d006      	beq.n	8001616 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001608:	7b7b      	ldrb	r3, [r7, #13]
 800160a:	3301      	adds	r3, #1
 800160c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800160e:	7b7b      	ldrb	r3, [r7, #13]
 8001610:	2b40      	cmp	r3, #64	; 0x40
 8001612:	d9f0      	bls.n	80015f6 <SD_TxDataBlock+0x62>
 8001614:	e000      	b.n	8001618 <SD_TxDataBlock+0x84>
        break;
 8001616:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001618:	bf00      	nop
 800161a:	f7ff fedb 	bl	80013d4 <SPI_RxByte>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0fa      	beq.n	800161a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	f003 031f 	and.w	r3, r3, #31
 800162a:	2b05      	cmp	r3, #5
 800162c:	d101      	bne.n	8001632 <SD_TxDataBlock+0x9e>
    return TRUE;
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001648:	f7ff fef0 	bl	800142c <SD_ReadyWait>
 800164c:	4603      	mov	r3, r0
 800164e:	2bff      	cmp	r3, #255	; 0xff
 8001650:	d001      	beq.n	8001656 <SD_SendCmd+0x1a>
    return 0xFF;
 8001652:	23ff      	movs	r3, #255	; 0xff
 8001654:	e040      	b.n	80016d8 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fea1 	bl	80013a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	0e1b      	lsrs	r3, r3, #24
 8001662:	b2db      	uxtb	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fe9b 	bl	80013a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	0c1b      	lsrs	r3, r3, #16
 800166e:	b2db      	uxtb	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fe95 	bl	80013a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	b2db      	uxtb	r3, r3
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fe8f 	bl	80013a0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fe8a 	bl	80013a0 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	2b40      	cmp	r3, #64	; 0x40
 8001694:	d101      	bne.n	800169a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001696:	2395      	movs	r3, #149	; 0x95
 8001698:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b48      	cmp	r3, #72	; 0x48
 800169e:	d101      	bne.n	80016a4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80016a0:	2387      	movs	r3, #135	; 0x87
 80016a2:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fe7a 	bl	80013a0 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	2b4c      	cmp	r3, #76	; 0x4c
 80016b0:	d101      	bne.n	80016b6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80016b2:	f7ff fe8f 	bl	80013d4 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80016b6:	230a      	movs	r3, #10
 80016b8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80016ba:	f7ff fe8b 	bl	80013d4 <SPI_RxByte>
 80016be:	4603      	mov	r3, r0
 80016c0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80016c2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	da05      	bge.n	80016d6 <SD_SendCmd+0x9a>
 80016ca:	7bbb      	ldrb	r3, [r7, #14]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	73bb      	strb	r3, [r7, #14]
 80016d0:	7bbb      	ldrb	r3, [r7, #14]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f1      	bne.n	80016ba <SD_SendCmd+0x7e>
  
  return res;
 80016d6:	7b7b      	ldrb	r3, [r7, #13]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0d5      	b.n	80018a0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80016f4:	4b6c      	ldr	r3, [pc, #432]	; (80018a8 <SD_disk_initialize+0x1c8>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <SD_disk_initialize+0x2a>
    return Stat;        
 8001702:	4b69      	ldr	r3, [pc, #420]	; (80018a8 <SD_disk_initialize+0x1c8>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	e0ca      	b.n	80018a0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800170a:	f7ff feab 	bl	8001464 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800170e:	f7ff fe2f 	bl	8001370 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001716:	2100      	movs	r1, #0
 8001718:	2040      	movs	r0, #64	; 0x40
 800171a:	f7ff ff8f 	bl	800163c <SD_SendCmd>
 800171e:	4603      	mov	r3, r0
 8001720:	2b01      	cmp	r3, #1
 8001722:	f040 80a5 	bne.w	8001870 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001726:	4b61      	ldr	r3, [pc, #388]	; (80018ac <SD_disk_initialize+0x1cc>)
 8001728:	2264      	movs	r2, #100	; 0x64
 800172a:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800172c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001730:	2048      	movs	r0, #72	; 0x48
 8001732:	f7ff ff83 	bl	800163c <SD_SendCmd>
 8001736:	4603      	mov	r3, r0
 8001738:	2b01      	cmp	r3, #1
 800173a:	d158      	bne.n	80017ee <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e00c      	b.n	800175c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001742:	7bfc      	ldrb	r4, [r7, #15]
 8001744:	f7ff fe46 	bl	80013d4 <SPI_RxByte>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	f104 0310 	add.w	r3, r4, #16
 8001750:	443b      	add	r3, r7
 8001752:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	3301      	adds	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d9ef      	bls.n	8001742 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001762:	7abb      	ldrb	r3, [r7, #10]
 8001764:	2b01      	cmp	r3, #1
 8001766:	f040 8083 	bne.w	8001870 <SD_disk_initialize+0x190>
 800176a:	7afb      	ldrb	r3, [r7, #11]
 800176c:	2baa      	cmp	r3, #170	; 0xaa
 800176e:	d17f      	bne.n	8001870 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001770:	2100      	movs	r1, #0
 8001772:	2077      	movs	r0, #119	; 0x77
 8001774:	f7ff ff62 	bl	800163c <SD_SendCmd>
 8001778:	4603      	mov	r3, r0
 800177a:	2b01      	cmp	r3, #1
 800177c:	d807      	bhi.n	800178e <SD_disk_initialize+0xae>
 800177e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001782:	2069      	movs	r0, #105	; 0x69
 8001784:	f7ff ff5a 	bl	800163c <SD_SendCmd>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <SD_disk_initialize+0x1cc>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1eb      	bne.n	8001770 <SD_disk_initialize+0x90>
 8001798:	e000      	b.n	800179c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800179a:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 800179c:	4b43      	ldr	r3, [pc, #268]	; (80018ac <SD_disk_initialize+0x1cc>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d064      	beq.n	8001870 <SD_disk_initialize+0x190>
 80017a6:	2100      	movs	r1, #0
 80017a8:	207a      	movs	r0, #122	; 0x7a
 80017aa:	f7ff ff47 	bl	800163c <SD_SendCmd>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d15d      	bne.n	8001870 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
 80017b8:	e00c      	b.n	80017d4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80017ba:	7bfc      	ldrb	r4, [r7, #15]
 80017bc:	f7ff fe0a 	bl	80013d4 <SPI_RxByte>
 80017c0:	4603      	mov	r3, r0
 80017c2:	461a      	mov	r2, r3
 80017c4:	f104 0310 	add.w	r3, r4, #16
 80017c8:	443b      	add	r3, r7
 80017ca:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	3301      	adds	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d9ef      	bls.n	80017ba <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80017da:	7a3b      	ldrb	r3, [r7, #8]
 80017dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <SD_disk_initialize+0x108>
 80017e4:	2306      	movs	r3, #6
 80017e6:	e000      	b.n	80017ea <SD_disk_initialize+0x10a>
 80017e8:	2302      	movs	r3, #2
 80017ea:	73bb      	strb	r3, [r7, #14]
 80017ec:	e040      	b.n	8001870 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80017ee:	2100      	movs	r1, #0
 80017f0:	2077      	movs	r0, #119	; 0x77
 80017f2:	f7ff ff23 	bl	800163c <SD_SendCmd>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d808      	bhi.n	800180e <SD_disk_initialize+0x12e>
 80017fc:	2100      	movs	r1, #0
 80017fe:	2069      	movs	r0, #105	; 0x69
 8001800:	f7ff ff1c 	bl	800163c <SD_SendCmd>
 8001804:	4603      	mov	r3, r0
 8001806:	2b01      	cmp	r3, #1
 8001808:	d801      	bhi.n	800180e <SD_disk_initialize+0x12e>
 800180a:	2302      	movs	r3, #2
 800180c:	e000      	b.n	8001810 <SD_disk_initialize+0x130>
 800180e:	2301      	movs	r3, #1
 8001810:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001812:	7bbb      	ldrb	r3, [r7, #14]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d10e      	bne.n	8001836 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001818:	2100      	movs	r1, #0
 800181a:	2077      	movs	r0, #119	; 0x77
 800181c:	f7ff ff0e 	bl	800163c <SD_SendCmd>
 8001820:	4603      	mov	r3, r0
 8001822:	2b01      	cmp	r3, #1
 8001824:	d80e      	bhi.n	8001844 <SD_disk_initialize+0x164>
 8001826:	2100      	movs	r1, #0
 8001828:	2069      	movs	r0, #105	; 0x69
 800182a:	f7ff ff07 	bl	800163c <SD_SendCmd>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d107      	bne.n	8001844 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001834:	e00d      	b.n	8001852 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001836:	2100      	movs	r1, #0
 8001838:	2041      	movs	r0, #65	; 0x41
 800183a:	f7ff feff 	bl	800163c <SD_SendCmd>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <SD_disk_initialize+0x1cc>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1e1      	bne.n	8001812 <SD_disk_initialize+0x132>
 800184e:	e000      	b.n	8001852 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001850:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <SD_disk_initialize+0x1cc>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d007      	beq.n	800186c <SD_disk_initialize+0x18c>
 800185c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001860:	2050      	movs	r0, #80	; 0x50
 8001862:	f7ff feeb 	bl	800163c <SD_SendCmd>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001870:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <SD_disk_initialize+0x1d0>)
 8001872:	7bbb      	ldrb	r3, [r7, #14]
 8001874:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001876:	f7ff fd87 	bl	8001388 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800187a:	f7ff fdab 	bl	80013d4 <SPI_RxByte>
  
  if (type) 
 800187e:	7bbb      	ldrb	r3, [r7, #14]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <SD_disk_initialize+0x1c8>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f023 0301 	bic.w	r3, r3, #1
 800188e:	b2da      	uxtb	r2, r3
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SD_disk_initialize+0x1c8>)
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	e001      	b.n	800189a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001896:	f7ff fe31 	bl	80014fc <SD_PowerOff>
  }
  
  return Stat;
 800189a:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <SD_disk_initialize+0x1c8>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b2db      	uxtb	r3, r3
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd90      	pop	{r4, r7, pc}
 80018a8:	20000004 	.word	0x20000004
 80018ac:	20000a69 	.word	0x20000a69
 80018b0:	200005b4 	.word	0x200005b4

080018b4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80018c4:	2301      	movs	r3, #1
 80018c6:	e002      	b.n	80018ce <SD_disk_status+0x1a>
  
  return Stat;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <SD_disk_status+0x24>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000004 	.word	0x20000004

080018dc <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <SD_disk_read+0x1c>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <SD_disk_read+0x20>
    return RES_PARERR;
 80018f8:	2304      	movs	r3, #4
 80018fa:	e051      	b.n	80019a0 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <SD_disk_read+0xcc>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800190a:	2303      	movs	r3, #3
 800190c:	e048      	b.n	80019a0 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 800190e:	4b27      	ldr	r3, [pc, #156]	; (80019ac <SD_disk_read+0xd0>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	025b      	lsls	r3, r3, #9
 800191e:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001920:	f7ff fd26 	bl	8001370 <SELECT>
  
  if (count == 1) 
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d111      	bne.n	800194e <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	2051      	movs	r0, #81	; 0x51
 800192e:	f7ff fe85 	bl	800163c <SD_SendCmd>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d129      	bne.n	800198c <SD_disk_read+0xb0>
 8001938:	f44f 7100 	mov.w	r1, #512	; 0x200
 800193c:	68b8      	ldr	r0, [r7, #8]
 800193e:	f7ff fdf3 	bl	8001528 <SD_RxDataBlock>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d021      	beq.n	800198c <SD_disk_read+0xb0>
      count = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	e01e      	b.n	800198c <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	2052      	movs	r0, #82	; 0x52
 8001952:	f7ff fe73 	bl	800163c <SD_SendCmd>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d117      	bne.n	800198c <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 800195c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001960:	68b8      	ldr	r0, [r7, #8]
 8001962:	f7ff fde1 	bl	8001528 <SD_RxDataBlock>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00a      	beq.n	8001982 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001972:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	3b01      	subs	r3, #1
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1ed      	bne.n	800195c <SD_disk_read+0x80>
 8001980:	e000      	b.n	8001984 <SD_disk_read+0xa8>
          break;
 8001982:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001984:	2100      	movs	r1, #0
 8001986:	204c      	movs	r0, #76	; 0x4c
 8001988:	f7ff fe58 	bl	800163c <SD_SendCmd>
    }
  }
  
  DESELECT();
 800198c:	f7ff fcfc 	bl	8001388 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001990:	f7ff fd20 	bl	80013d4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf14      	ite	ne
 800199a:	2301      	movne	r3, #1
 800199c:	2300      	moveq	r3, #0
 800199e:	b2db      	uxtb	r3, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000004 	.word	0x20000004
 80019ac:	200005b4 	.word	0x200005b4

080019b0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	4603      	mov	r3, r0
 80019be:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <SD_disk_write+0x1c>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <SD_disk_write+0x20>
    return RES_PARERR;
 80019cc:	2304      	movs	r3, #4
 80019ce:	e06b      	b.n	8001aa8 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80019d0:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <SD_disk_write+0x100>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80019de:	2303      	movs	r3, #3
 80019e0:	e062      	b.n	8001aa8 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80019e2:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <SD_disk_write+0x100>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <SD_disk_write+0x44>
    return RES_WRPRT;
 80019f0:	2302      	movs	r3, #2
 80019f2:	e059      	b.n	8001aa8 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 80019f4:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <SD_disk_write+0x104>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	025b      	lsls	r3, r3, #9
 8001a04:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001a06:	f7ff fcb3 	bl	8001370 <SELECT>
  
  if (count == 1) 
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d110      	bne.n	8001a32 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	2058      	movs	r0, #88	; 0x58
 8001a14:	f7ff fe12 	bl	800163c <SD_SendCmd>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d13a      	bne.n	8001a94 <SD_disk_write+0xe4>
 8001a1e:	21fe      	movs	r1, #254	; 0xfe
 8001a20:	68b8      	ldr	r0, [r7, #8]
 8001a22:	f7ff fdb7 	bl	8001594 <SD_TxDataBlock>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d033      	beq.n	8001a94 <SD_disk_write+0xe4>
      count = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	e030      	b.n	8001a94 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <SD_disk_write+0x104>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2077      	movs	r0, #119	; 0x77
 8001a42:	f7ff fdfb 	bl	800163c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	2057      	movs	r0, #87	; 0x57
 8001a4a:	f7ff fdf7 	bl	800163c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	2059      	movs	r0, #89	; 0x59
 8001a52:	f7ff fdf3 	bl	800163c <SD_SendCmd>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d11b      	bne.n	8001a94 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001a5c:	21fc      	movs	r1, #252	; 0xfc
 8001a5e:	68b8      	ldr	r0, [r7, #8]
 8001a60:	f7ff fd98 	bl	8001594 <SD_TxDataBlock>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00a      	beq.n	8001a80 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a70:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ee      	bne.n	8001a5c <SD_disk_write+0xac>
 8001a7e:	e000      	b.n	8001a82 <SD_disk_write+0xd2>
          break;
 8001a80:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001a82:	21fd      	movs	r1, #253	; 0xfd
 8001a84:	2000      	movs	r0, #0
 8001a86:	f7ff fd85 	bl	8001594 <SD_TxDataBlock>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <SD_disk_write+0xe4>
      {        
        count = 1;
 8001a90:	2301      	movs	r3, #1
 8001a92:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001a94:	f7ff fc78 	bl	8001388 <DESELECT>
  SPI_RxByte();
 8001a98:	f7ff fc9c 	bl	80013d4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	2300      	moveq	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000004 	.word	0x20000004
 8001ab4:	200005b4 	.word	0x200005b4

08001ab8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b08b      	sub	sp, #44	; 0x2c
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	603a      	str	r2, [r7, #0]
 8001ac2:	71fb      	strb	r3, [r7, #7]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	e11b      	b.n	8001d0e <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001adc:	79bb      	ldrb	r3, [r7, #6]
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	d129      	bne.n	8001b36 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d017      	beq.n	8001b1a <SD_disk_ioctl+0x62>
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	dc1f      	bgt.n	8001b2e <SD_disk_ioctl+0x76>
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <SD_disk_ioctl+0x40>
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d00b      	beq.n	8001b0e <SD_disk_ioctl+0x56>
 8001af6:	e01a      	b.n	8001b2e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001af8:	f7ff fd0c 	bl	8001514 <SD_CheckPower>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001b02:	f7ff fcfb 	bl	80014fc <SD_PowerOff>
      res = RES_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b0c:	e0fd      	b.n	8001d0a <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001b0e:	f7ff fca9 	bl	8001464 <SD_PowerOn>
      res = RES_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b18:	e0f7      	b.n	8001d0a <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	1c5c      	adds	r4, r3, #1
 8001b1e:	f7ff fcf9 	bl	8001514 <SD_CheckPower>
 8001b22:	4603      	mov	r3, r0
 8001b24:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001b26:	2300      	movs	r3, #0
 8001b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001b2c:	e0ed      	b.n	8001d0a <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b34:	e0e9      	b.n	8001d0a <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001b36:	4b78      	ldr	r3, [pc, #480]	; (8001d18 <SD_disk_ioctl+0x260>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e0e2      	b.n	8001d0e <SD_disk_ioctl+0x256>
    
    SELECT();
 8001b48:	f7ff fc12 	bl	8001370 <SELECT>
    
    switch (ctrl) 
 8001b4c:	79bb      	ldrb	r3, [r7, #6]
 8001b4e:	2b0d      	cmp	r3, #13
 8001b50:	f200 80cc 	bhi.w	8001cec <SD_disk_ioctl+0x234>
 8001b54:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <SD_disk_ioctl+0xa4>)
 8001b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5a:	bf00      	nop
 8001b5c:	08001c57 	.word	0x08001c57
 8001b60:	08001b95 	.word	0x08001b95
 8001b64:	08001c47 	.word	0x08001c47
 8001b68:	08001ced 	.word	0x08001ced
 8001b6c:	08001ced 	.word	0x08001ced
 8001b70:	08001ced 	.word	0x08001ced
 8001b74:	08001ced 	.word	0x08001ced
 8001b78:	08001ced 	.word	0x08001ced
 8001b7c:	08001ced 	.word	0x08001ced
 8001b80:	08001ced 	.word	0x08001ced
 8001b84:	08001ced 	.word	0x08001ced
 8001b88:	08001c69 	.word	0x08001c69
 8001b8c:	08001c8d 	.word	0x08001c8d
 8001b90:	08001cb1 	.word	0x08001cb1
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001b94:	2100      	movs	r1, #0
 8001b96:	2049      	movs	r0, #73	; 0x49
 8001b98:	f7ff fd50 	bl	800163c <SD_SendCmd>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 80a8 	bne.w	8001cf4 <SD_disk_ioctl+0x23c>
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	2110      	movs	r1, #16
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fcbc 	bl	8001528 <SD_RxDataBlock>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 809e 	beq.w	8001cf4 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8001bb8:	7b3b      	ldrb	r3, [r7, #12]
 8001bba:	099b      	lsrs	r3, r3, #6
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d10e      	bne.n	8001be0 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001bc2:	7d7b      	ldrb	r3, [r7, #21]
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	7d3b      	ldrb	r3, [r7, #20]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001bd6:	8bfb      	ldrh	r3, [r7, #30]
 8001bd8:	029a      	lsls	r2, r3, #10
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	e02e      	b.n	8001c3e <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001be0:	7c7b      	ldrb	r3, [r7, #17]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	7dbb      	ldrb	r3, [r7, #22]
 8001bea:	09db      	lsrs	r3, r3, #7
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	7d7b      	ldrb	r3, [r7, #21]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f003 0306 	and.w	r3, r3, #6
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	3302      	adds	r3, #2
 8001c04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001c08:	7d3b      	ldrb	r3, [r7, #20]
 8001c0a:	099b      	lsrs	r3, r3, #6
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	7cfb      	ldrb	r3, [r7, #19]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	4413      	add	r3, r2
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	7cbb      	ldrb	r3, [r7, #18]
 8001c1e:	029b      	lsls	r3, r3, #10
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001c30:	8bfa      	ldrh	r2, [r7, #30]
 8001c32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c36:	3b09      	subs	r3, #9
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001c44:	e056      	b.n	8001cf4 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c4c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c54:	e055      	b.n	8001d02 <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001c56:	f7ff fbe9 	bl	800142c <SD_ReadyWait>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2bff      	cmp	r3, #255	; 0xff
 8001c5e:	d14b      	bne.n	8001cf8 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c66:	e047      	b.n	8001cf8 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2049      	movs	r0, #73	; 0x49
 8001c6c:	f7ff fce6 	bl	800163c <SD_SendCmd>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d142      	bne.n	8001cfc <SD_disk_ioctl+0x244>
 8001c76:	2110      	movs	r1, #16
 8001c78:	6a38      	ldr	r0, [r7, #32]
 8001c7a:	f7ff fc55 	bl	8001528 <SD_RxDataBlock>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d03b      	beq.n	8001cfc <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c8a:	e037      	b.n	8001cfc <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	204a      	movs	r0, #74	; 0x4a
 8001c90:	f7ff fcd4 	bl	800163c <SD_SendCmd>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d132      	bne.n	8001d00 <SD_disk_ioctl+0x248>
 8001c9a:	2110      	movs	r1, #16
 8001c9c:	6a38      	ldr	r0, [r7, #32]
 8001c9e:	f7ff fc43 	bl	8001528 <SD_RxDataBlock>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d02b      	beq.n	8001d00 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001cae:	e027      	b.n	8001d00 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	207a      	movs	r0, #122	; 0x7a
 8001cb4:	f7ff fcc2 	bl	800163c <SD_SendCmd>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d116      	bne.n	8001cec <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001cc4:	e00b      	b.n	8001cde <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001cc6:	6a3c      	ldr	r4, [r7, #32]
 8001cc8:	1c63      	adds	r3, r4, #1
 8001cca:	623b      	str	r3, [r7, #32]
 8001ccc:	f7ff fb82 	bl	80013d4 <SPI_RxByte>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001cd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cd8:	3301      	adds	r3, #1
 8001cda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001cde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d9ef      	bls.n	8001cc6 <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001cec:	2304      	movs	r3, #4
 8001cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cf2:	e006      	b.n	8001d02 <SD_disk_ioctl+0x24a>
      break;
 8001cf4:	bf00      	nop
 8001cf6:	e004      	b.n	8001d02 <SD_disk_ioctl+0x24a>
      break;
 8001cf8:	bf00      	nop
 8001cfa:	e002      	b.n	8001d02 <SD_disk_ioctl+0x24a>
      break;
 8001cfc:	bf00      	nop
 8001cfe:	e000      	b.n	8001d02 <SD_disk_ioctl+0x24a>
      break;
 8001d00:	bf00      	nop
    }
    
    DESELECT();
 8001d02:	f7ff fb41 	bl	8001388 <DESELECT>
    SPI_RxByte();
 8001d06:	f7ff fb65 	bl	80013d4 <SPI_RxByte>
  }
  
  return res;
 8001d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	372c      	adds	r7, #44	; 0x2c
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd90      	pop	{r4, r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000004 	.word	0x20000004

08001d1c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <vApplicationGetIdleTaskMemory+0x28>)
 8001d2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <vApplicationGetIdleTaskMemory+0x2c>)
 8001d32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	200005b8 	.word	0x200005b8
 8001d48:	2000066c 	.word	0x2000066c

08001d4c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8001d56:	4a38      	ldr	r2, [pc, #224]	; (8001e38 <HD44780_Init+0xec>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001d5c:	4b37      	ldr	r3, [pc, #220]	; (8001e3c <HD44780_Init+0xf0>)
 8001d5e:	2208      	movs	r2, #8
 8001d60:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001d62:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <HD44780_Init+0xf4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001d68:	4b33      	ldr	r3, [pc, #204]	; (8001e38 <HD44780_Init+0xec>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d907      	bls.n	8001d80 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001d70:	4b33      	ldr	r3, [pc, #204]	; (8001e40 <HD44780_Init+0xf4>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <HD44780_Init+0xf4>)
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	e006      	b.n	8001d8e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001d80:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <HD44780_Init+0xf4>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HD44780_Init+0xf4>)
 8001d8c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8001d8e:	f000 fa07 	bl	80021a0 <DelayInit>
  HAL_Delay(50);
 8001d92:	2032      	movs	r0, #50	; 0x32
 8001d94:	f002 f920 	bl	8003fd8 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001d98:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <HD44780_Init+0xf0>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 f9c5 	bl	800212c <ExpanderWrite>
  HAL_Delay(1000);
 8001da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001da6:	f002 f917 	bl	8003fd8 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8001daa:	2030      	movs	r0, #48	; 0x30
 8001dac:	f000 f9ad 	bl	800210a <Write4Bits>
  DelayUS(4500);
 8001db0:	f241 1094 	movw	r0, #4500	; 0x1194
 8001db4:	f000 fa1c 	bl	80021f0 <DelayUS>

  Write4Bits(0x03 << 4);
 8001db8:	2030      	movs	r0, #48	; 0x30
 8001dba:	f000 f9a6 	bl	800210a <Write4Bits>
  DelayUS(4500);
 8001dbe:	f241 1094 	movw	r0, #4500	; 0x1194
 8001dc2:	f000 fa15 	bl	80021f0 <DelayUS>

  Write4Bits(0x03 << 4);
 8001dc6:	2030      	movs	r0, #48	; 0x30
 8001dc8:	f000 f99f 	bl	800210a <Write4Bits>
  DelayUS(4500);
 8001dcc:	f241 1094 	movw	r0, #4500	; 0x1194
 8001dd0:	f000 fa0e 	bl	80021f0 <DelayUS>

  Write4Bits(0x02 << 4);
 8001dd4:	2020      	movs	r0, #32
 8001dd6:	f000 f998 	bl	800210a <Write4Bits>
  DelayUS(100);
 8001dda:	2064      	movs	r0, #100	; 0x64
 8001ddc:	f000 fa08 	bl	80021f0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HD44780_Init+0xf4>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	f043 0320 	orr.w	r3, r3, #32
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f950 	bl	8002090 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <HD44780_Init+0xf8>)
 8001df2:	2204      	movs	r2, #4
 8001df4:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001df6:	f000 f875 	bl	8001ee4 <HD44780_Display>
  HD44780_Clear();
 8001dfa:	f000 f82b 	bl	8001e54 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HD44780_Init+0xfc>)
 8001e00:	2202      	movs	r2, #2
 8001e02:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001e04:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HD44780_Init+0xfc>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f93e 	bl	8002090 <SendCommand>
  DelayUS(4500);
 8001e14:	f241 1094 	movw	r0, #4500	; 0x1194
 8001e18:	f000 f9ea 	bl	80021f0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001e1c:	490b      	ldr	r1, [pc, #44]	; (8001e4c <HD44780_Init+0x100>)
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 f8ce 	bl	8001fc0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001e24:	490a      	ldr	r1, [pc, #40]	; (8001e50 <HD44780_Init+0x104>)
 8001e26:	2001      	movs	r0, #1
 8001e28:	f000 f8ca 	bl	8001fc0 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001e2c:	f000 f81d 	bl	8001e6a <HD44780_Home>
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	2000086f 	.word	0x2000086f
 8001e3c:	20000870 	.word	0x20000870
 8001e40:	2000086c 	.word	0x2000086c
 8001e44:	2000086d 	.word	0x2000086d
 8001e48:	2000086e 	.word	0x2000086e
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	20000010 	.word	0x20000010

08001e54 <HD44780_Clear>:

void HD44780_Clear()
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f000 f919 	bl	8002090 <SendCommand>
  DelayUS(2000);
 8001e5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e62:	f000 f9c5 	bl	80021f0 <DelayUS>
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HD44780_Home>:

void HD44780_Home()
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001e6e:	2002      	movs	r0, #2
 8001e70:	f000 f90e 	bl	8002090 <SendCommand>
  DelayUS(2000);
 8001e74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e78:	f000 f9ba 	bl	80021f0 <DelayUS>
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	460a      	mov	r2, r1
 8001e8a:	71fb      	strb	r3, [r7, #7]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HD44780_SetCursor+0x5c>)
 8001e92:	f107 0408 	add.w	r4, r7, #8
 8001e96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001e9c:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HD44780_SetCursor+0x60>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	79ba      	ldrb	r2, [r7, #6]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d303      	bcc.n	8001eae <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HD44780_SetCursor+0x60>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001eae:	79bb      	ldrb	r3, [r7, #6]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	3318      	adds	r3, #24
 8001eb4:	443b      	add	r3, r7
 8001eb6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	b25b      	sxtb	r3, r3
 8001ec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ec8:	b25b      	sxtb	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 f8df 	bl	8002090 <SendCommand>
}
 8001ed2:	bf00      	nop
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd90      	pop	{r4, r7, pc}
 8001eda:	bf00      	nop
 8001edc:	0800e5b0 	.word	0x0800e5b0
 8001ee0:	2000086f 	.word	0x2000086f

08001ee4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HD44780_Display+0x28>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HD44780_Display+0x28>)
 8001ef4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HD44780_Display+0x28>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 f8c5 	bl	8002090 <SendCommand>
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000086d 	.word	0x2000086d

08001f10 <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HD44780_NoCursor+0x28>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	f023 0302 	bic.w	r3, r3, #2
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HD44780_NoCursor+0x28>)
 8001f20:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HD44780_NoCursor+0x28>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	f043 0308 	orr.w	r3, r3, #8
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f8af 	bl	8002090 <SendCommand>
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	2000086d 	.word	0x2000086d

08001f3c <HD44780_Cursor>:

void HD44780_Cursor()
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HD44780_Cursor+0x28>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HD44780_Cursor+0x28>)
 8001f4c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HD44780_Cursor+0x28>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	f043 0308 	orr.w	r3, r3, #8
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 f899 	bl	8002090 <SendCommand>
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2000086d 	.word	0x2000086d

08001f68 <HD44780_NoBlink>:

void HD44780_NoBlink()
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HD44780_NoBlink+0x28>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HD44780_NoBlink+0x28>)
 8001f78:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HD44780_NoBlink+0x28>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	f043 0308 	orr.w	r3, r3, #8
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 f883 	bl	8002090 <SendCommand>
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2000086d 	.word	0x2000086d

08001f94 <HD44780_Blink>:

void HD44780_Blink()
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HD44780_Blink+0x28>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HD44780_Blink+0x28>)
 8001fa4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HD44780_Blink+0x28>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 f86d 	bl	8002090 <SendCommand>
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	2000086d 	.word	0x2000086d

08001fc0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	b25b      	sxtb	r3, r3
 8001fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fde:	b25b      	sxtb	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f854 	bl	8002090 <SendCommand>
  for (int i=0; i<8; i++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	e009      	b.n	8002002 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f858 	bl	80020ac <SendChar>
  for (int i=0; i<8; i++)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3301      	adds	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b07      	cmp	r3, #7
 8002006:	ddf2      	ble.n	8001fee <HD44780_CreateSpecialChar+0x2e>
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800201a:	e006      	b.n	800202a <HD44780_PrintStr+0x18>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f000 f841 	bl	80020ac <SendChar>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f4      	bne.n	800201c <HD44780_PrintStr+0xa>
}
 8002032:	bf00      	nop
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HD44780_SetBacklight>:

void HD44780_SetBacklight(uint8_t new_val)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  if(new_val) HD44780_Backlight();
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HD44780_SetBacklight+0x16>
 800204c:	f000 f814 	bl	8002078 <HD44780_Backlight>
  else HD44780_NoBacklight();
}
 8002050:	e001      	b.n	8002056 <HD44780_SetBacklight+0x1a>
  else HD44780_NoBacklight();
 8002052:	f000 f805 	bl	8002060 <HD44780_NoBacklight>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HD44780_NoBacklight>:

void HD44780_NoBacklight(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HD44780_NoBacklight+0x14>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800206a:	2000      	movs	r0, #0
 800206c:	f000 f85e 	bl	800212c <ExpanderWrite>
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000870 	.word	0x20000870

08002078 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HD44780_Backlight+0x14>)
 800207e:	2208      	movs	r2, #8
 8002080:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8002082:	2000      	movs	r0, #0
 8002084:	f000 f852 	bl	800212c <ExpanderWrite>
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000870 	.word	0x20000870

08002090 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f812 	bl	80020c8 <Send>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <SendChar>:

static void SendChar(uint8_t ch)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	2101      	movs	r1, #1
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 f804 	bl	80020c8 <Send>
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	460a      	mov	r2, r1
 80020d2:	71fb      	strb	r3, [r7, #7]
 80020d4:	4613      	mov	r3, r2
 80020d6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f023 030f 	bic.w	r3, r3, #15
 80020de:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	79bb      	ldrb	r3, [r7, #6]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f80b 	bl	800210a <Write4Bits>
  Write4Bits((lownib)|mode);
 80020f4:	7bba      	ldrb	r2, [r7, #14]
 80020f6:	79bb      	ldrb	r3, [r7, #6]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 f804 	bl	800210a <Write4Bits>
}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f808 	bl	800212c <ExpanderWrite>
  PulseEnable(value);
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f820 	bl	8002164 <PulseEnable>
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af02      	add	r7, sp, #8
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <ExpanderWrite+0x30>)
 8002138:	781a      	ldrb	r2, [r3, #0]
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	4313      	orrs	r3, r2
 800213e:	b2db      	uxtb	r3, r3
 8002140:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8002142:	f107 020f 	add.w	r2, r7, #15
 8002146:	230a      	movs	r3, #10
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2301      	movs	r3, #1
 800214c:	217e      	movs	r1, #126	; 0x7e
 800214e:	4804      	ldr	r0, [pc, #16]	; (8002160 <ExpanderWrite+0x34>)
 8002150:	f002 fc08 	bl	8004964 <HAL_I2C_Master_Transmit>
}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000870 	.word	0x20000870
 8002160:	20000874 	.word	0x20000874

08002164 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	b2db      	uxtb	r3, r3
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ffd8 	bl	800212c <ExpanderWrite>
  DelayUS(20);
 800217c:	2014      	movs	r0, #20
 800217e:	f000 f837 	bl	80021f0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ffce 	bl	800212c <ExpanderWrite>
  DelayUS(20);
 8002190:	2014      	movs	r0, #20
 8002192:	f000 f82d 	bl	80021f0 <DelayUS>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <DelayInit>:

static void DelayInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <DelayInit+0x48>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <DelayInit+0x48>)
 80021aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ae:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80021b0:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <DelayInit+0x48>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <DelayInit+0x48>)
 80021b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ba:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <DelayInit+0x4c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <DelayInit+0x4c>)
 80021c2:	f023 0301 	bic.w	r3, r3, #1
 80021c6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <DelayInit+0x4c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <DelayInit+0x4c>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <DelayInit+0x4c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80021da:	bf00      	nop
  __ASM volatile ("NOP");
 80021dc:	bf00      	nop
  __ASM volatile ("NOP");
 80021de:	bf00      	nop
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	e000edf0 	.word	0xe000edf0
 80021ec:	e0001000 	.word	0xe0001000

080021f0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80021f8:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <DelayUS+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <DelayUS+0x44>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	0c9a      	lsrs	r2, r3, #18
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	fb02 f303 	mul.w	r3, r2, r3
 800220a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <DelayUS+0x48>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <DelayUS+0x48>)
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	429a      	cmp	r2, r3
 8002222:	d8f6      	bhi.n	8002212 <DelayUS+0x22>
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	371c      	adds	r7, #28
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	20000018 	.word	0x20000018
 8002234:	431bde83 	.word	0x431bde83
 8002238:	e0001000 	.word	0xe0001000

0800223c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800223c:	b5b0      	push	{r4, r5, r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002242:	f001 fe97 	bl	8003f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002246:	f000 f8af 	bl	80023a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800224a:	f000 fa51 	bl	80026f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800224e:	f000 f909 	bl	8002464 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002252:	f000 fa23 	bl	800269c <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002256:	f000 f933 	bl	80024c0 <MX_RTC_Init>
  MX_SPI1_Init();
 800225a:	f000 f94b 	bl	80024f4 <MX_SPI1_Init>
  MX_FATFS_Init();
 800225e:	f005 fc59 	bl	8007b14 <MX_FATFS_Init>
  MX_TIM1_Init();
 8002262:	f000 f97d 	bl	8002560 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002266:	f000 f9cb 	bl	8002600 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  InitAll();
 800226a:	f001 fa8b 	bl	8003784 <InitAll>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800226e:	4b36      	ldr	r3, [pc, #216]	; (8002348 <main+0x10c>)
 8002270:	1d3c      	adds	r4, r7, #4
 8002272:	461d      	mov	r5, r3
 8002274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002278:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800227c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f008 ff8b 	bl	800b1a0 <osThreadCreate>
 800228a:	4603      	mov	r3, r0
 800228c:	4a2f      	ldr	r2, [pc, #188]	; (800234c <main+0x110>)
 800228e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */


  xTaskCreate(MdE_Principal, "MdE", configMINIMAL_STACK_SIZE*2, NULL, 1, NULL);
 8002290:	2300      	movs	r3, #0
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	2301      	movs	r3, #1
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2300      	movs	r3, #0
 800229a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800229e:	492c      	ldr	r1, [pc, #176]	; (8002350 <main+0x114>)
 80022a0:	482c      	ldr	r0, [pc, #176]	; (8002354 <main+0x118>)
 80022a2:	f009 ff79 	bl	800c198 <xTaskCreate>
  xTaskCreate(DriverTeclado, "Driver Teclado", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80022a6:	2300      	movs	r3, #0
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	2301      	movs	r3, #1
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2300      	movs	r3, #0
 80022b0:	2280      	movs	r2, #128	; 0x80
 80022b2:	4929      	ldr	r1, [pc, #164]	; (8002358 <main+0x11c>)
 80022b4:	4829      	ldr	r0, [pc, #164]	; (800235c <main+0x120>)
 80022b6:	f009 ff6f 	bl	800c198 <xTaskCreate>
  xTaskCreate(Tarea_BOTON_ON, "Boton ON", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80022ba:	2300      	movs	r3, #0
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	2301      	movs	r3, #1
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2300      	movs	r3, #0
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	4926      	ldr	r1, [pc, #152]	; (8002360 <main+0x124>)
 80022c8:	4826      	ldr	r0, [pc, #152]	; (8002364 <main+0x128>)
 80022ca:	f009 ff65 	bl	800c198 <xTaskCreate>
  xTaskCreate(Tarea_Lectura, "Lectura Temperatura", configMINIMAL_STACK_SIZE, NULL, 1, Handler_Lectura);
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <main+0x12c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	2301      	movs	r3, #1
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2300      	movs	r3, #0
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	4923      	ldr	r1, [pc, #140]	; (800236c <main+0x130>)
 80022de:	4824      	ldr	r0, [pc, #144]	; (8002370 <main+0x134>)
 80022e0:	f009 ff5a 	bl	800c198 <xTaskCreate>
  xTaskCreate(Tarea_Timer, "Tarea Timer",configMINIMAL_STACK_SIZE,NULL, 1, Handler_Timer);
 80022e4:	4b23      	ldr	r3, [pc, #140]	; (8002374 <main+0x138>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	2301      	movs	r3, #1
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2300      	movs	r3, #0
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	4921      	ldr	r1, [pc, #132]	; (8002378 <main+0x13c>)
 80022f4:	4821      	ldr	r0, [pc, #132]	; (800237c <main+0x140>)
 80022f6:	f009 ff4f 	bl	800c198 <xTaskCreate>
  xTaskCreate(Tarea_Timer2, "Tarea Timer 2",configMINIMAL_STACK_SIZE,NULL, 1, Handler_Timer2);
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <main+0x144>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	2301      	movs	r3, #1
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	2300      	movs	r3, #0
 8002306:	2280      	movs	r2, #128	; 0x80
 8002308:	491e      	ldr	r1, [pc, #120]	; (8002384 <main+0x148>)
 800230a:	481f      	ldr	r0, [pc, #124]	; (8002388 <main+0x14c>)
 800230c:	f009 ff44 	bl	800c198 <xTaskCreate>
  xTaskCreate(Error_Sensores, "Error Sensores", configMINIMAL_STACK_SIZE, NULL, 1, Handler_Sensores);
 8002310:	4b1e      	ldr	r3, [pc, #120]	; (800238c <main+0x150>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	2301      	movs	r3, #1
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	2300      	movs	r3, #0
 800231c:	2280      	movs	r2, #128	; 0x80
 800231e:	491c      	ldr	r1, [pc, #112]	; (8002390 <main+0x154>)
 8002320:	481c      	ldr	r0, [pc, #112]	; (8002394 <main+0x158>)
 8002322:	f009 ff39 	bl	800c198 <xTaskCreate>
  xTaskCreate(Error_Anafe, "Error Anafe", configMINIMAL_STACK_SIZE, NULL, 1, Handler_Anafe);
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <main+0x15c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	2301      	movs	r3, #1
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2300      	movs	r3, #0
 8002332:	2280      	movs	r2, #128	; 0x80
 8002334:	4919      	ldr	r1, [pc, #100]	; (800239c <main+0x160>)
 8002336:	481a      	ldr	r0, [pc, #104]	; (80023a0 <main+0x164>)
 8002338:	f009 ff2e 	bl	800c198 <xTaskCreate>

  HAL_TIM_Base_Start_IT(&htim1);
 800233c:	4819      	ldr	r0, [pc, #100]	; (80023a4 <main+0x168>)
 800233e:	f004 fc3b 	bl	8006bb8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002342:	f008 ff26 	bl	800b192 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002346:	e7fe      	b.n	8002346 <main+0x10a>
 8002348:	0800e638 	.word	0x0800e638
 800234c:	20000a08 	.word	0x20000a08
 8002350:	0800e5cc 	.word	0x0800e5cc
 8002354:	0800304d 	.word	0x0800304d
 8002358:	0800e5d0 	.word	0x0800e5d0
 800235c:	08003c99 	.word	0x08003c99
 8002360:	0800e5e0 	.word	0x0800e5e0
 8002364:	08003015 	.word	0x08003015
 8002368:	20000a0c 	.word	0x20000a0c
 800236c:	0800e5ec 	.word	0x0800e5ec
 8002370:	08002d2d 	.word	0x08002d2d
 8002374:	20000a18 	.word	0x20000a18
 8002378:	0800e600 	.word	0x0800e600
 800237c:	08002ef9 	.word	0x08002ef9
 8002380:	20000a1c 	.word	0x20000a1c
 8002384:	0800e60c 	.word	0x0800e60c
 8002388:	08002f6d 	.word	0x08002f6d
 800238c:	20000a10 	.word	0x20000a10
 8002390:	0800e61c 	.word	0x0800e61c
 8002394:	08002d7d 	.word	0x08002d7d
 8002398:	20000a14 	.word	0x20000a14
 800239c:	0800e62c 	.word	0x0800e62c
 80023a0:	08002e29 	.word	0x08002e29
 80023a4:	20000934 	.word	0x20000934

080023a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b094      	sub	sp, #80	; 0x50
 80023ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023b2:	2228      	movs	r2, #40	; 0x28
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f00b fb5e 	bl	800da78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80023d8:	2309      	movs	r3, #9
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023e2:	2300      	movs	r3, #0
 80023e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023e6:	2301      	movs	r3, #1
 80023e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80023ea:	2301      	movs	r3, #1
 80023ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ee:	2302      	movs	r3, #2
 80023f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80023fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002402:	4618      	mov	r0, r3
 8002404:	f002 fdc0 	bl	8004f88 <HAL_RCC_OscConfig>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800240e:	f000 fa0f 	bl	8002830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002412:	230f      	movs	r3, #15
 8002414:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002416:	2302      	movs	r3, #2
 8002418:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800241e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002422:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002424:	2300      	movs	r3, #0
 8002426:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	2102      	movs	r1, #2
 800242e:	4618      	mov	r0, r3
 8002430:	f003 f82c 	bl	800548c <HAL_RCC_ClockConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800243a:	f000 f9f9 	bl	8002830 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800243e:	2301      	movs	r3, #1
 8002440:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002446:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	4618      	mov	r0, r3
 800244c:	f003 f9e6 	bl	800581c <HAL_RCCEx_PeriphCLKConfig>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002456:	f000 f9eb 	bl	8002830 <Error_Handler>
  }
}
 800245a:	bf00      	nop
 800245c:	3750      	adds	r7, #80	; 0x50
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <MX_I2C1_Init+0x50>)
 800246a:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <MX_I2C1_Init+0x54>)
 800246c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <MX_I2C1_Init+0x50>)
 8002470:	4a12      	ldr	r2, [pc, #72]	; (80024bc <MX_I2C1_Init+0x58>)
 8002472:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <MX_I2C1_Init+0x50>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <MX_I2C1_Init+0x50>)
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <MX_I2C1_Init+0x50>)
 8002482:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002486:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <MX_I2C1_Init+0x50>)
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <MX_I2C1_Init+0x50>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <MX_I2C1_Init+0x50>)
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <MX_I2C1_Init+0x50>)
 800249c:	2200      	movs	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024a0:	4804      	ldr	r0, [pc, #16]	; (80024b4 <MX_I2C1_Init+0x50>)
 80024a2:	f002 f91b 	bl	80046dc <HAL_I2C_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024ac:	f000 f9c0 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000874 	.word	0x20000874
 80024b8:	40005400 	.word	0x40005400
 80024bc:	000186a0 	.word	0x000186a0

080024c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <MX_RTC_Init+0x2c>)
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <MX_RTC_Init+0x30>)
 80024c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <MX_RTC_Init+0x2c>)
 80024cc:	f04f 32ff 	mov.w	r2, #4294967295
 80024d0:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <MX_RTC_Init+0x2c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024d8:	4804      	ldr	r0, [pc, #16]	; (80024ec <MX_RTC_Init+0x2c>)
 80024da:	f003 fb15 	bl	8005b08 <HAL_RTC_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_RTC_Init+0x28>
  {
    Error_Handler();
 80024e4:	f000 f9a4 	bl	8002830 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200008c8 	.word	0x200008c8
 80024f0:	40002800 	.word	0x40002800

080024f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024f8:	4b17      	ldr	r3, [pc, #92]	; (8002558 <MX_SPI1_Init+0x64>)
 80024fa:	4a18      	ldr	r2, [pc, #96]	; (800255c <MX_SPI1_Init+0x68>)
 80024fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024fe:	4b16      	ldr	r3, [pc, #88]	; (8002558 <MX_SPI1_Init+0x64>)
 8002500:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002504:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <MX_SPI1_Init+0x64>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <MX_SPI1_Init+0x64>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <MX_SPI1_Init+0x64>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <MX_SPI1_Init+0x64>)
 800251a:	2200      	movs	r2, #0
 800251c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <MX_SPI1_Init+0x64>)
 8002520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002524:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <MX_SPI1_Init+0x64>)
 8002528:	2228      	movs	r2, #40	; 0x28
 800252a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <MX_SPI1_Init+0x64>)
 800252e:	2200      	movs	r2, #0
 8002530:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <MX_SPI1_Init+0x64>)
 8002534:	2200      	movs	r2, #0
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002538:	4b07      	ldr	r3, [pc, #28]	; (8002558 <MX_SPI1_Init+0x64>)
 800253a:	2200      	movs	r2, #0
 800253c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <MX_SPI1_Init+0x64>)
 8002540:	220a      	movs	r2, #10
 8002542:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002544:	4804      	ldr	r0, [pc, #16]	; (8002558 <MX_SPI1_Init+0x64>)
 8002546:	f003 fed1 	bl	80062ec <HAL_SPI_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002550:	f000 f96e 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	200008dc 	.word	0x200008dc
 800255c:	40013000 	.word	0x40013000

08002560 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002566:	f107 0308 	add.w	r3, r7, #8
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002574:	463b      	mov	r3, r7
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800257c:	4b1e      	ldr	r3, [pc, #120]	; (80025f8 <MX_TIM1_Init+0x98>)
 800257e:	4a1f      	ldr	r2, [pc, #124]	; (80025fc <MX_TIM1_Init+0x9c>)
 8002580:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <MX_TIM1_Init+0x98>)
 8002584:	2200      	movs	r2, #0
 8002586:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002588:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <MX_TIM1_Init+0x98>)
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800258e:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <MX_TIM1_Init+0x98>)
 8002590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002594:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002596:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <MX_TIM1_Init+0x98>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800259c:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <MX_TIM1_Init+0x98>)
 800259e:	2200      	movs	r2, #0
 80025a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <MX_TIM1_Init+0x98>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025a8:	4813      	ldr	r0, [pc, #76]	; (80025f8 <MX_TIM1_Init+0x98>)
 80025aa:	f004 fab5 	bl	8006b18 <HAL_TIM_Base_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80025b4:	f000 f93c 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025be:	f107 0308 	add.w	r3, r7, #8
 80025c2:	4619      	mov	r1, r3
 80025c4:	480c      	ldr	r0, [pc, #48]	; (80025f8 <MX_TIM1_Init+0x98>)
 80025c6:	f004 fc51 	bl	8006e6c <HAL_TIM_ConfigClockSource>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80025d0:	f000 f92e 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d4:	2300      	movs	r3, #0
 80025d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025dc:	463b      	mov	r3, r7
 80025de:	4619      	mov	r1, r3
 80025e0:	4805      	ldr	r0, [pc, #20]	; (80025f8 <MX_TIM1_Init+0x98>)
 80025e2:	f004 fe23 	bl	800722c <HAL_TIMEx_MasterConfigSynchronization>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80025ec:	f000 f920 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80025f0:	bf00      	nop
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000934 	.word	0x20000934
 80025fc:	40012c00 	.word	0x40012c00

08002600 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002606:	f107 0308 	add.w	r3, r7, #8
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002614:	463b      	mov	r3, r7
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800261c:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <MX_TIM3_Init+0x94>)
 800261e:	4a1e      	ldr	r2, [pc, #120]	; (8002698 <MX_TIM3_Init+0x98>)
 8002620:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <MX_TIM3_Init+0x94>)
 8002624:	2200      	movs	r2, #0
 8002626:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002628:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <MX_TIM3_Init+0x94>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <MX_TIM3_Init+0x94>)
 8002630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002634:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <MX_TIM3_Init+0x94>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800263c:	4b15      	ldr	r3, [pc, #84]	; (8002694 <MX_TIM3_Init+0x94>)
 800263e:	2200      	movs	r2, #0
 8002640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002642:	4814      	ldr	r0, [pc, #80]	; (8002694 <MX_TIM3_Init+0x94>)
 8002644:	f004 fa68 	bl	8006b18 <HAL_TIM_Base_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800264e:	f000 f8ef 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002656:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002658:	f107 0308 	add.w	r3, r7, #8
 800265c:	4619      	mov	r1, r3
 800265e:	480d      	ldr	r0, [pc, #52]	; (8002694 <MX_TIM3_Init+0x94>)
 8002660:	f004 fc04 	bl	8006e6c <HAL_TIM_ConfigClockSource>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800266a:	f000 f8e1 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002676:	463b      	mov	r3, r7
 8002678:	4619      	mov	r1, r3
 800267a:	4806      	ldr	r0, [pc, #24]	; (8002694 <MX_TIM3_Init+0x94>)
 800267c:	f004 fdd6 	bl	800722c <HAL_TIMEx_MasterConfigSynchronization>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002686:	f000 f8d3 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800268a:	bf00      	nop
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	2000097c 	.word	0x2000097c
 8002698:	40000400 	.word	0x40000400

0800269c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_USART1_UART_Init+0x4c>)
 80026a2:	4a12      	ldr	r2, [pc, #72]	; (80026ec <MX_USART1_UART_Init+0x50>)
 80026a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <MX_USART1_UART_Init+0x4c>)
 80026a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_USART1_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_USART1_UART_Init+0x4c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_USART1_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_USART1_UART_Init+0x4c>)
 80026c2:	220c      	movs	r2, #12
 80026c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <MX_USART1_UART_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_USART1_UART_Init+0x4c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_USART1_UART_Init+0x4c>)
 80026d4:	f004 fe1a 	bl	800730c <HAL_HalfDuplex_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026de:	f000 f8a7 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200009c4 	.word	0x200009c4
 80026ec:	40013800 	.word	0x40013800

080026f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f6:	f107 0310 	add.w	r3, r7, #16
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002704:	4b3a      	ldr	r3, [pc, #232]	; (80027f0 <MX_GPIO_Init+0x100>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4a39      	ldr	r2, [pc, #228]	; (80027f0 <MX_GPIO_Init+0x100>)
 800270a:	f043 0310 	orr.w	r3, r3, #16
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	4b37      	ldr	r3, [pc, #220]	; (80027f0 <MX_GPIO_Init+0x100>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800271c:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <MX_GPIO_Init+0x100>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	4a33      	ldr	r2, [pc, #204]	; (80027f0 <MX_GPIO_Init+0x100>)
 8002722:	f043 0320 	orr.w	r3, r3, #32
 8002726:	6193      	str	r3, [r2, #24]
 8002728:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <MX_GPIO_Init+0x100>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002734:	4b2e      	ldr	r3, [pc, #184]	; (80027f0 <MX_GPIO_Init+0x100>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	4a2d      	ldr	r2, [pc, #180]	; (80027f0 <MX_GPIO_Init+0x100>)
 800273a:	f043 0304 	orr.w	r3, r3, #4
 800273e:	6193      	str	r3, [r2, #24]
 8002740:	4b2b      	ldr	r3, [pc, #172]	; (80027f0 <MX_GPIO_Init+0x100>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800274c:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <MX_GPIO_Init+0x100>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	4a27      	ldr	r2, [pc, #156]	; (80027f0 <MX_GPIO_Init+0x100>)
 8002752:	f043 0308 	orr.w	r3, r3, #8
 8002756:	6193      	str	r3, [r2, #24]
 8002758:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <MX_GPIO_Init+0x100>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002764:	2200      	movs	r2, #0
 8002766:	2110      	movs	r1, #16
 8002768:	4822      	ldr	r0, [pc, #136]	; (80027f4 <MX_GPIO_Init+0x104>)
 800276a:	f001 ff9e 	bl	80046aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|LED_VERDE_Pin|LED_AMARILLO_Pin|LED_ROJO_Pin
 800276e:	2200      	movs	r2, #0
 8002770:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8002774:	4820      	ldr	r0, [pc, #128]	; (80027f8 <MX_GPIO_Init+0x108>)
 8002776:	f001 ff98 	bl	80046aa <HAL_GPIO_WritePin>
                          |RELAY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800277a:	2310      	movs	r3, #16
 800277c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277e:	2301      	movs	r3, #1
 8002780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2302      	movs	r3, #2
 8002788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278a:	f107 0310 	add.w	r3, r7, #16
 800278e:	4619      	mov	r1, r3
 8002790:	4818      	ldr	r0, [pc, #96]	; (80027f4 <MX_GPIO_Init+0x104>)
 8002792:	f001 fdef 	bl	8004374 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin LED_VERDE_Pin LED_AMARILLO_Pin LED_ROJO_Pin
                           RELAY_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_VERDE_Pin|LED_AMARILLO_Pin|LED_ROJO_Pin
 8002796:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 800279a:	613b      	str	r3, [r7, #16]
                          |RELAY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279c:	2301      	movs	r3, #1
 800279e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a4:	2302      	movs	r3, #2
 80027a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	4619      	mov	r1, r3
 80027ae:	4812      	ldr	r0, [pc, #72]	; (80027f8 <MX_GPIO_Init+0x108>)
 80027b0:	f001 fde0 	bl	8004374 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON_ON_Pin BOTON3_Pin */
  GPIO_InitStruct.Pin = BOTON_ON_Pin|BOTON3_Pin;
 80027b4:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80027b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027be:	2301      	movs	r3, #1
 80027c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c2:	f107 0310 	add.w	r3, r7, #16
 80027c6:	4619      	mov	r1, r3
 80027c8:	480a      	ldr	r0, [pc, #40]	; (80027f4 <MX_GPIO_Init+0x104>)
 80027ca:	f001 fdd3 	bl	8004374 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON2_Pin BOTON1_Pin */
  GPIO_InitStruct.Pin = BOTON2_Pin|BOTON1_Pin;
 80027ce:	2318      	movs	r3, #24
 80027d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d6:	2301      	movs	r3, #1
 80027d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027da:	f107 0310 	add.w	r3, r7, #16
 80027de:	4619      	mov	r1, r3
 80027e0:	4805      	ldr	r0, [pc, #20]	; (80027f8 <MX_GPIO_Init+0x108>)
 80027e2:	f001 fdc7 	bl	8004374 <HAL_GPIO_Init>

}
 80027e6:	bf00      	nop
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40010800 	.word	0x40010800
 80027f8:	40010c00 	.word	0x40010c00

080027fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002804:	2001      	movs	r0, #1
 8002806:	f008 fd17 	bl	800b238 <osDelay>
 800280a:	e7fb      	b.n	8002804 <StartDefaultTask+0x8>

0800280c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a04      	ldr	r2, [pc, #16]	; (800282c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800281e:	f001 fbbf 	bl	8003fa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40000800 	.word	0x40000800

08002830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002834:	b672      	cpsid	i
}
 8002836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002838:	e7fe      	b.n	8002838 <Error_Handler+0x8>
	...

0800283c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002842:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <HAL_MspInit+0x68>)
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	4a17      	ldr	r2, [pc, #92]	; (80028a4 <HAL_MspInit+0x68>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6193      	str	r3, [r2, #24]
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <HAL_MspInit+0x68>)
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <HAL_MspInit+0x68>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	4a11      	ldr	r2, [pc, #68]	; (80028a4 <HAL_MspInit+0x68>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	61d3      	str	r3, [r2, #28]
 8002866:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <HAL_MspInit+0x68>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002872:	2200      	movs	r2, #0
 8002874:	210f      	movs	r1, #15
 8002876:	f06f 0001 	mvn.w	r0, #1
 800287a:	f001 fc9c 	bl	80041b6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_MspInit+0x6c>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <HAL_MspInit+0x6c>)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40010000 	.word	0x40010000

080028ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a15      	ldr	r2, [pc, #84]	; (800291c <HAL_I2C_MspInit+0x70>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d123      	bne.n	8002914 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <HAL_I2C_MspInit+0x74>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4a13      	ldr	r2, [pc, #76]	; (8002920 <HAL_I2C_MspInit+0x74>)
 80028d2:	f043 0308 	orr.w	r3, r3, #8
 80028d6:	6193      	str	r3, [r2, #24]
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_I2C_MspInit+0x74>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028e4:	23c0      	movs	r3, #192	; 0xc0
 80028e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e8:	2312      	movs	r3, #18
 80028ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028ec:	2303      	movs	r3, #3
 80028ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f0:	f107 0310 	add.w	r3, r7, #16
 80028f4:	4619      	mov	r1, r3
 80028f6:	480b      	ldr	r0, [pc, #44]	; (8002924 <HAL_I2C_MspInit+0x78>)
 80028f8:	f001 fd3c 	bl	8004374 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_I2C_MspInit+0x74>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	4a07      	ldr	r2, [pc, #28]	; (8002920 <HAL_I2C_MspInit+0x74>)
 8002902:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002906:	61d3      	str	r3, [r2, #28]
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_I2C_MspInit+0x74>)
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002914:	bf00      	nop
 8002916:	3720      	adds	r7, #32
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40005400 	.word	0x40005400
 8002920:	40021000 	.word	0x40021000
 8002924:	40010c00 	.word	0x40010c00

08002928 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a0b      	ldr	r2, [pc, #44]	; (8002964 <HAL_RTC_MspInit+0x3c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d110      	bne.n	800295c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800293a:	f002 fb19 	bl	8004f70 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <HAL_RTC_MspInit+0x40>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	4a09      	ldr	r2, [pc, #36]	; (8002968 <HAL_RTC_MspInit+0x40>)
 8002944:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002948:	61d3      	str	r3, [r2, #28]
 800294a:	4b07      	ldr	r3, [pc, #28]	; (8002968 <HAL_RTC_MspInit+0x40>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002956:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RTC_MspInit+0x44>)
 8002958:	2201      	movs	r2, #1
 800295a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40002800 	.word	0x40002800
 8002968:	40021000 	.word	0x40021000
 800296c:	4242043c 	.word	0x4242043c

08002970 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <HAL_SPI_MspInit+0x88>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d12f      	bne.n	80029f0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002990:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <HAL_SPI_MspInit+0x8c>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a19      	ldr	r2, [pc, #100]	; (80029fc <HAL_SPI_MspInit+0x8c>)
 8002996:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b17      	ldr	r3, [pc, #92]	; (80029fc <HAL_SPI_MspInit+0x8c>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a8:	4b14      	ldr	r3, [pc, #80]	; (80029fc <HAL_SPI_MspInit+0x8c>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	4a13      	ldr	r2, [pc, #76]	; (80029fc <HAL_SPI_MspInit+0x8c>)
 80029ae:	f043 0304 	orr.w	r3, r3, #4
 80029b2:	6193      	str	r3, [r2, #24]
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_SPI_MspInit+0x8c>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80029c0:	23a0      	movs	r3, #160	; 0xa0
 80029c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029c8:	2303      	movs	r3, #3
 80029ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	4619      	mov	r1, r3
 80029d2:	480b      	ldr	r0, [pc, #44]	; (8002a00 <HAL_SPI_MspInit+0x90>)
 80029d4:	f001 fcce 	bl	8004374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029d8:	2340      	movs	r3, #64	; 0x40
 80029da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e4:	f107 0310 	add.w	r3, r7, #16
 80029e8:	4619      	mov	r1, r3
 80029ea:	4805      	ldr	r0, [pc, #20]	; (8002a00 <HAL_SPI_MspInit+0x90>)
 80029ec:	f001 fcc2 	bl	8004374 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029f0:	bf00      	nop
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40013000 	.word	0x40013000
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40010800 	.word	0x40010800

08002a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <HAL_TIM_Base_MspInit+0x58>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d10c      	bne.n	8002a30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a16:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_TIM_Base_MspInit+0x5c>)
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	4a11      	ldr	r2, [pc, #68]	; (8002a60 <HAL_TIM_Base_MspInit+0x5c>)
 8002a1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a20:	6193      	str	r3, [r2, #24]
 8002a22:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <HAL_TIM_Base_MspInit+0x5c>)
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a2e:	e010      	b.n	8002a52 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a0b      	ldr	r2, [pc, #44]	; (8002a64 <HAL_TIM_Base_MspInit+0x60>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10b      	bne.n	8002a52 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_TIM_Base_MspInit+0x5c>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	4a08      	ldr	r2, [pc, #32]	; (8002a60 <HAL_TIM_Base_MspInit+0x5c>)
 8002a40:	f043 0302 	orr.w	r3, r3, #2
 8002a44:	61d3      	str	r3, [r2, #28]
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_TIM_Base_MspInit+0x5c>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40000400 	.word	0x40000400

08002a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 0310 	add.w	r3, r7, #16
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1a      	ldr	r2, [pc, #104]	; (8002aec <HAL_UART_MspInit+0x84>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d12c      	bne.n	8002ae2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_UART_MspInit+0x88>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	4a18      	ldr	r2, [pc, #96]	; (8002af0 <HAL_UART_MspInit+0x88>)
 8002a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a92:	6193      	str	r3, [r2, #24]
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <HAL_UART_MspInit+0x88>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <HAL_UART_MspInit+0x88>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <HAL_UART_MspInit+0x88>)
 8002aa6:	f043 0304 	orr.w	r3, r3, #4
 8002aaa:	6193      	str	r3, [r2, #24]
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <HAL_UART_MspInit+0x88>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002abc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002abe:	2312      	movs	r3, #18
 8002ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac6:	f107 0310 	add.w	r3, r7, #16
 8002aca:	4619      	mov	r1, r3
 8002acc:	4809      	ldr	r0, [pc, #36]	; (8002af4 <HAL_UART_MspInit+0x8c>)
 8002ace:	f001 fc51 	bl	8004374 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2105      	movs	r1, #5
 8002ad6:	2025      	movs	r0, #37	; 0x25
 8002ad8:	f001 fb6d 	bl	80041b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002adc:	2025      	movs	r0, #37	; 0x25
 8002ade:	f001 fb86 	bl	80041ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ae2:	bf00      	nop
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40013800 	.word	0x40013800
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40010800 	.word	0x40010800

08002af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08e      	sub	sp, #56	; 0x38
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002b0e:	4b34      	ldr	r3, [pc, #208]	; (8002be0 <HAL_InitTick+0xe8>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	4a33      	ldr	r2, [pc, #204]	; (8002be0 <HAL_InitTick+0xe8>)
 8002b14:	f043 0304 	orr.w	r3, r3, #4
 8002b18:	61d3      	str	r3, [r2, #28]
 8002b1a:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <HAL_InitTick+0xe8>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b26:	f107 0210 	add.w	r2, r7, #16
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f002 fe25 	bl	8005780 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d103      	bne.n	8002b48 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b40:	f002 fdf6 	bl	8005730 <HAL_RCC_GetPCLK1Freq>
 8002b44:	6378      	str	r0, [r7, #52]	; 0x34
 8002b46:	e004      	b.n	8002b52 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002b48:	f002 fdf2 	bl	8005730 <HAL_RCC_GetPCLK1Freq>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b54:	4a23      	ldr	r2, [pc, #140]	; (8002be4 <HAL_InitTick+0xec>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	0c9b      	lsrs	r3, r3, #18
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002b60:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <HAL_InitTick+0xf0>)
 8002b62:	4a22      	ldr	r2, [pc, #136]	; (8002bec <HAL_InitTick+0xf4>)
 8002b64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_InitTick+0xf0>)
 8002b68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b6c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002b6e:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <HAL_InitTick+0xf0>)
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b72:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002b74:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <HAL_InitTick+0xf0>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7a:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <HAL_InitTick+0xf0>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <HAL_InitTick+0xf0>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002b86:	4818      	ldr	r0, [pc, #96]	; (8002be8 <HAL_InitTick+0xf0>)
 8002b88:	f003 ffc6 	bl	8006b18 <HAL_TIM_Base_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002b92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d11b      	bne.n	8002bd2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002b9a:	4813      	ldr	r0, [pc, #76]	; (8002be8 <HAL_InitTick+0xf0>)
 8002b9c:	f004 f80c 	bl	8006bb8 <HAL_TIM_Base_Start_IT>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002ba6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d111      	bne.n	8002bd2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bae:	201e      	movs	r0, #30
 8002bb0:	f001 fb1d 	bl	80041ee <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b0f      	cmp	r3, #15
 8002bb8:	d808      	bhi.n	8002bcc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	201e      	movs	r0, #30
 8002bc0:	f001 faf9 	bl	80041b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <HAL_InitTick+0xf8>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e002      	b.n	8002bd2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002bd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3738      	adds	r7, #56	; 0x38
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000
 8002be4:	431bde83 	.word	0x431bde83
 8002be8:	20000a20 	.word	0x20000a20
 8002bec:	40000800 	.word	0x40000800
 8002bf0:	20000028 	.word	0x20000028

08002bf4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002bf8:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <SDTimer_Handler+0x3c>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d006      	beq.n	8002c10 <SDTimer_Handler+0x1c>
    Timer1--;
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <SDTimer_Handler+0x3c>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <SDTimer_Handler+0x3c>)
 8002c0e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <SDTimer_Handler+0x40>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d006      	beq.n	8002c28 <SDTimer_Handler+0x34>
    Timer2--;
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <SDTimer_Handler+0x40>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <SDTimer_Handler+0x40>)
 8002c26:	701a      	strb	r2, [r3, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	20000a69 	.word	0x20000a69
 8002c34:	20000a6a 	.word	0x20000a6a

08002c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c3c:	e7fe      	b.n	8002c3c <NMI_Handler+0x4>

08002c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c42:	e7fe      	b.n	8002c42 <HardFault_Handler+0x4>

08002c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c48:	e7fe      	b.n	8002c48 <MemManage_Handler+0x4>

08002c4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c4e:	e7fe      	b.n	8002c4e <BusFault_Handler+0x4>

08002c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c54:	e7fe      	b.n	8002c54 <UsageFault_Handler+0x4>

08002c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
	...

08002c64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c68:	480a      	ldr	r0, [pc, #40]	; (8002c94 <TIM4_IRQHandler+0x30>)
 8002c6a:	f003 fff7 	bl	8006c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  FatFsCnt++;
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <TIM4_IRQHandler+0x34>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	3301      	adds	r3, #1
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <TIM4_IRQHandler+0x34>)
 8002c7a:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <TIM4_IRQHandler+0x34>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b09      	cmp	r3, #9
 8002c84:	d904      	bls.n	8002c90 <TIM4_IRQHandler+0x2c>
  {
    FatFsCnt = 0;
 8002c86:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <TIM4_IRQHandler+0x34>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
    SDTimer_Handler();
 8002c8c:	f7ff ffb2 	bl	8002bf4 <SDTimer_Handler>
  }
  /* USER CODE END TIM4_IRQn 1 */
}
 8002c90:	bf00      	nop
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000a20 	.word	0x20000a20
 8002c98:	20000a68 	.word	0x20000a68

08002c9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  owReadHandler();
 8002ca0:	f7fd fef6 	bl	8000a90 <owReadHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ca4:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <USART1_IRQHandler+0x14>)
 8002ca6:	f004 fb87 	bl	80073b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200009c4 	.word	0x200009c4

08002cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cbc:	4a14      	ldr	r2, [pc, #80]	; (8002d10 <_sbrk+0x5c>)
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <_sbrk+0x60>)
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <_sbrk+0x64>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <_sbrk+0x64>)
 8002cd2:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <_sbrk+0x68>)
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <_sbrk+0x64>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d207      	bcs.n	8002cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce4:	f00a fe8e 	bl	800da04 <__errno>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	220c      	movs	r2, #12
 8002cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf2:	e009      	b.n	8002d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cfa:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <_sbrk+0x64>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	4a05      	ldr	r2, [pc, #20]	; (8002d18 <_sbrk+0x64>)
 8002d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d06:	68fb      	ldr	r3, [r7, #12]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20005000 	.word	0x20005000
 8002d14:	00000400 	.word	0x00000400
 8002d18:	20000a6c 	.word	0x20000a6c
 8002d1c:	20003f40 	.word	0x20003f40

08002d20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <Tarea_Lectura>:
float temperatura;

//************************************************************************************************************

void Tarea_Lectura( void *p )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;

	while(1) {

		xLastWakeTime = xTaskGetTickCount();
 8002d34:	f009 fd3c 	bl	800c7b0 <xTaskGetTickCount>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	60fb      	str	r3, [r7, #12]

		get_Temperature();
 8002d3c:	f7fe fa94 	bl	8001268 <get_Temperature>

		temperatura = ( Temp[0] + Temp[1] ) / 2;
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <Tarea_Lectura+0x48>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0b      	ldr	r2, [pc, #44]	; (8002d74 <Tarea_Lectura+0x48>)
 8002d46:	6852      	ldr	r2, [r2, #4]
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fa18 	bl	8000180 <__addsf3>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd fbce 	bl	80004f8 <__aeabi_fdiv>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <Tarea_Lectura+0x4c>)
 8002d62:	601a      	str	r2, [r3, #0]

		vTaskDelayUntil(&xLastWakeTime,ONE_SEC);
 8002d64:	f107 030c 	add.w	r3, r7, #12
 8002d68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f009 fb59 	bl	800c424 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8002d72:	e7df      	b.n	8002d34 <Tarea_Lectura+0x8>
 8002d74:	2000055c 	.word	0x2000055c
 8002d78:	20000a94 	.word	0x20000a94

08002d7c <Error_Sensores>:
}

//************************************************************************************************************

void Error_Sensores( void *p )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
	float dif=0;
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]

	while(1) {

		dif = Temp[1] - Temp[0];
 8002d8a:	4b21      	ldr	r3, [pc, #132]	; (8002e10 <Error_Sensores+0x94>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4a20      	ldr	r2, [pc, #128]	; (8002e10 <Error_Sensores+0x94>)
 8002d90:	6812      	ldr	r2, [r2, #0]
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd f9f1 	bl	800017c <__aeabi_fsub>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	60fb      	str	r3, [r7, #12]

		// Chequeamos que los sensores funcionen bien
		if((dif>MAX_DIF_P) || (dif<MAX_DIF_N))
 8002d9e:	491d      	ldr	r1, [pc, #116]	; (8002e14 <Error_Sensores+0x98>)
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7fd fcb1 	bl	8000708 <__aeabi_fcmpgt>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d106      	bne.n	8002dba <Error_Sensores+0x3e>
 8002dac:	491a      	ldr	r1, [pc, #104]	; (8002e18 <Error_Sensores+0x9c>)
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f7fd fc8c 	bl	80006cc <__aeabi_fcmplt>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d025      	beq.n	8002e06 <Error_Sensores+0x8a>
		{
			SetLED(OFF, VERDE);
 8002dba:	2101      	movs	r1, #1
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f001 f809 	bl	8003dd4 <SetLED>
			SetLED(ON, ROJO);
 8002dc2:	2103      	movs	r1, #3
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	f001 f805 	bl	8003dd4 <SetLED>

		    // En base a si la dif es positiva o negativa sabemos cual sensor fallo
		    // Cuando el sensor no lee bien indica 85 grados, usamos eso para determinar cual fallo
		    if(dif>MAX_DIF_P)
 8002dca:	4912      	ldr	r1, [pc, #72]	; (8002e14 <Error_Sensores+0x98>)
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7fd fc9b 	bl	8000708 <__aeabi_fcmpgt>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d006      	beq.n	8002de6 <Error_Sensores+0x6a>
		    {
		    	componentes[2] = '0'; // Fallo el sensor 2
 8002dd8:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <Error_Sensores+0xa0>)
 8002dda:	2230      	movs	r2, #48	; 0x30
 8002ddc:	709a      	strb	r2, [r3, #2]
		    	estado_comp = ERROR_SENSOR_2;
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <Error_Sensores+0xa4>)
 8002de0:	2205      	movs	r2, #5
 8002de2:	701a      	strb	r2, [r3, #0]
 8002de4:	e00c      	b.n	8002e00 <Error_Sensores+0x84>

		    	// CARGAR EN LA SD EL ERROR
		    	//escribir_SD();
		    }
		    else if(dif<MAX_DIF_N){
 8002de6:	490c      	ldr	r1, [pc, #48]	; (8002e18 <Error_Sensores+0x9c>)
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f7fd fc6f 	bl	80006cc <__aeabi_fcmplt>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <Error_Sensores+0x84>
		    	componentes[1] = '0'; // Fallo el sensor 1
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <Error_Sensores+0xa0>)
 8002df6:	2230      	movs	r2, #48	; 0x30
 8002df8:	705a      	strb	r2, [r3, #1]
		    	estado_comp = ERROR_SENSOR_1;
 8002dfa:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <Error_Sensores+0xa4>)
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	701a      	strb	r2, [r3, #0]

		    	// CARGAR EN LA SD EL ERROR
		    	//escribir_SD();
		    }

		    f_error = 1;
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <Error_Sensores+0xa8>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
		}

		vTaskDelay(ONE_SEC); // Tiene que ser 1s
 8002e06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e0a:	f009 fb89 	bl	800c520 <vTaskDelay>
		dif = Temp[1] - Temp[0];
 8002e0e:	e7bc      	b.n	8002d8a <Error_Sensores+0xe>
 8002e10:	2000055c 	.word	0x2000055c
 8002e14:	40a00000 	.word	0x40a00000
 8002e18:	c0a00000 	.word	0xc0a00000
 8002e1c:	20000a9c 	.word	0x20000a9c
 8002e20:	20000a90 	.word	0x20000a90
 8002e24:	20000a8f 	.word	0x20000a8f

08002e28 <Error_Anafe>:
}

//************************************************************************************************************

void Error_Anafe(void *p)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
	float dif_s0=0, dif_s1=0, auxTemp[2] = {0, 0};
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		if(f_preparacion && (tiempoRestante<=4) && (!faseFinal))
 8002e48:	4b24      	ldr	r3, [pc, #144]	; (8002edc <Error_Anafe+0xb4>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d040      	beq.n	8002ed2 <Error_Anafe+0xaa>
 8002e50:	4b23      	ldr	r3, [pc, #140]	; (8002ee0 <Error_Anafe+0xb8>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d83c      	bhi.n	8002ed2 <Error_Anafe+0xaa>
 8002e58:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <Error_Anafe+0xbc>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d138      	bne.n	8002ed2 <Error_Anafe+0xaa>
		{
			dif_s0 = Temp[0]-auxTemp[0];
 8002e60:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <Error_Anafe+0xc0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd f987 	bl	800017c <__aeabi_fsub>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	617b      	str	r3, [r7, #20]
			dif_s1 = Temp[1]-auxTemp[1];
 8002e72:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <Error_Anafe+0xc0>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4611      	mov	r1, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fd f97e 	bl	800017c <__aeabi_fsub>
 8002e80:	4603      	mov	r3, r0
 8002e82:	613b      	str	r3, [r7, #16]

			auxTemp[0] = Temp[0];
 8002e84:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <Error_Anafe+0xc0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60bb      	str	r3, [r7, #8]
			auxTemp[1] = Temp[1];
 8002e8a:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <Error_Anafe+0xc0>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]
			// Chequeamos que el anafe funcione bien
			if( (dif_s0<MIN_DIF_CALENTAMIENTO) || (dif_s1<MIN_DIF_CALENTAMIENTO) )
 8002e90:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002e94:	6978      	ldr	r0, [r7, #20]
 8002e96:	f7fd fc19 	bl	80006cc <__aeabi_fcmplt>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d107      	bne.n	8002eb0 <Error_Anafe+0x88>
 8002ea0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002ea4:	6938      	ldr	r0, [r7, #16]
 8002ea6:	f7fd fc11 	bl	80006cc <__aeabi_fcmplt>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <Error_Anafe+0xaa>
			{
				SetLED(OFF, VERDE);
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f000 ff8e 	bl	8003dd4 <SetLED>
				SetLED(ON, ROJO);
 8002eb8:	2103      	movs	r1, #3
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f000 ff8a 	bl	8003dd4 <SetLED>

				componentes[0] = '0'; // Fallo el anafe
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <Error_Anafe+0xc4>)
 8002ec2:	2230      	movs	r2, #48	; 0x30
 8002ec4:	701a      	strb	r2, [r3, #0]
				estado_comp = ERROR_ANAFE;
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <Error_Anafe+0xc8>)
 8002ec8:	2203      	movs	r2, #3
 8002eca:	701a      	strb	r2, [r3, #0]

				// CARGAR EN LA SD EL ERROR
				//escribir_SD();
				f_error = 1;
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <Error_Anafe+0xcc>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
			}


		}
		vTaskDelay(15*ONE_SEC); // Que mida cada 15 secs
 8002ed2:	f643 2098 	movw	r0, #15000	; 0x3a98
 8002ed6:	f009 fb23 	bl	800c520 <vTaskDelay>
		if(f_preparacion && (tiempoRestante<=4) && (!faseFinal))
 8002eda:	e7b5      	b.n	8002e48 <Error_Anafe+0x20>
 8002edc:	20000a72 	.word	0x20000a72
 8002ee0:	2000001c 	.word	0x2000001c
 8002ee4:	20000a71 	.word	0x20000a71
 8002ee8:	2000055c 	.word	0x2000055c
 8002eec:	20000a9c 	.word	0x20000a9c
 8002ef0:	20000a90 	.word	0x20000a90
 8002ef4:	20000a8f 	.word	0x20000a8f

08002ef8 <Tarea_Timer>:
}

//************************************************************************************************************

void Tarea_Timer(void *p)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime3;

	xLastWakeTime3 = xTaskGetTickCount();
 8002f00:	f009 fc56 	bl	800c7b0 <xTaskGetTickCount>
 8002f04:	4603      	mov	r3, r0
 8002f06:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		vTaskDelayUntil(&xLastWakeTime3,1000);
 8002f08:	f107 030c 	add.w	r3, r7, #12
 8002f0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f10:	4618      	mov	r0, r3
 8002f12:	f009 fa87 	bl	800c424 <vTaskDelayUntil>

		HAL_RTC_GetTime(&hrtc, &horaActual, RTC_FORMAT_BIN);
 8002f16:	2200      	movs	r2, #0
 8002f18:	490e      	ldr	r1, [pc, #56]	; (8002f54 <Tarea_Timer+0x5c>)
 8002f1a:	480f      	ldr	r0, [pc, #60]	; (8002f58 <Tarea_Timer+0x60>)
 8002f1c:	f002 fe8a 	bl	8005c34 <HAL_RTC_GetTime>

		if(faseFinal)
 8002f20:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <Tarea_Timer+0x64>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ef      	beq.n	8002f08 <Tarea_Timer+0x10>
		{
			if((horaActual.Seconds >= horaInicio.Seconds) && (horaActual.Minutes == horaInicio.Minutes+tiempoHervor))
 8002f28:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <Tarea_Timer+0x5c>)
 8002f2a:	789a      	ldrb	r2, [r3, #2]
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <Tarea_Timer+0x68>)
 8002f2e:	789b      	ldrb	r3, [r3, #2]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d3e9      	bcc.n	8002f08 <Tarea_Timer+0x10>
 8002f34:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <Tarea_Timer+0x5c>)
 8002f36:	785b      	ldrb	r3, [r3, #1]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <Tarea_Timer+0x68>)
 8002f3c:	785b      	ldrb	r3, [r3, #1]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <Tarea_Timer+0x6c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	440b      	add	r3, r1
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d1de      	bne.n	8002f08 <Tarea_Timer+0x10>
			{
				// Termino
				timerRealTerminado = 1;
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <Tarea_Timer+0x70>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil(&xLastWakeTime3,1000);
 8002f50:	e7da      	b.n	8002f08 <Tarea_Timer+0x10>
 8002f52:	bf00      	nop
 8002f54:	20000a80 	.word	0x20000a80
 8002f58:	200008c8 	.word	0x200008c8
 8002f5c:	20000a71 	.word	0x20000a71
 8002f60:	20000a88 	.word	0x20000a88
 8002f64:	20000020 	.word	0x20000020
 8002f68:	20000a91 	.word	0x20000a91

08002f6c <Tarea_Timer2>:
}

//************************************************************************************************************

void Tarea_Timer2(void *p)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime2;

	xLastWakeTime2 = xTaskGetTickCount();
 8002f74:	f009 fc1c 	bl	800c7b0 <xTaskGetTickCount>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		vTaskDelayUntil(&xLastWakeTime2,1000);
 8002f7c:	f107 030c 	add.w	r3, r7, #12
 8002f80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f84:	4618      	mov	r0, r3
 8002f86:	f009 fa4d 	bl	800c424 <vTaskDelayUntil>

		if(f_preparacion)
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <Tarea_Timer2+0x8c>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f4      	beq.n	8002f7c <Tarea_Timer2+0x10>
		{
			if((horaActual.Seconds >= horaFicticia.Seconds) && (horaActual.Minutes == horaFicticia.Minutes+1))
 8002f92:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <Tarea_Timer2+0x90>)
 8002f94:	789a      	ldrb	r2, [r3, #2]
 8002f96:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <Tarea_Timer2+0x94>)
 8002f98:	789b      	ldrb	r3, [r3, #2]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d3ee      	bcc.n	8002f7c <Tarea_Timer2+0x10>
 8002f9e:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <Tarea_Timer2+0x90>)
 8002fa0:	785b      	ldrb	r3, [r3, #1]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4b16      	ldr	r3, [pc, #88]	; (8003000 <Tarea_Timer2+0x94>)
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d1e6      	bne.n	8002f7c <Tarea_Timer2+0x10>
			{
				HAL_RTC_GetTime(&hrtc, &horaFicticia, RTC_FORMAT_BIN);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	4913      	ldr	r1, [pc, #76]	; (8003000 <Tarea_Timer2+0x94>)
 8002fb2:	4814      	ldr	r0, [pc, #80]	; (8003004 <Tarea_Timer2+0x98>)
 8002fb4:	f002 fe3e 	bl	8005c34 <HAL_RTC_GetTime>

				tiempoRestante --;
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <Tarea_Timer2+0x9c>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <Tarea_Timer2+0x9c>)
 8002fc2:	701a      	strb	r2, [r3, #0]

				if(tiempoRestante == 2) SetRelay(OFF);
 8002fc4:	4b10      	ldr	r3, [pc, #64]	; (8003008 <Tarea_Timer2+0x9c>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d102      	bne.n	8002fd2 <Tarea_Timer2+0x66>
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f000 fec5 	bl	8003d5c <SetRelay>
				if(tiempoRestante == 0) tiempoRestante = 1;
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <Tarea_Timer2+0x9c>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d102      	bne.n	8002fe0 <Tarea_Timer2+0x74>
 8002fda:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <Tarea_Timer2+0x9c>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
				sprintf(restanteStr, "%d", tiempoRestante);
 8002fe0:	4b09      	ldr	r3, [pc, #36]	; (8003008 <Tarea_Timer2+0x9c>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4909      	ldr	r1, [pc, #36]	; (800300c <Tarea_Timer2+0xa0>)
 8002fe8:	4809      	ldr	r0, [pc, #36]	; (8003010 <Tarea_Timer2+0xa4>)
 8002fea:	f00a fe5b 	bl	800dca4 <siprintf>
				print_Display(DIS_PREPARACION);
 8002fee:	2003      	movs	r0, #3
 8002ff0:	f000 fa40 	bl	8003474 <print_Display>
		vTaskDelayUntil(&xLastWakeTime2,1000);
 8002ff4:	e7c2      	b.n	8002f7c <Tarea_Timer2+0x10>
 8002ff6:	bf00      	nop
 8002ff8:	20000a72 	.word	0x20000a72
 8002ffc:	20000a80 	.word	0x20000a80
 8003000:	20000a8c 	.word	0x20000a8c
 8003004:	200008c8 	.word	0x200008c8
 8003008:	2000001c 	.word	0x2000001c
 800300c:	0800e654 	.word	0x0800e654
 8003010:	20000a7c 	.word	0x20000a7c

08003014 <Tarea_BOTON_ON>:
}

//************************************************************************************************************

void Tarea_BOTON_ON(void *p)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_RTC_GetTime(&hrtc, &horaActual, RTC_FORMAT_BIN);
 800301c:	2200      	movs	r2, #0
 800301e:	4908      	ldr	r1, [pc, #32]	; (8003040 <Tarea_BOTON_ON+0x2c>)
 8003020:	4808      	ldr	r0, [pc, #32]	; (8003044 <Tarea_BOTON_ON+0x30>)
 8003022:	f002 fe07 	bl	8005c34 <HAL_RTC_GetTime>

		if(bufferTeclado == BOTON_ON) {
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <Tarea_BOTON_ON+0x34>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b04      	cmp	r3, #4
 800302c:	d103      	bne.n	8003036 <Tarea_BOTON_ON+0x22>
			HD44780_Clear();
 800302e:	f7fe ff11 	bl	8001e54 <HD44780_Clear>
			HAL_NVIC_SystemReset();
 8003032:	f001 f8ea 	bl	800420a <HAL_NVIC_SystemReset>
		}

		vTaskDelay(100);
 8003036:	2064      	movs	r0, #100	; 0x64
 8003038:	f009 fa72 	bl	800c520 <vTaskDelay>
		HAL_RTC_GetTime(&hrtc, &horaActual, RTC_FORMAT_BIN);
 800303c:	e7ee      	b.n	800301c <Tarea_BOTON_ON+0x8>
 800303e:	bf00      	nop
 8003040:	20000a80 	.word	0x20000a80
 8003044:	200008c8 	.word	0x200008c8
 8003048:	20000a92 	.word	0x20000a92

0800304c <MdE_Principal>:
}

//************************************************************************************************************

void MdE_Principal(void *p)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

	while(1)
	{
		//HAL_RTC_GetTime(&hrtc, &horaActual, RTC_FORMAT_BIN);

		switch(estado_MdE)
 8003054:	4b85      	ldr	r3, [pc, #532]	; (800326c <MdE_Principal+0x220>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b06      	cmp	r3, #6
 800305a:	f200 81dd 	bhi.w	8003418 <MdE_Principal+0x3cc>
 800305e:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <MdE_Principal+0x18>)
 8003060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003064:	08003081 	.word	0x08003081
 8003068:	080030e7 	.word	0x080030e7
 800306c:	0800313d 	.word	0x0800313d
 8003070:	08003209 	.word	0x08003209
 8003074:	0800335d 	.word	0x0800335d
 8003078:	080033f5 	.word	0x080033f5
 800307c:	08003421 	.word	0x08003421
		{
			case PRENDIENDO:

				if(estado_comp == TODO_OK)
 8003080:	4b7b      	ldr	r3, [pc, #492]	; (8003270 <MdE_Principal+0x224>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d114      	bne.n	80030b2 <MdE_Principal+0x66>
				{
					if(cafe_programado)
 8003088:	4b7a      	ldr	r3, [pc, #488]	; (8003274 <MdE_Principal+0x228>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <MdE_Principal+0x52>
					{
						estado_MdE = PROGRAMADO;
 8003090:	4b76      	ldr	r3, [pc, #472]	; (800326c <MdE_Principal+0x220>)
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
						print_Display(DIS_PROGRAMADO);
 8003096:	2000      	movs	r0, #0
 8003098:	f000 f9ec 	bl	8003474 <print_Display>
				else if(estado_comp >1) // Identificar error
				{
					estado_MdE = E_ERROR;
					print_Display(estado_comp + 4); // La organizacion de la enumeracion
				}
				break;
 800309c:	e1c2      	b.n	8003424 <MdE_Principal+0x3d8>
						estado_MdE = MENU_PPAL;
 800309e:	4b73      	ldr	r3, [pc, #460]	; (800326c <MdE_Principal+0x220>)
 80030a0:	2202      	movs	r2, #2
 80030a2:	701a      	strb	r2, [r3, #0]
						print_Display(DIS_MENU_PPAL);
 80030a4:	2001      	movs	r0, #1
 80030a6:	f000 f9e5 	bl	8003474 <print_Display>
						cursor = 0;
 80030aa:	4b73      	ldr	r3, [pc, #460]	; (8003278 <MdE_Principal+0x22c>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
				break;
 80030b0:	e1b8      	b.n	8003424 <MdE_Principal+0x3d8>
				else if(estado_comp == FALTA_SD)
 80030b2:	4b6f      	ldr	r3, [pc, #444]	; (8003270 <MdE_Principal+0x224>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d105      	bne.n	80030c6 <MdE_Principal+0x7a>
					print_Display(DIS_FALTA_SD);
 80030ba:	2005      	movs	r0, #5
 80030bc:	f000 f9da 	bl	8003474 <print_Display>
					LecturaSD();
 80030c0:	f000 fb9c 	bl	80037fc <LecturaSD>
				break;
 80030c4:	e1ae      	b.n	8003424 <MdE_Principal+0x3d8>
				else if(estado_comp >1) // Identificar error
 80030c6:	4b6a      	ldr	r3, [pc, #424]	; (8003270 <MdE_Principal+0x224>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	f240 81aa 	bls.w	8003424 <MdE_Principal+0x3d8>
					estado_MdE = E_ERROR;
 80030d0:	4b66      	ldr	r3, [pc, #408]	; (800326c <MdE_Principal+0x220>)
 80030d2:	2206      	movs	r2, #6
 80030d4:	701a      	strb	r2, [r3, #0]
					print_Display(estado_comp + 4); // La organizacion de la enumeracion
 80030d6:	4b66      	ldr	r3, [pc, #408]	; (8003270 <MdE_Principal+0x224>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	3304      	adds	r3, #4
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f9c8 	bl	8003474 <print_Display>
				break;
 80030e4:	e19e      	b.n	8003424 <MdE_Principal+0x3d8>

			case PROGRAMADO: // Esperando a que sea la hora. Si se presiona el boton se cancela y se vuelve al menu ppal.

				if( getKey() == BOTON_OK )
 80030e6:	f000 fd8f 	bl	8003c08 <getKey>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d10e      	bne.n	800310e <MdE_Principal+0xc2>
				{
					// Escribir en SD que no hay ninguno programado
					estado_MdE = MENU_PPAL;
 80030f0:	4b5e      	ldr	r3, [pc, #376]	; (800326c <MdE_Principal+0x220>)
 80030f2:	2202      	movs	r2, #2
 80030f4:	701a      	strb	r2, [r3, #0]
					print_Display(DIS_MENU_PPAL);
 80030f6:	2001      	movs	r0, #1
 80030f8:	f000 f9bc 	bl	8003474 <print_Display>
					cursor = 0;
 80030fc:	4b5e      	ldr	r3, [pc, #376]	; (8003278 <MdE_Principal+0x22c>)
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
					componentes[3] = '0';
 8003102:	4b5e      	ldr	r3, [pc, #376]	; (800327c <MdE_Principal+0x230>)
 8003104:	2230      	movs	r2, #48	; 0x30
 8003106:	70da      	strb	r2, [r3, #3]
					escribir_SD();
 8003108:	f000 fcb0 	bl	8003a6c <escribir_SD>
					IniciarPreparacion();

					estado_MdE = PREPARACION;
					print_Display(DIS_PREPARACION);
				}
				break;
 800310c:	e18c      	b.n	8003428 <MdE_Principal+0x3dc>
				else if( (horaActual.Hours == horaProgramada.Hours) && (horaActual.Minutes == horaProgramada.Minutes) )
 800310e:	4b5c      	ldr	r3, [pc, #368]	; (8003280 <MdE_Principal+0x234>)
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	4b5c      	ldr	r3, [pc, #368]	; (8003284 <MdE_Principal+0x238>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	f040 8186 	bne.w	8003428 <MdE_Principal+0x3dc>
 800311c:	4b58      	ldr	r3, [pc, #352]	; (8003280 <MdE_Principal+0x234>)
 800311e:	785a      	ldrb	r2, [r3, #1]
 8003120:	4b58      	ldr	r3, [pc, #352]	; (8003284 <MdE_Principal+0x238>)
 8003122:	785b      	ldrb	r3, [r3, #1]
 8003124:	429a      	cmp	r2, r3
 8003126:	f040 817f 	bne.w	8003428 <MdE_Principal+0x3dc>
					IniciarPreparacion();
 800312a:	f000 fe85 	bl	8003e38 <IniciarPreparacion>
					estado_MdE = PREPARACION;
 800312e:	4b4f      	ldr	r3, [pc, #316]	; (800326c <MdE_Principal+0x220>)
 8003130:	2204      	movs	r2, #4
 8003132:	701a      	strb	r2, [r3, #0]
					print_Display(DIS_PREPARACION);
 8003134:	2003      	movs	r0, #3
 8003136:	f000 f99d 	bl	8003474 <print_Display>
				break;
 800313a:	e175      	b.n	8003428 <MdE_Principal+0x3dc>

			case MENU_PPAL:
				switch(getKey())
 800313c:	f000 fd64 	bl	8003c08 <getKey>
 8003140:	4603      	mov	r3, r0
 8003142:	2b01      	cmp	r3, #1
 8003144:	d01a      	beq.n	800317c <MdE_Principal+0x130>
 8003146:	2b02      	cmp	r3, #2
 8003148:	f040 8170 	bne.w	800342c <MdE_Principal+0x3e0>
				{
					case BOTON_SEL:
						if(cursor == 0) // Preparar ahora
 800314c:	4b4a      	ldr	r3, [pc, #296]	; (8003278 <MdE_Principal+0x22c>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d107      	bne.n	8003164 <MdE_Principal+0x118>
						{
							cursor = 1;
 8003154:	4b48      	ldr	r3, [pc, #288]	; (8003278 <MdE_Principal+0x22c>)
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
							HD44780_SetCursor(0, 1);
 800315a:	2101      	movs	r1, #1
 800315c:	2000      	movs	r0, #0
 800315e:	f7fe fe8f 	bl	8001e80 <HD44780_SetCursor>
						else if (cursor == 1)	// Programar Cafe
						{
							cursor = 0;
							HD44780_SetCursor(0, 0);
						}
						break;
 8003162:	e04d      	b.n	8003200 <MdE_Principal+0x1b4>
						else if (cursor == 1)	// Programar Cafe
 8003164:	4b44      	ldr	r3, [pc, #272]	; (8003278 <MdE_Principal+0x22c>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d149      	bne.n	8003200 <MdE_Principal+0x1b4>
							cursor = 0;
 800316c:	4b42      	ldr	r3, [pc, #264]	; (8003278 <MdE_Principal+0x22c>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
							HD44780_SetCursor(0, 0);
 8003172:	2100      	movs	r1, #0
 8003174:	2000      	movs	r0, #0
 8003176:	f7fe fe83 	bl	8001e80 <HD44780_SetCursor>
						break;
 800317a:	e041      	b.n	8003200 <MdE_Principal+0x1b4>

					case BOTON_OK:
						if(cursor == 0) // Preparar ahora
 800317c:	4b3e      	ldr	r3, [pc, #248]	; (8003278 <MdE_Principal+0x22c>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d107      	bne.n	8003194 <MdE_Principal+0x148>
						{
							IniciarPreparacion();
 8003184:	f000 fe58 	bl	8003e38 <IniciarPreparacion>

							estado_MdE = PREPARACION;
 8003188:	4b38      	ldr	r3, [pc, #224]	; (800326c <MdE_Principal+0x220>)
 800318a:	2204      	movs	r2, #4
 800318c:	701a      	strb	r2, [r3, #0]
							print_Display(DIS_PREPARACION);
 800318e:	2003      	movs	r0, #3
 8003190:	f000 f970 	bl	8003474 <print_Display>
						}
						if(cursor == 1) // Programar cafe
 8003194:	4b38      	ldr	r3, [pc, #224]	; (8003278 <MdE_Principal+0x22c>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d133      	bne.n	8003204 <MdE_Principal+0x1b8>
						{
							cursor = 0;
 800319c:	4b36      	ldr	r3, [pc, #216]	; (8003278 <MdE_Principal+0x22c>)
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]

							HAL_RTC_GetTime(&hrtc, &horaActual, RTC_FORMAT_BIN);
 80031a2:	2200      	movs	r2, #0
 80031a4:	4936      	ldr	r1, [pc, #216]	; (8003280 <MdE_Principal+0x234>)
 80031a6:	4838      	ldr	r0, [pc, #224]	; (8003288 <MdE_Principal+0x23c>)
 80031a8:	f002 fd44 	bl	8005c34 <HAL_RTC_GetTime>
							horaProgramada.Hours = horaActual.Hours;
 80031ac:	4b34      	ldr	r3, [pc, #208]	; (8003280 <MdE_Principal+0x234>)
 80031ae:	781a      	ldrb	r2, [r3, #0]
 80031b0:	4b34      	ldr	r3, [pc, #208]	; (8003284 <MdE_Principal+0x238>)
 80031b2:	701a      	strb	r2, [r3, #0]
							horaProgramada.Minutes = (horaActual.Minutes/10)*10;
 80031b4:	4b32      	ldr	r3, [pc, #200]	; (8003280 <MdE_Principal+0x234>)
 80031b6:	785b      	ldrb	r3, [r3, #1]
 80031b8:	4a34      	ldr	r2, [pc, #208]	; (800328c <MdE_Principal+0x240>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	08db      	lsrs	r3, r3, #3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	0092      	lsls	r2, r2, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	4b2d      	ldr	r3, [pc, #180]	; (8003284 <MdE_Principal+0x238>)
 80031ce:	705a      	strb	r2, [r3, #1]
							horaProgramada.Seconds = 0;
 80031d0:	4b2c      	ldr	r3, [pc, #176]	; (8003284 <MdE_Principal+0x238>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	709a      	strb	r2, [r3, #2]
							sprintf(horaStr, "%d", horaProgramada.Hours);
 80031d6:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <MdE_Principal+0x238>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	492c      	ldr	r1, [pc, #176]	; (8003290 <MdE_Principal+0x244>)
 80031de:	482d      	ldr	r0, [pc, #180]	; (8003294 <MdE_Principal+0x248>)
 80031e0:	f00a fd60 	bl	800dca4 <siprintf>
							sprintf(minutoStr, "%d", horaProgramada.Minutes);
 80031e4:	4b27      	ldr	r3, [pc, #156]	; (8003284 <MdE_Principal+0x238>)
 80031e6:	785b      	ldrb	r3, [r3, #1]
 80031e8:	461a      	mov	r2, r3
 80031ea:	4929      	ldr	r1, [pc, #164]	; (8003290 <MdE_Principal+0x244>)
 80031ec:	482a      	ldr	r0, [pc, #168]	; (8003298 <MdE_Principal+0x24c>)
 80031ee:	f00a fd59 	bl	800dca4 <siprintf>

							estado_MdE = PROGRAMAR_HORA;
 80031f2:	4b1e      	ldr	r3, [pc, #120]	; (800326c <MdE_Principal+0x220>)
 80031f4:	2203      	movs	r2, #3
 80031f6:	701a      	strb	r2, [r3, #0]
							print_Display(DIS_PROGRAMAR_HORA);
 80031f8:	2002      	movs	r0, #2
 80031fa:	f000 f93b 	bl	8003474 <print_Display>
						}

						break;
 80031fe:	e001      	b.n	8003204 <MdE_Principal+0x1b8>
						break;
 8003200:	bf00      	nop
 8003202:	e113      	b.n	800342c <MdE_Principal+0x3e0>
						break;
 8003204:	bf00      	nop
				}
				break;
 8003206:	e111      	b.n	800342c <MdE_Principal+0x3e0>

			case PROGRAMAR_HORA:
				switch(getKey())
 8003208:	f000 fcfe 	bl	8003c08 <getKey>
 800320c:	4603      	mov	r3, r0
 800320e:	2b03      	cmp	r3, #3
 8003210:	f000 8094 	beq.w	800333c <MdE_Principal+0x2f0>
 8003214:	2b03      	cmp	r3, #3
 8003216:	f300 809b 	bgt.w	8003350 <MdE_Principal+0x304>
 800321a:	2b01      	cmp	r3, #1
 800321c:	d03e      	beq.n	800329c <MdE_Principal+0x250>
 800321e:	2b02      	cmp	r3, #2
 8003220:	f040 8096 	bne.w	8003350 <MdE_Principal+0x304>
				{
					case BOTON_SEL:
						if(cursor == 0) // Hora
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <MdE_Principal+0x22c>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d107      	bne.n	800323c <MdE_Principal+0x1f0>
						{
							cursor = 1;
 800322c:	4b12      	ldr	r3, [pc, #72]	; (8003278 <MdE_Principal+0x22c>)
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
							HD44780_SetCursor(9, 1);
 8003232:	2101      	movs	r1, #1
 8003234:	2009      	movs	r0, #9
 8003236:	f7fe fe23 	bl	8001e80 <HD44780_SetCursor>
						else if (cursor == 2)		// OK
						{
							cursor = 0;
							HD44780_SetCursor(2, 1);
						}
						break;
 800323a:	e08b      	b.n	8003354 <MdE_Principal+0x308>
						else if (cursor == 1)	// Minuto
 800323c:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <MdE_Principal+0x22c>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d107      	bne.n	8003254 <MdE_Principal+0x208>
							cursor = 2;
 8003244:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <MdE_Principal+0x22c>)
 8003246:	2202      	movs	r2, #2
 8003248:	701a      	strb	r2, [r3, #0]
							HD44780_SetCursor(13,1);
 800324a:	2101      	movs	r1, #1
 800324c:	200d      	movs	r0, #13
 800324e:	f7fe fe17 	bl	8001e80 <HD44780_SetCursor>
						break;
 8003252:	e07f      	b.n	8003354 <MdE_Principal+0x308>
						else if (cursor == 2)		// OK
 8003254:	4b08      	ldr	r3, [pc, #32]	; (8003278 <MdE_Principal+0x22c>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d17b      	bne.n	8003354 <MdE_Principal+0x308>
							cursor = 0;
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <MdE_Principal+0x22c>)
 800325e:	2200      	movs	r2, #0
 8003260:	701a      	strb	r2, [r3, #0]
							HD44780_SetCursor(2, 1);
 8003262:	2101      	movs	r1, #1
 8003264:	2002      	movs	r0, #2
 8003266:	f7fe fe0b 	bl	8001e80 <HD44780_SetCursor>
						break;
 800326a:	e073      	b.n	8003354 <MdE_Principal+0x308>
 800326c:	20000a98 	.word	0x20000a98
 8003270:	20000a90 	.word	0x20000a90
 8003274:	20000aa0 	.word	0x20000aa0
 8003278:	20000a70 	.word	0x20000a70
 800327c:	20000a9c 	.word	0x20000a9c
 8003280:	20000a80 	.word	0x20000a80
 8003284:	20000a84 	.word	0x20000a84
 8003288:	200008c8 	.word	0x200008c8
 800328c:	cccccccd 	.word	0xcccccccd
 8003290:	0800e654 	.word	0x0800e654
 8003294:	20000a74 	.word	0x20000a74
 8003298:	20000a78 	.word	0x20000a78

					case BOTON_OK:
						if(cursor == 0)
 800329c:	4b68      	ldr	r3, [pc, #416]	; (8003440 <MdE_Principal+0x3f4>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d11a      	bne.n	80032da <MdE_Principal+0x28e>
						{
							// Aumento la hora
							horaProgramada.Hours += 1;
 80032a4:	4b67      	ldr	r3, [pc, #412]	; (8003444 <MdE_Principal+0x3f8>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	4b65      	ldr	r3, [pc, #404]	; (8003444 <MdE_Principal+0x3f8>)
 80032ae:	701a      	strb	r2, [r3, #0]
							if(horaProgramada.Hours >23) horaProgramada.Hours = 0;
 80032b0:	4b64      	ldr	r3, [pc, #400]	; (8003444 <MdE_Principal+0x3f8>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b17      	cmp	r3, #23
 80032b6:	d902      	bls.n	80032be <MdE_Principal+0x272>
 80032b8:	4b62      	ldr	r3, [pc, #392]	; (8003444 <MdE_Principal+0x3f8>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
							sprintf(horaStr, "%d", horaProgramada.Hours);
 80032be:	4b61      	ldr	r3, [pc, #388]	; (8003444 <MdE_Principal+0x3f8>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	4960      	ldr	r1, [pc, #384]	; (8003448 <MdE_Principal+0x3fc>)
 80032c6:	4861      	ldr	r0, [pc, #388]	; (800344c <MdE_Principal+0x400>)
 80032c8:	f00a fcec 	bl	800dca4 <siprintf>

							print_Display(DIS_PROGRAMAR_HORA);
 80032cc:	2002      	movs	r0, #2
 80032ce:	f000 f8d1 	bl	8003474 <print_Display>
							HD44780_SetCursor(2, 1);
 80032d2:	2101      	movs	r1, #1
 80032d4:	2002      	movs	r0, #2
 80032d6:	f7fe fdd3 	bl	8001e80 <HD44780_SetCursor>
						}
						if(cursor == 1)
 80032da:	4b59      	ldr	r3, [pc, #356]	; (8003440 <MdE_Principal+0x3f4>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d11a      	bne.n	8003318 <MdE_Principal+0x2cc>
						{
							// Aumento los minutos
							horaProgramada.Minutes += 10;
 80032e2:	4b58      	ldr	r3, [pc, #352]	; (8003444 <MdE_Principal+0x3f8>)
 80032e4:	785b      	ldrb	r3, [r3, #1]
 80032e6:	330a      	adds	r3, #10
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4b56      	ldr	r3, [pc, #344]	; (8003444 <MdE_Principal+0x3f8>)
 80032ec:	705a      	strb	r2, [r3, #1]
							if(horaProgramada.Minutes >50) horaProgramada.Minutes = 0;
 80032ee:	4b55      	ldr	r3, [pc, #340]	; (8003444 <MdE_Principal+0x3f8>)
 80032f0:	785b      	ldrb	r3, [r3, #1]
 80032f2:	2b32      	cmp	r3, #50	; 0x32
 80032f4:	d902      	bls.n	80032fc <MdE_Principal+0x2b0>
 80032f6:	4b53      	ldr	r3, [pc, #332]	; (8003444 <MdE_Principal+0x3f8>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	705a      	strb	r2, [r3, #1]
							sprintf(minutoStr, "%d", horaProgramada.Minutes);
 80032fc:	4b51      	ldr	r3, [pc, #324]	; (8003444 <MdE_Principal+0x3f8>)
 80032fe:	785b      	ldrb	r3, [r3, #1]
 8003300:	461a      	mov	r2, r3
 8003302:	4951      	ldr	r1, [pc, #324]	; (8003448 <MdE_Principal+0x3fc>)
 8003304:	4852      	ldr	r0, [pc, #328]	; (8003450 <MdE_Principal+0x404>)
 8003306:	f00a fccd 	bl	800dca4 <siprintf>

							print_Display(DIS_PROGRAMAR_HORA);
 800330a:	2002      	movs	r0, #2
 800330c:	f000 f8b2 	bl	8003474 <print_Display>
							HD44780_SetCursor(9, 1);
 8003310:	2101      	movs	r1, #1
 8003312:	2009      	movs	r0, #9
 8003314:	f7fe fdb4 	bl	8001e80 <HD44780_SetCursor>
						}
						if(cursor == 2)
 8003318:	4b49      	ldr	r3, [pc, #292]	; (8003440 <MdE_Principal+0x3f4>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d11b      	bne.n	8003358 <MdE_Principal+0x30c>
						{
							estado_MdE = PROGRAMADO;
 8003320:	4b4c      	ldr	r3, [pc, #304]	; (8003454 <MdE_Principal+0x408>)
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
							print_Display(DIS_PROGRAMADO);
 8003326:	2000      	movs	r0, #0
 8003328:	f000 f8a4 	bl	8003474 <print_Display>
							componentes[3] = '1';
 800332c:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <MdE_Principal+0x40c>)
 800332e:	2231      	movs	r2, #49	; 0x31
 8003330:	70da      	strb	r2, [r3, #3]
							escribir_SD();
 8003332:	f000 fb9b 	bl	8003a6c <escribir_SD>
							hora_SD();
 8003336:	f000 fbc1 	bl	8003abc <hora_SD>
						}
						break;
 800333a:	e00d      	b.n	8003358 <MdE_Principal+0x30c>

					case BOTON_CANCEL:
						estado_MdE = MENU_PPAL;
 800333c:	4b45      	ldr	r3, [pc, #276]	; (8003454 <MdE_Principal+0x408>)
 800333e:	2202      	movs	r2, #2
 8003340:	701a      	strb	r2, [r3, #0]
						print_Display(DIS_MENU_PPAL);
 8003342:	2001      	movs	r0, #1
 8003344:	f000 f896 	bl	8003474 <print_Display>
						cursor = 0;
 8003348:	4b3d      	ldr	r3, [pc, #244]	; (8003440 <MdE_Principal+0x3f4>)
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
						break;
 800334e:	e004      	b.n	800335a <MdE_Principal+0x30e>

					default:
						break;
 8003350:	bf00      	nop
 8003352:	e070      	b.n	8003436 <MdE_Principal+0x3ea>
						break;
 8003354:	bf00      	nop
 8003356:	e06e      	b.n	8003436 <MdE_Principal+0x3ea>
						break;
 8003358:	bf00      	nop
					}
				break;
 800335a:	e06c      	b.n	8003436 <MdE_Principal+0x3ea>

			case PREPARACION:

				if(f_error)
 800335c:	4b3f      	ldr	r3, [pc, #252]	; (800345c <MdE_Principal+0x410>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d011      	beq.n	8003388 <MdE_Principal+0x33c>
				{
					FinalizarPreparacion();
 8003364:	f000 fda2 	bl	8003eac <FinalizarPreparacion>
					estado_MdE = E_ERROR;
 8003368:	4b3a      	ldr	r3, [pc, #232]	; (8003454 <MdE_Principal+0x408>)
 800336a:	2206      	movs	r2, #6
 800336c:	701a      	strb	r2, [r3, #0]
					print_Display(estado_comp + 4);
 800336e:	4b3c      	ldr	r3, [pc, #240]	; (8003460 <MdE_Principal+0x414>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	3304      	adds	r3, #4
 8003374:	b2db      	uxtb	r3, r3
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f87c 	bl	8003474 <print_Display>
					escribir_SD();
 800337c:	f000 fb76 	bl	8003a6c <escribir_SD>
					registro_SD(ERRONEO);
 8003380:	2002      	movs	r0, #2
 8003382:	f000 fbcf 	bl	8003b24 <registro_SD>

						estado_MdE = LISTO;
						print_Display(LISTO);
					}
				}
				break;
 8003386:	e053      	b.n	8003430 <MdE_Principal+0x3e4>
				else if(getKey() == BOTON_OK) // Cancelan el cafe
 8003388:	f000 fc3e 	bl	8003c08 <getKey>
 800338c:	4603      	mov	r3, r0
 800338e:	2b01      	cmp	r3, #1
 8003390:	d10e      	bne.n	80033b0 <MdE_Principal+0x364>
					FinalizarPreparacion();
 8003392:	f000 fd8b 	bl	8003eac <FinalizarPreparacion>
					estado_MdE = MENU_PPAL;
 8003396:	4b2f      	ldr	r3, [pc, #188]	; (8003454 <MdE_Principal+0x408>)
 8003398:	2202      	movs	r2, #2
 800339a:	701a      	strb	r2, [r3, #0]
					print_Display(DIS_MENU_PPAL);
 800339c:	2001      	movs	r0, #1
 800339e:	f000 f869 	bl	8003474 <print_Display>
					cursor = 0;
 80033a2:	4b27      	ldr	r3, [pc, #156]	; (8003440 <MdE_Principal+0x3f4>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
					registro_SD(CANCELADO);
 80033a8:	2001      	movs	r0, #1
 80033aa:	f000 fbbb 	bl	8003b24 <registro_SD>
				break;
 80033ae:	e03f      	b.n	8003430 <MdE_Principal+0x3e4>
				else if( (temperatura >= 95) && (!faseFinal) )
 80033b0:	4b2c      	ldr	r3, [pc, #176]	; (8003464 <MdE_Principal+0x418>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	492c      	ldr	r1, [pc, #176]	; (8003468 <MdE_Principal+0x41c>)
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd f99c 	bl	80006f4 <__aeabi_fcmpge>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d007      	beq.n	80033d2 <MdE_Principal+0x386>
 80033c2:	4b2a      	ldr	r3, [pc, #168]	; (800346c <MdE_Principal+0x420>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d103      	bne.n	80033d2 <MdE_Principal+0x386>
					faseFinal = 1;
 80033ca:	4b28      	ldr	r3, [pc, #160]	; (800346c <MdE_Principal+0x420>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
				break;
 80033d0:	e02e      	b.n	8003430 <MdE_Principal+0x3e4>
				else if(faseFinal)
 80033d2:	4b26      	ldr	r3, [pc, #152]	; (800346c <MdE_Principal+0x420>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d02a      	beq.n	8003430 <MdE_Principal+0x3e4>
					if(timerRealTerminado)
 80033da:	4b25      	ldr	r3, [pc, #148]	; (8003470 <MdE_Principal+0x424>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d026      	beq.n	8003430 <MdE_Principal+0x3e4>
						FinalizarPreparacion();
 80033e2:	f000 fd63 	bl	8003eac <FinalizarPreparacion>
						estado_MdE = LISTO;
 80033e6:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <MdE_Principal+0x408>)
 80033e8:	2205      	movs	r2, #5
 80033ea:	701a      	strb	r2, [r3, #0]
						print_Display(LISTO);
 80033ec:	2005      	movs	r0, #5
 80033ee:	f000 f841 	bl	8003474 <print_Display>
				break;
 80033f2:	e01d      	b.n	8003430 <MdE_Principal+0x3e4>
			case LISTO:
				if(getKey() == BOTON_OK)
 80033f4:	f000 fc08 	bl	8003c08 <getKey>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d11a      	bne.n	8003434 <MdE_Principal+0x3e8>
				{
					estado_MdE = MENU_PPAL;
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <MdE_Principal+0x408>)
 8003400:	2202      	movs	r2, #2
 8003402:	701a      	strb	r2, [r3, #0]
					print_Display(DIS_MENU_PPAL);
 8003404:	2001      	movs	r0, #1
 8003406:	f000 f835 	bl	8003474 <print_Display>
					cursor = 0;
 800340a:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <MdE_Principal+0x3f4>)
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
					registro_SD(EXITOSO);
 8003410:	2000      	movs	r0, #0
 8003412:	f000 fb87 	bl	8003b24 <registro_SD>
				}
				break;
 8003416:	e00d      	b.n	8003434 <MdE_Principal+0x3e8>

			case E_ERROR:
				// Necesita que lo arregle el tecnico, no va a salir de aca
				break;
			default:
				estado_MdE = PRENDIENDO;
 8003418:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <MdE_Principal+0x408>)
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
				break;
 800341e:	e00a      	b.n	8003436 <MdE_Principal+0x3ea>
				break;
 8003420:	bf00      	nop
 8003422:	e008      	b.n	8003436 <MdE_Principal+0x3ea>
				break;
 8003424:	bf00      	nop
 8003426:	e006      	b.n	8003436 <MdE_Principal+0x3ea>
				break;
 8003428:	bf00      	nop
 800342a:	e004      	b.n	8003436 <MdE_Principal+0x3ea>
				break;
 800342c:	bf00      	nop
 800342e:	e002      	b.n	8003436 <MdE_Principal+0x3ea>
				break;
 8003430:	bf00      	nop
 8003432:	e000      	b.n	8003436 <MdE_Principal+0x3ea>
				break;
 8003434:	bf00      	nop

		}

		vTaskDelay(1000);
 8003436:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800343a:	f009 f871 	bl	800c520 <vTaskDelay>
		switch(estado_MdE)
 800343e:	e609      	b.n	8003054 <MdE_Principal+0x8>
 8003440:	20000a70 	.word	0x20000a70
 8003444:	20000a84 	.word	0x20000a84
 8003448:	0800e654 	.word	0x0800e654
 800344c:	20000a74 	.word	0x20000a74
 8003450:	20000a78 	.word	0x20000a78
 8003454:	20000a98 	.word	0x20000a98
 8003458:	20000a9c 	.word	0x20000a9c
 800345c:	20000a8f 	.word	0x20000a8f
 8003460:	20000a90 	.word	0x20000a90
 8003464:	20000a94 	.word	0x20000a94
 8003468:	42be0000 	.word	0x42be0000
 800346c:	20000a71 	.word	0x20000a71
 8003470:	20000a91 	.word	0x20000a91

08003474 <print_Display>:
}

//************************************************************************************************************

void print_Display(uint8_t estado)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
	switch (estado)
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	2b0a      	cmp	r3, #10
 8003482:	f200 814c 	bhi.w	800371e <print_Display+0x2aa>
 8003486:	a201      	add	r2, pc, #4	; (adr r2, 800348c <print_Display+0x18>)
 8003488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348c:	080034b9 	.word	0x080034b9
 8003490:	08003515 	.word	0x08003515
 8003494:	08003547 	.word	0x08003547
 8003498:	080035a3 	.word	0x080035a3
 800349c:	080035f1 	.word	0x080035f1
 80034a0:	08003623 	.word	0x08003623
 80034a4:	0800364d 	.word	0x0800364d
 80034a8:	08003677 	.word	0x08003677
 80034ac:	080036a1 	.word	0x080036a1
 80034b0:	080036cb 	.word	0x080036cb
 80034b4:	080036f5 	.word	0x080036f5
	{
		case DIS_PROGRAMADO:
			HD44780_Clear();
 80034b8:	f7fe fccc 	bl	8001e54 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 80034bc:	2100      	movs	r1, #0
 80034be:	2000      	movs	r0, #0
 80034c0:	f7fe fcde 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Cafe para ");
 80034c4:	4898      	ldr	r0, [pc, #608]	; (8003728 <print_Display+0x2b4>)
 80034c6:	f7fe fda4 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(10,0);
 80034ca:	2100      	movs	r1, #0
 80034cc:	200a      	movs	r0, #10
 80034ce:	f7fe fcd7 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr(horaStr);
 80034d2:	4896      	ldr	r0, [pc, #600]	; (800372c <print_Display+0x2b8>)
 80034d4:	f7fe fd9d 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(12,0);
 80034d8:	2100      	movs	r1, #0
 80034da:	200c      	movs	r0, #12
 80034dc:	f7fe fcd0 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr(":");
 80034e0:	4893      	ldr	r0, [pc, #588]	; (8003730 <print_Display+0x2bc>)
 80034e2:	f7fe fd96 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(14,0);
 80034e6:	2100      	movs	r1, #0
 80034e8:	200e      	movs	r0, #14
 80034ea:	f7fe fcc9 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr(minutoStr);
 80034ee:	4891      	ldr	r0, [pc, #580]	; (8003734 <print_Display+0x2c0>)
 80034f0:	f7fe fd8f 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(2,1);
 80034f4:	2101      	movs	r1, #1
 80034f6:	2002      	movs	r0, #2
 80034f8:	f7fe fcc2 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Cancelar");
 80034fc:	488e      	ldr	r0, [pc, #568]	; (8003738 <print_Display+0x2c4>)
 80034fe:	f7fe fd88 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8003502:	2101      	movs	r1, #1
 8003504:	2000      	movs	r0, #0
 8003506:	f7fe fcbb 	bl	8001e80 <HD44780_SetCursor>
			HD44780_Cursor();
 800350a:	f7fe fd17 	bl	8001f3c <HD44780_Cursor>
			HD44780_Blink();
 800350e:	f7fe fd41 	bl	8001f94 <HD44780_Blink>
			break;
 8003512:	e104      	b.n	800371e <print_Display+0x2aa>
		case DIS_MENU_PPAL:
			HD44780_Clear();
 8003514:	f7fe fc9e 	bl	8001e54 <HD44780_Clear>
			HD44780_SetCursor(2,0);
 8003518:	2100      	movs	r1, #0
 800351a:	2002      	movs	r0, #2
 800351c:	f7fe fcb0 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Cafe Rapido");
 8003520:	4886      	ldr	r0, [pc, #536]	; (800373c <print_Display+0x2c8>)
 8003522:	f7fe fd76 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(2,1);
 8003526:	2101      	movs	r1, #1
 8003528:	2002      	movs	r0, #2
 800352a:	f7fe fca9 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Programar Cafe");
 800352e:	4884      	ldr	r0, [pc, #528]	; (8003740 <print_Display+0x2cc>)
 8003530:	f7fe fd6f 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(0,0);
 8003534:	2100      	movs	r1, #0
 8003536:	2000      	movs	r0, #0
 8003538:	f7fe fca2 	bl	8001e80 <HD44780_SetCursor>
			HD44780_Cursor();
 800353c:	f7fe fcfe 	bl	8001f3c <HD44780_Cursor>
			HD44780_Blink();
 8003540:	f7fe fd28 	bl	8001f94 <HD44780_Blink>
			break;
 8003544:	e0eb      	b.n	800371e <print_Display+0x2aa>

		case DIS_PROGRAMAR_HORA:
			HD44780_Clear();
 8003546:	f7fe fc85 	bl	8001e54 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 800354a:	2100      	movs	r1, #0
 800354c:	2000      	movs	r0, #0
 800354e:	f7fe fc97 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Programar para:");
 8003552:	487c      	ldr	r0, [pc, #496]	; (8003744 <print_Display+0x2d0>)
 8003554:	f7fe fd5d 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8003558:	2101      	movs	r1, #1
 800355a:	2000      	movs	r0, #0
 800355c:	f7fe fc90 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr(horaStr);
 8003560:	4872      	ldr	r0, [pc, #456]	; (800372c <print_Display+0x2b8>)
 8003562:	f7fe fd56 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(2,1);
 8003566:	2101      	movs	r1, #1
 8003568:	2002      	movs	r0, #2
 800356a:	f7fe fc89 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr(" : ");
 800356e:	4876      	ldr	r0, [pc, #472]	; (8003748 <print_Display+0x2d4>)
 8003570:	f7fe fd4f 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(7,1);
 8003574:	2101      	movs	r1, #1
 8003576:	2007      	movs	r0, #7
 8003578:	f7fe fc82 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr(minutoStr);
 800357c:	486d      	ldr	r0, [pc, #436]	; (8003734 <print_Display+0x2c0>)
 800357e:	f7fe fd48 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(13,1);
 8003582:	2101      	movs	r1, #1
 8003584:	200d      	movs	r0, #13
 8003586:	f7fe fc7b 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr(" OK");
 800358a:	4870      	ldr	r0, [pc, #448]	; (800374c <print_Display+0x2d8>)
 800358c:	f7fe fd41 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(2,1);
 8003590:	2101      	movs	r1, #1
 8003592:	2002      	movs	r0, #2
 8003594:	f7fe fc74 	bl	8001e80 <HD44780_SetCursor>
			HD44780_Cursor();
 8003598:	f7fe fcd0 	bl	8001f3c <HD44780_Cursor>
			HD44780_Blink();
 800359c:	f7fe fcfa 	bl	8001f94 <HD44780_Blink>
			break;
 80035a0:	e0bd      	b.n	800371e <print_Display+0x2aa>

		case DIS_PREPARACION:
			HD44780_Clear();
 80035a2:	f7fe fc57 	bl	8001e54 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 80035a6:	2100      	movs	r1, #0
 80035a8:	2000      	movs	r0, #0
 80035aa:	f7fe fc69 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Restante: ");
 80035ae:	4868      	ldr	r0, [pc, #416]	; (8003750 <print_Display+0x2dc>)
 80035b0:	f7fe fd2f 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(10,0);
 80035b4:	2100      	movs	r1, #0
 80035b6:	200a      	movs	r0, #10
 80035b8:	f7fe fc62 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr(restanteStr);
 80035bc:	4865      	ldr	r0, [pc, #404]	; (8003754 <print_Display+0x2e0>)
 80035be:	f7fe fd28 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(13,0);
 80035c2:	2100      	movs	r1, #0
 80035c4:	200d      	movs	r0, #13
 80035c6:	f7fe fc5b 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Min");
 80035ca:	4863      	ldr	r0, [pc, #396]	; (8003758 <print_Display+0x2e4>)
 80035cc:	f7fe fd21 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(2,1);
 80035d0:	2101      	movs	r1, #1
 80035d2:	2002      	movs	r0, #2
 80035d4:	f7fe fc54 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Cancelar");
 80035d8:	4857      	ldr	r0, [pc, #348]	; (8003738 <print_Display+0x2c4>)
 80035da:	f7fe fd1a 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 80035de:	2101      	movs	r1, #1
 80035e0:	2000      	movs	r0, #0
 80035e2:	f7fe fc4d 	bl	8001e80 <HD44780_SetCursor>
			HD44780_Cursor();
 80035e6:	f7fe fca9 	bl	8001f3c <HD44780_Cursor>
			HD44780_Blink();
 80035ea:	f7fe fcd3 	bl	8001f94 <HD44780_Blink>
			break;
 80035ee:	e096      	b.n	800371e <print_Display+0x2aa>

		case DIS_LISTO:
			HD44780_Clear();
 80035f0:	f7fe fc30 	bl	8001e54 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 80035f4:	2100      	movs	r1, #0
 80035f6:	2000      	movs	r0, #0
 80035f8:	f7fe fc42 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Cafe Listo!");
 80035fc:	4857      	ldr	r0, [pc, #348]	; (800375c <print_Display+0x2e8>)
 80035fe:	f7fe fd08 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(2,1);
 8003602:	2101      	movs	r1, #1
 8003604:	2002      	movs	r0, #2
 8003606:	f7fe fc3b 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Volver");
 800360a:	4855      	ldr	r0, [pc, #340]	; (8003760 <print_Display+0x2ec>)
 800360c:	f7fe fd01 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8003610:	2101      	movs	r1, #1
 8003612:	2000      	movs	r0, #0
 8003614:	f7fe fc34 	bl	8001e80 <HD44780_SetCursor>
			HD44780_Cursor();
 8003618:	f7fe fc90 	bl	8001f3c <HD44780_Cursor>
			HD44780_Blink();
 800361c:	f7fe fcba 	bl	8001f94 <HD44780_Blink>
			break;
 8003620:	e07d      	b.n	800371e <print_Display+0x2aa>

		case DIS_FALTA_SD:
			HD44780_Clear();
 8003622:	f7fe fc17 	bl	8001e54 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8003626:	2100      	movs	r1, #0
 8003628:	2000      	movs	r0, #0
 800362a:	f7fe fc29 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Inserte una");
 800362e:	484d      	ldr	r0, [pc, #308]	; (8003764 <print_Display+0x2f0>)
 8003630:	f7fe fcef 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8003634:	2101      	movs	r1, #1
 8003636:	2000      	movs	r0, #0
 8003638:	f7fe fc22 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("SD valida");
 800363c:	484a      	ldr	r0, [pc, #296]	; (8003768 <print_Display+0x2f4>)
 800363e:	f7fe fce8 	bl	8002012 <HD44780_PrintStr>
			HD44780_NoCursor();
 8003642:	f7fe fc65 	bl	8001f10 <HD44780_NoCursor>
			HD44780_NoBlink();
 8003646:	f7fe fc8f 	bl	8001f68 <HD44780_NoBlink>
			break;
 800364a:	e068      	b.n	800371e <print_Display+0x2aa>

		case DIS_ERROR_SD:
			HD44780_Clear();
 800364c:	f7fe fc02 	bl	8001e54 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8003650:	2100      	movs	r1, #0
 8003652:	2000      	movs	r0, #0
 8003654:	f7fe fc14 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Error en SD");
 8003658:	4844      	ldr	r0, [pc, #272]	; (800376c <print_Display+0x2f8>)
 800365a:	f7fe fcda 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 800365e:	2101      	movs	r1, #1
 8003660:	2000      	movs	r0, #0
 8003662:	f7fe fc0d 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Consulte Manual");
 8003666:	4842      	ldr	r0, [pc, #264]	; (8003770 <print_Display+0x2fc>)
 8003668:	f7fe fcd3 	bl	8002012 <HD44780_PrintStr>
			HD44780_NoCursor();
 800366c:	f7fe fc50 	bl	8001f10 <HD44780_NoCursor>
			HD44780_NoBlink();
 8003670:	f7fe fc7a 	bl	8001f68 <HD44780_NoBlink>
			break;
 8003674:	e053      	b.n	800371e <print_Display+0x2aa>

		case DIS_ERROR_ANAFE:
			HD44780_Clear();
 8003676:	f7fe fbed 	bl	8001e54 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 800367a:	2100      	movs	r1, #0
 800367c:	2000      	movs	r0, #0
 800367e:	f7fe fbff 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Error en Anafe");
 8003682:	483c      	ldr	r0, [pc, #240]	; (8003774 <print_Display+0x300>)
 8003684:	f7fe fcc5 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8003688:	2101      	movs	r1, #1
 800368a:	2000      	movs	r0, #0
 800368c:	f7fe fbf8 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Consulte Manual");
 8003690:	4837      	ldr	r0, [pc, #220]	; (8003770 <print_Display+0x2fc>)
 8003692:	f7fe fcbe 	bl	8002012 <HD44780_PrintStr>
			HD44780_NoCursor();
 8003696:	f7fe fc3b 	bl	8001f10 <HD44780_NoCursor>
			HD44780_NoBlink();
 800369a:	f7fe fc65 	bl	8001f68 <HD44780_NoBlink>
			break;
 800369e:	e03e      	b.n	800371e <print_Display+0x2aa>

		case DIS_ERROR_SENSOR_1:
			HD44780_Clear();
 80036a0:	f7fe fbd8 	bl	8001e54 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 80036a4:	2100      	movs	r1, #0
 80036a6:	2000      	movs	r0, #0
 80036a8:	f7fe fbea 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Error Sensor 1");
 80036ac:	4832      	ldr	r0, [pc, #200]	; (8003778 <print_Display+0x304>)
 80036ae:	f7fe fcb0 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 80036b2:	2101      	movs	r1, #1
 80036b4:	2000      	movs	r0, #0
 80036b6:	f7fe fbe3 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Consulte Manual");
 80036ba:	482d      	ldr	r0, [pc, #180]	; (8003770 <print_Display+0x2fc>)
 80036bc:	f7fe fca9 	bl	8002012 <HD44780_PrintStr>
			HD44780_NoCursor();
 80036c0:	f7fe fc26 	bl	8001f10 <HD44780_NoCursor>
			HD44780_NoBlink();
 80036c4:	f7fe fc50 	bl	8001f68 <HD44780_NoBlink>
			break;
 80036c8:	e029      	b.n	800371e <print_Display+0x2aa>

		case DIS_ERROR_SENSOR_2:
			HD44780_Clear();
 80036ca:	f7fe fbc3 	bl	8001e54 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 80036ce:	2100      	movs	r1, #0
 80036d0:	2000      	movs	r0, #0
 80036d2:	f7fe fbd5 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Error Sensor 2");
 80036d6:	4829      	ldr	r0, [pc, #164]	; (800377c <print_Display+0x308>)
 80036d8:	f7fe fc9b 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 80036dc:	2101      	movs	r1, #1
 80036de:	2000      	movs	r0, #0
 80036e0:	f7fe fbce 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Consulte Manual");
 80036e4:	4822      	ldr	r0, [pc, #136]	; (8003770 <print_Display+0x2fc>)
 80036e6:	f7fe fc94 	bl	8002012 <HD44780_PrintStr>
			HD44780_NoCursor();
 80036ea:	f7fe fc11 	bl	8001f10 <HD44780_NoCursor>
			HD44780_NoBlink();
 80036ee:	f7fe fc3b 	bl	8001f68 <HD44780_NoBlink>
			break;
 80036f2:	e014      	b.n	800371e <print_Display+0x2aa>

		case DIS_MULTIPLES_ERRORES:
			HD44780_Clear();
 80036f4:	f7fe fbae 	bl	8001e54 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 80036f8:	2100      	movs	r1, #0
 80036fa:	2000      	movs	r0, #0
 80036fc:	f7fe fbc0 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Multi Errores");
 8003700:	481f      	ldr	r0, [pc, #124]	; (8003780 <print_Display+0x30c>)
 8003702:	f7fe fc86 	bl	8002012 <HD44780_PrintStr>
			HD44780_SetCursor(0,1);
 8003706:	2101      	movs	r1, #1
 8003708:	2000      	movs	r0, #0
 800370a:	f7fe fbb9 	bl	8001e80 <HD44780_SetCursor>
			HD44780_PrintStr("Consulte Manual");
 800370e:	4818      	ldr	r0, [pc, #96]	; (8003770 <print_Display+0x2fc>)
 8003710:	f7fe fc7f 	bl	8002012 <HD44780_PrintStr>
			HD44780_NoCursor();
 8003714:	f7fe fbfc 	bl	8001f10 <HD44780_NoCursor>
			HD44780_NoBlink();
 8003718:	f7fe fc26 	bl	8001f68 <HD44780_NoBlink>
			break;
 800371c:	bf00      	nop
	}
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	0800e658 	.word	0x0800e658
 800372c:	20000a74 	.word	0x20000a74
 8003730:	0800e664 	.word	0x0800e664
 8003734:	20000a78 	.word	0x20000a78
 8003738:	0800e668 	.word	0x0800e668
 800373c:	0800e674 	.word	0x0800e674
 8003740:	0800e680 	.word	0x0800e680
 8003744:	0800e690 	.word	0x0800e690
 8003748:	0800e6a0 	.word	0x0800e6a0
 800374c:	0800e6a4 	.word	0x0800e6a4
 8003750:	0800e6a8 	.word	0x0800e6a8
 8003754:	20000a7c 	.word	0x20000a7c
 8003758:	0800e6b4 	.word	0x0800e6b4
 800375c:	0800e6b8 	.word	0x0800e6b8
 8003760:	0800e6c4 	.word	0x0800e6c4
 8003764:	0800e6cc 	.word	0x0800e6cc
 8003768:	0800e6d8 	.word	0x0800e6d8
 800376c:	0800e6e4 	.word	0x0800e6e4
 8003770:	0800e6f0 	.word	0x0800e6f0
 8003774:	0800e700 	.word	0x0800e700
 8003778:	0800e710 	.word	0x0800e710
 800377c:	0800e720 	.word	0x0800e720
 8003780:	0800e730 	.word	0x0800e730

08003784 <InitAll>:
char componentes[4];
uint8_t cafe_programado;

//************************************************************************************************************

void InitAll(void) {
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0

	SetBuzzer(ON);
 8003788:	2001      	movs	r0, #1
 800378a:	f000 fb05 	bl	8003d98 <SetBuzzer>

	HAL_GPIO_WritePin(GREEN_PORT, GREEN_PIN, ON); // Sistema Prendido y funcionando
 800378e:	2201      	movs	r2, #1
 8003790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003794:	4806      	ldr	r0, [pc, #24]	; (80037b0 <InitAll+0x2c>)
 8003796:	f000 ff88 	bl	80046aa <HAL_GPIO_WritePin>

	get_ROMid();
 800379a:	f7fd fca7 	bl	80010ec <get_ROMid>

	InitLCD();
 800379e:	f000 f809 	bl	80037b4 <InitLCD>

	LecturaSD();
 80037a2:	f000 f82b 	bl	80037fc <LecturaSD>

	SetBuzzer(OFF);
 80037a6:	2000      	movs	r0, #0
 80037a8:	f000 faf6 	bl	8003d98 <SetBuzzer>
}
 80037ac:	bf00      	nop
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40010c00 	.word	0x40010c00

080037b4 <InitLCD>:

//************************************************************************************************************

void InitLCD()
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
	HD44780_Init(2);
 80037b8:	2002      	movs	r0, #2
 80037ba:	f7fe fac7 	bl	8001d4c <HD44780_Init>
	HD44780_NoCursor();
 80037be:	f7fe fba7 	bl	8001f10 <HD44780_NoCursor>
	HD44780_SetBacklight(100);
 80037c2:	2064      	movs	r0, #100	; 0x64
 80037c4:	f7fe fc3a 	bl	800203c <HD44780_SetBacklight>
	HD44780_Clear();
 80037c8:	f7fe fb44 	bl	8001e54 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 80037cc:	2100      	movs	r1, #0
 80037ce:	2000      	movs	r0, #0
 80037d0:	f7fe fb56 	bl	8001e80 <HD44780_SetCursor>
	HD44780_PrintStr("Iniciando");
 80037d4:	4807      	ldr	r0, [pc, #28]	; (80037f4 <InitLCD+0x40>)
 80037d6:	f7fe fc1c 	bl	8002012 <HD44780_PrintStr>
	HD44780_SetCursor(0,1);
 80037da:	2101      	movs	r1, #1
 80037dc:	2000      	movs	r0, #0
 80037de:	f7fe fb4f 	bl	8001e80 <HD44780_SetCursor>
	HD44780_PrintStr("Aguarde...");
 80037e2:	4805      	ldr	r0, [pc, #20]	; (80037f8 <InitLCD+0x44>)
 80037e4:	f7fe fc15 	bl	8002012 <HD44780_PrintStr>

	HAL_Delay(500);
 80037e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037ec:	f000 fbf4 	bl	8003fd8 <HAL_Delay>
}
 80037f0:	bf00      	nop
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	0800e740 	.word	0x0800e740
 80037f8:	0800e74c 	.word	0x0800e74c

080037fc <LecturaSD>:

//************************************************************************************************************

void LecturaSD()
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
	char estado_anafe,estado_sensor1,estado_sensor2,programado,stop,hora_prog[6],hora[2],minutos[2];

	// Leo la SD y actualizo el vector componentes y la variable estado_comp y cafe_programado
	FRESULT resultado = Mount_SD("");
 8003802:	488f      	ldr	r0, [pc, #572]	; (8003a40 <LecturaSD+0x244>)
 8003804:	f7fc ff8a 	bl	800071c <Mount_SD>
 8003808:	4603      	mov	r3, r0
 800380a:	73fb      	strb	r3, [r7, #15]
	if(resultado == FR_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 80f0 	bne.w	80039f4 <LecturaSD+0x1f8>
	{
		if(Read_File("est.txt", componentes) == FR_OK)
 8003814:	498b      	ldr	r1, [pc, #556]	; (8003a44 <LecturaSD+0x248>)
 8003816:	488c      	ldr	r0, [pc, #560]	; (8003a48 <LecturaSD+0x24c>)
 8003818:	f7fc ffe8 	bl	80007ec <Read_File>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	f040 80da 	bne.w	80039d8 <LecturaSD+0x1dc>
		{
			//Chequeo que este todo en orden

			estado_anafe = componentes[0];
 8003824:	4b87      	ldr	r3, [pc, #540]	; (8003a44 <LecturaSD+0x248>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	75fb      	strb	r3, [r7, #23]
			estado_sensor1 = componentes[1];
 800382a:	4b86      	ldr	r3, [pc, #536]	; (8003a44 <LecturaSD+0x248>)
 800382c:	785b      	ldrb	r3, [r3, #1]
 800382e:	75bb      	strb	r3, [r7, #22]
			estado_sensor2 = componentes[2];
 8003830:	4b84      	ldr	r3, [pc, #528]	; (8003a44 <LecturaSD+0x248>)
 8003832:	789b      	ldrb	r3, [r3, #2]
 8003834:	757b      	strb	r3, [r7, #21]
			programado = componentes[3];
 8003836:	4b83      	ldr	r3, [pc, #524]	; (8003a44 <LecturaSD+0x248>)
 8003838:	78db      	ldrb	r3, [r3, #3]
 800383a:	753b      	strb	r3, [r7, #20]
			if(estado_anafe == 0) estado_anafe = '0';
 800383c:	7dfb      	ldrb	r3, [r7, #23]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <LecturaSD+0x4a>
 8003842:	2330      	movs	r3, #48	; 0x30
 8003844:	75fb      	strb	r3, [r7, #23]
			if(estado_sensor1 == 0) estado_sensor1 = '0';
 8003846:	7dbb      	ldrb	r3, [r7, #22]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <LecturaSD+0x54>
 800384c:	2330      	movs	r3, #48	; 0x30
 800384e:	75bb      	strb	r3, [r7, #22]
			if(estado_sensor2 == 0) estado_sensor2 = '0';
 8003850:	7d7b      	ldrb	r3, [r7, #21]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <LecturaSD+0x5e>
 8003856:	2330      	movs	r3, #48	; 0x30
 8003858:	757b      	strb	r3, [r7, #21]
			if(programado == 0) programado = '0';
 800385a:	7d3b      	ldrb	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <LecturaSD+0x68>
 8003860:	2330      	movs	r3, #48	; 0x30
 8003862:	753b      	strb	r3, [r7, #20]

			if((estado_anafe == '0' && estado_sensor1 == '0') || (estado_anafe == '0' && estado_sensor2 == '0') || (estado_sensor2 == '0' && estado_sensor1 == '0'))
 8003864:	7dfb      	ldrb	r3, [r7, #23]
 8003866:	2b30      	cmp	r3, #48	; 0x30
 8003868:	d102      	bne.n	8003870 <LecturaSD+0x74>
 800386a:	7dbb      	ldrb	r3, [r7, #22]
 800386c:	2b30      	cmp	r3, #48	; 0x30
 800386e:	d00b      	beq.n	8003888 <LecturaSD+0x8c>
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	2b30      	cmp	r3, #48	; 0x30
 8003874:	d102      	bne.n	800387c <LecturaSD+0x80>
 8003876:	7d7b      	ldrb	r3, [r7, #21]
 8003878:	2b30      	cmp	r3, #48	; 0x30
 800387a:	d005      	beq.n	8003888 <LecturaSD+0x8c>
 800387c:	7d7b      	ldrb	r3, [r7, #21]
 800387e:	2b30      	cmp	r3, #48	; 0x30
 8003880:	d118      	bne.n	80038b4 <LecturaSD+0xb8>
 8003882:	7dbb      	ldrb	r3, [r7, #22]
 8003884:	2b30      	cmp	r3, #48	; 0x30
 8003886:	d115      	bne.n	80038b4 <LecturaSD+0xb8>
			{
				f_error = 1;
 8003888:	4b70      	ldr	r3, [pc, #448]	; (8003a4c <LecturaSD+0x250>)
 800388a:	2201      	movs	r2, #1
 800388c:	701a      	strb	r2, [r3, #0]
				estado_comp = MULTIPLES_ERRORES;
 800388e:	4b70      	ldr	r3, [pc, #448]	; (8003a50 <LecturaSD+0x254>)
 8003890:	2206      	movs	r2, #6
 8003892:	701a      	strb	r2, [r3, #0]
				print_Display(estado_comp + 4);
 8003894:	4b6e      	ldr	r3, [pc, #440]	; (8003a50 <LecturaSD+0x254>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	3304      	adds	r3, #4
 800389a:	b2db      	uxtb	r3, r3
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff fde9 	bl	8003474 <print_Display>
				SetLED(OFF, VERDE);
 80038a2:	2101      	movs	r1, #1
 80038a4:	2000      	movs	r0, #0
 80038a6:	f000 fa95 	bl	8003dd4 <SetLED>
				SetLED(ON, ROJO);
 80038aa:	2103      	movs	r1, #3
 80038ac:	2001      	movs	r0, #1
 80038ae:	f000 fa91 	bl	8003dd4 <SetLED>
 80038b2:	e047      	b.n	8003944 <LecturaSD+0x148>
			} else
			{
				if(estado_anafe == '0')
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	2b30      	cmp	r3, #48	; 0x30
 80038b8:	d114      	bne.n	80038e4 <LecturaSD+0xe8>
				{
					f_error = 1;
 80038ba:	4b64      	ldr	r3, [pc, #400]	; (8003a4c <LecturaSD+0x250>)
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
					estado_comp = ERROR_ANAFE;
 80038c0:	4b63      	ldr	r3, [pc, #396]	; (8003a50 <LecturaSD+0x254>)
 80038c2:	2203      	movs	r2, #3
 80038c4:	701a      	strb	r2, [r3, #0]
					print_Display(estado_comp + 4);
 80038c6:	4b62      	ldr	r3, [pc, #392]	; (8003a50 <LecturaSD+0x254>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	3304      	adds	r3, #4
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fdd0 	bl	8003474 <print_Display>
					SetLED(OFF, VERDE);
 80038d4:	2101      	movs	r1, #1
 80038d6:	2000      	movs	r0, #0
 80038d8:	f000 fa7c 	bl	8003dd4 <SetLED>
					SetLED(ON, ROJO);
 80038dc:	2103      	movs	r1, #3
 80038de:	2001      	movs	r0, #1
 80038e0:	f000 fa78 	bl	8003dd4 <SetLED>
				}
				if(estado_sensor1 == '0')
 80038e4:	7dbb      	ldrb	r3, [r7, #22]
 80038e6:	2b30      	cmp	r3, #48	; 0x30
 80038e8:	d114      	bne.n	8003914 <LecturaSD+0x118>
				{
					f_error = 1;
 80038ea:	4b58      	ldr	r3, [pc, #352]	; (8003a4c <LecturaSD+0x250>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	701a      	strb	r2, [r3, #0]
					estado_comp = ERROR_SENSOR_1;
 80038f0:	4b57      	ldr	r3, [pc, #348]	; (8003a50 <LecturaSD+0x254>)
 80038f2:	2204      	movs	r2, #4
 80038f4:	701a      	strb	r2, [r3, #0]
					print_Display(estado_comp + 4);
 80038f6:	4b56      	ldr	r3, [pc, #344]	; (8003a50 <LecturaSD+0x254>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	3304      	adds	r3, #4
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fdb8 	bl	8003474 <print_Display>
					SetLED(OFF, VERDE);
 8003904:	2101      	movs	r1, #1
 8003906:	2000      	movs	r0, #0
 8003908:	f000 fa64 	bl	8003dd4 <SetLED>
					SetLED(ON, ROJO);
 800390c:	2103      	movs	r1, #3
 800390e:	2001      	movs	r0, #1
 8003910:	f000 fa60 	bl	8003dd4 <SetLED>
				}
				if(estado_sensor2 == '0')
 8003914:	7d7b      	ldrb	r3, [r7, #21]
 8003916:	2b30      	cmp	r3, #48	; 0x30
 8003918:	d114      	bne.n	8003944 <LecturaSD+0x148>
				{
					f_error = 1;
 800391a:	4b4c      	ldr	r3, [pc, #304]	; (8003a4c <LecturaSD+0x250>)
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]
					estado_comp = ERROR_SENSOR_2;
 8003920:	4b4b      	ldr	r3, [pc, #300]	; (8003a50 <LecturaSD+0x254>)
 8003922:	2205      	movs	r2, #5
 8003924:	701a      	strb	r2, [r3, #0]
					print_Display(estado_comp + 4);
 8003926:	4b4a      	ldr	r3, [pc, #296]	; (8003a50 <LecturaSD+0x254>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	3304      	adds	r3, #4
 800392c:	b2db      	uxtb	r3, r3
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fda0 	bl	8003474 <print_Display>
					SetLED(OFF, VERDE);
 8003934:	2101      	movs	r1, #1
 8003936:	2000      	movs	r0, #0
 8003938:	f000 fa4c 	bl	8003dd4 <SetLED>
					SetLED(ON, ROJO);
 800393c:	2103      	movs	r1, #3
 800393e:	2001      	movs	r0, #1
 8003940:	f000 fa48 	bl	8003dd4 <SetLED>
				}
			}

			if(programado == '1')
 8003944:	7d3b      	ldrb	r3, [r7, #20]
 8003946:	2b31      	cmp	r3, #49	; 0x31
 8003948:	d142      	bne.n	80039d0 <LecturaSD+0x1d4>
			{
				cafe_programado = 1;
 800394a:	4b42      	ldr	r3, [pc, #264]	; (8003a54 <LecturaSD+0x258>)
 800394c:	2201      	movs	r2, #1
 800394e:	701a      	strb	r2, [r3, #0]
				FRESULT resultado = Read_File("prog.txt", hora_prog);
 8003950:	f107 0308 	add.w	r3, r7, #8
 8003954:	4619      	mov	r1, r3
 8003956:	4840      	ldr	r0, [pc, #256]	; (8003a58 <LecturaSD+0x25c>)
 8003958:	f7fc ff48 	bl	80007ec <Read_File>
 800395c:	4603      	mov	r3, r0
 800395e:	73bb      	strb	r3, [r7, #14]
				for(int i=0;i<strlen(hora_prog);i++)
 8003960:	2300      	movs	r3, #0
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	e00f      	b.n	8003986 <LecturaSD+0x18a>
				{
					if(hora_prog[i] == 0) hora_prog[i] = '0';
 8003966:	f107 0208 	add.w	r2, r7, #8
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4413      	add	r3, r2
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d105      	bne.n	8003980 <LecturaSD+0x184>
 8003974:	f107 0208 	add.w	r2, r7, #8
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4413      	add	r3, r2
 800397c:	2230      	movs	r2, #48	; 0x30
 800397e:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<strlen(hora_prog);i++)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	3301      	adds	r3, #1
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	f107 0308 	add.w	r3, r7, #8
 800398a:	4618      	mov	r0, r3
 800398c:	f7fc fbea 	bl	8000164 <strlen>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	429a      	cmp	r2, r3
 8003996:	d8e6      	bhi.n	8003966 <LecturaSD+0x16a>
				}
				if(resultado == FR_OK)
 8003998:	7bbb      	ldrb	r3, [r7, #14]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d137      	bne.n	8003a0e <LecturaSD+0x212>
				{
					hora[0] = hora_prog[0];
 800399e:	7a3b      	ldrb	r3, [r7, #8]
 80039a0:	713b      	strb	r3, [r7, #4]
					hora[1] = hora_prog[1];
 80039a2:	7a7b      	ldrb	r3, [r7, #9]
 80039a4:	717b      	strb	r3, [r7, #5]
					minutos[0] = hora_prog[3];
 80039a6:	7afb      	ldrb	r3, [r7, #11]
 80039a8:	703b      	strb	r3, [r7, #0]
					minutos[1] = hora_prog[4];
 80039aa:	7b3b      	ldrb	r3, [r7, #12]
 80039ac:	707b      	strb	r3, [r7, #1]

					horaProgramada.Hours = atoi(hora);
 80039ae:	1d3b      	adds	r3, r7, #4
 80039b0:	4618      	mov	r0, r3
 80039b2:	f00a f823 	bl	800d9fc <atoi>
 80039b6:	4603      	mov	r3, r0
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <LecturaSD+0x260>)
 80039bc:	701a      	strb	r2, [r3, #0]
					horaProgramada.Minutes = atoi(minutos);
 80039be:	463b      	mov	r3, r7
 80039c0:	4618      	mov	r0, r3
 80039c2:	f00a f81b 	bl	800d9fc <atoi>
 80039c6:	4603      	mov	r3, r0
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <LecturaSD+0x260>)
 80039cc:	705a      	strb	r2, [r3, #1]
 80039ce:	e01e      	b.n	8003a0e <LecturaSD+0x212>

					UNUSED(stop);
				}

			} else cafe_programado = 0;
 80039d0:	4b20      	ldr	r3, [pc, #128]	; (8003a54 <LecturaSD+0x258>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	e01a      	b.n	8003a0e <LecturaSD+0x212>
		} else
		{
			f_error = 1;
 80039d8:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <LecturaSD+0x250>)
 80039da:	2201      	movs	r2, #1
 80039dc:	701a      	strb	r2, [r3, #0]
			estado_comp = ERROR_SD;
 80039de:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <LecturaSD+0x254>)
 80039e0:	2202      	movs	r2, #2
 80039e2:	701a      	strb	r2, [r3, #0]
			print_Display(estado_comp + 4);
 80039e4:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <LecturaSD+0x254>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	3304      	adds	r3, #4
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff fd41 	bl	8003474 <print_Display>
 80039f2:	e00c      	b.n	8003a0e <LecturaSD+0x212>
		}
	} else
	{
		f_error = 1;
 80039f4:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <LecturaSD+0x250>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	701a      	strb	r2, [r3, #0]
		estado_comp = FALTA_SD;
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <LecturaSD+0x254>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	701a      	strb	r2, [r3, #0]
		print_Display(estado_comp + 4);
 8003a00:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <LecturaSD+0x254>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	3304      	adds	r3, #4
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fd33 	bl	8003474 <print_Display>
	}
	Unmount_SD("");
 8003a0e:	480c      	ldr	r0, [pc, #48]	; (8003a40 <LecturaSD+0x244>)
 8003a10:	f7fc fe94 	bl	800073c <Unmount_SD>

	horaProgramada.Seconds = 0;
 8003a14:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <LecturaSD+0x260>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	709a      	strb	r2, [r3, #2]
	sprintf(horaStr, "%d", horaProgramada.Hours);
 8003a1a:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <LecturaSD+0x260>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	490f      	ldr	r1, [pc, #60]	; (8003a60 <LecturaSD+0x264>)
 8003a22:	4810      	ldr	r0, [pc, #64]	; (8003a64 <LecturaSD+0x268>)
 8003a24:	f00a f93e 	bl	800dca4 <siprintf>
	sprintf(minutoStr, "%d", horaProgramada.Minutes);
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <LecturaSD+0x260>)
 8003a2a:	785b      	ldrb	r3, [r3, #1]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	490c      	ldr	r1, [pc, #48]	; (8003a60 <LecturaSD+0x264>)
 8003a30:	480d      	ldr	r0, [pc, #52]	; (8003a68 <LecturaSD+0x26c>)
 8003a32:	f00a f937 	bl	800dca4 <siprintf>
}
 8003a36:	bf00      	nop
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	0800e758 	.word	0x0800e758
 8003a44:	20000a9c 	.word	0x20000a9c
 8003a48:	0800e75c 	.word	0x0800e75c
 8003a4c:	20000a8f 	.word	0x20000a8f
 8003a50:	20000a90 	.word	0x20000a90
 8003a54:	20000aa0 	.word	0x20000aa0
 8003a58:	0800e764 	.word	0x0800e764
 8003a5c:	20000a84 	.word	0x20000a84
 8003a60:	0800e770 	.word	0x0800e770
 8003a64:	20000a74 	.word	0x20000a74
 8003a68:	20000a78 	.word	0x20000a78

08003a6c <escribir_SD>:

//************************************************************************************************************

void escribir_SD()
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
	if(Mount_SD("") == FR_OK)
 8003a70:	480e      	ldr	r0, [pc, #56]	; (8003aac <escribir_SD+0x40>)
 8003a72:	f7fc fe53 	bl	800071c <Mount_SD>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d112      	bne.n	8003aa2 <escribir_SD+0x36>
	{
		if(Write_File("est.txt", componentes, strlen(componentes)) != FR_OK)
 8003a7c:	480c      	ldr	r0, [pc, #48]	; (8003ab0 <escribir_SD+0x44>)
 8003a7e:	f7fc fb71 	bl	8000164 <strlen>
 8003a82:	4603      	mov	r3, r0
 8003a84:	461a      	mov	r2, r3
 8003a86:	490a      	ldr	r1, [pc, #40]	; (8003ab0 <escribir_SD+0x44>)
 8003a88:	480a      	ldr	r0, [pc, #40]	; (8003ab4 <escribir_SD+0x48>)
 8003a8a:	f7fc fe6b 	bl	8000764 <Write_File>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <escribir_SD+0x2e>
		{
			estado_comp = ERROR_SD;
 8003a94:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <escribir_SD+0x4c>)
 8003a96:	2202      	movs	r2, #2
 8003a98:	701a      	strb	r2, [r3, #0]
		}
		Unmount_SD("");
 8003a9a:	4804      	ldr	r0, [pc, #16]	; (8003aac <escribir_SD+0x40>)
 8003a9c:	f7fc fe4e 	bl	800073c <Unmount_SD>
	} else
	{
		estado_comp = FALTA_SD;
	}
}
 8003aa0:	e002      	b.n	8003aa8 <escribir_SD+0x3c>
		estado_comp = FALTA_SD;
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <escribir_SD+0x4c>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	0800e758 	.word	0x0800e758
 8003ab0:	20000a9c 	.word	0x20000a9c
 8003ab4:	0800e75c 	.word	0x0800e75c
 8003ab8:	20000a90 	.word	0x20000a90

08003abc <hora_SD>:

void hora_SD()
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
	char hora_prog[5];

	sprintf(hora_prog,"%d:%d",horaProgramada.Hours,horaProgramada.Minutes);
 8003ac2:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <hora_SD+0x54>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <hora_SD+0x54>)
 8003aca:	785b      	ldrb	r3, [r3, #1]
 8003acc:	4638      	mov	r0, r7
 8003ace:	4911      	ldr	r1, [pc, #68]	; (8003b14 <hora_SD+0x58>)
 8003ad0:	f00a f8e8 	bl	800dca4 <siprintf>

	if(Mount_SD("") == FR_OK)
 8003ad4:	4810      	ldr	r0, [pc, #64]	; (8003b18 <hora_SD+0x5c>)
 8003ad6:	f7fc fe21 	bl	800071c <Mount_SD>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10f      	bne.n	8003b00 <hora_SD+0x44>
	{
		if(Write_File("prog.txt", hora_prog, 5) != FR_OK)
 8003ae0:	463b      	mov	r3, r7
 8003ae2:	2205      	movs	r2, #5
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	480d      	ldr	r0, [pc, #52]	; (8003b1c <hora_SD+0x60>)
 8003ae8:	f7fc fe3c 	bl	8000764 <Write_File>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <hora_SD+0x3c>
		{
			estado_comp = ERROR_SD;
 8003af2:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <hora_SD+0x64>)
 8003af4:	2202      	movs	r2, #2
 8003af6:	701a      	strb	r2, [r3, #0]
		}
		Unmount_SD("");
 8003af8:	4807      	ldr	r0, [pc, #28]	; (8003b18 <hora_SD+0x5c>)
 8003afa:	f7fc fe1f 	bl	800073c <Unmount_SD>
	} else
	{
		estado_comp = FALTA_SD;
	}
}
 8003afe:	e002      	b.n	8003b06 <hora_SD+0x4a>
		estado_comp = FALTA_SD;
 8003b00:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <hora_SD+0x64>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	701a      	strb	r2, [r3, #0]
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000a84 	.word	0x20000a84
 8003b14:	0800e774 	.word	0x0800e774
 8003b18:	0800e758 	.word	0x0800e758
 8003b1c:	0800e764 	.word	0x0800e764
 8003b20:	20000a90 	.word	0x20000a90

08003b24 <registro_SD>:

void registro_SD(int resultado)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08c      	sub	sp, #48	; 0x30
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	char str[40];
	//uint32_t len;

	HAL_RTC_GetTime(&hrtc, &horaActual, RTC_FORMAT_BIN);
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	492d      	ldr	r1, [pc, #180]	; (8003be4 <registro_SD+0xc0>)
 8003b30:	482d      	ldr	r0, [pc, #180]	; (8003be8 <registro_SD+0xc4>)
 8003b32:	f002 f87f 	bl	8005c34 <HAL_RTC_GetTime>

	if(Mount_SD("") == FR_OK)
 8003b36:	482d      	ldr	r0, [pc, #180]	; (8003bec <registro_SD+0xc8>)
 8003b38:	f7fc fdf0 	bl	800071c <Mount_SD>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d148      	bne.n	8003bd4 <registro_SD+0xb0>
	{
		switch(resultado)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d01f      	beq.n	8003b88 <registro_SD+0x64>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	dc27      	bgt.n	8003b9e <registro_SD+0x7a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <registro_SD+0x38>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d00b      	beq.n	8003b72 <registro_SD+0x4e>
 8003b5a:	e020      	b.n	8003b9e <registro_SD+0x7a>
		{
			case EXITOSO:
				sprintf(str,"PROCESO OK - %d:%d \n\0",horaActual.Hours,horaActual.Minutes);
 8003b5c:	4b21      	ldr	r3, [pc, #132]	; (8003be4 <registro_SD+0xc0>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <registro_SD+0xc0>)
 8003b64:	785b      	ldrb	r3, [r3, #1]
 8003b66:	f107 0008 	add.w	r0, r7, #8
 8003b6a:	4921      	ldr	r1, [pc, #132]	; (8003bf0 <registro_SD+0xcc>)
 8003b6c:	f00a f89a 	bl	800dca4 <siprintf>
				//len = strlen(str);
				break;
 8003b70:	e020      	b.n	8003bb4 <registro_SD+0x90>
			case CANCELADO:
				sprintf(str,"PROCESO CANCELADO - %d:%d \n\0",horaActual.Hours,horaActual.Minutes);
 8003b72:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <registro_SD+0xc0>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	4b1a      	ldr	r3, [pc, #104]	; (8003be4 <registro_SD+0xc0>)
 8003b7a:	785b      	ldrb	r3, [r3, #1]
 8003b7c:	f107 0008 	add.w	r0, r7, #8
 8003b80:	491c      	ldr	r1, [pc, #112]	; (8003bf4 <registro_SD+0xd0>)
 8003b82:	f00a f88f 	bl	800dca4 <siprintf>
				//len = strlen(str);
				break;
 8003b86:	e015      	b.n	8003bb4 <registro_SD+0x90>
			case ERRONEO:
				sprintf(str,"ERROR EN COMPONENTES - %d:%d \n\0",horaActual.Hours,horaActual.Minutes);
 8003b88:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <registro_SD+0xc0>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <registro_SD+0xc0>)
 8003b90:	785b      	ldrb	r3, [r3, #1]
 8003b92:	f107 0008 	add.w	r0, r7, #8
 8003b96:	4918      	ldr	r1, [pc, #96]	; (8003bf8 <registro_SD+0xd4>)
 8003b98:	f00a f884 	bl	800dca4 <siprintf>
				//len = strlen(str);
				break;
 8003b9c:	e00a      	b.n	8003bb4 <registro_SD+0x90>
			default:
				sprintf(str,"ERROR AL GRABAR PROCESO - %d:%d \n\0",horaActual.Hours,horaActual.Minutes);
 8003b9e:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <registro_SD+0xc0>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <registro_SD+0xc0>)
 8003ba6:	785b      	ldrb	r3, [r3, #1]
 8003ba8:	f107 0008 	add.w	r0, r7, #8
 8003bac:	4913      	ldr	r1, [pc, #76]	; (8003bfc <registro_SD+0xd8>)
 8003bae:	f00a f879 	bl	800dca4 <siprintf>
				//len = strlen(str);
				break;
 8003bb2:	bf00      	nop
		}
		if(Update_File("reg.txt", str) != FR_OK)
 8003bb4:	f107 0308 	add.w	r3, r7, #8
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4811      	ldr	r0, [pc, #68]	; (8003c00 <registro_SD+0xdc>)
 8003bbc:	f7fc fe86 	bl	80008cc <Update_File>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <registro_SD+0xa8>
		{
			estado_comp = ERROR_SD;
 8003bc6:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <registro_SD+0xe0>)
 8003bc8:	2202      	movs	r2, #2
 8003bca:	701a      	strb	r2, [r3, #0]
		}
		Unmount_SD("");
 8003bcc:	4807      	ldr	r0, [pc, #28]	; (8003bec <registro_SD+0xc8>)
 8003bce:	f7fc fdb5 	bl	800073c <Unmount_SD>
	} else
	{
		estado_comp = FALTA_SD;
	}
}
 8003bd2:	e002      	b.n	8003bda <registro_SD+0xb6>
		estado_comp = FALTA_SD;
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <registro_SD+0xe0>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
}
 8003bda:	bf00      	nop
 8003bdc:	3730      	adds	r7, #48	; 0x30
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000a80 	.word	0x20000a80
 8003be8:	200008c8 	.word	0x200008c8
 8003bec:	0800e758 	.word	0x0800e758
 8003bf0:	0800e77c 	.word	0x0800e77c
 8003bf4:	0800e794 	.word	0x0800e794
 8003bf8:	0800e7b4 	.word	0x0800e7b4
 8003bfc:	0800e7d4 	.word	0x0800e7d4
 8003c00:	0800e7f8 	.word	0x0800e7f8
 8003c04:	20000a90 	.word	0x20000a90

08003c08 <getKey>:

// ************************ Teclado ************************************************************

char getKey(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
	uint8_t aux = NO_KEY;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	71fb      	strb	r3, [r7, #7]

	if (bufferTeclado != NO_KEY)
 8003c12:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <getKey+0x2c>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <getKey+0x1e>
	{
		aux = bufferTeclado;
 8003c1a:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <getKey+0x2c>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	71fb      	strb	r3, [r7, #7]
		bufferTeclado = NO_KEY;
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <getKey+0x2c>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
	}
	return aux;
 8003c26:	79fb      	ldrb	r3, [r7, #7]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20000a92 	.word	0x20000a92

08003c38 <BarridoTeclado>:

char BarridoTeclado(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(BOTON_OK_GPIO_Port,BOTON_OK_Pin)) 				return BOTON_OK;
 8003c3c:	2110      	movs	r1, #16
 8003c3e:	4814      	ldr	r0, [pc, #80]	; (8003c90 <BarridoTeclado+0x58>)
 8003c40:	f000 fd1c 	bl	800467c <HAL_GPIO_ReadPin>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <BarridoTeclado+0x16>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e01d      	b.n	8003c8a <BarridoTeclado+0x52>
	else if(!HAL_GPIO_ReadPin(BOTON_SEL_GPIO_Port,BOTON_SEL_Pin))		return BOTON_SEL;
 8003c4e:	2108      	movs	r1, #8
 8003c50:	480f      	ldr	r0, [pc, #60]	; (8003c90 <BarridoTeclado+0x58>)
 8003c52:	f000 fd13 	bl	800467c <HAL_GPIO_ReadPin>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <BarridoTeclado+0x28>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e014      	b.n	8003c8a <BarridoTeclado+0x52>
	else if(!HAL_GPIO_ReadPin(BOTON_CANCEL_GPIO_Port,BOTON_CANCEL_Pin))	return BOTON_CANCEL;
 8003c60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c64:	480b      	ldr	r0, [pc, #44]	; (8003c94 <BarridoTeclado+0x5c>)
 8003c66:	f000 fd09 	bl	800467c <HAL_GPIO_ReadPin>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <BarridoTeclado+0x3c>
 8003c70:	2303      	movs	r3, #3
 8003c72:	e00a      	b.n	8003c8a <BarridoTeclado+0x52>
	else if(!HAL_GPIO_ReadPin(BOTON_ON_GPIO_Port,BOTON_ON_Pin))			return BOTON_ON;
 8003c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c78:	4806      	ldr	r0, [pc, #24]	; (8003c94 <BarridoTeclado+0x5c>)
 8003c7a:	f000 fcff 	bl	800467c <HAL_GPIO_ReadPin>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <BarridoTeclado+0x50>
 8003c84:	2304      	movs	r3, #4
 8003c86:	e000      	b.n	8003c8a <BarridoTeclado+0x52>
	else																return NO_KEY;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40010c00 	.word	0x40010c00
 8003c94:	40010800 	.word	0x40010800

08003c98 <DriverTeclado>:

void DriverTeclado(void *p)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
	static uint8_t estado = ESPERANDO_TECLA;
	static uint8_t contTeclaEstable = 0;

	while(1)
	{
		codigoActual = BarridoTeclado();
 8003ca0:	f7ff ffca 	bl	8003c38 <BarridoTeclado>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	4b27      	ldr	r3, [pc, #156]	; (8003d48 <DriverTeclado+0xb0>)
 8003caa:	701a      	strb	r2, [r3, #0]

		switch (estado)
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <DriverTeclado+0xb4>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d031      	beq.n	8003d18 <DriverTeclado+0x80>
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	dc39      	bgt.n	8003d2c <DriverTeclado+0x94>
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d002      	beq.n	8003cc2 <DriverTeclado+0x2a>
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d00f      	beq.n	8003ce0 <DriverTeclado+0x48>
 8003cc0:	e034      	b.n	8003d2c <DriverTeclado+0x94>
		{
			case ESPERANDO_TECLA:
					if (codigoActual != NO_KEY)
 8003cc2:	4b21      	ldr	r3, [pc, #132]	; (8003d48 <DriverTeclado+0xb0>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d034      	beq.n	8003d34 <DriverTeclado+0x9c>
					{
						codigoAnterior = codigoActual;
 8003cca:	4b1f      	ldr	r3, [pc, #124]	; (8003d48 <DriverTeclado+0xb0>)
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <DriverTeclado+0xb8>)
 8003cd0:	701a      	strb	r2, [r3, #0]
						contTeclaEstable = 0;
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <DriverTeclado+0xbc>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	701a      	strb	r2, [r3, #0]
						estado = VALIDAR_TECLA;
 8003cd8:	4b1c      	ldr	r3, [pc, #112]	; (8003d4c <DriverTeclado+0xb4>)
 8003cda:	2202      	movs	r2, #2
 8003cdc:	701a      	strb	r2, [r3, #0]
					}
					break;
 8003cde:	e029      	b.n	8003d34 <DriverTeclado+0x9c>
			case VALIDAR_TECLA:
					if (codigoActual != codigoAnterior)
 8003ce0:	4b19      	ldr	r3, [pc, #100]	; (8003d48 <DriverTeclado+0xb0>)
 8003ce2:	781a      	ldrb	r2, [r3, #0]
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <DriverTeclado+0xb8>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d003      	beq.n	8003cf4 <DriverTeclado+0x5c>
					{
						estado = ESPERANDO_TECLA;
 8003cec:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <DriverTeclado+0xb4>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	701a      	strb	r2, [r3, #0]
						{
							bufferTeclado = codigoActual;
							estado = TECLA_PRESIONADA;
						}
					}
					break;
 8003cf2:	e021      	b.n	8003d38 <DriverTeclado+0xa0>
						contTeclaEstable++;
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <DriverTeclado+0xbc>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <DriverTeclado+0xbc>)
 8003cfe:	701a      	strb	r2, [r3, #0]
						if (contTeclaEstable == CANT_PARA_VALIDAR)
 8003d00:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <DriverTeclado+0xbc>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b0a      	cmp	r3, #10
 8003d06:	d117      	bne.n	8003d38 <DriverTeclado+0xa0>
							bufferTeclado = codigoActual;
 8003d08:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <DriverTeclado+0xb0>)
 8003d0a:	781a      	ldrb	r2, [r3, #0]
 8003d0c:	4b12      	ldr	r3, [pc, #72]	; (8003d58 <DriverTeclado+0xc0>)
 8003d0e:	701a      	strb	r2, [r3, #0]
							estado = TECLA_PRESIONADA;
 8003d10:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <DriverTeclado+0xb4>)
 8003d12:	2203      	movs	r2, #3
 8003d14:	701a      	strb	r2, [r3, #0]
					break;
 8003d16:	e00f      	b.n	8003d38 <DriverTeclado+0xa0>
			case TECLA_PRESIONADA:
					if (codigoActual != codigoAnterior)
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <DriverTeclado+0xb0>)
 8003d1a:	781a      	ldrb	r2, [r3, #0]
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <DriverTeclado+0xb8>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d00b      	beq.n	8003d3c <DriverTeclado+0xa4>
					{
						estado = ESPERANDO_TECLA;
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <DriverTeclado+0xb4>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	701a      	strb	r2, [r3, #0]
					}
					break;
 8003d2a:	e007      	b.n	8003d3c <DriverTeclado+0xa4>
			default:
					estado = ESPERANDO_TECLA;
 8003d2c:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <DriverTeclado+0xb4>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	701a      	strb	r2, [r3, #0]
					break;
 8003d32:	e004      	b.n	8003d3e <DriverTeclado+0xa6>
					break;
 8003d34:	bf00      	nop
 8003d36:	e002      	b.n	8003d3e <DriverTeclado+0xa6>
					break;
 8003d38:	bf00      	nop
 8003d3a:	e000      	b.n	8003d3e <DriverTeclado+0xa6>
					break;
 8003d3c:	bf00      	nop
		}
		vTaskDelay(10);
 8003d3e:	200a      	movs	r0, #10
 8003d40:	f008 fbee 	bl	800c520 <vTaskDelay>
		codigoActual = BarridoTeclado();
 8003d44:	e7ac      	b.n	8003ca0 <DriverTeclado+0x8>
 8003d46:	bf00      	nop
 8003d48:	20000aa1 	.word	0x20000aa1
 8003d4c:	20000024 	.word	0x20000024
 8003d50:	20000aa2 	.word	0x20000aa2
 8003d54:	20000aa3 	.word	0x20000aa3
 8003d58:	20000a92 	.word	0x20000a92

08003d5c <SetRelay>:
}

//********************* RELE *******************************

void SetRelay(char estado)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	71fb      	strb	r3, [r7, #7]
	if(estado == ON) HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, ON);
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <SetRelay+0x1c>
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d72:	4808      	ldr	r0, [pc, #32]	; (8003d94 <SetRelay+0x38>)
 8003d74:	f000 fc99 	bl	80046aa <HAL_GPIO_WritePin>
	if(estado == OFF) HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, OFF);
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d105      	bne.n	8003d8a <SetRelay+0x2e>
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d84:	4803      	ldr	r0, [pc, #12]	; (8003d94 <SetRelay+0x38>)
 8003d86:	f000 fc90 	bl	80046aa <HAL_GPIO_WritePin>
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40010c00 	.word	0x40010c00

08003d98 <SetBuzzer>:

//************************************************************************************************************

void SetBuzzer(char estado)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
	if(estado == ON) HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, ON);
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d105      	bne.n	8003db4 <SetBuzzer+0x1c>
 8003da8:	2201      	movs	r2, #1
 8003daa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003dae:	4808      	ldr	r0, [pc, #32]	; (8003dd0 <SetBuzzer+0x38>)
 8003db0:	f000 fc7b 	bl	80046aa <HAL_GPIO_WritePin>
	if(estado == OFF) HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, OFF);
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <SetBuzzer+0x2e>
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003dc0:	4803      	ldr	r0, [pc, #12]	; (8003dd0 <SetBuzzer+0x38>)
 8003dc2:	f000 fc72 	bl	80046aa <HAL_GPIO_WritePin>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40010c00 	.word	0x40010c00

08003dd4 <SetLED>:

//************************************************************************************************************

void SetLED(char estado, char led)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	460a      	mov	r2, r1
 8003dde:	71fb      	strb	r3, [r7, #7]
 8003de0:	4613      	mov	r3, r2
 8003de2:	71bb      	strb	r3, [r7, #6]
	uint16_t pin;

	if(led == VERDE) 	pin = LED_VERDE_Pin;
 8003de4:	79bb      	ldrb	r3, [r7, #6]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d102      	bne.n	8003df0 <SetLED+0x1c>
 8003dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dee:	81fb      	strh	r3, [r7, #14]
	if(led == AMARILLO) pin = LED_AMARILLO_Pin;
 8003df0:	79bb      	ldrb	r3, [r7, #6]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d102      	bne.n	8003dfc <SetLED+0x28>
 8003df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dfa:	81fb      	strh	r3, [r7, #14]
	if(led == ROJO) 	pin = LED_ROJO_Pin;
 8003dfc:	79bb      	ldrb	r3, [r7, #6]
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d102      	bne.n	8003e08 <SetLED+0x34>
 8003e02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e06:	81fb      	strh	r3, [r7, #14]

	if(estado == ON) HAL_GPIO_WritePin(GPIOB, pin, ON);
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d105      	bne.n	8003e1a <SetLED+0x46>
 8003e0e:	89fb      	ldrh	r3, [r7, #14]
 8003e10:	2201      	movs	r2, #1
 8003e12:	4619      	mov	r1, r3
 8003e14:	4807      	ldr	r0, [pc, #28]	; (8003e34 <SetLED+0x60>)
 8003e16:	f000 fc48 	bl	80046aa <HAL_GPIO_WritePin>
	if(estado == OFF) HAL_GPIO_WritePin(GPIOB, pin, OFF);
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d105      	bne.n	8003e2c <SetLED+0x58>
 8003e20:	89fb      	ldrh	r3, [r7, #14]
 8003e22:	2200      	movs	r2, #0
 8003e24:	4619      	mov	r1, r3
 8003e26:	4803      	ldr	r0, [pc, #12]	; (8003e34 <SetLED+0x60>)
 8003e28:	f000 fc3f 	bl	80046aa <HAL_GPIO_WritePin>
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40010c00 	.word	0x40010c00

08003e38 <IniciarPreparacion>:

//************************************************************************************************************

void IniciarPreparacion(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
	SetBuzzer(ON);
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	f7ff ffab 	bl	8003d98 <SetBuzzer>

	SetRelay(ON);
 8003e42:	2001      	movs	r0, #1
 8003e44:	f7ff ff8a 	bl	8003d5c <SetRelay>
	SetLED(ON, AMARILLO);
 8003e48:	2102      	movs	r1, #2
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	f7ff ffc2 	bl	8003dd4 <SetLED>

	f_preparacion = 1;
 8003e50:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <IniciarPreparacion+0x58>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	701a      	strb	r2, [r3, #0]

	tiempoRestante=7;
 8003e56:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <IniciarPreparacion+0x5c>)
 8003e58:	2207      	movs	r2, #7
 8003e5a:	701a      	strb	r2, [r3, #0]
	sprintf(restanteStr, "%d", tiempoRestante);
 8003e5c:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <IniciarPreparacion+0x5c>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	490d      	ldr	r1, [pc, #52]	; (8003e98 <IniciarPreparacion+0x60>)
 8003e64:	480d      	ldr	r0, [pc, #52]	; (8003e9c <IniciarPreparacion+0x64>)
 8003e66:	f009 ff1d 	bl	800dca4 <siprintf>
	print_Display(DIS_PREPARACION);
 8003e6a:	2003      	movs	r0, #3
 8003e6c:	f7ff fb02 	bl	8003474 <print_Display>

	HAL_RTC_GetTime(&hrtc, &horaInicio, RTC_FORMAT_BIN);
 8003e70:	2200      	movs	r2, #0
 8003e72:	490b      	ldr	r1, [pc, #44]	; (8003ea0 <IniciarPreparacion+0x68>)
 8003e74:	480b      	ldr	r0, [pc, #44]	; (8003ea4 <IniciarPreparacion+0x6c>)
 8003e76:	f001 fedd 	bl	8005c34 <HAL_RTC_GetTime>
	HAL_RTC_GetTime(&hrtc, &horaFicticia, RTC_FORMAT_BIN);
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	490a      	ldr	r1, [pc, #40]	; (8003ea8 <IniciarPreparacion+0x70>)
 8003e7e:	4809      	ldr	r0, [pc, #36]	; (8003ea4 <IniciarPreparacion+0x6c>)
 8003e80:	f001 fed8 	bl	8005c34 <HAL_RTC_GetTime>
//	vTaskPrioritySet(Handler_Sensores, 1);
//	vTaskPrioritySet(Handler_Anafe, 1);
//	vTaskPrioritySet(Handler_Timer, 1);
//	vTaskPrioritySet(Handler_Timer2, 1);

	SetBuzzer(OFF);
 8003e84:	2000      	movs	r0, #0
 8003e86:	f7ff ff87 	bl	8003d98 <SetBuzzer>
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000a72 	.word	0x20000a72
 8003e94:	2000001c 	.word	0x2000001c
 8003e98:	0800e770 	.word	0x0800e770
 8003e9c:	20000a7c 	.word	0x20000a7c
 8003ea0:	20000a88 	.word	0x20000a88
 8003ea4:	200008c8 	.word	0x200008c8
 8003ea8:	20000a8c 	.word	0x20000a8c

08003eac <FinalizarPreparacion>:

//************************************************************************************************************

void FinalizarPreparacion(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
	faseFinal = 0;
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	; (8003f20 <FinalizarPreparacion+0x74>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
	f_preparacion = 0;
 8003eb6:	4b1b      	ldr	r3, [pc, #108]	; (8003f24 <FinalizarPreparacion+0x78>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]

	SetRelay(OFF);
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f7ff ff4d 	bl	8003d5c <SetRelay>
	SetLED(OFF, AMARILLO);
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f7ff ff85 	bl	8003dd4 <SetLED>
//	vTaskPrioritySet(Handler_Anafe, 4);
//	vTaskPrioritySet(Handler_Timer, 2);
//	vTaskPrioritySet(Handler_Timer2, 2);

	// Aviso sonoro
	SetBuzzer(ON);
 8003eca:	2001      	movs	r0, #1
 8003ecc:	f7ff ff64 	bl	8003d98 <SetBuzzer>
	HAL_Delay(500);
 8003ed0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ed4:	f000 f880 	bl	8003fd8 <HAL_Delay>
	SetBuzzer(OFF);
 8003ed8:	2000      	movs	r0, #0
 8003eda:	f7ff ff5d 	bl	8003d98 <SetBuzzer>
	HAL_Delay(500);
 8003ede:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ee2:	f000 f879 	bl	8003fd8 <HAL_Delay>

	SetBuzzer(ON);
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	f7ff ff56 	bl	8003d98 <SetBuzzer>
	HAL_Delay(500);
 8003eec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ef0:	f000 f872 	bl	8003fd8 <HAL_Delay>
	SetBuzzer(OFF);
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	f7ff ff4f 	bl	8003d98 <SetBuzzer>
	HAL_Delay(500);
 8003efa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003efe:	f000 f86b 	bl	8003fd8 <HAL_Delay>

	SetBuzzer(ON);
 8003f02:	2001      	movs	r0, #1
 8003f04:	f7ff ff48 	bl	8003d98 <SetBuzzer>
	HAL_Delay(500);
 8003f08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f0c:	f000 f864 	bl	8003fd8 <HAL_Delay>
	SetBuzzer(OFF);
 8003f10:	2000      	movs	r0, #0
 8003f12:	f7ff ff41 	bl	8003d98 <SetBuzzer>

	f_preparacion = 0;
 8003f16:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <FinalizarPreparacion+0x78>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20000a71 	.word	0x20000a71
 8003f24:	20000a72 	.word	0x20000a72

08003f28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f28:	480c      	ldr	r0, [pc, #48]	; (8003f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f2a:	490d      	ldr	r1, [pc, #52]	; (8003f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f2c:	4a0d      	ldr	r2, [pc, #52]	; (8003f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f30:	e002      	b.n	8003f38 <LoopCopyDataInit>

08003f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f36:	3304      	adds	r3, #4

08003f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f3c:	d3f9      	bcc.n	8003f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f3e:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f40:	4c0a      	ldr	r4, [pc, #40]	; (8003f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f44:	e001      	b.n	8003f4a <LoopFillZerobss>

08003f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f48:	3204      	adds	r2, #4

08003f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f4c:	d3fb      	bcc.n	8003f46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f4e:	f7fe fee7 	bl	8002d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f52:	f009 fd5d 	bl	800da10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f56:	f7fe f971 	bl	800223c <main>
  bx lr
 8003f5a:	4770      	bx	lr
  ldr r0, =_sdata
 8003f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f60:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8003f64:	0800eaa0 	.word	0x0800eaa0
  ldr r2, =_sbss
 8003f68:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8003f6c:	20003f40 	.word	0x20003f40

08003f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f70:	e7fe      	b.n	8003f70 <ADC1_2_IRQHandler>
	...

08003f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f78:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <HAL_Init+0x28>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a07      	ldr	r2, [pc, #28]	; (8003f9c <HAL_Init+0x28>)
 8003f7e:	f043 0310 	orr.w	r3, r3, #16
 8003f82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f84:	2003      	movs	r0, #3
 8003f86:	f000 f90b 	bl	80041a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f8a:	200f      	movs	r0, #15
 8003f8c:	f7fe fdb4 	bl	8002af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f90:	f7fe fc54 	bl	800283c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40022000 	.word	0x40022000

08003fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_IncTick+0x1c>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <HAL_IncTick+0x20>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4413      	add	r3, r2
 8003fb0:	4a03      	ldr	r2, [pc, #12]	; (8003fc0 <HAL_IncTick+0x20>)
 8003fb2:	6013      	str	r3, [r2, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	2000002c 	.word	0x2000002c
 8003fc0:	20000aa4 	.word	0x20000aa4

08003fc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8003fc8:	4b02      	ldr	r3, [pc, #8]	; (8003fd4 <HAL_GetTick+0x10>)
 8003fca:	681b      	ldr	r3, [r3, #0]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr
 8003fd4:	20000aa4 	.word	0x20000aa4

08003fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fe0:	f7ff fff0 	bl	8003fc4 <HAL_GetTick>
 8003fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d005      	beq.n	8003ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <HAL_Delay+0x44>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ffe:	bf00      	nop
 8004000:	f7ff ffe0 	bl	8003fc4 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	429a      	cmp	r2, r3
 800400e:	d8f7      	bhi.n	8004000 <HAL_Delay+0x28>
  {
  }
}
 8004010:	bf00      	nop
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	2000002c 	.word	0x2000002c

08004020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <__NVIC_SetPriorityGrouping+0x44>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800403c:	4013      	ands	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800404c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004052:	4a04      	ldr	r2, [pc, #16]	; (8004064 <__NVIC_SetPriorityGrouping+0x44>)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	60d3      	str	r3, [r2, #12]
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	e000ed00 	.word	0xe000ed00

08004068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800406c:	4b04      	ldr	r3, [pc, #16]	; (8004080 <__NVIC_GetPriorityGrouping+0x18>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	0a1b      	lsrs	r3, r3, #8
 8004072:	f003 0307 	and.w	r3, r3, #7
}
 8004076:	4618      	mov	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800408e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004092:	2b00      	cmp	r3, #0
 8004094:	db0b      	blt.n	80040ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	f003 021f 	and.w	r2, r3, #31
 800409c:	4906      	ldr	r1, [pc, #24]	; (80040b8 <__NVIC_EnableIRQ+0x34>)
 800409e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	2001      	movs	r0, #1
 80040a6:	fa00 f202 	lsl.w	r2, r0, r2
 80040aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	e000e100 	.word	0xe000e100

080040bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	6039      	str	r1, [r7, #0]
 80040c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	db0a      	blt.n	80040e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	490c      	ldr	r1, [pc, #48]	; (8004108 <__NVIC_SetPriority+0x4c>)
 80040d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040da:	0112      	lsls	r2, r2, #4
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	440b      	add	r3, r1
 80040e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040e4:	e00a      	b.n	80040fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	4908      	ldr	r1, [pc, #32]	; (800410c <__NVIC_SetPriority+0x50>)
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	3b04      	subs	r3, #4
 80040f4:	0112      	lsls	r2, r2, #4
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	440b      	add	r3, r1
 80040fa:	761a      	strb	r2, [r3, #24]
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	e000e100 	.word	0xe000e100
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004110:	b480      	push	{r7}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f1c3 0307 	rsb	r3, r3, #7
 800412a:	2b04      	cmp	r3, #4
 800412c:	bf28      	it	cs
 800412e:	2304      	movcs	r3, #4
 8004130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3304      	adds	r3, #4
 8004136:	2b06      	cmp	r3, #6
 8004138:	d902      	bls.n	8004140 <NVIC_EncodePriority+0x30>
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	3b03      	subs	r3, #3
 800413e:	e000      	b.n	8004142 <NVIC_EncodePriority+0x32>
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004144:	f04f 32ff 	mov.w	r2, #4294967295
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43da      	mvns	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	401a      	ands	r2, r3
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004158:	f04f 31ff 	mov.w	r1, #4294967295
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	fa01 f303 	lsl.w	r3, r1, r3
 8004162:	43d9      	mvns	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004168:	4313      	orrs	r3, r2
         );
}
 800416a:	4618      	mov	r0, r3
 800416c:	3724      	adds	r7, #36	; 0x24
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004178:	f3bf 8f4f 	dsb	sy
}
 800417c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800417e:	4b06      	ldr	r3, [pc, #24]	; (8004198 <__NVIC_SystemReset+0x24>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004186:	4904      	ldr	r1, [pc, #16]	; (8004198 <__NVIC_SystemReset+0x24>)
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <__NVIC_SystemReset+0x28>)
 800418a:	4313      	orrs	r3, r2
 800418c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800418e:	f3bf 8f4f 	dsb	sy
}
 8004192:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004194:	bf00      	nop
 8004196:	e7fd      	b.n	8004194 <__NVIC_SystemReset+0x20>
 8004198:	e000ed00 	.word	0xe000ed00
 800419c:	05fa0004 	.word	0x05fa0004

080041a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff ff39 	bl	8004020 <__NVIC_SetPriorityGrouping>
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	4603      	mov	r3, r0
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041c8:	f7ff ff4e 	bl	8004068 <__NVIC_GetPriorityGrouping>
 80041cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	6978      	ldr	r0, [r7, #20]
 80041d4:	f7ff ff9c 	bl	8004110 <NVIC_EncodePriority>
 80041d8:	4602      	mov	r2, r0
 80041da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041de:	4611      	mov	r1, r2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff ff6b 	bl	80040bc <__NVIC_SetPriority>
}
 80041e6:	bf00      	nop
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	4603      	mov	r3, r0
 80041f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff41 	bl	8004084 <__NVIC_EnableIRQ>
}
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800420e:	f7ff ffb1 	bl	8004174 <__NVIC_SystemReset>

08004212 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004212:	b480      	push	{r7}
 8004214:	b085      	sub	sp, #20
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004224:	2b02      	cmp	r3, #2
 8004226:	d008      	beq.n	800423a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2204      	movs	r2, #4
 800422c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e020      	b.n	800427c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 020e 	bic.w	r2, r2, #14
 8004248:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0201 	bic.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004262:	2101      	movs	r1, #1
 8004264:	fa01 f202 	lsl.w	r2, r1, r2
 8004268:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800427a:	7bfb      	ldrb	r3, [r7, #15]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr
	...

08004288 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800429a:	2b02      	cmp	r3, #2
 800429c:	d005      	beq.n	80042aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2204      	movs	r2, #4
 80042a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	73fb      	strb	r3, [r7, #15]
 80042a8:	e051      	b.n	800434e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 020e 	bic.w	r2, r2, #14
 80042b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0201 	bic.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a22      	ldr	r2, [pc, #136]	; (8004358 <HAL_DMA_Abort_IT+0xd0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d029      	beq.n	8004328 <HAL_DMA_Abort_IT+0xa0>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a20      	ldr	r2, [pc, #128]	; (800435c <HAL_DMA_Abort_IT+0xd4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d022      	beq.n	8004324 <HAL_DMA_Abort_IT+0x9c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1f      	ldr	r2, [pc, #124]	; (8004360 <HAL_DMA_Abort_IT+0xd8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d01a      	beq.n	800431e <HAL_DMA_Abort_IT+0x96>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1d      	ldr	r2, [pc, #116]	; (8004364 <HAL_DMA_Abort_IT+0xdc>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d012      	beq.n	8004318 <HAL_DMA_Abort_IT+0x90>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <HAL_DMA_Abort_IT+0xe0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00a      	beq.n	8004312 <HAL_DMA_Abort_IT+0x8a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1a      	ldr	r2, [pc, #104]	; (800436c <HAL_DMA_Abort_IT+0xe4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d102      	bne.n	800430c <HAL_DMA_Abort_IT+0x84>
 8004306:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800430a:	e00e      	b.n	800432a <HAL_DMA_Abort_IT+0xa2>
 800430c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004310:	e00b      	b.n	800432a <HAL_DMA_Abort_IT+0xa2>
 8004312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004316:	e008      	b.n	800432a <HAL_DMA_Abort_IT+0xa2>
 8004318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800431c:	e005      	b.n	800432a <HAL_DMA_Abort_IT+0xa2>
 800431e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004322:	e002      	b.n	800432a <HAL_DMA_Abort_IT+0xa2>
 8004324:	2310      	movs	r3, #16
 8004326:	e000      	b.n	800432a <HAL_DMA_Abort_IT+0xa2>
 8004328:	2301      	movs	r3, #1
 800432a:	4a11      	ldr	r2, [pc, #68]	; (8004370 <HAL_DMA_Abort_IT+0xe8>)
 800432c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
    } 
  }
  return status;
 800434e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40020008 	.word	0x40020008
 800435c:	4002001c 	.word	0x4002001c
 8004360:	40020030 	.word	0x40020030
 8004364:	40020044 	.word	0x40020044
 8004368:	40020058 	.word	0x40020058
 800436c:	4002006c 	.word	0x4002006c
 8004370:	40020000 	.word	0x40020000

08004374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004374:	b480      	push	{r7}
 8004376:	b08b      	sub	sp, #44	; 0x2c
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800437e:	2300      	movs	r3, #0
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004382:	2300      	movs	r3, #0
 8004384:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004386:	e169      	b.n	800465c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004388:	2201      	movs	r2, #1
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	f040 8158 	bne.w	8004656 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4a9a      	ldr	r2, [pc, #616]	; (8004614 <HAL_GPIO_Init+0x2a0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d05e      	beq.n	800446e <HAL_GPIO_Init+0xfa>
 80043b0:	4a98      	ldr	r2, [pc, #608]	; (8004614 <HAL_GPIO_Init+0x2a0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d875      	bhi.n	80044a2 <HAL_GPIO_Init+0x12e>
 80043b6:	4a98      	ldr	r2, [pc, #608]	; (8004618 <HAL_GPIO_Init+0x2a4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d058      	beq.n	800446e <HAL_GPIO_Init+0xfa>
 80043bc:	4a96      	ldr	r2, [pc, #600]	; (8004618 <HAL_GPIO_Init+0x2a4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d86f      	bhi.n	80044a2 <HAL_GPIO_Init+0x12e>
 80043c2:	4a96      	ldr	r2, [pc, #600]	; (800461c <HAL_GPIO_Init+0x2a8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d052      	beq.n	800446e <HAL_GPIO_Init+0xfa>
 80043c8:	4a94      	ldr	r2, [pc, #592]	; (800461c <HAL_GPIO_Init+0x2a8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d869      	bhi.n	80044a2 <HAL_GPIO_Init+0x12e>
 80043ce:	4a94      	ldr	r2, [pc, #592]	; (8004620 <HAL_GPIO_Init+0x2ac>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d04c      	beq.n	800446e <HAL_GPIO_Init+0xfa>
 80043d4:	4a92      	ldr	r2, [pc, #584]	; (8004620 <HAL_GPIO_Init+0x2ac>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d863      	bhi.n	80044a2 <HAL_GPIO_Init+0x12e>
 80043da:	4a92      	ldr	r2, [pc, #584]	; (8004624 <HAL_GPIO_Init+0x2b0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d046      	beq.n	800446e <HAL_GPIO_Init+0xfa>
 80043e0:	4a90      	ldr	r2, [pc, #576]	; (8004624 <HAL_GPIO_Init+0x2b0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d85d      	bhi.n	80044a2 <HAL_GPIO_Init+0x12e>
 80043e6:	2b12      	cmp	r3, #18
 80043e8:	d82a      	bhi.n	8004440 <HAL_GPIO_Init+0xcc>
 80043ea:	2b12      	cmp	r3, #18
 80043ec:	d859      	bhi.n	80044a2 <HAL_GPIO_Init+0x12e>
 80043ee:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <HAL_GPIO_Init+0x80>)
 80043f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f4:	0800446f 	.word	0x0800446f
 80043f8:	08004449 	.word	0x08004449
 80043fc:	0800445b 	.word	0x0800445b
 8004400:	0800449d 	.word	0x0800449d
 8004404:	080044a3 	.word	0x080044a3
 8004408:	080044a3 	.word	0x080044a3
 800440c:	080044a3 	.word	0x080044a3
 8004410:	080044a3 	.word	0x080044a3
 8004414:	080044a3 	.word	0x080044a3
 8004418:	080044a3 	.word	0x080044a3
 800441c:	080044a3 	.word	0x080044a3
 8004420:	080044a3 	.word	0x080044a3
 8004424:	080044a3 	.word	0x080044a3
 8004428:	080044a3 	.word	0x080044a3
 800442c:	080044a3 	.word	0x080044a3
 8004430:	080044a3 	.word	0x080044a3
 8004434:	080044a3 	.word	0x080044a3
 8004438:	08004451 	.word	0x08004451
 800443c:	08004465 	.word	0x08004465
 8004440:	4a79      	ldr	r2, [pc, #484]	; (8004628 <HAL_GPIO_Init+0x2b4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d013      	beq.n	800446e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004446:	e02c      	b.n	80044a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	623b      	str	r3, [r7, #32]
          break;
 800444e:	e029      	b.n	80044a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	3304      	adds	r3, #4
 8004456:	623b      	str	r3, [r7, #32]
          break;
 8004458:	e024      	b.n	80044a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	3308      	adds	r3, #8
 8004460:	623b      	str	r3, [r7, #32]
          break;
 8004462:	e01f      	b.n	80044a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	330c      	adds	r3, #12
 800446a:	623b      	str	r3, [r7, #32]
          break;
 800446c:	e01a      	b.n	80044a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004476:	2304      	movs	r3, #4
 8004478:	623b      	str	r3, [r7, #32]
          break;
 800447a:	e013      	b.n	80044a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d105      	bne.n	8004490 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004484:	2308      	movs	r3, #8
 8004486:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	611a      	str	r2, [r3, #16]
          break;
 800448e:	e009      	b.n	80044a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004490:	2308      	movs	r3, #8
 8004492:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	615a      	str	r2, [r3, #20]
          break;
 800449a:	e003      	b.n	80044a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800449c:	2300      	movs	r3, #0
 800449e:	623b      	str	r3, [r7, #32]
          break;
 80044a0:	e000      	b.n	80044a4 <HAL_GPIO_Init+0x130>
          break;
 80044a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2bff      	cmp	r3, #255	; 0xff
 80044a8:	d801      	bhi.n	80044ae <HAL_GPIO_Init+0x13a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	e001      	b.n	80044b2 <HAL_GPIO_Init+0x13e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3304      	adds	r3, #4
 80044b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2bff      	cmp	r3, #255	; 0xff
 80044b8:	d802      	bhi.n	80044c0 <HAL_GPIO_Init+0x14c>
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	e002      	b.n	80044c6 <HAL_GPIO_Init+0x152>
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	3b08      	subs	r3, #8
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	210f      	movs	r1, #15
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	fa01 f303 	lsl.w	r3, r1, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	401a      	ands	r2, r3
 80044d8:	6a39      	ldr	r1, [r7, #32]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	fa01 f303 	lsl.w	r3, r1, r3
 80044e0:	431a      	orrs	r2, r3
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 80b1 	beq.w	8004656 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80044f4:	4b4d      	ldr	r3, [pc, #308]	; (800462c <HAL_GPIO_Init+0x2b8>)
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	4a4c      	ldr	r2, [pc, #304]	; (800462c <HAL_GPIO_Init+0x2b8>)
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	6193      	str	r3, [r2, #24]
 8004500:	4b4a      	ldr	r3, [pc, #296]	; (800462c <HAL_GPIO_Init+0x2b8>)
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800450c:	4a48      	ldr	r2, [pc, #288]	; (8004630 <HAL_GPIO_Init+0x2bc>)
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	089b      	lsrs	r3, r3, #2
 8004512:	3302      	adds	r3, #2
 8004514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004518:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	220f      	movs	r2, #15
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4013      	ands	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a40      	ldr	r2, [pc, #256]	; (8004634 <HAL_GPIO_Init+0x2c0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d013      	beq.n	8004560 <HAL_GPIO_Init+0x1ec>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a3f      	ldr	r2, [pc, #252]	; (8004638 <HAL_GPIO_Init+0x2c4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00d      	beq.n	800455c <HAL_GPIO_Init+0x1e8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a3e      	ldr	r2, [pc, #248]	; (800463c <HAL_GPIO_Init+0x2c8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d007      	beq.n	8004558 <HAL_GPIO_Init+0x1e4>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a3d      	ldr	r2, [pc, #244]	; (8004640 <HAL_GPIO_Init+0x2cc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d101      	bne.n	8004554 <HAL_GPIO_Init+0x1e0>
 8004550:	2303      	movs	r3, #3
 8004552:	e006      	b.n	8004562 <HAL_GPIO_Init+0x1ee>
 8004554:	2304      	movs	r3, #4
 8004556:	e004      	b.n	8004562 <HAL_GPIO_Init+0x1ee>
 8004558:	2302      	movs	r3, #2
 800455a:	e002      	b.n	8004562 <HAL_GPIO_Init+0x1ee>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <HAL_GPIO_Init+0x1ee>
 8004560:	2300      	movs	r3, #0
 8004562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004564:	f002 0203 	and.w	r2, r2, #3
 8004568:	0092      	lsls	r2, r2, #2
 800456a:	4093      	lsls	r3, r2
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004572:	492f      	ldr	r1, [pc, #188]	; (8004630 <HAL_GPIO_Init+0x2bc>)
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	089b      	lsrs	r3, r3, #2
 8004578:	3302      	adds	r3, #2
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d006      	beq.n	800459a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800458c:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <HAL_GPIO_Init+0x2d0>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	492c      	ldr	r1, [pc, #176]	; (8004644 <HAL_GPIO_Init+0x2d0>)
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]
 8004598:	e006      	b.n	80045a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800459a:	4b2a      	ldr	r3, [pc, #168]	; (8004644 <HAL_GPIO_Init+0x2d0>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	4928      	ldr	r1, [pc, #160]	; (8004644 <HAL_GPIO_Init+0x2d0>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d006      	beq.n	80045c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80045b4:	4b23      	ldr	r3, [pc, #140]	; (8004644 <HAL_GPIO_Init+0x2d0>)
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	4922      	ldr	r1, [pc, #136]	; (8004644 <HAL_GPIO_Init+0x2d0>)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	4313      	orrs	r3, r2
 80045be:	604b      	str	r3, [r1, #4]
 80045c0:	e006      	b.n	80045d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045c2:	4b20      	ldr	r3, [pc, #128]	; (8004644 <HAL_GPIO_Init+0x2d0>)
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	43db      	mvns	r3, r3
 80045ca:	491e      	ldr	r1, [pc, #120]	; (8004644 <HAL_GPIO_Init+0x2d0>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d006      	beq.n	80045ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80045dc:	4b19      	ldr	r3, [pc, #100]	; (8004644 <HAL_GPIO_Init+0x2d0>)
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	4918      	ldr	r1, [pc, #96]	; (8004644 <HAL_GPIO_Init+0x2d0>)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	608b      	str	r3, [r1, #8]
 80045e8:	e006      	b.n	80045f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80045ea:	4b16      	ldr	r3, [pc, #88]	; (8004644 <HAL_GPIO_Init+0x2d0>)
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	4914      	ldr	r1, [pc, #80]	; (8004644 <HAL_GPIO_Init+0x2d0>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d021      	beq.n	8004648 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004604:	4b0f      	ldr	r3, [pc, #60]	; (8004644 <HAL_GPIO_Init+0x2d0>)
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	490e      	ldr	r1, [pc, #56]	; (8004644 <HAL_GPIO_Init+0x2d0>)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	4313      	orrs	r3, r2
 800460e:	60cb      	str	r3, [r1, #12]
 8004610:	e021      	b.n	8004656 <HAL_GPIO_Init+0x2e2>
 8004612:	bf00      	nop
 8004614:	10320000 	.word	0x10320000
 8004618:	10310000 	.word	0x10310000
 800461c:	10220000 	.word	0x10220000
 8004620:	10210000 	.word	0x10210000
 8004624:	10120000 	.word	0x10120000
 8004628:	10110000 	.word	0x10110000
 800462c:	40021000 	.word	0x40021000
 8004630:	40010000 	.word	0x40010000
 8004634:	40010800 	.word	0x40010800
 8004638:	40010c00 	.word	0x40010c00
 800463c:	40011000 	.word	0x40011000
 8004640:	40011400 	.word	0x40011400
 8004644:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_GPIO_Init+0x304>)
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	43db      	mvns	r3, r3
 8004650:	4909      	ldr	r1, [pc, #36]	; (8004678 <HAL_GPIO_Init+0x304>)
 8004652:	4013      	ands	r3, r2
 8004654:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	3301      	adds	r3, #1
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	fa22 f303 	lsr.w	r3, r2, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	f47f ae8e 	bne.w	8004388 <HAL_GPIO_Init+0x14>
  }
}
 800466c:	bf00      	nop
 800466e:	bf00      	nop
 8004670:	372c      	adds	r7, #44	; 0x2c
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	40010400 	.word	0x40010400

0800467c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	887b      	ldrh	r3, [r7, #2]
 800468e:	4013      	ands	r3, r2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
 8004698:	e001      	b.n	800469e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800469a:	2300      	movs	r3, #0
 800469c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800469e:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	460b      	mov	r3, r1
 80046b4:	807b      	strh	r3, [r7, #2]
 80046b6:	4613      	mov	r3, r2
 80046b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046ba:	787b      	ldrb	r3, [r7, #1]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046c0:	887a      	ldrh	r2, [r7, #2]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80046c6:	e003      	b.n	80046d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046c8:	887b      	ldrh	r3, [r7, #2]
 80046ca:	041a      	lsls	r2, r3, #16
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	611a      	str	r2, [r3, #16]
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr
	...

080046dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e12b      	b.n	8004946 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fe f8d2 	bl	80028ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2224      	movs	r2, #36	; 0x24
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800472e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800473e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004740:	f000 fff6 	bl	8005730 <HAL_RCC_GetPCLK1Freq>
 8004744:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	4a81      	ldr	r2, [pc, #516]	; (8004950 <HAL_I2C_Init+0x274>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d807      	bhi.n	8004760 <HAL_I2C_Init+0x84>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a80      	ldr	r2, [pc, #512]	; (8004954 <HAL_I2C_Init+0x278>)
 8004754:	4293      	cmp	r3, r2
 8004756:	bf94      	ite	ls
 8004758:	2301      	movls	r3, #1
 800475a:	2300      	movhi	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	e006      	b.n	800476e <HAL_I2C_Init+0x92>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a7d      	ldr	r2, [pc, #500]	; (8004958 <HAL_I2C_Init+0x27c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	bf94      	ite	ls
 8004768:	2301      	movls	r3, #1
 800476a:	2300      	movhi	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e0e7      	b.n	8004946 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a78      	ldr	r2, [pc, #480]	; (800495c <HAL_I2C_Init+0x280>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	0c9b      	lsrs	r3, r3, #18
 8004780:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a6a      	ldr	r2, [pc, #424]	; (8004950 <HAL_I2C_Init+0x274>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d802      	bhi.n	80047b0 <HAL_I2C_Init+0xd4>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	3301      	adds	r3, #1
 80047ae:	e009      	b.n	80047c4 <HAL_I2C_Init+0xe8>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	4a69      	ldr	r2, [pc, #420]	; (8004960 <HAL_I2C_Init+0x284>)
 80047bc:	fba2 2303 	umull	r2, r3, r2, r3
 80047c0:	099b      	lsrs	r3, r3, #6
 80047c2:	3301      	adds	r3, #1
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6812      	ldr	r2, [r2, #0]
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	495c      	ldr	r1, [pc, #368]	; (8004950 <HAL_I2C_Init+0x274>)
 80047e0:	428b      	cmp	r3, r1
 80047e2:	d819      	bhi.n	8004818 <HAL_I2C_Init+0x13c>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1e59      	subs	r1, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80047f2:	1c59      	adds	r1, r3, #1
 80047f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047f8:	400b      	ands	r3, r1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_I2C_Init+0x138>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1e59      	subs	r1, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	fbb1 f3f3 	udiv	r3, r1, r3
 800480c:	3301      	adds	r3, #1
 800480e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004812:	e051      	b.n	80048b8 <HAL_I2C_Init+0x1dc>
 8004814:	2304      	movs	r3, #4
 8004816:	e04f      	b.n	80048b8 <HAL_I2C_Init+0x1dc>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d111      	bne.n	8004844 <HAL_I2C_Init+0x168>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	1e58      	subs	r0, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6859      	ldr	r1, [r3, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	440b      	add	r3, r1
 800482e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004832:	3301      	adds	r3, #1
 8004834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf0c      	ite	eq
 800483c:	2301      	moveq	r3, #1
 800483e:	2300      	movne	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	e012      	b.n	800486a <HAL_I2C_Init+0x18e>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1e58      	subs	r0, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6859      	ldr	r1, [r3, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	0099      	lsls	r1, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	fbb0 f3f3 	udiv	r3, r0, r3
 800485a:	3301      	adds	r3, #1
 800485c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004860:	2b00      	cmp	r3, #0
 8004862:	bf0c      	ite	eq
 8004864:	2301      	moveq	r3, #1
 8004866:	2300      	movne	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_I2C_Init+0x196>
 800486e:	2301      	movs	r3, #1
 8004870:	e022      	b.n	80048b8 <HAL_I2C_Init+0x1dc>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10e      	bne.n	8004898 <HAL_I2C_Init+0x1bc>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1e58      	subs	r0, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	460b      	mov	r3, r1
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	440b      	add	r3, r1
 8004888:	fbb0 f3f3 	udiv	r3, r0, r3
 800488c:	3301      	adds	r3, #1
 800488e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004896:	e00f      	b.n	80048b8 <HAL_I2C_Init+0x1dc>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1e58      	subs	r0, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6859      	ldr	r1, [r3, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	0099      	lsls	r1, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ae:	3301      	adds	r3, #1
 80048b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	6809      	ldr	r1, [r1, #0]
 80048bc:	4313      	orrs	r3, r2
 80048be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69da      	ldr	r2, [r3, #28]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6911      	ldr	r1, [r2, #16]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68d2      	ldr	r2, [r2, #12]
 80048f2:	4311      	orrs	r1, r2
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	000186a0 	.word	0x000186a0
 8004954:	001e847f 	.word	0x001e847f
 8004958:	003d08ff 	.word	0x003d08ff
 800495c:	431bde83 	.word	0x431bde83
 8004960:	10624dd3 	.word	0x10624dd3

08004964 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	607a      	str	r2, [r7, #4]
 800496e:	461a      	mov	r2, r3
 8004970:	460b      	mov	r3, r1
 8004972:	817b      	strh	r3, [r7, #10]
 8004974:	4613      	mov	r3, r2
 8004976:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004978:	f7ff fb24 	bl	8003fc4 <HAL_GetTick>
 800497c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b20      	cmp	r3, #32
 8004988:	f040 80e0 	bne.w	8004b4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	2319      	movs	r3, #25
 8004992:	2201      	movs	r2, #1
 8004994:	4970      	ldr	r1, [pc, #448]	; (8004b58 <HAL_I2C_Master_Transmit+0x1f4>)
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f964 	bl	8004c64 <I2C_WaitOnFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80049a2:	2302      	movs	r3, #2
 80049a4:	e0d3      	b.n	8004b4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_I2C_Master_Transmit+0x50>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e0cc      	b.n	8004b4e <HAL_I2C_Master_Transmit+0x1ea>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d007      	beq.n	80049da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0201 	orr.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2221      	movs	r2, #33	; 0x21
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2210      	movs	r2, #16
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	893a      	ldrh	r2, [r7, #8]
 8004a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4a50      	ldr	r2, [pc, #320]	; (8004b5c <HAL_I2C_Master_Transmit+0x1f8>)
 8004a1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a1c:	8979      	ldrh	r1, [r7, #10]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	6a3a      	ldr	r2, [r7, #32]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f89c 	bl	8004b60 <I2C_MasterRequestWrite>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e08d      	b.n	8004b4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a32:	2300      	movs	r3, #0
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a48:	e066      	b.n	8004b18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	6a39      	ldr	r1, [r7, #32]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f9de 	bl	8004e10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00d      	beq.n	8004a76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d107      	bne.n	8004a72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e06b      	b.n	8004b4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	781a      	ldrb	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d11b      	bne.n	8004aec <HAL_I2C_Master_Transmit+0x188>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d017      	beq.n	8004aec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	781a      	ldrb	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	6a39      	ldr	r1, [r7, #32]
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 f9ce 	bl	8004e92 <I2C_WaitOnBTFFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00d      	beq.n	8004b18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d107      	bne.n	8004b14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e01a      	b.n	8004b4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d194      	bne.n	8004a4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e000      	b.n	8004b4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b4c:	2302      	movs	r3, #2
  }
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	00100002 	.word	0x00100002
 8004b5c:	ffff0000 	.word	0xffff0000

08004b60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	607a      	str	r2, [r7, #4]
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d006      	beq.n	8004b8a <I2C_MasterRequestWrite+0x2a>
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d003      	beq.n	8004b8a <I2C_MasterRequestWrite+0x2a>
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b88:	d108      	bne.n	8004b9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	e00b      	b.n	8004bb4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	2b12      	cmp	r3, #18
 8004ba2:	d107      	bne.n	8004bb4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f84f 	bl	8004c64 <I2C_WaitOnFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00d      	beq.n	8004be8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bda:	d103      	bne.n	8004be4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e035      	b.n	8004c54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bf0:	d108      	bne.n	8004c04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bf2:	897b      	ldrh	r3, [r7, #10]
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c00:	611a      	str	r2, [r3, #16]
 8004c02:	e01b      	b.n	8004c3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c04:	897b      	ldrh	r3, [r7, #10]
 8004c06:	11db      	asrs	r3, r3, #7
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	f003 0306 	and.w	r3, r3, #6
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	f063 030f 	orn	r3, r3, #15
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	490e      	ldr	r1, [pc, #56]	; (8004c5c <I2C_MasterRequestWrite+0xfc>)
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f875 	bl	8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e010      	b.n	8004c54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c32:	897b      	ldrh	r3, [r7, #10]
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	4907      	ldr	r1, [pc, #28]	; (8004c60 <I2C_MasterRequestWrite+0x100>)
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 f865 	bl	8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	00010008 	.word	0x00010008
 8004c60:	00010002 	.word	0x00010002

08004c64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	603b      	str	r3, [r7, #0]
 8004c70:	4613      	mov	r3, r2
 8004c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c74:	e025      	b.n	8004cc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7c:	d021      	beq.n	8004cc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7e:	f7ff f9a1 	bl	8003fc4 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d302      	bcc.n	8004c94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d116      	bne.n	8004cc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f043 0220 	orr.w	r2, r3, #32
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e023      	b.n	8004d0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d10d      	bne.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	43da      	mvns	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bf0c      	ite	eq
 8004cde:	2301      	moveq	r3, #1
 8004ce0:	2300      	movne	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	e00c      	b.n	8004d02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	43da      	mvns	r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bf0c      	ite	eq
 8004cfa:	2301      	moveq	r3, #1
 8004cfc:	2300      	movne	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d0b6      	beq.n	8004c76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	607a      	str	r2, [r7, #4]
 8004d1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d20:	e051      	b.n	8004dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d30:	d123      	bne.n	8004d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f043 0204 	orr.w	r2, r3, #4
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e046      	b.n	8004e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d80:	d021      	beq.n	8004dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d82:	f7ff f91f 	bl	8003fc4 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d302      	bcc.n	8004d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d116      	bne.n	8004dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f043 0220 	orr.w	r2, r3, #32
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e020      	b.n	8004e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d10c      	bne.n	8004dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	43da      	mvns	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bf14      	ite	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	2300      	moveq	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	e00b      	b.n	8004e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	43da      	mvns	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4013      	ands	r3, r2
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d18d      	bne.n	8004d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e1c:	e02d      	b.n	8004e7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f878 	bl	8004f14 <I2C_IsAcknowledgeFailed>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e02d      	b.n	8004e8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e34:	d021      	beq.n	8004e7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e36:	f7ff f8c5 	bl	8003fc4 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d302      	bcc.n	8004e4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d116      	bne.n	8004e7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f043 0220 	orr.w	r2, r3, #32
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e007      	b.n	8004e8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e84:	2b80      	cmp	r3, #128	; 0x80
 8004e86:	d1ca      	bne.n	8004e1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e9e:	e02d      	b.n	8004efc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 f837 	bl	8004f14 <I2C_IsAcknowledgeFailed>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e02d      	b.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb6:	d021      	beq.n	8004efc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb8:	f7ff f884 	bl	8003fc4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d302      	bcc.n	8004ece <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d116      	bne.n	8004efc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	f043 0220 	orr.w	r2, r3, #32
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e007      	b.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d1ca      	bne.n	8004ea0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2a:	d11b      	bne.n	8004f64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	f043 0204 	orr.w	r2, r3, #4
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004f74:	4b03      	ldr	r3, [pc, #12]	; (8004f84 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004f76:	2201      	movs	r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
}
 8004f7a:	bf00      	nop
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	420e0020 	.word	0x420e0020

08004f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e272      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 8087 	beq.w	80050b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fa8:	4b92      	ldr	r3, [pc, #584]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f003 030c 	and.w	r3, r3, #12
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d00c      	beq.n	8004fce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fb4:	4b8f      	ldr	r3, [pc, #572]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 030c 	and.w	r3, r3, #12
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d112      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x5e>
 8004fc0:	4b8c      	ldr	r3, [pc, #560]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fcc:	d10b      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fce:	4b89      	ldr	r3, [pc, #548]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d06c      	beq.n	80050b4 <HAL_RCC_OscConfig+0x12c>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d168      	bne.n	80050b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e24c      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fee:	d106      	bne.n	8004ffe <HAL_RCC_OscConfig+0x76>
 8004ff0:	4b80      	ldr	r3, [pc, #512]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a7f      	ldr	r2, [pc, #508]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8004ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	e02e      	b.n	800505c <HAL_RCC_OscConfig+0xd4>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10c      	bne.n	8005020 <HAL_RCC_OscConfig+0x98>
 8005006:	4b7b      	ldr	r3, [pc, #492]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a7a      	ldr	r2, [pc, #488]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 800500c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4b78      	ldr	r3, [pc, #480]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a77      	ldr	r2, [pc, #476]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8005018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e01d      	b.n	800505c <HAL_RCC_OscConfig+0xd4>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005028:	d10c      	bne.n	8005044 <HAL_RCC_OscConfig+0xbc>
 800502a:	4b72      	ldr	r3, [pc, #456]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a71      	ldr	r2, [pc, #452]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8005030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4b6f      	ldr	r3, [pc, #444]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a6e      	ldr	r2, [pc, #440]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 800503c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	e00b      	b.n	800505c <HAL_RCC_OscConfig+0xd4>
 8005044:	4b6b      	ldr	r3, [pc, #428]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a6a      	ldr	r2, [pc, #424]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 800504a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	4b68      	ldr	r3, [pc, #416]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a67      	ldr	r2, [pc, #412]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8005056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800505a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d013      	beq.n	800508c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005064:	f7fe ffae 	bl	8003fc4 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800506c:	f7fe ffaa 	bl	8003fc4 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b64      	cmp	r3, #100	; 0x64
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e200      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507e:	4b5d      	ldr	r3, [pc, #372]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0xe4>
 800508a:	e014      	b.n	80050b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508c:	f7fe ff9a 	bl	8003fc4 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005094:	f7fe ff96 	bl	8003fc4 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b64      	cmp	r3, #100	; 0x64
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e1ec      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050a6:	4b53      	ldr	r3, [pc, #332]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0x10c>
 80050b2:	e000      	b.n	80050b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d063      	beq.n	800518a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050c2:	4b4c      	ldr	r3, [pc, #304]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00b      	beq.n	80050e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050ce:	4b49      	ldr	r3, [pc, #292]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f003 030c 	and.w	r3, r3, #12
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d11c      	bne.n	8005114 <HAL_RCC_OscConfig+0x18c>
 80050da:	4b46      	ldr	r3, [pc, #280]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d116      	bne.n	8005114 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e6:	4b43      	ldr	r3, [pc, #268]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_RCC_OscConfig+0x176>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d001      	beq.n	80050fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e1c0      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050fe:	4b3d      	ldr	r3, [pc, #244]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4939      	ldr	r1, [pc, #228]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 800510e:	4313      	orrs	r3, r2
 8005110:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005112:	e03a      	b.n	800518a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d020      	beq.n	800515e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800511c:	4b36      	ldr	r3, [pc, #216]	; (80051f8 <HAL_RCC_OscConfig+0x270>)
 800511e:	2201      	movs	r2, #1
 8005120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005122:	f7fe ff4f 	bl	8003fc4 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800512a:	f7fe ff4b 	bl	8003fc4 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e1a1      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800513c:	4b2d      	ldr	r3, [pc, #180]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005148:	4b2a      	ldr	r3, [pc, #168]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	4927      	ldr	r1, [pc, #156]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8005158:	4313      	orrs	r3, r2
 800515a:	600b      	str	r3, [r1, #0]
 800515c:	e015      	b.n	800518a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800515e:	4b26      	ldr	r3, [pc, #152]	; (80051f8 <HAL_RCC_OscConfig+0x270>)
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005164:	f7fe ff2e 	bl	8003fc4 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800516c:	f7fe ff2a 	bl	8003fc4 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e180      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800517e:	4b1d      	ldr	r3, [pc, #116]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d03a      	beq.n	800520c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d019      	beq.n	80051d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800519e:	4b17      	ldr	r3, [pc, #92]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a4:	f7fe ff0e 	bl	8003fc4 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ac:	f7fe ff0a 	bl	8003fc4 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e160      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051be:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <HAL_RCC_OscConfig+0x26c>)
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051ca:	2001      	movs	r0, #1
 80051cc:	f000 fb08 	bl	80057e0 <RCC_Delay>
 80051d0:	e01c      	b.n	800520c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051d2:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <HAL_RCC_OscConfig+0x274>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d8:	f7fe fef4 	bl	8003fc4 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051de:	e00f      	b.n	8005200 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051e0:	f7fe fef0 	bl	8003fc4 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d908      	bls.n	8005200 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e146      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>
 80051f2:	bf00      	nop
 80051f4:	40021000 	.word	0x40021000
 80051f8:	42420000 	.word	0x42420000
 80051fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005200:	4b92      	ldr	r3, [pc, #584]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e9      	bne.n	80051e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 80a6 	beq.w	8005366 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800521a:	2300      	movs	r3, #0
 800521c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800521e:	4b8b      	ldr	r3, [pc, #556]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10d      	bne.n	8005246 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800522a:	4b88      	ldr	r3, [pc, #544]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	4a87      	ldr	r2, [pc, #540]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 8005230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005234:	61d3      	str	r3, [r2, #28]
 8005236:	4b85      	ldr	r3, [pc, #532]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800523e:	60bb      	str	r3, [r7, #8]
 8005240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005242:	2301      	movs	r3, #1
 8005244:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005246:	4b82      	ldr	r3, [pc, #520]	; (8005450 <HAL_RCC_OscConfig+0x4c8>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524e:	2b00      	cmp	r3, #0
 8005250:	d118      	bne.n	8005284 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005252:	4b7f      	ldr	r3, [pc, #508]	; (8005450 <HAL_RCC_OscConfig+0x4c8>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a7e      	ldr	r2, [pc, #504]	; (8005450 <HAL_RCC_OscConfig+0x4c8>)
 8005258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800525c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800525e:	f7fe feb1 	bl	8003fc4 <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005264:	e008      	b.n	8005278 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005266:	f7fe fead 	bl	8003fc4 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b64      	cmp	r3, #100	; 0x64
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e103      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005278:	4b75      	ldr	r3, [pc, #468]	; (8005450 <HAL_RCC_OscConfig+0x4c8>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0f0      	beq.n	8005266 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d106      	bne.n	800529a <HAL_RCC_OscConfig+0x312>
 800528c:	4b6f      	ldr	r3, [pc, #444]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	4a6e      	ldr	r2, [pc, #440]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 8005292:	f043 0301 	orr.w	r3, r3, #1
 8005296:	6213      	str	r3, [r2, #32]
 8005298:	e02d      	b.n	80052f6 <HAL_RCC_OscConfig+0x36e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10c      	bne.n	80052bc <HAL_RCC_OscConfig+0x334>
 80052a2:	4b6a      	ldr	r3, [pc, #424]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	4a69      	ldr	r2, [pc, #420]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	6213      	str	r3, [r2, #32]
 80052ae:	4b67      	ldr	r3, [pc, #412]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	4a66      	ldr	r2, [pc, #408]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80052b4:	f023 0304 	bic.w	r3, r3, #4
 80052b8:	6213      	str	r3, [r2, #32]
 80052ba:	e01c      	b.n	80052f6 <HAL_RCC_OscConfig+0x36e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	2b05      	cmp	r3, #5
 80052c2:	d10c      	bne.n	80052de <HAL_RCC_OscConfig+0x356>
 80052c4:	4b61      	ldr	r3, [pc, #388]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	4a60      	ldr	r2, [pc, #384]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80052ca:	f043 0304 	orr.w	r3, r3, #4
 80052ce:	6213      	str	r3, [r2, #32]
 80052d0:	4b5e      	ldr	r3, [pc, #376]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	4a5d      	ldr	r2, [pc, #372]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	6213      	str	r3, [r2, #32]
 80052dc:	e00b      	b.n	80052f6 <HAL_RCC_OscConfig+0x36e>
 80052de:	4b5b      	ldr	r3, [pc, #364]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	4a5a      	ldr	r2, [pc, #360]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80052e4:	f023 0301 	bic.w	r3, r3, #1
 80052e8:	6213      	str	r3, [r2, #32]
 80052ea:	4b58      	ldr	r3, [pc, #352]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	4a57      	ldr	r2, [pc, #348]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80052f0:	f023 0304 	bic.w	r3, r3, #4
 80052f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d015      	beq.n	800532a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052fe:	f7fe fe61 	bl	8003fc4 <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005304:	e00a      	b.n	800531c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005306:	f7fe fe5d 	bl	8003fc4 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	f241 3288 	movw	r2, #5000	; 0x1388
 8005314:	4293      	cmp	r3, r2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e0b1      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800531c:	4b4b      	ldr	r3, [pc, #300]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0ee      	beq.n	8005306 <HAL_RCC_OscConfig+0x37e>
 8005328:	e014      	b.n	8005354 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800532a:	f7fe fe4b 	bl	8003fc4 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005330:	e00a      	b.n	8005348 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005332:	f7fe fe47 	bl	8003fc4 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005340:	4293      	cmp	r3, r2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e09b      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005348:	4b40      	ldr	r3, [pc, #256]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1ee      	bne.n	8005332 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005354:	7dfb      	ldrb	r3, [r7, #23]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d105      	bne.n	8005366 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800535a:	4b3c      	ldr	r3, [pc, #240]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	4a3b      	ldr	r2, [pc, #236]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 8005360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005364:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 8087 	beq.w	800547e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005370:	4b36      	ldr	r3, [pc, #216]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f003 030c 	and.w	r3, r3, #12
 8005378:	2b08      	cmp	r3, #8
 800537a:	d061      	beq.n	8005440 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	2b02      	cmp	r3, #2
 8005382:	d146      	bne.n	8005412 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005384:	4b33      	ldr	r3, [pc, #204]	; (8005454 <HAL_RCC_OscConfig+0x4cc>)
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538a:	f7fe fe1b 	bl	8003fc4 <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005392:	f7fe fe17 	bl	8003fc4 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e06d      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053a4:	4b29      	ldr	r3, [pc, #164]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1f0      	bne.n	8005392 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b8:	d108      	bne.n	80053cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053ba:	4b24      	ldr	r3, [pc, #144]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	4921      	ldr	r1, [pc, #132]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053cc:	4b1f      	ldr	r3, [pc, #124]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a19      	ldr	r1, [r3, #32]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	430b      	orrs	r3, r1
 80053de:	491b      	ldr	r1, [pc, #108]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053e4:	4b1b      	ldr	r3, [pc, #108]	; (8005454 <HAL_RCC_OscConfig+0x4cc>)
 80053e6:	2201      	movs	r2, #1
 80053e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ea:	f7fe fdeb 	bl	8003fc4 <HAL_GetTick>
 80053ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053f0:	e008      	b.n	8005404 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f2:	f7fe fde7 	bl	8003fc4 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e03d      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005404:	4b11      	ldr	r3, [pc, #68]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0f0      	beq.n	80053f2 <HAL_RCC_OscConfig+0x46a>
 8005410:	e035      	b.n	800547e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005412:	4b10      	ldr	r3, [pc, #64]	; (8005454 <HAL_RCC_OscConfig+0x4cc>)
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005418:	f7fe fdd4 	bl	8003fc4 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005420:	f7fe fdd0 	bl	8003fc4 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e026      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005432:	4b06      	ldr	r3, [pc, #24]	; (800544c <HAL_RCC_OscConfig+0x4c4>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f0      	bne.n	8005420 <HAL_RCC_OscConfig+0x498>
 800543e:	e01e      	b.n	800547e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d107      	bne.n	8005458 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e019      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>
 800544c:	40021000 	.word	0x40021000
 8005450:	40007000 	.word	0x40007000
 8005454:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005458:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <HAL_RCC_OscConfig+0x500>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	429a      	cmp	r2, r3
 800546a:	d106      	bne.n	800547a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005476:	429a      	cmp	r2, r3
 8005478:	d001      	beq.n	800547e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40021000 	.word	0x40021000

0800548c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e0d0      	b.n	8005642 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054a0:	4b6a      	ldr	r3, [pc, #424]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d910      	bls.n	80054d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b67      	ldr	r3, [pc, #412]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f023 0207 	bic.w	r2, r3, #7
 80054b6:	4965      	ldr	r1, [pc, #404]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054be:	4b63      	ldr	r3, [pc, #396]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d001      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0b8      	b.n	8005642 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d020      	beq.n	800551e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054e8:	4b59      	ldr	r3, [pc, #356]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	4a58      	ldr	r2, [pc, #352]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 80054ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005500:	4b53      	ldr	r3, [pc, #332]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4a52      	ldr	r2, [pc, #328]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 8005506:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800550a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800550c:	4b50      	ldr	r3, [pc, #320]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	494d      	ldr	r1, [pc, #308]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 800551a:	4313      	orrs	r3, r2
 800551c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d040      	beq.n	80055ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d107      	bne.n	8005542 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005532:	4b47      	ldr	r3, [pc, #284]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d115      	bne.n	800556a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e07f      	b.n	8005642 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d107      	bne.n	800555a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800554a:	4b41      	ldr	r3, [pc, #260]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d109      	bne.n	800556a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e073      	b.n	8005642 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555a:	4b3d      	ldr	r3, [pc, #244]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e06b      	b.n	8005642 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800556a:	4b39      	ldr	r3, [pc, #228]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f023 0203 	bic.w	r2, r3, #3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	4936      	ldr	r1, [pc, #216]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 8005578:	4313      	orrs	r3, r2
 800557a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800557c:	f7fe fd22 	bl	8003fc4 <HAL_GetTick>
 8005580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005582:	e00a      	b.n	800559a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005584:	f7fe fd1e 	bl	8003fc4 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005592:	4293      	cmp	r3, r2
 8005594:	d901      	bls.n	800559a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e053      	b.n	8005642 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800559a:	4b2d      	ldr	r3, [pc, #180]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f003 020c 	and.w	r2, r3, #12
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d1eb      	bne.n	8005584 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055ac:	4b27      	ldr	r3, [pc, #156]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d210      	bcs.n	80055dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ba:	4b24      	ldr	r3, [pc, #144]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f023 0207 	bic.w	r2, r3, #7
 80055c2:	4922      	ldr	r1, [pc, #136]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ca:	4b20      	ldr	r3, [pc, #128]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d001      	beq.n	80055dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e032      	b.n	8005642 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055e8:	4b19      	ldr	r3, [pc, #100]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	4916      	ldr	r1, [pc, #88]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d009      	beq.n	800561a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005606:	4b12      	ldr	r3, [pc, #72]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	490e      	ldr	r1, [pc, #56]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 8005616:	4313      	orrs	r3, r2
 8005618:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800561a:	f000 f821 	bl	8005660 <HAL_RCC_GetSysClockFreq>
 800561e:	4602      	mov	r2, r0
 8005620:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	091b      	lsrs	r3, r3, #4
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	490a      	ldr	r1, [pc, #40]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 800562c:	5ccb      	ldrb	r3, [r1, r3]
 800562e:	fa22 f303 	lsr.w	r3, r2, r3
 8005632:	4a09      	ldr	r2, [pc, #36]	; (8005658 <HAL_RCC_ClockConfig+0x1cc>)
 8005634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <HAL_RCC_ClockConfig+0x1d0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f7fd fa5c 	bl	8002af8 <HAL_InitTick>

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40022000 	.word	0x40022000
 8005650:	40021000 	.word	0x40021000
 8005654:	0800e86c 	.word	0x0800e86c
 8005658:	20000018 	.word	0x20000018
 800565c:	20000028 	.word	0x20000028

08005660 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005660:	b490      	push	{r4, r7}
 8005662:	b08a      	sub	sp, #40	; 0x28
 8005664:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005666:	4b29      	ldr	r3, [pc, #164]	; (800570c <HAL_RCC_GetSysClockFreq+0xac>)
 8005668:	1d3c      	adds	r4, r7, #4
 800566a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800566c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005670:	f240 2301 	movw	r3, #513	; 0x201
 8005674:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	2300      	movs	r3, #0
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	2300      	movs	r3, #0
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800568a:	4b21      	ldr	r3, [pc, #132]	; (8005710 <HAL_RCC_GetSysClockFreq+0xb0>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f003 030c 	and.w	r3, r3, #12
 8005696:	2b04      	cmp	r3, #4
 8005698:	d002      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0x40>
 800569a:	2b08      	cmp	r3, #8
 800569c:	d003      	beq.n	80056a6 <HAL_RCC_GetSysClockFreq+0x46>
 800569e:	e02b      	b.n	80056f8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056a0:	4b1c      	ldr	r3, [pc, #112]	; (8005714 <HAL_RCC_GetSysClockFreq+0xb4>)
 80056a2:	623b      	str	r3, [r7, #32]
      break;
 80056a4:	e02b      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	0c9b      	lsrs	r3, r3, #18
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	3328      	adds	r3, #40	; 0x28
 80056b0:	443b      	add	r3, r7
 80056b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80056b6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d012      	beq.n	80056e8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056c2:	4b13      	ldr	r3, [pc, #76]	; (8005710 <HAL_RCC_GetSysClockFreq+0xb0>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	0c5b      	lsrs	r3, r3, #17
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	3328      	adds	r3, #40	; 0x28
 80056ce:	443b      	add	r3, r7
 80056d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80056d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	4a0e      	ldr	r2, [pc, #56]	; (8005714 <HAL_RCC_GetSysClockFreq+0xb4>)
 80056da:	fb03 f202 	mul.w	r2, r3, r2
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
 80056e6:	e004      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	4a0b      	ldr	r2, [pc, #44]	; (8005718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056ec:	fb02 f303 	mul.w	r3, r2, r3
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	623b      	str	r3, [r7, #32]
      break;
 80056f6:	e002      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <HAL_RCC_GetSysClockFreq+0xb4>)
 80056fa:	623b      	str	r3, [r7, #32]
      break;
 80056fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056fe:	6a3b      	ldr	r3, [r7, #32]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3728      	adds	r7, #40	; 0x28
 8005704:	46bd      	mov	sp, r7
 8005706:	bc90      	pop	{r4, r7}
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	0800e800 	.word	0x0800e800
 8005710:	40021000 	.word	0x40021000
 8005714:	007a1200 	.word	0x007a1200
 8005718:	003d0900 	.word	0x003d0900

0800571c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005720:	4b02      	ldr	r3, [pc, #8]	; (800572c <HAL_RCC_GetHCLKFreq+0x10>)
 8005722:	681b      	ldr	r3, [r3, #0]
}
 8005724:	4618      	mov	r0, r3
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr
 800572c:	20000018 	.word	0x20000018

08005730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005734:	f7ff fff2 	bl	800571c <HAL_RCC_GetHCLKFreq>
 8005738:	4602      	mov	r2, r0
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	0a1b      	lsrs	r3, r3, #8
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	4903      	ldr	r1, [pc, #12]	; (8005754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005746:	5ccb      	ldrb	r3, [r1, r3]
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800574c:	4618      	mov	r0, r3
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40021000 	.word	0x40021000
 8005754:	0800e87c 	.word	0x0800e87c

08005758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800575c:	f7ff ffde 	bl	800571c <HAL_RCC_GetHCLKFreq>
 8005760:	4602      	mov	r2, r0
 8005762:	4b05      	ldr	r3, [pc, #20]	; (8005778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	0adb      	lsrs	r3, r3, #11
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	4903      	ldr	r1, [pc, #12]	; (800577c <HAL_RCC_GetPCLK2Freq+0x24>)
 800576e:	5ccb      	ldrb	r3, [r1, r3]
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005774:	4618      	mov	r0, r3
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40021000 	.word	0x40021000
 800577c:	0800e87c 	.word	0x0800e87c

08005780 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	220f      	movs	r2, #15
 800578e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005790:	4b11      	ldr	r3, [pc, #68]	; (80057d8 <HAL_RCC_GetClockConfig+0x58>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 0203 	and.w	r2, r3, #3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800579c:	4b0e      	ldr	r3, [pc, #56]	; (80057d8 <HAL_RCC_GetClockConfig+0x58>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80057a8:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <HAL_RCC_GetClockConfig+0x58>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80057b4:	4b08      	ldr	r3, [pc, #32]	; (80057d8 <HAL_RCC_GetClockConfig+0x58>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	08db      	lsrs	r3, r3, #3
 80057ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057c2:	4b06      	ldr	r3, [pc, #24]	; (80057dc <HAL_RCC_GetClockConfig+0x5c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0207 	and.w	r2, r3, #7
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr
 80057d8:	40021000 	.word	0x40021000
 80057dc:	40022000 	.word	0x40022000

080057e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <RCC_Delay+0x34>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a0a      	ldr	r2, [pc, #40]	; (8005818 <RCC_Delay+0x38>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	0a5b      	lsrs	r3, r3, #9
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	fb02 f303 	mul.w	r3, r2, r3
 80057fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057fc:	bf00      	nop
  }
  while (Delay --);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	1e5a      	subs	r2, r3, #1
 8005802:	60fa      	str	r2, [r7, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1f9      	bne.n	80057fc <RCC_Delay+0x1c>
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr
 8005814:	20000018 	.word	0x20000018
 8005818:	10624dd3 	.word	0x10624dd3

0800581c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	613b      	str	r3, [r7, #16]
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d07d      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005838:	2300      	movs	r3, #0
 800583a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800583c:	4b4f      	ldr	r3, [pc, #316]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10d      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005848:	4b4c      	ldr	r3, [pc, #304]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	4a4b      	ldr	r2, [pc, #300]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800584e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005852:	61d3      	str	r3, [r2, #28]
 8005854:	4b49      	ldr	r3, [pc, #292]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005860:	2301      	movs	r3, #1
 8005862:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005864:	4b46      	ldr	r3, [pc, #280]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586c:	2b00      	cmp	r3, #0
 800586e:	d118      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005870:	4b43      	ldr	r3, [pc, #268]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a42      	ldr	r2, [pc, #264]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800587a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800587c:	f7fe fba2 	bl	8003fc4 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005882:	e008      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005884:	f7fe fb9e 	bl	8003fc4 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b64      	cmp	r3, #100	; 0x64
 8005890:	d901      	bls.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e06d      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005896:	4b3a      	ldr	r3, [pc, #232]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058a2:	4b36      	ldr	r3, [pc, #216]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d02e      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d027      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058c0:	4b2e      	ldr	r3, [pc, #184]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058ca:	4b2e      	ldr	r3, [pc, #184]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058cc:	2201      	movs	r2, #1
 80058ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058d0:	4b2c      	ldr	r3, [pc, #176]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058d6:	4a29      	ldr	r2, [pc, #164]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d014      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e6:	f7fe fb6d 	bl	8003fc4 <HAL_GetTick>
 80058ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ec:	e00a      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ee:	f7fe fb69 	bl	8003fc4 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d901      	bls.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e036      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005904:	4b1d      	ldr	r3, [pc, #116]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0ee      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005910:	4b1a      	ldr	r3, [pc, #104]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	4917      	ldr	r1, [pc, #92]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800591e:	4313      	orrs	r3, r2
 8005920:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005922:	7dfb      	ldrb	r3, [r7, #23]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d105      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005928:	4b14      	ldr	r3, [pc, #80]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	4a13      	ldr	r2, [pc, #76]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800592e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005932:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d008      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005940:	4b0e      	ldr	r3, [pc, #56]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	490b      	ldr	r1, [pc, #44]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800594e:	4313      	orrs	r3, r2
 8005950:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0310 	and.w	r3, r3, #16
 800595a:	2b00      	cmp	r3, #0
 800595c:	d008      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800595e:	4b07      	ldr	r3, [pc, #28]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	4904      	ldr	r1, [pc, #16]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800596c:	4313      	orrs	r3, r2
 800596e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	40021000 	.word	0x40021000
 8005980:	40007000 	.word	0x40007000
 8005984:	42420440 	.word	0x42420440

08005988 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005988:	b590      	push	{r4, r7, lr}
 800598a:	b08d      	sub	sp, #52	; 0x34
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005990:	4b58      	ldr	r3, [pc, #352]	; (8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8005992:	f107 040c 	add.w	r4, r7, #12
 8005996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800599c:	f240 2301 	movw	r3, #513	; 0x201
 80059a0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
 80059a6:	2300      	movs	r3, #0
 80059a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059aa:	2300      	movs	r3, #0
 80059ac:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61fb      	str	r3, [r7, #28]
 80059b2:	2300      	movs	r3, #0
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b10      	cmp	r3, #16
 80059ba:	d00a      	beq.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b10      	cmp	r3, #16
 80059c0:	f200 808e 	bhi.w	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d049      	beq.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d079      	beq.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80059d0:	e086      	b.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80059d2:	4b49      	ldr	r3, [pc, #292]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80059d8:	4b47      	ldr	r3, [pc, #284]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d07f      	beq.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	0c9b      	lsrs	r3, r3, #18
 80059e8:	f003 030f 	and.w	r3, r3, #15
 80059ec:	3330      	adds	r3, #48	; 0x30
 80059ee:	443b      	add	r3, r7
 80059f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80059f4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d017      	beq.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a00:	4b3d      	ldr	r3, [pc, #244]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	0c5b      	lsrs	r3, r3, #17
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	3330      	adds	r3, #48	; 0x30
 8005a0c:	443b      	add	r3, r7
 8005a0e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00d      	beq.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005a1e:	4a37      	ldr	r2, [pc, #220]	; (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
 8005a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a2e:	e004      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	4a33      	ldr	r2, [pc, #204]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005a34:	fb02 f303 	mul.w	r3, r2, r3
 8005a38:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005a3a:	4b2f      	ldr	r3, [pc, #188]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a46:	d102      	bne.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005a4c:	e04a      	b.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	4a2c      	ldr	r2, [pc, #176]	; (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8005a54:	fba2 2303 	umull	r2, r3, r2, r3
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005a5c:	e042      	b.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8005a5e:	4b26      	ldr	r3, [pc, #152]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a6e:	d108      	bne.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8005a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a80:	e01f      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a8c:	d109      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8005a8e:	4b1a      	ldr	r3, [pc, #104]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8005a9a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa0:	e00f      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aac:	d11c      	bne.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005aae:	4b12      	ldr	r3, [pc, #72]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d016      	beq.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8005aba:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005abe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005ac0:	e012      	b.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005ac2:	e011      	b.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005ac4:	f7ff fe48 	bl	8005758 <HAL_RCC_GetPCLK2Freq>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	0b9b      	lsrs	r3, r3, #14
 8005ad0:	f003 0303 	and.w	r3, r3, #3
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005adc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005ade:	e004      	b.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005ae0:	bf00      	nop
 8005ae2:	e002      	b.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005ae4:	bf00      	nop
 8005ae6:	e000      	b.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005ae8:	bf00      	nop
    }
  }
  return (frequency);
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3734      	adds	r7, #52	; 0x34
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd90      	pop	{r4, r7, pc}
 8005af4:	0800e810 	.word	0x0800e810
 8005af8:	40021000 	.word	0x40021000
 8005afc:	007a1200 	.word	0x007a1200
 8005b00:	003d0900 	.word	0x003d0900
 8005b04:	aaaaaaab 	.word	0xaaaaaaab

08005b08 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e084      	b.n	8005c28 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	7c5b      	ldrb	r3, [r3, #17]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d105      	bne.n	8005b34 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fc fefa 	bl	8002928 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f952 	bl	8005de4 <HAL_RTC_WaitForSynchro>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d004      	beq.n	8005b50 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2204      	movs	r2, #4
 8005b4a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e06b      	b.n	8005c28 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fa0b 	bl	8005f6c <RTC_EnterInitMode>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d004      	beq.n	8005b66 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2204      	movs	r2, #4
 8005b60:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e060      	b.n	8005c28 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0207 	bic.w	r2, r2, #7
 8005b74:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005b7e:	4b2c      	ldr	r3, [pc, #176]	; (8005c30 <HAL_RTC_Init+0x128>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	4a2b      	ldr	r2, [pc, #172]	; (8005c30 <HAL_RTC_Init+0x128>)
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005b8a:	4b29      	ldr	r3, [pc, #164]	; (8005c30 <HAL_RTC_Init+0x128>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	4926      	ldr	r1, [pc, #152]	; (8005c30 <HAL_RTC_Init+0x128>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba4:	d003      	beq.n	8005bae <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	e00e      	b.n	8005bcc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005bae:	2001      	movs	r0, #1
 8005bb0:	f7ff feea 	bl	8005988 <HAL_RCCEx_GetPeriphCLKFreq>
 8005bb4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d104      	bne.n	8005bc6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2204      	movs	r2, #4
 8005bc0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e030      	b.n	8005c28 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f023 010f 	bic.w	r1, r3, #15
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	0c1a      	lsrs	r2, r3, #16
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	0c1b      	lsrs	r3, r3, #16
 8005bea:	041b      	lsls	r3, r3, #16
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	b291      	uxth	r1, r2
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f9df 	bl	8005fbc <RTC_ExitInitMode>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d004      	beq.n	8005c0e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2204      	movs	r2, #4
 8005c08:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e00c      	b.n	8005c28 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005c26:	2300      	movs	r3, #0
  }
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40006c00 	.word	0x40006c00

08005c34 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b088      	sub	sp, #32
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61bb      	str	r3, [r7, #24]
 8005c44:	2300      	movs	r3, #0
 8005c46:	61fb      	str	r3, [r7, #28]
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <HAL_RTC_GetTime+0x28>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e0b5      	b.n	8005dcc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e0ac      	b.n	8005dcc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 f8e3 	bl	8005e3e <RTC_ReadTimeCounter>
 8005c78:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	4a55      	ldr	r2, [pc, #340]	; (8005dd4 <HAL_RTC_GetTime+0x1a0>)
 8005c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c82:	0adb      	lsrs	r3, r3, #11
 8005c84:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4b52      	ldr	r3, [pc, #328]	; (8005dd4 <HAL_RTC_GetTime+0x1a0>)
 8005c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c8e:	0adb      	lsrs	r3, r3, #11
 8005c90:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005c94:	fb01 f303 	mul.w	r3, r1, r3
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	4a4f      	ldr	r2, [pc, #316]	; (8005dd8 <HAL_RTC_GetTime+0x1a4>)
 8005c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	4a4a      	ldr	r2, [pc, #296]	; (8005dd4 <HAL_RTC_GetTime+0x1a0>)
 8005cac:	fba2 1203 	umull	r1, r2, r2, r3
 8005cb0:	0ad2      	lsrs	r2, r2, #11
 8005cb2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005cb6:	fb01 f202 	mul.w	r2, r1, r2
 8005cba:	1a9a      	subs	r2, r3, r2
 8005cbc:	4b46      	ldr	r3, [pc, #280]	; (8005dd8 <HAL_RTC_GetTime+0x1a4>)
 8005cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc2:	0959      	lsrs	r1, r3, #5
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	1a5b      	subs	r3, r3, r1
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	1ad1      	subs	r1, r2, r3
 8005cce:	b2ca      	uxtb	r2, r1
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	2b17      	cmp	r3, #23
 8005cd8:	d955      	bls.n	8005d86 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	4a3f      	ldr	r2, [pc, #252]	; (8005ddc <HAL_RTC_GetTime+0x1a8>)
 8005cde:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce2:	091b      	lsrs	r3, r3, #4
 8005ce4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005ce6:	6939      	ldr	r1, [r7, #16]
 8005ce8:	4b3c      	ldr	r3, [pc, #240]	; (8005ddc <HAL_RTC_GetTime+0x1a8>)
 8005cea:	fba3 2301 	umull	r2, r3, r3, r1
 8005cee:	091a      	lsrs	r2, r3, #4
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	4413      	add	r3, r2
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	1aca      	subs	r2, r1, r3
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 f8f3 	bl	8005eec <RTC_ReadAlarmCounter>
 8005d06:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0e:	d008      	beq.n	8005d22 <HAL_RTC_GetTime+0xee>
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d904      	bls.n	8005d22 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005d18:	69fa      	ldr	r2, [r7, #28]
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	61fb      	str	r3, [r7, #28]
 8005d20:	e002      	b.n	8005d28 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005d22:	f04f 33ff 	mov.w	r3, #4294967295
 8005d26:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	4a2d      	ldr	r2, [pc, #180]	; (8005de0 <HAL_RTC_GetTime+0x1ac>)
 8005d2c:	fb02 f303 	mul.w	r3, r2, r3
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005d36:	69b9      	ldr	r1, [r7, #24]
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f8b0 	bl	8005e9e <RTC_WriteTimeCounter>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e041      	b.n	8005dcc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4e:	d00c      	beq.n	8005d6a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	4413      	add	r3, r2
 8005d56:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005d58:	69f9      	ldr	r1, [r7, #28]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 f8df 	bl	8005f1e <RTC_WriteAlarmCounter>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e030      	b.n	8005dcc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005d6a:	69f9      	ldr	r1, [r7, #28]
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f8d6 	bl	8005f1e <RTC_WriteAlarmCounter>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e027      	b.n	8005dcc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005d7c:	6979      	ldr	r1, [r7, #20]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f961 	bl	8006046 <RTC_DateUpdate>
 8005d84:	e003      	b.n	8005d8e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01a      	beq.n	8005dca <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 f937 	bl	800600c <RTC_ByteToBcd2>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	461a      	mov	r2, r3
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	785b      	ldrb	r3, [r3, #1]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 f92e 	bl	800600c <RTC_ByteToBcd2>
 8005db0:	4603      	mov	r3, r0
 8005db2:	461a      	mov	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	789b      	ldrb	r3, [r3, #2]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 f925 	bl	800600c <RTC_ByteToBcd2>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3720      	adds	r7, #32
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	91a2b3c5 	.word	0x91a2b3c5
 8005dd8:	88888889 	.word	0x88888889
 8005ddc:	aaaaaaab 	.word	0xaaaaaaab
 8005de0:	00015180 	.word	0x00015180

08005de4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e01d      	b.n	8005e36 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0208 	bic.w	r2, r2, #8
 8005e08:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005e0a:	f7fe f8db 	bl	8003fc4 <HAL_GetTick>
 8005e0e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005e10:	e009      	b.n	8005e26 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005e12:	f7fe f8d7 	bl	8003fc4 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e20:	d901      	bls.n	8005e26 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e007      	b.n	8005e36 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0ee      	beq.n	8005e12 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b087      	sub	sp, #28
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	827b      	strh	r3, [r7, #18]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	823b      	strh	r3, [r7, #16]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005e6e:	8a7a      	ldrh	r2, [r7, #18]
 8005e70:	8a3b      	ldrh	r3, [r7, #16]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d008      	beq.n	8005e88 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005e76:	8a3b      	ldrh	r3, [r7, #16]
 8005e78:	041a      	lsls	r2, r3, #16
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	e004      	b.n	8005e92 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005e88:	8a7b      	ldrh	r3, [r7, #18]
 8005e8a:	041a      	lsls	r2, r3, #16
 8005e8c:	89fb      	ldrh	r3, [r7, #14]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005e92:	697b      	ldr	r3, [r7, #20]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bc80      	pop	{r7}
 8005e9c:	4770      	bx	lr

08005e9e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f85d 	bl	8005f6c <RTC_EnterInitMode>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	73fb      	strb	r3, [r7, #15]
 8005ebc:	e011      	b.n	8005ee2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	0c12      	lsrs	r2, r2, #16
 8005ec6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	b292      	uxth	r2, r2
 8005ed0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f872 	bl	8005fbc <RTC_ExitInitMode>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	81fb      	strh	r3, [r7, #14]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005f0c:	89fb      	ldrh	r3, [r7, #14]
 8005f0e:	041a      	lsls	r2, r3, #16
 8005f10:	89bb      	ldrh	r3, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bc80      	pop	{r7}
 8005f1c:	4770      	bx	lr

08005f1e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f81d 	bl	8005f6c <RTC_EnterInitMode>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	73fb      	strb	r3, [r7, #15]
 8005f3c:	e011      	b.n	8005f62 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	0c12      	lsrs	r2, r2, #16
 8005f46:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	b292      	uxth	r2, r2
 8005f50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f832 	bl	8005fbc <RTC_ExitInitMode>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005f78:	f7fe f824 	bl	8003fc4 <HAL_GetTick>
 8005f7c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005f7e:	e009      	b.n	8005f94 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005f80:	f7fe f820 	bl	8003fc4 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f8e:	d901      	bls.n	8005f94 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e00f      	b.n	8005fb4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0ee      	beq.n	8005f80 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f042 0210 	orr.w	r2, r2, #16
 8005fb0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0210 	bic.w	r2, r2, #16
 8005fd6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005fd8:	f7fd fff4 	bl	8003fc4 <HAL_GetTick>
 8005fdc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005fde:	e009      	b.n	8005ff4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005fe0:	f7fd fff0 	bl	8003fc4 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fee:	d901      	bls.n	8005ff4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e007      	b.n	8006004 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0ee      	beq.n	8005fe0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800601a:	e005      	b.n	8006028 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006022:	79fb      	ldrb	r3, [r7, #7]
 8006024:	3b0a      	subs	r3, #10
 8006026:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	2b09      	cmp	r3, #9
 800602c:	d8f6      	bhi.n	800601c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	b2da      	uxtb	r2, r3
 8006036:	79fb      	ldrb	r3, [r7, #7]
 8006038:	4313      	orrs	r3, r2
 800603a:	b2db      	uxtb	r3, r3
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr

08006046 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b086      	sub	sp, #24
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	2300      	movs	r3, #0
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	2300      	movs	r3, #0
 800605a:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	7bdb      	ldrb	r3, [r3, #15]
 8006064:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	7b5b      	ldrb	r3, [r3, #13]
 800606a:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	7b9b      	ldrb	r3, [r3, #14]
 8006070:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8006072:	2300      	movs	r3, #0
 8006074:	60bb      	str	r3, [r7, #8]
 8006076:	e06f      	b.n	8006158 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d011      	beq.n	80060a2 <RTC_DateUpdate+0x5c>
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	2b03      	cmp	r3, #3
 8006082:	d00e      	beq.n	80060a2 <RTC_DateUpdate+0x5c>
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b05      	cmp	r3, #5
 8006088:	d00b      	beq.n	80060a2 <RTC_DateUpdate+0x5c>
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2b07      	cmp	r3, #7
 800608e:	d008      	beq.n	80060a2 <RTC_DateUpdate+0x5c>
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	2b08      	cmp	r3, #8
 8006094:	d005      	beq.n	80060a2 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	2b0a      	cmp	r3, #10
 800609a:	d002      	beq.n	80060a2 <RTC_DateUpdate+0x5c>
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	2b0c      	cmp	r3, #12
 80060a0:	d117      	bne.n	80060d2 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2b1e      	cmp	r3, #30
 80060a6:	d803      	bhi.n	80060b0 <RTC_DateUpdate+0x6a>
      {
        day++;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3301      	adds	r3, #1
 80060ac:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80060ae:	e050      	b.n	8006152 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	2b0c      	cmp	r3, #12
 80060b4:	d005      	beq.n	80060c2 <RTC_DateUpdate+0x7c>
        {
          month++;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	3301      	adds	r3, #1
 80060ba:	613b      	str	r3, [r7, #16]
          day = 1U;
 80060bc:	2301      	movs	r3, #1
 80060be:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80060c0:	e047      	b.n	8006152 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80060c2:	2301      	movs	r3, #1
 80060c4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80060c6:	2301      	movs	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
          year++;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	3301      	adds	r3, #1
 80060ce:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80060d0:	e03f      	b.n	8006152 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d008      	beq.n	80060ea <RTC_DateUpdate+0xa4>
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	2b06      	cmp	r3, #6
 80060dc:	d005      	beq.n	80060ea <RTC_DateUpdate+0xa4>
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b09      	cmp	r3, #9
 80060e2:	d002      	beq.n	80060ea <RTC_DateUpdate+0xa4>
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2b0b      	cmp	r3, #11
 80060e8:	d10c      	bne.n	8006104 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b1d      	cmp	r3, #29
 80060ee:	d803      	bhi.n	80060f8 <RTC_DateUpdate+0xb2>
      {
        day++;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	3301      	adds	r3, #1
 80060f4:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80060f6:	e02c      	b.n	8006152 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	3301      	adds	r3, #1
 80060fc:	613b      	str	r3, [r7, #16]
        day = 1U;
 80060fe:	2301      	movs	r3, #1
 8006100:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006102:	e026      	b.n	8006152 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	2b02      	cmp	r3, #2
 8006108:	d123      	bne.n	8006152 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2b1b      	cmp	r3, #27
 800610e:	d803      	bhi.n	8006118 <RTC_DateUpdate+0xd2>
      {
        day++;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3301      	adds	r3, #1
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	e01c      	b.n	8006152 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b1c      	cmp	r3, #28
 800611c:	d111      	bne.n	8006142 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	b29b      	uxth	r3, r3
 8006122:	4618      	mov	r0, r3
 8006124:	f000 f838 	bl	8006198 <RTC_IsLeapYear>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <RTC_DateUpdate+0xf0>
        {
          day++;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	3301      	adds	r3, #1
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	e00d      	b.n	8006152 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	3301      	adds	r3, #1
 800613a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800613c:	2301      	movs	r3, #1
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	e007      	b.n	8006152 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b1d      	cmp	r3, #29
 8006146:	d104      	bne.n	8006152 <RTC_DateUpdate+0x10c>
      {
        month++;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	3301      	adds	r3, #1
 800614c:	613b      	str	r3, [r7, #16]
        day = 1U;
 800614e:	2301      	movs	r3, #1
 8006150:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	3301      	adds	r3, #1
 8006156:	60bb      	str	r3, [r7, #8]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d38b      	bcc.n	8006078 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	b2da      	uxtb	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	b2da      	uxtb	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	b2da      	uxtb	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	4619      	mov	r1, r3
 8006182:	6978      	ldr	r0, [r7, #20]
 8006184:	f000 f83a 	bl	80061fc <RTC_WeekDayNum>
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	731a      	strb	r2, [r3, #12]
}
 8006190:	bf00      	nop
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80061a2:	88fb      	ldrh	r3, [r7, #6]
 80061a4:	f003 0303 	and.w	r3, r3, #3
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	e01d      	b.n	80061ee <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80061b2:	88fb      	ldrh	r3, [r7, #6]
 80061b4:	4a10      	ldr	r2, [pc, #64]	; (80061f8 <RTC_IsLeapYear+0x60>)
 80061b6:	fba2 1203 	umull	r1, r2, r2, r3
 80061ba:	0952      	lsrs	r2, r2, #5
 80061bc:	2164      	movs	r1, #100	; 0x64
 80061be:	fb01 f202 	mul.w	r2, r1, r2
 80061c2:	1a9b      	subs	r3, r3, r2
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e00f      	b.n	80061ee <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80061ce:	88fb      	ldrh	r3, [r7, #6]
 80061d0:	4a09      	ldr	r2, [pc, #36]	; (80061f8 <RTC_IsLeapYear+0x60>)
 80061d2:	fba2 1203 	umull	r1, r2, r2, r3
 80061d6:	09d2      	lsrs	r2, r2, #7
 80061d8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80061dc:	fb01 f202 	mul.w	r2, r1, r2
 80061e0:	1a9b      	subs	r3, r3, r2
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80061ec:	2300      	movs	r3, #0
  }
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bc80      	pop	{r7}
 80061f6:	4770      	bx	lr
 80061f8:	51eb851f 	.word	0x51eb851f

080061fc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
 8006208:	4613      	mov	r3, r2
 800620a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	60bb      	str	r3, [r7, #8]
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800621a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800621c:	78fb      	ldrb	r3, [r7, #3]
 800621e:	2b02      	cmp	r3, #2
 8006220:	d82d      	bhi.n	800627e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006222:	78fa      	ldrb	r2, [r7, #3]
 8006224:	4613      	mov	r3, r2
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	4413      	add	r3, r2
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	1a9b      	subs	r3, r3, r2
 800622e:	4a2c      	ldr	r2, [pc, #176]	; (80062e0 <RTC_WeekDayNum+0xe4>)
 8006230:	fba2 2303 	umull	r2, r3, r2, r3
 8006234:	085a      	lsrs	r2, r3, #1
 8006236:	78bb      	ldrb	r3, [r7, #2]
 8006238:	441a      	add	r2, r3
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	441a      	add	r2, r3
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	3b01      	subs	r3, #1
 8006242:	089b      	lsrs	r3, r3, #2
 8006244:	441a      	add	r2, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	3b01      	subs	r3, #1
 800624a:	4926      	ldr	r1, [pc, #152]	; (80062e4 <RTC_WeekDayNum+0xe8>)
 800624c:	fba1 1303 	umull	r1, r3, r1, r3
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	1ad2      	subs	r2, r2, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	3b01      	subs	r3, #1
 8006258:	4922      	ldr	r1, [pc, #136]	; (80062e4 <RTC_WeekDayNum+0xe8>)
 800625a:	fba1 1303 	umull	r1, r3, r1, r3
 800625e:	09db      	lsrs	r3, r3, #7
 8006260:	4413      	add	r3, r2
 8006262:	1d1a      	adds	r2, r3, #4
 8006264:	4b20      	ldr	r3, [pc, #128]	; (80062e8 <RTC_WeekDayNum+0xec>)
 8006266:	fba3 1302 	umull	r1, r3, r3, r2
 800626a:	1ad1      	subs	r1, r2, r3
 800626c:	0849      	lsrs	r1, r1, #1
 800626e:	440b      	add	r3, r1
 8006270:	0899      	lsrs	r1, r3, #2
 8006272:	460b      	mov	r3, r1
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	1a5b      	subs	r3, r3, r1
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	e029      	b.n	80062d2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800627e:	78fa      	ldrb	r2, [r7, #3]
 8006280:	4613      	mov	r3, r2
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	4413      	add	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	4a15      	ldr	r2, [pc, #84]	; (80062e0 <RTC_WeekDayNum+0xe4>)
 800628c:	fba2 2303 	umull	r2, r3, r2, r3
 8006290:	085a      	lsrs	r2, r3, #1
 8006292:	78bb      	ldrb	r3, [r7, #2]
 8006294:	441a      	add	r2, r3
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	441a      	add	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	089b      	lsrs	r3, r3, #2
 800629e:	441a      	add	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4910      	ldr	r1, [pc, #64]	; (80062e4 <RTC_WeekDayNum+0xe8>)
 80062a4:	fba1 1303 	umull	r1, r3, r1, r3
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	1ad2      	subs	r2, r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	490d      	ldr	r1, [pc, #52]	; (80062e4 <RTC_WeekDayNum+0xe8>)
 80062b0:	fba1 1303 	umull	r1, r3, r1, r3
 80062b4:	09db      	lsrs	r3, r3, #7
 80062b6:	4413      	add	r3, r2
 80062b8:	1c9a      	adds	r2, r3, #2
 80062ba:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <RTC_WeekDayNum+0xec>)
 80062bc:	fba3 1302 	umull	r1, r3, r3, r2
 80062c0:	1ad1      	subs	r1, r2, r3
 80062c2:	0849      	lsrs	r1, r1, #1
 80062c4:	440b      	add	r3, r1
 80062c6:	0899      	lsrs	r1, r3, #2
 80062c8:	460b      	mov	r3, r1
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	1a5b      	subs	r3, r3, r1
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	b2db      	uxtb	r3, r3
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	bc80      	pop	{r7}
 80062de:	4770      	bx	lr
 80062e0:	38e38e39 	.word	0x38e38e39
 80062e4:	51eb851f 	.word	0x51eb851f
 80062e8:	24924925 	.word	0x24924925

080062ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e076      	b.n	80063ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	2b00      	cmp	r3, #0
 8006304:	d108      	bne.n	8006318 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800630e:	d009      	beq.n	8006324 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	61da      	str	r2, [r3, #28]
 8006316:	e005      	b.n	8006324 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fc fb16 	bl	8002970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800635a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a8:	ea42 0103 	orr.w	r1, r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	0c1a      	lsrs	r2, r3, #16
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f002 0204 	and.w	r2, r2, #4
 80063ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	69da      	ldr	r2, [r3, #28]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	4613      	mov	r3, r2
 8006402:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <HAL_SPI_Transmit+0x22>
 8006412:	2302      	movs	r3, #2
 8006414:	e126      	b.n	8006664 <HAL_SPI_Transmit+0x270>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800641e:	f7fd fdd1 	bl	8003fc4 <HAL_GetTick>
 8006422:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006424:	88fb      	ldrh	r3, [r7, #6]
 8006426:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b01      	cmp	r3, #1
 8006432:	d002      	beq.n	800643a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006434:	2302      	movs	r3, #2
 8006436:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006438:	e10b      	b.n	8006652 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <HAL_SPI_Transmit+0x52>
 8006440:	88fb      	ldrh	r3, [r7, #6]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	77fb      	strb	r3, [r7, #31]
    goto error;
 800644a:	e102      	b.n	8006652 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2203      	movs	r2, #3
 8006450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	88fa      	ldrh	r2, [r7, #6]
 8006464:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	88fa      	ldrh	r2, [r7, #6]
 800646a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006492:	d10f      	bne.n	80064b4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064be:	2b40      	cmp	r3, #64	; 0x40
 80064c0:	d007      	beq.n	80064d2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064da:	d14b      	bne.n	8006574 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <HAL_SPI_Transmit+0xf6>
 80064e4:	8afb      	ldrh	r3, [r7, #22]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d13e      	bne.n	8006568 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ee:	881a      	ldrh	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fa:	1c9a      	adds	r2, r3, #2
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006504:	b29b      	uxth	r3, r3
 8006506:	3b01      	subs	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800650e:	e02b      	b.n	8006568 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b02      	cmp	r3, #2
 800651c:	d112      	bne.n	8006544 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006522:	881a      	ldrh	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	1c9a      	adds	r2, r3, #2
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	86da      	strh	r2, [r3, #54]	; 0x36
 8006542:	e011      	b.n	8006568 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006544:	f7fd fd3e 	bl	8003fc4 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	429a      	cmp	r2, r3
 8006552:	d803      	bhi.n	800655c <HAL_SPI_Transmit+0x168>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655a:	d102      	bne.n	8006562 <HAL_SPI_Transmit+0x16e>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d102      	bne.n	8006568 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006566:	e074      	b.n	8006652 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1ce      	bne.n	8006510 <HAL_SPI_Transmit+0x11c>
 8006572:	e04c      	b.n	800660e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <HAL_SPI_Transmit+0x18e>
 800657c:	8afb      	ldrh	r3, [r7, #22]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d140      	bne.n	8006604 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	330c      	adds	r3, #12
 800658c:	7812      	ldrb	r2, [r2, #0]
 800658e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80065a8:	e02c      	b.n	8006604 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d113      	bne.n	80065e0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	330c      	adds	r3, #12
 80065c2:	7812      	ldrb	r2, [r2, #0]
 80065c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	3b01      	subs	r3, #1
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80065de:	e011      	b.n	8006604 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065e0:	f7fd fcf0 	bl	8003fc4 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d803      	bhi.n	80065f8 <HAL_SPI_Transmit+0x204>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f6:	d102      	bne.n	80065fe <HAL_SPI_Transmit+0x20a>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d102      	bne.n	8006604 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006602:	e026      	b.n	8006652 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006608:	b29b      	uxth	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1cd      	bne.n	80065aa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800660e:	69ba      	ldr	r2, [r7, #24]
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 fa62 	bl	8006adc <SPI_EndRxTxTransaction>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2220      	movs	r2, #32
 8006622:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800662c:	2300      	movs	r3, #0
 800662e:	613b      	str	r3, [r7, #16]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	613b      	str	r3, [r7, #16]
 8006640:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	77fb      	strb	r3, [r7, #31]
 800664e:	e000      	b.n	8006652 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006650:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006662:	7ffb      	ldrb	r3, [r7, #31]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3720      	adds	r7, #32
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08c      	sub	sp, #48	; 0x30
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800667a:	2301      	movs	r3, #1
 800667c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800668a:	2b01      	cmp	r3, #1
 800668c:	d101      	bne.n	8006692 <HAL_SPI_TransmitReceive+0x26>
 800668e:	2302      	movs	r3, #2
 8006690:	e18a      	b.n	80069a8 <HAL_SPI_TransmitReceive+0x33c>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800669a:	f7fd fc93 	bl	8003fc4 <HAL_GetTick>
 800669e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80066b0:	887b      	ldrh	r3, [r7, #2]
 80066b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d00f      	beq.n	80066dc <HAL_SPI_TransmitReceive+0x70>
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066c2:	d107      	bne.n	80066d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <HAL_SPI_TransmitReceive+0x68>
 80066cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d003      	beq.n	80066dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80066d4:	2302      	movs	r3, #2
 80066d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066da:	e15b      	b.n	8006994 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d005      	beq.n	80066ee <HAL_SPI_TransmitReceive+0x82>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <HAL_SPI_TransmitReceive+0x82>
 80066e8:	887b      	ldrh	r3, [r7, #2]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d103      	bne.n	80066f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066f4:	e14e      	b.n	8006994 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d003      	beq.n	800670a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2205      	movs	r2, #5
 8006706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	887a      	ldrh	r2, [r7, #2]
 800671a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	887a      	ldrh	r2, [r7, #2]
 8006720:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	887a      	ldrh	r2, [r7, #2]
 800672c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	887a      	ldrh	r2, [r7, #2]
 8006732:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674a:	2b40      	cmp	r3, #64	; 0x40
 800674c:	d007      	beq.n	800675e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800675c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006766:	d178      	bne.n	800685a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <HAL_SPI_TransmitReceive+0x10a>
 8006770:	8b7b      	ldrh	r3, [r7, #26]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d166      	bne.n	8006844 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677a:	881a      	ldrh	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	1c9a      	adds	r2, r3, #2
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006790:	b29b      	uxth	r3, r3
 8006792:	3b01      	subs	r3, #1
 8006794:	b29a      	uxth	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800679a:	e053      	b.n	8006844 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d11b      	bne.n	80067e2 <HAL_SPI_TransmitReceive+0x176>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d016      	beq.n	80067e2 <HAL_SPI_TransmitReceive+0x176>
 80067b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d113      	bne.n	80067e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	881a      	ldrh	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	1c9a      	adds	r2, r3, #2
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d119      	bne.n	8006824 <HAL_SPI_TransmitReceive+0x1b8>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d014      	beq.n	8006824 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	b292      	uxth	r2, r2
 8006806:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	1c9a      	adds	r2, r3, #2
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006816:	b29b      	uxth	r3, r3
 8006818:	3b01      	subs	r3, #1
 800681a:	b29a      	uxth	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006820:	2301      	movs	r3, #1
 8006822:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006824:	f7fd fbce 	bl	8003fc4 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006830:	429a      	cmp	r2, r3
 8006832:	d807      	bhi.n	8006844 <HAL_SPI_TransmitReceive+0x1d8>
 8006834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683a:	d003      	beq.n	8006844 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006842:	e0a7      	b.n	8006994 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1a6      	bne.n	800679c <HAL_SPI_TransmitReceive+0x130>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006852:	b29b      	uxth	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1a1      	bne.n	800679c <HAL_SPI_TransmitReceive+0x130>
 8006858:	e07c      	b.n	8006954 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <HAL_SPI_TransmitReceive+0x1fc>
 8006862:	8b7b      	ldrh	r3, [r7, #26]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d16b      	bne.n	8006940 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	330c      	adds	r3, #12
 8006872:	7812      	ldrb	r2, [r2, #0]
 8006874:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b01      	subs	r3, #1
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800688e:	e057      	b.n	8006940 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b02      	cmp	r3, #2
 800689c:	d11c      	bne.n	80068d8 <HAL_SPI_TransmitReceive+0x26c>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d017      	beq.n	80068d8 <HAL_SPI_TransmitReceive+0x26c>
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d114      	bne.n	80068d8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	330c      	adds	r3, #12
 80068b8:	7812      	ldrb	r2, [r2, #0]
 80068ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d119      	bne.n	800691a <HAL_SPI_TransmitReceive+0x2ae>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d014      	beq.n	800691a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800690c:	b29b      	uxth	r3, r3
 800690e:	3b01      	subs	r3, #1
 8006910:	b29a      	uxth	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006916:	2301      	movs	r3, #1
 8006918:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800691a:	f7fd fb53 	bl	8003fc4 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006926:	429a      	cmp	r2, r3
 8006928:	d803      	bhi.n	8006932 <HAL_SPI_TransmitReceive+0x2c6>
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006930:	d102      	bne.n	8006938 <HAL_SPI_TransmitReceive+0x2cc>
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	2b00      	cmp	r3, #0
 8006936:	d103      	bne.n	8006940 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800693e:	e029      	b.n	8006994 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1a2      	bne.n	8006890 <HAL_SPI_TransmitReceive+0x224>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d19d      	bne.n	8006890 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006956:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 f8bf 	bl	8006adc <SPI_EndRxTxTransaction>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d006      	beq.n	8006972 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2220      	movs	r2, #32
 800696e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006970:	e010      	b.n	8006994 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10b      	bne.n	8006992 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800697a:	2300      	movs	r3, #0
 800697c:	617b      	str	r3, [r7, #20]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	617b      	str	r3, [r7, #20]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	e000      	b.n	8006994 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006992:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3730      	adds	r7, #48	; 0x30
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069be:	b2db      	uxtb	r3, r3
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bc80      	pop	{r7}
 80069c8:	4770      	bx	lr
	...

080069cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	4613      	mov	r3, r2
 80069da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069dc:	f7fd faf2 	bl	8003fc4 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	4413      	add	r3, r2
 80069ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069ec:	f7fd faea 	bl	8003fc4 <HAL_GetTick>
 80069f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069f2:	4b39      	ldr	r3, [pc, #228]	; (8006ad8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	015b      	lsls	r3, r3, #5
 80069f8:	0d1b      	lsrs	r3, r3, #20
 80069fa:	69fa      	ldr	r2, [r7, #28]
 80069fc:	fb02 f303 	mul.w	r3, r2, r3
 8006a00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a02:	e054      	b.n	8006aae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0a:	d050      	beq.n	8006aae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a0c:	f7fd fada 	bl	8003fc4 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d902      	bls.n	8006a22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d13d      	bne.n	8006a9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a3a:	d111      	bne.n	8006a60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a44:	d004      	beq.n	8006a50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a4e:	d107      	bne.n	8006a60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a68:	d10f      	bne.n	8006a8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e017      	b.n	8006ace <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	bf0c      	ite	eq
 8006abe:	2301      	moveq	r3, #1
 8006ac0:	2300      	movne	r3, #0
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d19b      	bne.n	8006a04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3720      	adds	r7, #32
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000018 	.word	0x20000018

08006adc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2200      	movs	r2, #0
 8006af0:	2180      	movs	r1, #128	; 0x80
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f7ff ff6a 	bl	80069cc <SPI_WaitFlagStateUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d007      	beq.n	8006b0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b02:	f043 0220 	orr.w	r2, r3, #32
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e000      	b.n	8006b10 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e041      	b.n	8006bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d106      	bne.n	8006b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7fb ff60 	bl	8002a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3304      	adds	r3, #4
 8006b54:	4619      	mov	r1, r3
 8006b56:	4610      	mov	r0, r2
 8006b58:	f000 fa70 	bl	800703c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d001      	beq.n	8006bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e03a      	b.n	8006c46 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0201 	orr.w	r2, r2, #1
 8006be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a18      	ldr	r2, [pc, #96]	; (8006c50 <HAL_TIM_Base_Start_IT+0x98>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d00e      	beq.n	8006c10 <HAL_TIM_Base_Start_IT+0x58>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfa:	d009      	beq.n	8006c10 <HAL_TIM_Base_Start_IT+0x58>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a14      	ldr	r2, [pc, #80]	; (8006c54 <HAL_TIM_Base_Start_IT+0x9c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d004      	beq.n	8006c10 <HAL_TIM_Base_Start_IT+0x58>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a13      	ldr	r2, [pc, #76]	; (8006c58 <HAL_TIM_Base_Start_IT+0xa0>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d111      	bne.n	8006c34 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b06      	cmp	r3, #6
 8006c20:	d010      	beq.n	8006c44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f042 0201 	orr.w	r2, r2, #1
 8006c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c32:	e007      	b.n	8006c44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0201 	orr.w	r2, r2, #1
 8006c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr
 8006c50:	40012c00 	.word	0x40012c00
 8006c54:	40000400 	.word	0x40000400
 8006c58:	40000800 	.word	0x40000800

08006c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d122      	bne.n	8006cb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d11b      	bne.n	8006cb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f06f 0202 	mvn.w	r2, #2
 8006c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f9b1 	bl	8007006 <HAL_TIM_IC_CaptureCallback>
 8006ca4:	e005      	b.n	8006cb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f9a4 	bl	8006ff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f9b3 	bl	8007018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f003 0304 	and.w	r3, r3, #4
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d122      	bne.n	8006d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	d11b      	bne.n	8006d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f06f 0204 	mvn.w	r2, #4
 8006cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f987 	bl	8007006 <HAL_TIM_IC_CaptureCallback>
 8006cf8:	e005      	b.n	8006d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f97a 	bl	8006ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f989 	bl	8007018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b08      	cmp	r3, #8
 8006d18:	d122      	bne.n	8006d60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b08      	cmp	r3, #8
 8006d26:	d11b      	bne.n	8006d60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f06f 0208 	mvn.w	r2, #8
 8006d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2204      	movs	r2, #4
 8006d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	f003 0303 	and.w	r3, r3, #3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f95d 	bl	8007006 <HAL_TIM_IC_CaptureCallback>
 8006d4c:	e005      	b.n	8006d5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f950 	bl	8006ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f95f 	bl	8007018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	f003 0310 	and.w	r3, r3, #16
 8006d6a:	2b10      	cmp	r3, #16
 8006d6c:	d122      	bne.n	8006db4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f003 0310 	and.w	r3, r3, #16
 8006d78:	2b10      	cmp	r3, #16
 8006d7a:	d11b      	bne.n	8006db4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f06f 0210 	mvn.w	r2, #16
 8006d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2208      	movs	r2, #8
 8006d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f933 	bl	8007006 <HAL_TIM_IC_CaptureCallback>
 8006da0:	e005      	b.n	8006dae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f926 	bl	8006ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f935 	bl	8007018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d10e      	bne.n	8006de0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d107      	bne.n	8006de0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f06f 0201 	mvn.w	r2, #1
 8006dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7fb fd16 	bl	800280c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dea:	2b80      	cmp	r3, #128	; 0x80
 8006dec:	d10e      	bne.n	8006e0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df8:	2b80      	cmp	r3, #128	; 0x80
 8006dfa:	d107      	bne.n	8006e0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fa77 	bl	80072fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e16:	2b40      	cmp	r3, #64	; 0x40
 8006e18:	d10e      	bne.n	8006e38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e24:	2b40      	cmp	r3, #64	; 0x40
 8006e26:	d107      	bne.n	8006e38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f8f9 	bl	800702a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	f003 0320 	and.w	r3, r3, #32
 8006e42:	2b20      	cmp	r3, #32
 8006e44:	d10e      	bne.n	8006e64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f003 0320 	and.w	r3, r3, #32
 8006e50:	2b20      	cmp	r3, #32
 8006e52:	d107      	bne.n	8006e64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f06f 0220 	mvn.w	r2, #32
 8006e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa42 	bl	80072e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e64:	bf00      	nop
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_TIM_ConfigClockSource+0x18>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e0b3      	b.n	8006fec <HAL_TIM_ConfigClockSource+0x180>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ea2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eaa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ebc:	d03e      	beq.n	8006f3c <HAL_TIM_ConfigClockSource+0xd0>
 8006ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ec2:	f200 8087 	bhi.w	8006fd4 <HAL_TIM_ConfigClockSource+0x168>
 8006ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eca:	f000 8085 	beq.w	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed2:	d87f      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x168>
 8006ed4:	2b70      	cmp	r3, #112	; 0x70
 8006ed6:	d01a      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0xa2>
 8006ed8:	2b70      	cmp	r3, #112	; 0x70
 8006eda:	d87b      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x168>
 8006edc:	2b60      	cmp	r3, #96	; 0x60
 8006ede:	d050      	beq.n	8006f82 <HAL_TIM_ConfigClockSource+0x116>
 8006ee0:	2b60      	cmp	r3, #96	; 0x60
 8006ee2:	d877      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x168>
 8006ee4:	2b50      	cmp	r3, #80	; 0x50
 8006ee6:	d03c      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0xf6>
 8006ee8:	2b50      	cmp	r3, #80	; 0x50
 8006eea:	d873      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x168>
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d058      	beq.n	8006fa2 <HAL_TIM_ConfigClockSource+0x136>
 8006ef0:	2b40      	cmp	r3, #64	; 0x40
 8006ef2:	d86f      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x168>
 8006ef4:	2b30      	cmp	r3, #48	; 0x30
 8006ef6:	d064      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0x156>
 8006ef8:	2b30      	cmp	r3, #48	; 0x30
 8006efa:	d86b      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x168>
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d060      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0x156>
 8006f00:	2b20      	cmp	r3, #32
 8006f02:	d867      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x168>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d05c      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0x156>
 8006f08:	2b10      	cmp	r3, #16
 8006f0a:	d05a      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006f0c:	e062      	b.n	8006fd4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	6899      	ldr	r1, [r3, #8]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f000 f966 	bl	80071ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	609a      	str	r2, [r3, #8]
      break;
 8006f3a:	e04e      	b.n	8006fda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	6899      	ldr	r1, [r3, #8]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f000 f94f 	bl	80071ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689a      	ldr	r2, [r3, #8]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f5e:	609a      	str	r2, [r3, #8]
      break;
 8006f60:	e03b      	b.n	8006fda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	6859      	ldr	r1, [r3, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f000 f8c6 	bl	8007100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2150      	movs	r1, #80	; 0x50
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 f91d 	bl	80071ba <TIM_ITRx_SetConfig>
      break;
 8006f80:	e02b      	b.n	8006fda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6818      	ldr	r0, [r3, #0]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	6859      	ldr	r1, [r3, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f000 f8e4 	bl	800715c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2160      	movs	r1, #96	; 0x60
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 f90d 	bl	80071ba <TIM_ITRx_SetConfig>
      break;
 8006fa0:	e01b      	b.n	8006fda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	6859      	ldr	r1, [r3, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f000 f8a6 	bl	8007100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2140      	movs	r1, #64	; 0x40
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 f8fd 	bl	80071ba <TIM_ITRx_SetConfig>
      break;
 8006fc0:	e00b      	b.n	8006fda <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f000 f8f4 	bl	80071ba <TIM_ITRx_SetConfig>
        break;
 8006fd2:	e002      	b.n	8006fda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006fd4:	bf00      	nop
 8006fd6:	e000      	b.n	8006fda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006fd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	bc80      	pop	{r7}
 8007004:	4770      	bx	lr

08007006 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007006:	b480      	push	{r7}
 8007008:	b083      	sub	sp, #12
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800700e:	bf00      	nop
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	bc80      	pop	{r7}
 8007016:	4770      	bx	lr

08007018 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	bc80      	pop	{r7}
 8007028:	4770      	bx	lr

0800702a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	bc80      	pop	{r7}
 800703a:	4770      	bx	lr

0800703c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a29      	ldr	r2, [pc, #164]	; (80070f4 <TIM_Base_SetConfig+0xb8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00b      	beq.n	800706c <TIM_Base_SetConfig+0x30>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800705a:	d007      	beq.n	800706c <TIM_Base_SetConfig+0x30>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a26      	ldr	r2, [pc, #152]	; (80070f8 <TIM_Base_SetConfig+0xbc>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d003      	beq.n	800706c <TIM_Base_SetConfig+0x30>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a25      	ldr	r2, [pc, #148]	; (80070fc <TIM_Base_SetConfig+0xc0>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d108      	bne.n	800707e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4313      	orrs	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a1c      	ldr	r2, [pc, #112]	; (80070f4 <TIM_Base_SetConfig+0xb8>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00b      	beq.n	800709e <TIM_Base_SetConfig+0x62>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800708c:	d007      	beq.n	800709e <TIM_Base_SetConfig+0x62>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a19      	ldr	r2, [pc, #100]	; (80070f8 <TIM_Base_SetConfig+0xbc>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d003      	beq.n	800709e <TIM_Base_SetConfig+0x62>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a18      	ldr	r2, [pc, #96]	; (80070fc <TIM_Base_SetConfig+0xc0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d108      	bne.n	80070b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	689a      	ldr	r2, [r3, #8]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a07      	ldr	r2, [pc, #28]	; (80070f4 <TIM_Base_SetConfig+0xb8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d103      	bne.n	80070e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	691a      	ldr	r2, [r3, #16]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	615a      	str	r2, [r3, #20]
}
 80070ea:	bf00      	nop
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr
 80070f4:	40012c00 	.word	0x40012c00
 80070f8:	40000400 	.word	0x40000400
 80070fc:	40000800 	.word	0x40000800

08007100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	f023 0201 	bic.w	r2, r3, #1
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800712a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	4313      	orrs	r3, r2
 8007134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f023 030a 	bic.w	r3, r3, #10
 800713c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	621a      	str	r2, [r3, #32]
}
 8007152:	bf00      	nop
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	bc80      	pop	{r7}
 800715a:	4770      	bx	lr

0800715c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6a1b      	ldr	r3, [r3, #32]
 800716c:	f023 0210 	bic.w	r2, r3, #16
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007186:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	031b      	lsls	r3, r3, #12
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	4313      	orrs	r3, r2
 8007190:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007198:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	011b      	lsls	r3, r3, #4
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	621a      	str	r2, [r3, #32]
}
 80071b0:	bf00      	nop
 80071b2:	371c      	adds	r7, #28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bc80      	pop	{r7}
 80071b8:	4770      	bx	lr

080071ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b085      	sub	sp, #20
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	f043 0307 	orr.w	r3, r3, #7
 80071dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	609a      	str	r2, [r3, #8]
}
 80071e4:	bf00      	nop
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bc80      	pop	{r7}
 80071ec:	4770      	bx	lr

080071ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b087      	sub	sp, #28
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	607a      	str	r2, [r7, #4]
 80071fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007208:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	021a      	lsls	r2, r3, #8
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	431a      	orrs	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	4313      	orrs	r3, r2
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	609a      	str	r2, [r3, #8]
}
 8007222:	bf00      	nop
 8007224:	371c      	adds	r7, #28
 8007226:	46bd      	mov	sp, r7
 8007228:	bc80      	pop	{r7}
 800722a:	4770      	bx	lr

0800722c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007240:	2302      	movs	r3, #2
 8007242:	e046      	b.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4313      	orrs	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a16      	ldr	r2, [pc, #88]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00e      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007290:	d009      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a12      	ldr	r2, [pc, #72]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d004      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a10      	ldr	r2, [pc, #64]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d10c      	bne.n	80072c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bc80      	pop	{r7}
 80072da:	4770      	bx	lr
 80072dc:	40012c00 	.word	0x40012c00
 80072e0:	40000400 	.word	0x40000400
 80072e4:	40000800 	.word	0x40000800

080072e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bc80      	pop	{r7}
 80072f8:	4770      	bx	lr

080072fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	bc80      	pop	{r7}
 800730a:	4770      	bx	lr

0800730c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e047      	b.n	80073ae <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7fb fb98 	bl	8002a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2224      	movs	r2, #36	; 0x24
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800734e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fb51 	bl	80079f8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695a      	ldr	r2, [r3, #20]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8007374:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	695a      	ldr	r2, [r3, #20]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f042 0208 	orr.w	r2, r2, #8
 8007384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2220      	movs	r2, #32
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2220      	movs	r2, #32
 80073a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08a      	sub	sp, #40	; 0x28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80073d8:	2300      	movs	r3, #0
 80073da:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80073dc:	2300      	movs	r3, #0
 80073de:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	f003 030f 	and.w	r3, r3, #15
 80073e6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10d      	bne.n	800740a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d008      	beq.n	800740a <HAL_UART_IRQHandler+0x52>
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	f003 0320 	and.w	r3, r3, #32
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fa4f 	bl	80078a6 <UART_Receive_IT>
      return;
 8007408:	e17b      	b.n	8007702 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 80b1 	beq.w	8007574 <HAL_UART_IRQHandler+0x1bc>
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d105      	bne.n	8007428 <HAL_UART_IRQHandler+0x70>
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 80a6 	beq.w	8007574 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00a      	beq.n	8007448 <HAL_UART_IRQHandler+0x90>
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007438:	2b00      	cmp	r3, #0
 800743a:	d005      	beq.n	8007448 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	f043 0201 	orr.w	r2, r3, #1
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	f003 0304 	and.w	r3, r3, #4
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <HAL_UART_IRQHandler+0xb0>
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b00      	cmp	r3, #0
 800745a:	d005      	beq.n	8007468 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007460:	f043 0202 	orr.w	r2, r3, #2
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <HAL_UART_IRQHandler+0xd0>
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	f043 0204 	orr.w	r2, r3, #4
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	f003 0308 	and.w	r3, r3, #8
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00f      	beq.n	80074b2 <HAL_UART_IRQHandler+0xfa>
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	f003 0320 	and.w	r3, r3, #32
 8007498:	2b00      	cmp	r3, #0
 800749a:	d104      	bne.n	80074a6 <HAL_UART_IRQHandler+0xee>
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d005      	beq.n	80074b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	f043 0208 	orr.w	r2, r3, #8
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 811e 	beq.w	80076f8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d007      	beq.n	80074d6 <HAL_UART_IRQHandler+0x11e>
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	f003 0320 	and.w	r3, r3, #32
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f9e8 	bl	80078a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	bf14      	ite	ne
 80074e4:	2301      	movne	r3, #1
 80074e6:	2300      	moveq	r3, #0
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	f003 0308 	and.w	r3, r3, #8
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d102      	bne.n	80074fe <HAL_UART_IRQHandler+0x146>
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d031      	beq.n	8007562 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f92a 	bl	8007758 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750e:	2b00      	cmp	r3, #0
 8007510:	d023      	beq.n	800755a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	695a      	ldr	r2, [r3, #20]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007520:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007526:	2b00      	cmp	r3, #0
 8007528:	d013      	beq.n	8007552 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752e:	4a76      	ldr	r2, [pc, #472]	; (8007708 <HAL_UART_IRQHandler+0x350>)
 8007530:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007536:	4618      	mov	r0, r3
 8007538:	f7fc fea6 	bl	8004288 <HAL_DMA_Abort_IT>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d016      	beq.n	8007570 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800754c:	4610      	mov	r0, r2
 800754e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007550:	e00e      	b.n	8007570 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f8ec 	bl	8007730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007558:	e00a      	b.n	8007570 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f8e8 	bl	8007730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007560:	e006      	b.n	8007570 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f8e4 	bl	8007730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800756e:	e0c3      	b.n	80076f8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007570:	bf00      	nop
    return;
 8007572:	e0c1      	b.n	80076f8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007578:	2b01      	cmp	r3, #1
 800757a:	f040 80a1 	bne.w	80076c0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	f003 0310 	and.w	r3, r3, #16
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 809b 	beq.w	80076c0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	f003 0310 	and.w	r3, r3, #16
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 8095 	beq.w	80076c0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007596:	2300      	movs	r3, #0
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d04e      	beq.n	8007658 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80075c4:	8a3b      	ldrh	r3, [r7, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 8098 	beq.w	80076fc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075d0:	8a3a      	ldrh	r2, [r7, #16]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	f080 8092 	bcs.w	80076fc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	8a3a      	ldrh	r2, [r7, #16]
 80075dc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	2b20      	cmp	r3, #32
 80075e6:	d02b      	beq.n	8007640 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075f6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	695a      	ldr	r2, [r3, #20]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 0201 	bic.w	r2, r2, #1
 8007606:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	695a      	ldr	r2, [r3, #20]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007616:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2220      	movs	r2, #32
 800761c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68da      	ldr	r2, [r3, #12]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 0210 	bic.w	r2, r2, #16
 8007634:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763a:	4618      	mov	r0, r3
 800763c:	f7fc fde9 	bl	8004212 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007648:	b29b      	uxth	r3, r3
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	b29b      	uxth	r3, r3
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f876 	bl	8007742 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007656:	e051      	b.n	80076fc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007660:	b29b      	uxth	r3, r3
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800766a:	b29b      	uxth	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	d047      	beq.n	8007700 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007670:	8a7b      	ldrh	r3, [r7, #18]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d044      	beq.n	8007700 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007684:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	695a      	ldr	r2, [r3, #20]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0201 	bic.w	r2, r2, #1
 8007694:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2220      	movs	r2, #32
 800769a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 0210 	bic.w	r2, r2, #16
 80076b2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076b4:	8a7b      	ldrh	r3, [r7, #18]
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f842 	bl	8007742 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80076be:	e01f      	b.n	8007700 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d008      	beq.n	80076dc <HAL_UART_IRQHandler+0x324>
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d003      	beq.n	80076dc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f87f 	bl	80077d8 <UART_Transmit_IT>
    return;
 80076da:	e012      	b.n	8007702 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00d      	beq.n	8007702 <HAL_UART_IRQHandler+0x34a>
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d008      	beq.n	8007702 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f8c0 	bl	8007876 <UART_EndTransmit_IT>
    return;
 80076f6:	e004      	b.n	8007702 <HAL_UART_IRQHandler+0x34a>
    return;
 80076f8:	bf00      	nop
 80076fa:	e002      	b.n	8007702 <HAL_UART_IRQHandler+0x34a>
      return;
 80076fc:	bf00      	nop
 80076fe:	e000      	b.n	8007702 <HAL_UART_IRQHandler+0x34a>
      return;
 8007700:	bf00      	nop
  }
}
 8007702:	3728      	adds	r7, #40	; 0x28
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	080077b1 	.word	0x080077b1

0800770c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	bc80      	pop	{r7}
 800771c:	4770      	bx	lr

0800771e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	bc80      	pop	{r7}
 800772e:	4770      	bx	lr

08007730 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	bc80      	pop	{r7}
 8007740:	4770      	bx	lr

08007742 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800774e:	bf00      	nop
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800776e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695a      	ldr	r2, [r3, #20]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0201 	bic.w	r2, r2, #1
 800777e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	2b01      	cmp	r3, #1
 8007786:	d107      	bne.n	8007798 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0210 	bic.w	r2, r2, #16
 8007796:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077a6:	bf00      	nop
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bc80      	pop	{r7}
 80077ae:	4770      	bx	lr

080077b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7ff ffb0 	bl	8007730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077d0:	bf00      	nop
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b21      	cmp	r3, #33	; 0x21
 80077ea:	d13e      	bne.n	800786a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f4:	d114      	bne.n	8007820 <UART_Transmit_IT+0x48>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d110      	bne.n	8007820 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	461a      	mov	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007812:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	1c9a      	adds	r2, r3, #2
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	621a      	str	r2, [r3, #32]
 800781e:	e008      	b.n	8007832 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	1c59      	adds	r1, r3, #1
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	6211      	str	r1, [r2, #32]
 800782a:	781a      	ldrb	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b29b      	uxth	r3, r3
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	4619      	mov	r1, r3
 8007840:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10f      	bne.n	8007866 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007854:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007864:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	e000      	b.n	800786c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800786a:	2302      	movs	r3, #2
  }
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	bc80      	pop	{r7}
 8007874:	4770      	bx	lr

08007876 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68da      	ldr	r2, [r3, #12]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800788c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff ff38 	bl	800770c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b086      	sub	sp, #24
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b22      	cmp	r3, #34	; 0x22
 80078b8:	f040 8099 	bne.w	80079ee <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c4:	d117      	bne.n	80078f6 <UART_Receive_IT+0x50>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d113      	bne.n	80078f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	b29b      	uxth	r3, r3
 80078e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ee:	1c9a      	adds	r2, r3, #2
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	629a      	str	r2, [r3, #40]	; 0x28
 80078f4:	e026      	b.n	8007944 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80078fc:	2300      	movs	r3, #0
 80078fe:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007908:	d007      	beq.n	800791a <UART_Receive_IT+0x74>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10a      	bne.n	8007928 <UART_Receive_IT+0x82>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d106      	bne.n	8007928 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	b2da      	uxtb	r2, r3
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	701a      	strb	r2, [r3, #0]
 8007926:	e008      	b.n	800793a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007934:	b2da      	uxtb	r2, r3
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007948:	b29b      	uxth	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b29b      	uxth	r3, r3
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	4619      	mov	r1, r3
 8007952:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007954:	2b00      	cmp	r3, #0
 8007956:	d148      	bne.n	80079ea <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 0220 	bic.w	r2, r2, #32
 8007966:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68da      	ldr	r2, [r3, #12]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007976:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	695a      	ldr	r2, [r3, #20]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0201 	bic.w	r2, r2, #1
 8007986:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2220      	movs	r2, #32
 800798c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007994:	2b01      	cmp	r3, #1
 8007996:	d123      	bne.n	80079e0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 0210 	bic.w	r2, r2, #16
 80079ac:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0310 	and.w	r3, r3, #16
 80079b8:	2b10      	cmp	r3, #16
 80079ba:	d10a      	bne.n	80079d2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079bc:	2300      	movs	r3, #0
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079d6:	4619      	mov	r1, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff feb2 	bl	8007742 <HAL_UARTEx_RxEventCallback>
 80079de:	e002      	b.n	80079e6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff fe9c 	bl	800771e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	e002      	b.n	80079f0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	e000      	b.n	80079f0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80079ee:	2302      	movs	r3, #2
  }
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689a      	ldr	r2, [r3, #8]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007a32:	f023 030c 	bic.w	r3, r3, #12
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	6812      	ldr	r2, [r2, #0]
 8007a3a:	68b9      	ldr	r1, [r7, #8]
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699a      	ldr	r2, [r3, #24]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a2c      	ldr	r2, [pc, #176]	; (8007b0c <UART_SetConfig+0x114>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d103      	bne.n	8007a68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007a60:	f7fd fe7a 	bl	8005758 <HAL_RCC_GetPCLK2Freq>
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	e002      	b.n	8007a6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007a68:	f7fd fe62 	bl	8005730 <HAL_RCC_GetPCLK1Freq>
 8007a6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4613      	mov	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	009a      	lsls	r2, r3, #2
 8007a78:	441a      	add	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a84:	4a22      	ldr	r2, [pc, #136]	; (8007b10 <UART_SetConfig+0x118>)
 8007a86:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8a:	095b      	lsrs	r3, r3, #5
 8007a8c:	0119      	lsls	r1, r3, #4
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	009a      	lsls	r2, r3, #2
 8007a98:	441a      	add	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8007aa4:	4b1a      	ldr	r3, [pc, #104]	; (8007b10 <UART_SetConfig+0x118>)
 8007aa6:	fba3 0302 	umull	r0, r3, r3, r2
 8007aaa:	095b      	lsrs	r3, r3, #5
 8007aac:	2064      	movs	r0, #100	; 0x64
 8007aae:	fb00 f303 	mul.w	r3, r0, r3
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	3332      	adds	r3, #50	; 0x32
 8007ab8:	4a15      	ldr	r2, [pc, #84]	; (8007b10 <UART_SetConfig+0x118>)
 8007aba:	fba2 2303 	umull	r2, r3, r2, r3
 8007abe:	095b      	lsrs	r3, r3, #5
 8007ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ac4:	4419      	add	r1, r3
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	009a      	lsls	r2, r3, #2
 8007ad0:	441a      	add	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007adc:	4b0c      	ldr	r3, [pc, #48]	; (8007b10 <UART_SetConfig+0x118>)
 8007ade:	fba3 0302 	umull	r0, r3, r3, r2
 8007ae2:	095b      	lsrs	r3, r3, #5
 8007ae4:	2064      	movs	r0, #100	; 0x64
 8007ae6:	fb00 f303 	mul.w	r3, r0, r3
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	011b      	lsls	r3, r3, #4
 8007aee:	3332      	adds	r3, #50	; 0x32
 8007af0:	4a07      	ldr	r2, [pc, #28]	; (8007b10 <UART_SetConfig+0x118>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	095b      	lsrs	r3, r3, #5
 8007af8:	f003 020f 	and.w	r2, r3, #15
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	440a      	add	r2, r1
 8007b02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007b04:	bf00      	nop
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	40013800 	.word	0x40013800
 8007b10:	51eb851f 	.word	0x51eb851f

08007b14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007b18:	4904      	ldr	r1, [pc, #16]	; (8007b2c <MX_FATFS_Init+0x18>)
 8007b1a:	4805      	ldr	r0, [pc, #20]	; (8007b30 <MX_FATFS_Init+0x1c>)
 8007b1c:	f003 fab6 	bl	800b08c <FATFS_LinkDriver>
 8007b20:	4603      	mov	r3, r0
 8007b22:	461a      	mov	r2, r3
 8007b24:	4b03      	ldr	r3, [pc, #12]	; (8007b34 <MX_FATFS_Init+0x20>)
 8007b26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007b28:	bf00      	nop
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20000aac 	.word	0x20000aac
 8007b30:	20000030 	.word	0x20000030
 8007b34:	20000aa8 	.word	0x20000aa8

08007b38 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007b3c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bc80      	pop	{r7}
 8007b44:	4770      	bx	lr

08007b46 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b082      	sub	sp, #8
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return SD_disk_initialize (pdrv);
 8007b50:	79fb      	ldrb	r3, [r7, #7]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7f9 fdc4 	bl	80016e0 <SD_disk_initialize>
 8007b58:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b082      	sub	sp, #8
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	4603      	mov	r3, r0
 8007b6a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
     return SD_disk_status(pdrv);
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7f9 fea0 	bl	80018b4 <SD_disk_status>
 8007b74:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	603b      	str	r3, [r7, #0]
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 8007b8e:	7bf8      	ldrb	r0, [r7, #15]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	68b9      	ldr	r1, [r7, #8]
 8007b96:	f7f9 fea1 	bl	80018dc <SD_disk_read>
 8007b9a:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	607a      	str	r2, [r7, #4]
 8007bae:	603b      	str	r3, [r7, #0]
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 8007bb4:	7bf8      	ldrb	r0, [r7, #15]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	68b9      	ldr	r1, [r7, #8]
 8007bbc:	f7f9 fef8 	bl	80019b0 <SD_disk_write>
 8007bc0:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	603a      	str	r2, [r7, #0]
 8007bd4:	71fb      	strb	r3, [r7, #7]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8007bda:	79b9      	ldrb	r1, [r7, #6]
 8007bdc:	79fb      	ldrb	r3, [r7, #7]
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7f9 ff69 	bl	8001ab8 <SD_disk_ioctl>
 8007be6:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	4a08      	ldr	r2, [pc, #32]	; (8007c20 <disk_status+0x30>)
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	79fa      	ldrb	r2, [r7, #7]
 8007c08:	4905      	ldr	r1, [pc, #20]	; (8007c20 <disk_status+0x30>)
 8007c0a:	440a      	add	r2, r1
 8007c0c:	7a12      	ldrb	r2, [r2, #8]
 8007c0e:	4610      	mov	r0, r2
 8007c10:	4798      	blx	r3
 8007c12:	4603      	mov	r3, r0
 8007c14:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	20000ad0 	.word	0x20000ad0

08007c24 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	4a0d      	ldr	r2, [pc, #52]	; (8007c6c <disk_initialize+0x48>)
 8007c36:	5cd3      	ldrb	r3, [r2, r3]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d111      	bne.n	8007c60 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8007c3c:	79fb      	ldrb	r3, [r7, #7]
 8007c3e:	4a0b      	ldr	r2, [pc, #44]	; (8007c6c <disk_initialize+0x48>)
 8007c40:	2101      	movs	r1, #1
 8007c42:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007c44:	79fb      	ldrb	r3, [r7, #7]
 8007c46:	4a09      	ldr	r2, [pc, #36]	; (8007c6c <disk_initialize+0x48>)
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	79fa      	ldrb	r2, [r7, #7]
 8007c52:	4906      	ldr	r1, [pc, #24]	; (8007c6c <disk_initialize+0x48>)
 8007c54:	440a      	add	r2, r1
 8007c56:	7a12      	ldrb	r2, [r2, #8]
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4798      	blx	r3
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	20000ad0 	.word	0x20000ad0

08007c70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007c70:	b590      	push	{r4, r7, lr}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	607a      	str	r2, [r7, #4]
 8007c7a:	603b      	str	r3, [r7, #0]
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	4a0a      	ldr	r2, [pc, #40]	; (8007cac <disk_read+0x3c>)
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	689c      	ldr	r4, [r3, #8]
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	4a07      	ldr	r2, [pc, #28]	; (8007cac <disk_read+0x3c>)
 8007c90:	4413      	add	r3, r2
 8007c92:	7a18      	ldrb	r0, [r3, #8]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	68b9      	ldr	r1, [r7, #8]
 8007c9a:	47a0      	blx	r4
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	371c      	adds	r7, #28
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd90      	pop	{r4, r7, pc}
 8007caa:	bf00      	nop
 8007cac:	20000ad0 	.word	0x20000ad0

08007cb0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007cb0:	b590      	push	{r4, r7, lr}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	607a      	str	r2, [r7, #4]
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	4a0a      	ldr	r2, [pc, #40]	; (8007cec <disk_write+0x3c>)
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	68dc      	ldr	r4, [r3, #12]
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	4a07      	ldr	r2, [pc, #28]	; (8007cec <disk_write+0x3c>)
 8007cd0:	4413      	add	r3, r2
 8007cd2:	7a18      	ldrb	r0, [r3, #8]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	68b9      	ldr	r1, [r7, #8]
 8007cda:	47a0      	blx	r4
 8007cdc:	4603      	mov	r3, r0
 8007cde:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	371c      	adds	r7, #28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd90      	pop	{r4, r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20000ad0 	.word	0x20000ad0

08007cf0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	603a      	str	r2, [r7, #0]
 8007cfa:	71fb      	strb	r3, [r7, #7]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007d00:	79fb      	ldrb	r3, [r7, #7]
 8007d02:	4a09      	ldr	r2, [pc, #36]	; (8007d28 <disk_ioctl+0x38>)
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	79fa      	ldrb	r2, [r7, #7]
 8007d0e:	4906      	ldr	r1, [pc, #24]	; (8007d28 <disk_ioctl+0x38>)
 8007d10:	440a      	add	r2, r1
 8007d12:	7a10      	ldrb	r0, [r2, #8]
 8007d14:	79b9      	ldrb	r1, [r7, #6]
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	4798      	blx	r3
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73fb      	strb	r3, [r7, #15]
  return res;
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20000ad0 	.word	0x20000ad0

08007d2c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8007d40:	e007      	b.n	8007d52 <mem_cpy+0x26>
		*d++ = *s++;
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	1c53      	adds	r3, r2, #1
 8007d46:	613b      	str	r3, [r7, #16]
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	1c59      	adds	r1, r3, #1
 8007d4c:	6179      	str	r1, [r7, #20]
 8007d4e:	7812      	ldrb	r2, [r2, #0]
 8007d50:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	1e5a      	subs	r2, r3, #1
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1f2      	bne.n	8007d42 <mem_cpy+0x16>
}
 8007d5c:	bf00      	nop
 8007d5e:	bf00      	nop
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bc80      	pop	{r7}
 8007d66:	4770      	bx	lr

08007d68 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8007d78:	e005      	b.n	8007d86 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	1c5a      	adds	r2, r3, #1
 8007d7e:	617a      	str	r2, [r7, #20]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	b2d2      	uxtb	r2, r2
 8007d84:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	1e5a      	subs	r2, r3, #1
 8007d8a:	607a      	str	r2, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1f4      	bne.n	8007d7a <mem_set+0x12>
}
 8007d90:	bf00      	nop
 8007d92:	bf00      	nop
 8007d94:	371c      	adds	r7, #28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bc80      	pop	{r7}
 8007d9a:	4770      	bx	lr

08007d9c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8007d9c:	b480      	push	{r7}
 8007d9e:	b089      	sub	sp, #36	; 0x24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	61fb      	str	r3, [r7, #28]
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007db0:	2300      	movs	r3, #0
 8007db2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8007db4:	bf00      	nop
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	1e5a      	subs	r2, r3, #1
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00d      	beq.n	8007ddc <mem_cmp+0x40>
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	1c5a      	adds	r2, r3, #1
 8007dc4:	61fa      	str	r2, [r7, #28]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	61ba      	str	r2, [r7, #24]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	1acb      	subs	r3, r1, r3
 8007dd4:	617b      	str	r3, [r7, #20]
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d0ec      	beq.n	8007db6 <mem_cmp+0x1a>
	return r;
 8007ddc:	697b      	ldr	r3, [r7, #20]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3724      	adds	r7, #36	; 0x24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bc80      	pop	{r7}
 8007de6:	4770      	bx	lr

08007de8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007df2:	e002      	b.n	8007dfa <chk_chr+0x12>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	3301      	adds	r3, #1
 8007df8:	607b      	str	r3, [r7, #4]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d005      	beq.n	8007e0e <chk_chr+0x26>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d1f2      	bne.n	8007df4 <chk_chr+0xc>
	return *str;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	781b      	ldrb	r3, [r3, #0]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bc80      	pop	{r7}
 8007e1a:	4770      	bx	lr

08007e1c <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f003 f969 	bl	800b102 <ff_req_grant>
 8007e30:	4603      	mov	r3, r0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	460b      	mov	r3, r1
 8007e44:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d011      	beq.n	8007e70 <unlock_fs+0x36>
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	2b0c      	cmp	r3, #12
 8007e50:	d00e      	beq.n	8007e70 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	2b0b      	cmp	r3, #11
 8007e56:	d00b      	beq.n	8007e70 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 8007e58:	78fb      	ldrb	r3, [r7, #3]
 8007e5a:	2b09      	cmp	r3, #9
 8007e5c:	d008      	beq.n	8007e70 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	2b0f      	cmp	r3, #15
 8007e62:	d005      	beq.n	8007e70 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f003 f95e 	bl	800b12c <ff_rel_grant>
	}
}
 8007e70:	bf00      	nop
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007e82:	2300      	movs	r3, #0
 8007e84:	60bb      	str	r3, [r7, #8]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	e038      	b.n	8007efe <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8007e8c:	492f      	ldr	r1, [pc, #188]	; (8007f4c <chk_lock+0xd4>)
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	4613      	mov	r3, r2
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	4413      	add	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d029      	beq.n	8007ef4 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007ea0:	492a      	ldr	r1, [pc, #168]	; (8007f4c <chk_lock+0xd4>)
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	440b      	add	r3, r1
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d11e      	bne.n	8007ef8 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8007eba:	4924      	ldr	r1, [pc, #144]	; (8007f4c <chk_lock+0xd4>)
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	440b      	add	r3, r1
 8007ec8:	3304      	adds	r3, #4
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d110      	bne.n	8007ef8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8007ed6:	491d      	ldr	r1, [pc, #116]	; (8007f4c <chk_lock+0xd4>)
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	4613      	mov	r3, r2
 8007edc:	005b      	lsls	r3, r3, #1
 8007ede:	4413      	add	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	440b      	add	r3, r1
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	881a      	ldrh	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d102      	bne.n	8007ef8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8007ef2:	e007      	b.n	8007f04 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	3301      	adds	r3, #1
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d9c3      	bls.n	8007e8c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d109      	bne.n	8007f1e <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d102      	bne.n	8007f16 <chk_lock+0x9e>
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d101      	bne.n	8007f1a <chk_lock+0xa2>
 8007f16:	2300      	movs	r3, #0
 8007f18:	e013      	b.n	8007f42 <chk_lock+0xca>
 8007f1a:	2312      	movs	r3, #18
 8007f1c:	e011      	b.n	8007f42 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10b      	bne.n	8007f3c <chk_lock+0xc4>
 8007f24:	4909      	ldr	r1, [pc, #36]	; (8007f4c <chk_lock+0xd4>)
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	4613      	mov	r3, r2
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	4413      	add	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	440b      	add	r3, r1
 8007f32:	330a      	adds	r3, #10
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f3a:	d101      	bne.n	8007f40 <chk_lock+0xc8>
 8007f3c:	2310      	movs	r3, #16
 8007f3e:	e000      	b.n	8007f42 <chk_lock+0xca>
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc80      	pop	{r7}
 8007f4a:	4770      	bx	lr
 8007f4c:	20000ab8 	.word	0x20000ab8

08007f50 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007f56:	2300      	movs	r3, #0
 8007f58:	607b      	str	r3, [r7, #4]
 8007f5a:	e002      	b.n	8007f62 <enq_lock+0x12>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	607b      	str	r3, [r7, #4]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d809      	bhi.n	8007f7c <enq_lock+0x2c>
 8007f68:	490a      	ldr	r1, [pc, #40]	; (8007f94 <enq_lock+0x44>)
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	005b      	lsls	r3, r3, #1
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	440b      	add	r3, r1
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1ef      	bne.n	8007f5c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	bf14      	ite	ne
 8007f82:	2301      	movne	r3, #1
 8007f84:	2300      	moveq	r3, #0
 8007f86:	b2db      	uxtb	r3, r3
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bc80      	pop	{r7}
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	20000ab8 	.word	0x20000ab8

08007f98 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	e02b      	b.n	8008000 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8007fa8:	4955      	ldr	r1, [pc, #340]	; (8008100 <inc_lock+0x168>)
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	4613      	mov	r3, r2
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	4413      	add	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	440b      	add	r3, r1
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d11b      	bne.n	8007ffa <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8007fc2:	494f      	ldr	r1, [pc, #316]	; (8008100 <inc_lock+0x168>)
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	4413      	add	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	440b      	add	r3, r1
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d10d      	bne.n	8007ffa <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8007fde:	4948      	ldr	r1, [pc, #288]	; (8008100 <inc_lock+0x168>)
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	440b      	add	r3, r1
 8007fec:	3308      	adds	r3, #8
 8007fee:	881a      	ldrh	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d006      	beq.n	8008008 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d9d0      	bls.n	8007fa8 <inc_lock+0x10>
 8008006:	e000      	b.n	800800a <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8008008:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2b02      	cmp	r3, #2
 800800e:	d145      	bne.n	800809c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008010:	2300      	movs	r3, #0
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e002      	b.n	800801c <inc_lock+0x84>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3301      	adds	r3, #1
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d809      	bhi.n	8008036 <inc_lock+0x9e>
 8008022:	4937      	ldr	r1, [pc, #220]	; (8008100 <inc_lock+0x168>)
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4613      	mov	r3, r2
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1ef      	bne.n	8008016 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2b02      	cmp	r3, #2
 800803a:	d101      	bne.n	8008040 <inc_lock+0xa8>
 800803c:	2300      	movs	r3, #0
 800803e:	e05a      	b.n	80080f6 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8008046:	482e      	ldr	r0, [pc, #184]	; (8008100 <inc_lock+0x168>)
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	4613      	mov	r3, r2
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	4413      	add	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4403      	add	r3, r0
 8008054:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800805c:	4828      	ldr	r0, [pc, #160]	; (8008100 <inc_lock+0x168>)
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	4613      	mov	r3, r2
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	4413      	add	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4403      	add	r3, r0
 800806a:	3304      	adds	r3, #4
 800806c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8008074:	4922      	ldr	r1, [pc, #136]	; (8008100 <inc_lock+0x168>)
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	4613      	mov	r3, r2
 800807a:	005b      	lsls	r3, r3, #1
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	440b      	add	r3, r1
 8008082:	3308      	adds	r3, #8
 8008084:	4602      	mov	r2, r0
 8008086:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8008088:	491d      	ldr	r1, [pc, #116]	; (8008100 <inc_lock+0x168>)
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	4613      	mov	r3, r2
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	4413      	add	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	440b      	add	r3, r1
 8008096:	330a      	adds	r3, #10
 8008098:	2200      	movs	r2, #0
 800809a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00c      	beq.n	80080bc <inc_lock+0x124>
 80080a2:	4917      	ldr	r1, [pc, #92]	; (8008100 <inc_lock+0x168>)
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	4613      	mov	r3, r2
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	4413      	add	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	440b      	add	r3, r1
 80080b0:	330a      	adds	r3, #10
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <inc_lock+0x124>
 80080b8:	2300      	movs	r3, #0
 80080ba:	e01c      	b.n	80080f6 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10b      	bne.n	80080da <inc_lock+0x142>
 80080c2:	490f      	ldr	r1, [pc, #60]	; (8008100 <inc_lock+0x168>)
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4613      	mov	r3, r2
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	440b      	add	r3, r1
 80080d0:	330a      	adds	r3, #10
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	3301      	adds	r3, #1
 80080d6:	b299      	uxth	r1, r3
 80080d8:	e001      	b.n	80080de <inc_lock+0x146>
 80080da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80080de:	4808      	ldr	r0, [pc, #32]	; (8008100 <inc_lock+0x168>)
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	4613      	mov	r3, r2
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	4413      	add	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4403      	add	r3, r0
 80080ec:	330a      	adds	r3, #10
 80080ee:	460a      	mov	r2, r1
 80080f0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3301      	adds	r3, #1
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr
 8008100:	20000ab8 	.word	0x20000ab8

08008104 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3b01      	subs	r3, #1
 8008110:	607b      	str	r3, [r7, #4]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d82e      	bhi.n	8008176 <dec_lock+0x72>
		n = Files[i].ctr;
 8008118:	491b      	ldr	r1, [pc, #108]	; (8008188 <dec_lock+0x84>)
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	4613      	mov	r3, r2
 800811e:	005b      	lsls	r3, r3, #1
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	330a      	adds	r3, #10
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800812c:	89fb      	ldrh	r3, [r7, #14]
 800812e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008132:	d101      	bne.n	8008138 <dec_lock+0x34>
 8008134:	2300      	movs	r3, #0
 8008136:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8008138:	89fb      	ldrh	r3, [r7, #14]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <dec_lock+0x40>
 800813e:	89fb      	ldrh	r3, [r7, #14]
 8008140:	3b01      	subs	r3, #1
 8008142:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008144:	4910      	ldr	r1, [pc, #64]	; (8008188 <dec_lock+0x84>)
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	4613      	mov	r3, r2
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	440b      	add	r3, r1
 8008152:	330a      	adds	r3, #10
 8008154:	89fa      	ldrh	r2, [r7, #14]
 8008156:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008158:	89fb      	ldrh	r3, [r7, #14]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d108      	bne.n	8008170 <dec_lock+0x6c>
 800815e:	490a      	ldr	r1, [pc, #40]	; (8008188 <dec_lock+0x84>)
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	4613      	mov	r3, r2
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	440b      	add	r3, r1
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	737b      	strb	r3, [r7, #13]
 8008174:	e001      	b.n	800817a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008176:	2302      	movs	r3, #2
 8008178:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800817a:	7b7b      	ldrb	r3, [r7, #13]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	bc80      	pop	{r7}
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	20000ab8 	.word	0x20000ab8

0800818c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008194:	2300      	movs	r3, #0
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	e016      	b.n	80081c8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800819a:	4910      	ldr	r1, [pc, #64]	; (80081dc <clear_lock+0x50>)
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	4613      	mov	r3, r2
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d108      	bne.n	80081c2 <clear_lock+0x36>
 80081b0:	490a      	ldr	r1, [pc, #40]	; (80081dc <clear_lock+0x50>)
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	4613      	mov	r3, r2
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	4413      	add	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	440b      	add	r3, r1
 80081be:	2200      	movs	r2, #0
 80081c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	3301      	adds	r3, #1
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d9e5      	bls.n	800819a <clear_lock+0xe>
	}
}
 80081ce:	bf00      	nop
 80081d0:	bf00      	nop
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bc80      	pop	{r7}
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	20000ab8 	.word	0x20000ab8

080081e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d038      	beq.n	8008268 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80081fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	2301      	movs	r3, #1
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	f7ff fd51 	bl	8007cb0 <disk_write>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8008214:	2301      	movs	r3, #1
 8008216:	73fb      	strb	r3, [r7, #15]
 8008218:	e026      	b.n	8008268 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	1ad2      	subs	r2, r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008232:	429a      	cmp	r2, r3
 8008234:	d218      	bcs.n	8008268 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800823c:	613b      	str	r3, [r7, #16]
 800823e:	e010      	b.n	8008262 <sync_window+0x82>
					wsect += fs->fsize;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4413      	add	r3, r2
 800824a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008252:	6879      	ldr	r1, [r7, #4]
 8008254:	2301      	movs	r3, #1
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	f7ff fd2a 	bl	8007cb0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	3b01      	subs	r3, #1
 8008260:	613b      	str	r3, [r7, #16]
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d8eb      	bhi.n	8008240 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8008268:	7bfb      	ldrb	r3, [r7, #15]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	429a      	cmp	r2, r3
 800828a:	d01b      	beq.n	80082c4 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7ff ffa7 	bl	80081e0 <sync_window>
 8008292:	4603      	mov	r3, r0
 8008294:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d113      	bne.n	80082c4 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	2301      	movs	r3, #1
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	f7ff fce2 	bl	8007c70 <disk_read>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d004      	beq.n	80082bc <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80082b2:	f04f 33ff 	mov.w	r3, #4294967295
 80082b6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7ff ff82 	bl	80081e0 <sync_window>
 80082dc:	4603      	mov	r3, r0
 80082de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f040 809b 	bne.w	800841e <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	f040 8088 	bne.w	8008404 <sync_fs+0x136>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	f040 8082 	bne.w	8008404 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008306:	2100      	movs	r1, #0
 8008308:	4618      	mov	r0, r3
 800830a:	f7ff fd2d 	bl	8007d68 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2255      	movs	r2, #85	; 0x55
 8008312:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	22aa      	movs	r2, #170	; 0xaa
 800831a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2252      	movs	r2, #82	; 0x52
 8008322:	701a      	strb	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2252      	movs	r2, #82	; 0x52
 8008328:	705a      	strb	r2, [r3, #1]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2261      	movs	r2, #97	; 0x61
 800832e:	709a      	strb	r2, [r3, #2]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2241      	movs	r2, #65	; 0x41
 8008334:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2272      	movs	r2, #114	; 0x72
 800833a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2272      	movs	r2, #114	; 0x72
 8008342:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2241      	movs	r2, #65	; 0x41
 800834a:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2261      	movs	r2, #97	; 0x61
 8008352:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800835c:	b2da      	uxtb	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800836a:	b29b      	uxth	r3, r3
 800836c:	0a1b      	lsrs	r3, r3, #8
 800836e:	b29b      	uxth	r3, r3
 8008370:	b2da      	uxtb	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800837e:	0c1b      	lsrs	r3, r3, #16
 8008380:	b2da      	uxtb	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800838e:	0e1b      	lsrs	r3, r3, #24
 8008390:	b2da      	uxtb	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	0a1b      	lsrs	r3, r3, #8
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80083c0:	0c1b      	lsrs	r3, r3, #16
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80083d0:	0e1b      	lsrs	r3, r3, #24
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80083e0:	1c5a      	adds	r2, r3, #1
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80083f6:	2301      	movs	r3, #1
 80083f8:	f7ff fc5a 	bl	8007cb0 <disk_write>
			fs->fsi_flag = 0;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800840a:	2200      	movs	r2, #0
 800840c:	2100      	movs	r1, #0
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff fc6e 	bl	8007cf0 <disk_ioctl>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <sync_fs+0x150>
			res = FR_DISK_ERR;
 800841a:	2301      	movs	r3, #1
 800841c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800841e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	3b02      	subs	r3, #2
 8008436:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800843e:	3b02      	subs	r3, #2
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d301      	bcc.n	800844a <clust2sect+0x22>
 8008446:	2300      	movs	r3, #0
 8008448:	e00a      	b.n	8008460 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008450:	461a      	mov	r2, r3
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	fb03 f202 	mul.w	r2, r3, r2
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800845e:	4413      	add	r3, r2
}
 8008460:	4618      	mov	r0, r3
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	bc80      	pop	{r7}
 8008468:	4770      	bx	lr

0800846a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b086      	sub	sp, #24
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d905      	bls.n	8008486 <get_fat+0x1c>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	429a      	cmp	r2, r3
 8008484:	d302      	bcc.n	800848c <get_fat+0x22>
		val = 1;	/* Internal error */
 8008486:	2301      	movs	r3, #1
 8008488:	617b      	str	r3, [r7, #20]
 800848a:	e0a3      	b.n	80085d4 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800848c:	f04f 33ff 	mov.w	r3, #4294967295
 8008490:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008498:	2b03      	cmp	r3, #3
 800849a:	d068      	beq.n	800856e <get_fat+0x104>
 800849c:	2b03      	cmp	r3, #3
 800849e:	f300 808f 	bgt.w	80085c0 <get_fat+0x156>
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d002      	beq.n	80084ac <get_fat+0x42>
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d040      	beq.n	800852c <get_fat+0xc2>
 80084aa:	e089      	b.n	80085c0 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	4413      	add	r3, r2
 80084b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	0a5b      	lsrs	r3, r3, #9
 80084c4:	4413      	add	r3, r2
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff fed2 	bl	8008272 <move_window>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d178      	bne.n	80085c6 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	60fa      	str	r2, [r7, #12]
 80084da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	5cd3      	ldrb	r3, [r2, r3]
 80084e2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	0a5b      	lsrs	r3, r3, #9
 80084ee:	4413      	add	r3, r2
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7ff febd 	bl	8008272 <move_window>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d165      	bne.n	80085ca <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	5cd3      	ldrb	r3, [r2, r3]
 8008508:	021b      	lsls	r3, r3, #8
 800850a:	461a      	mov	r2, r3
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4313      	orrs	r3, r2
 8008510:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <get_fat+0xb8>
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	091b      	lsrs	r3, r3, #4
 8008520:	e002      	b.n	8008528 <get_fat+0xbe>
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008528:	617b      	str	r3, [r7, #20]
			break;
 800852a:	e053      	b.n	80085d4 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	0a1b      	lsrs	r3, r3, #8
 8008536:	4413      	add	r3, r2
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff fe99 	bl	8008272 <move_window>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d143      	bne.n	80085ce <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	4413      	add	r3, r2
 8008552:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	3301      	adds	r3, #1
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	021b      	lsls	r3, r3, #8
 800855c:	b21a      	sxth	r2, r3
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	b21b      	sxth	r3, r3
 8008564:	4313      	orrs	r3, r2
 8008566:	b21b      	sxth	r3, r3
 8008568:	b29b      	uxth	r3, r3
 800856a:	617b      	str	r3, [r7, #20]
			break;
 800856c:	e032      	b.n	80085d4 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	09db      	lsrs	r3, r3, #7
 8008578:	4413      	add	r3, r2
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7ff fe78 	bl	8008272 <move_window>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d124      	bne.n	80085d2 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	4413      	add	r3, r2
 8008594:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	3303      	adds	r3, #3
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	061a      	lsls	r2, r3, #24
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	3302      	adds	r3, #2
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	041b      	lsls	r3, r3, #16
 80085a6:	4313      	orrs	r3, r2
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	3201      	adds	r2, #1
 80085ac:	7812      	ldrb	r2, [r2, #0]
 80085ae:	0212      	lsls	r2, r2, #8
 80085b0:	4313      	orrs	r3, r2
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	7812      	ldrb	r2, [r2, #0]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80085bc:	617b      	str	r3, [r7, #20]
			break;
 80085be:	e009      	b.n	80085d4 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 80085c0:	2301      	movs	r3, #1
 80085c2:	617b      	str	r3, [r7, #20]
 80085c4:	e006      	b.n	80085d4 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085c6:	bf00      	nop
 80085c8:	e004      	b.n	80085d4 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085ca:	bf00      	nop
 80085cc:	e002      	b.n	80085d4 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80085ce:	bf00      	nop
 80085d0:	e000      	b.n	80085d4 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80085d2:	bf00      	nop
		}
	}

	return val;
 80085d4:	697b      	ldr	r3, [r7, #20]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b088      	sub	sp, #32
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d905      	bls.n	80085fc <put_fat+0x1e>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d302      	bcc.n	8008602 <put_fat+0x24>
		res = FR_INT_ERR;
 80085fc:	2302      	movs	r3, #2
 80085fe:	77fb      	strb	r3, [r7, #31]
 8008600:	e0f6      	b.n	80087f0 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008608:	2b03      	cmp	r3, #3
 800860a:	f000 809e 	beq.w	800874a <put_fat+0x16c>
 800860e:	2b03      	cmp	r3, #3
 8008610:	f300 80e4 	bgt.w	80087dc <put_fat+0x1fe>
 8008614:	2b01      	cmp	r3, #1
 8008616:	d002      	beq.n	800861e <put_fat+0x40>
 8008618:	2b02      	cmp	r3, #2
 800861a:	d06f      	beq.n	80086fc <put_fat+0x11e>
 800861c:	e0de      	b.n	80087dc <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	617b      	str	r3, [r7, #20]
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	085b      	lsrs	r3, r3, #1
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	4413      	add	r3, r2
 800862a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	0a5b      	lsrs	r3, r3, #9
 8008636:	4413      	add	r3, r2
 8008638:	4619      	mov	r1, r3
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7ff fe19 	bl	8008272 <move_window>
 8008640:	4603      	mov	r3, r0
 8008642:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008644:	7ffb      	ldrb	r3, [r7, #31]
 8008646:	2b00      	cmp	r3, #0
 8008648:	f040 80cb 	bne.w	80087e2 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	617a      	str	r2, [r7, #20]
 8008652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	4413      	add	r3, r2
 800865a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00d      	beq.n	8008682 <put_fat+0xa4>
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	b25b      	sxtb	r3, r3
 800866c:	f003 030f 	and.w	r3, r3, #15
 8008670:	b25a      	sxtb	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	b2db      	uxtb	r3, r3
 8008676:	011b      	lsls	r3, r3, #4
 8008678:	b25b      	sxtb	r3, r3
 800867a:	4313      	orrs	r3, r2
 800867c:	b25b      	sxtb	r3, r3
 800867e:	b2db      	uxtb	r3, r3
 8008680:	e001      	b.n	8008686 <put_fat+0xa8>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	b2db      	uxtb	r3, r3
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	0a5b      	lsrs	r3, r3, #9
 800869c:	4413      	add	r3, r2
 800869e:	4619      	mov	r1, r3
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f7ff fde6 	bl	8008272 <move_window>
 80086a6:	4603      	mov	r3, r0
 80086a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086aa:	7ffb      	ldrb	r3, [r7, #31]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f040 809a 	bne.w	80087e6 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	4413      	add	r3, r2
 80086bc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d003      	beq.n	80086d0 <put_fat+0xf2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	091b      	lsrs	r3, r3, #4
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	e00e      	b.n	80086ee <put_fat+0x110>
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	b25b      	sxtb	r3, r3
 80086d6:	f023 030f 	bic.w	r3, r3, #15
 80086da:	b25a      	sxtb	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	0a1b      	lsrs	r3, r3, #8
 80086e0:	b25b      	sxtb	r3, r3
 80086e2:	f003 030f 	and.w	r3, r3, #15
 80086e6:	b25b      	sxtb	r3, r3
 80086e8:	4313      	orrs	r3, r2
 80086ea:	b25b      	sxtb	r3, r3
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80086fa:	e079      	b.n	80087f0 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	0a1b      	lsrs	r3, r3, #8
 8008706:	4413      	add	r3, r2
 8008708:	4619      	mov	r1, r3
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f7ff fdb1 	bl	8008272 <move_window>
 8008710:	4603      	mov	r3, r0
 8008712:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008714:	7ffb      	ldrb	r3, [r7, #31]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d167      	bne.n	80087ea <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	4413      	add	r3, r2
 8008726:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	b2da      	uxtb	r2, r3
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	701a      	strb	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	b29b      	uxth	r3, r3
 8008734:	0a1b      	lsrs	r3, r3, #8
 8008736:	b29a      	uxth	r2, r3
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	3301      	adds	r3, #1
 800873c:	b2d2      	uxtb	r2, r2
 800873e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8008748:	e052      	b.n	80087f0 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	09db      	lsrs	r3, r3, #7
 8008754:	4413      	add	r3, r2
 8008756:	4619      	mov	r1, r3
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f7ff fd8a 	bl	8008272 <move_window>
 800875e:	4603      	mov	r3, r0
 8008760:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008762:	7ffb      	ldrb	r3, [r7, #31]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d142      	bne.n	80087ee <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	4413      	add	r3, r2
 8008774:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	3303      	adds	r3, #3
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	061a      	lsls	r2, r3, #24
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	3302      	adds	r3, #2
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	041b      	lsls	r3, r3, #16
 8008786:	4313      	orrs	r3, r2
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	3201      	adds	r2, #1
 800878c:	7812      	ldrb	r2, [r2, #0]
 800878e:	0212      	lsls	r2, r2, #8
 8008790:	4313      	orrs	r3, r2
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	7812      	ldrb	r2, [r2, #0]
 8008796:	4313      	orrs	r3, r2
 8008798:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	4313      	orrs	r3, r2
 80087a0:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	701a      	strb	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	0a1b      	lsrs	r3, r3, #8
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	3301      	adds	r3, #1
 80087b6:	b2d2      	uxtb	r2, r2
 80087b8:	701a      	strb	r2, [r3, #0]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	0c1a      	lsrs	r2, r3, #16
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	3302      	adds	r3, #2
 80087c2:	b2d2      	uxtb	r2, r2
 80087c4:	701a      	strb	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	0e1a      	lsrs	r2, r3, #24
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	3303      	adds	r3, #3
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80087da:	e009      	b.n	80087f0 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 80087dc:	2302      	movs	r3, #2
 80087de:	77fb      	strb	r3, [r7, #31]
 80087e0:	e006      	b.n	80087f0 <put_fat+0x212>
			if (res != FR_OK) break;
 80087e2:	bf00      	nop
 80087e4:	e004      	b.n	80087f0 <put_fat+0x212>
			if (res != FR_OK) break;
 80087e6:	bf00      	nop
 80087e8:	e002      	b.n	80087f0 <put_fat+0x212>
			if (res != FR_OK) break;
 80087ea:	bf00      	nop
 80087ec:	e000      	b.n	80087f0 <put_fat+0x212>
			if (res != FR_OK) break;
 80087ee:	bf00      	nop
		}
	}

	return res;
 80087f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3720      	adds	r7, #32
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b084      	sub	sp, #16
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d905      	bls.n	8008816 <remove_chain+0x1c>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	429a      	cmp	r2, r3
 8008814:	d302      	bcc.n	800881c <remove_chain+0x22>
		res = FR_INT_ERR;
 8008816:	2302      	movs	r3, #2
 8008818:	73fb      	strb	r3, [r7, #15]
 800881a:	e043      	b.n	80088a4 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008820:	e036      	b.n	8008890 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7ff fe20 	bl	800846a <get_fat>
 800882a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d035      	beq.n	800889e <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d102      	bne.n	800883e <remove_chain+0x44>
 8008838:	2302      	movs	r3, #2
 800883a:	73fb      	strb	r3, [r7, #15]
 800883c:	e032      	b.n	80088a4 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008844:	d102      	bne.n	800884c <remove_chain+0x52>
 8008846:	2301      	movs	r3, #1
 8008848:	73fb      	strb	r3, [r7, #15]
 800884a:	e02b      	b.n	80088a4 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800884c:	2200      	movs	r2, #0
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff fec4 	bl	80085de <put_fat>
 8008856:	4603      	mov	r3, r0
 8008858:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800885a:	7bfb      	ldrb	r3, [r7, #15]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d120      	bne.n	80088a2 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886a:	d00f      	beq.n	800888c <remove_chain+0x92>
				fs->free_clust++;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8008880:	f043 0301 	orr.w	r3, r3, #1
 8008884:	b2da      	uxtb	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	429a      	cmp	r2, r3
 800889a:	d3c2      	bcc.n	8008822 <remove_chain+0x28>
 800889c:	e002      	b.n	80088a4 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800889e:	bf00      	nop
 80088a0:	e000      	b.n	80088a4 <remove_chain+0xaa>
			if (res != FR_OK) break;
 80088a2:	bf00      	nop
		}
	}

	return res;
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b086      	sub	sp, #24
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10f      	bne.n	80088de <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80088c4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d005      	beq.n	80088d8 <create_chain+0x2a>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d31c      	bcc.n	8008912 <create_chain+0x64>
 80088d8:	2301      	movs	r3, #1
 80088da:	613b      	str	r3, [r7, #16]
 80088dc:	e019      	b.n	8008912 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff fdc2 	bl	800846a <get_fat>
 80088e6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d801      	bhi.n	80088f2 <create_chain+0x44>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e076      	b.n	80089e0 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f8:	d101      	bne.n	80088fe <create_chain+0x50>
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	e070      	b.n	80089e0 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	429a      	cmp	r2, r3
 8008908:	d201      	bcs.n	800890e <create_chain+0x60>
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	e068      	b.n	80089e0 <create_chain+0x132>
		scl = clst;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	3301      	adds	r3, #1
 800891a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	429a      	cmp	r2, r3
 8008926:	d307      	bcc.n	8008938 <create_chain+0x8a>
			ncl = 2;
 8008928:	2302      	movs	r3, #2
 800892a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	429a      	cmp	r2, r3
 8008932:	d901      	bls.n	8008938 <create_chain+0x8a>
 8008934:	2300      	movs	r3, #0
 8008936:	e053      	b.n	80089e0 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8008938:	6979      	ldr	r1, [r7, #20]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7ff fd95 	bl	800846a <get_fat>
 8008940:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00e      	beq.n	8008966 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894e:	d002      	beq.n	8008956 <create_chain+0xa8>
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d101      	bne.n	800895a <create_chain+0xac>
			return cs;
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	e042      	b.n	80089e0 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	429a      	cmp	r2, r3
 8008960:	d1d9      	bne.n	8008916 <create_chain+0x68>
 8008962:	2300      	movs	r3, #0
 8008964:	e03c      	b.n	80089e0 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8008966:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8008968:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800896c:	6979      	ldr	r1, [r7, #20]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff fe35 	bl	80085de <put_fat>
 8008974:	4603      	mov	r3, r0
 8008976:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8008978:	7bfb      	ldrb	r3, [r7, #15]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d109      	bne.n	8008992 <create_chain+0xe4>
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d006      	beq.n	8008992 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff fe28 	bl	80085de <put_fat>
 800898e:	4603      	mov	r3, r0
 8008990:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d11a      	bne.n	80089ce <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80089a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089aa:	d018      	beq.n	80089de <create_chain+0x130>
			fs->free_clust--;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80089b2:	1e5a      	subs	r2, r3, #1
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80089c0:	f043 0301 	orr.w	r3, r3, #1
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80089cc:	e007      	b.n	80089de <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d102      	bne.n	80089da <create_chain+0x12c>
 80089d4:	f04f 33ff 	mov.w	r3, #4294967295
 80089d8:	e000      	b.n	80089dc <create_chain+0x12e>
 80089da:	2301      	movs	r3, #1
 80089dc:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80089de:	697b      	ldr	r3, [r7, #20]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b087      	sub	sp, #28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80089f8:	3304      	adds	r3, #4
 80089fa:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	0a5b      	lsrs	r3, r3, #9
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8008a06:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a0e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	1d1a      	adds	r2, r3, #4
 8008a14:	613a      	str	r2, [r7, #16]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <clmt_clust+0x3c>
 8008a20:	2300      	movs	r3, #0
 8008a22:	e010      	b.n	8008a46 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d307      	bcc.n	8008a3c <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	3304      	adds	r3, #4
 8008a38:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a3a:	e7e9      	b.n	8008a10 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8008a3c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	4413      	add	r3, r2
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	371c      	adds	r7, #28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bc80      	pop	{r7}
 8008a4e:	4770      	bx	lr

08008a50 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008a6a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d007      	beq.n	8008a82 <dir_sdi+0x32>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a78:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d301      	bcc.n	8008a86 <dir_sdi+0x36>
		return FR_INT_ERR;
 8008a82:	2302      	movs	r3, #2
 8008a84:	e074      	b.n	8008b70 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10c      	bne.n	8008aa6 <dir_sdi+0x56>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d105      	bne.n	8008aa6 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008aa0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8008aa4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d111      	bne.n	8008ad0 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ab2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d301      	bcc.n	8008ac2 <dir_sdi+0x72>
			return FR_INT_ERR;
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e056      	b.n	8008b70 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ac8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8008acc:	613b      	str	r3, [r7, #16]
 8008ace:	e032      	b.n	8008b36 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ad6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008ada:	011b      	lsls	r3, r3, #4
 8008adc:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8008ade:	e01e      	b.n	8008b1e <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ae6:	6979      	ldr	r1, [r7, #20]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff fcbe 	bl	800846a <get_fat>
 8008aee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af6:	d101      	bne.n	8008afc <dir_sdi+0xac>
 8008af8:	2301      	movs	r3, #1
 8008afa:	e039      	b.n	8008b70 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d907      	bls.n	8008b12 <dir_sdi+0xc2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008b08:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d301      	bcc.n	8008b16 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8008b12:	2302      	movs	r3, #2
 8008b14:	e02c      	b.n	8008b70 <dir_sdi+0x120>
			idx -= ic;
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d2dc      	bcs.n	8008ae0 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008b2c:	6979      	ldr	r1, [r7, #20]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7ff fc7a 	bl	8008428 <clust2sect>
 8008b34:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <dir_sdi+0xf8>
 8008b44:	2302      	movs	r3, #2
 8008b46:	e013      	b.n	8008b70 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	091a      	lsrs	r2, r3, #4
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	441a      	add	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	f003 030f 	and.w	r3, r3, #15
 8008b64:	015b      	lsls	r3, r3, #5
 8008b66:	441a      	add	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3718      	adds	r7, #24
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008b78:	b590      	push	{r4, r7, lr}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8008b88:	3301      	adds	r3, #1
 8008b8a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d004      	beq.n	8008b9e <dir_next+0x26>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <dir_next+0x2a>
		return FR_NO_FILE;
 8008b9e:	2304      	movs	r3, #4
 8008ba0:	e0dd      	b.n	8008d5e <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f003 030f 	and.w	r3, r3, #15
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f040 80c6 	bne.w	8008d3a <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10b      	bne.n	8008bde <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008bcc:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	f0c0 80b0 	bcc.w	8008d3a <dir_next+0x1c2>
				return FR_NO_FILE;
 8008bda:	2304      	movs	r3, #4
 8008bdc:	e0bf      	b.n	8008d5e <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	091b      	lsrs	r3, r3, #4
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8008be8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008bec:	3a01      	subs	r2, #1
 8008bee:	4013      	ands	r3, r2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f040 80a2 	bne.w	8008d3a <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008c02:	4619      	mov	r1, r3
 8008c04:	4610      	mov	r0, r2
 8008c06:	f7ff fc30 	bl	800846a <get_fat>
 8008c0a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d801      	bhi.n	8008c16 <dir_next+0x9e>
 8008c12:	2302      	movs	r3, #2
 8008c14:	e0a3      	b.n	8008d5e <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1c:	d101      	bne.n	8008c22 <dir_next+0xaa>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e09d      	b.n	8008d5e <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008c28:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d374      	bcc.n	8008d1c <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <dir_next+0xc4>
 8008c38:	2304      	movs	r3, #4
 8008c3a:	e090      	b.n	8008d5e <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008c48:	4619      	mov	r1, r3
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	f7ff fe2f 	bl	80088ae <create_chain>
 8008c50:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d101      	bne.n	8008c5c <dir_next+0xe4>
 8008c58:	2307      	movs	r3, #7
 8008c5a:	e080      	b.n	8008d5e <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d101      	bne.n	8008c66 <dir_next+0xee>
 8008c62:	2302      	movs	r3, #2
 8008c64:	e07b      	b.n	8008d5e <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6c:	d101      	bne.n	8008c72 <dir_next+0xfa>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e075      	b.n	8008d5e <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7ff fab1 	bl	80081e0 <sync_window>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <dir_next+0x110>
 8008c84:	2301      	movs	r3, #1
 8008c86:	e06a      	b.n	8008d5e <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7ff f867 	bl	8007d68 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8008ca6:	6979      	ldr	r1, [r7, #20]
 8008ca8:	4610      	mov	r0, r2
 8008caa:	f7ff fbbd 	bl	8008428 <clust2sect>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	613b      	str	r3, [r7, #16]
 8008cb8:	e01b      	b.n	8008cf2 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7ff fa87 	bl	80081e0 <sync_window>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <dir_next+0x164>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e040      	b.n	8008d5e <dir_next+0x1e6>
						dp->fs->winsect++;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ce2:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8008ce6:	3201      	adds	r2, #1
 8008ce8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	613b      	str	r3, [r7, #16]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008cf8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d3da      	bcc.n	8008cba <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d0a:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	1a8a      	subs	r2, r1, r2
 8008d18:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d2a:	6979      	ldr	r1, [r7, #20]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7ff fb7b 	bl	8008428 <clust2sect>
 8008d32:	4602      	mov	r2, r0
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f003 030f 	and.w	r3, r3, #15
 8008d52:	015b      	lsls	r3, r3, #5
 8008d54:	441a      	add	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	371c      	adds	r7, #28
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd90      	pop	{r4, r7, pc}

08008d66 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8008d70:	2100      	movs	r1, #0
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff fe6c 	bl	8008a50 <dir_sdi>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d131      	bne.n	8008de6 <dir_alloc+0x80>
		n = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008d92:	4619      	mov	r1, r3
 8008d94:	4610      	mov	r0, r2
 8008d96:	f7ff fa6c 	bl	8008272 <move_window>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d11f      	bne.n	8008de4 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2be5      	cmp	r3, #229	; 0xe5
 8008dae:	d005      	beq.n	8008dbc <dir_alloc+0x56>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d107      	bne.n	8008dcc <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	60bb      	str	r3, [r7, #8]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d102      	bne.n	8008dd0 <dir_alloc+0x6a>
 8008dca:	e00c      	b.n	8008de6 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008dcc:	2300      	movs	r3, #0
 8008dce:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8008dd0:	2101      	movs	r1, #1
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff fed0 	bl	8008b78 <dir_next>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0d1      	beq.n	8008d86 <dir_alloc+0x20>
 8008de2:	e000      	b.n	8008de6 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8008de4:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	2b04      	cmp	r3, #4
 8008dea:	d101      	bne.n	8008df0 <dir_alloc+0x8a>
 8008dec:	2307      	movs	r3, #7
 8008dee:	73fb      	strb	r3, [r7, #15]
	return res;
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b085      	sub	sp, #20
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	331b      	adds	r3, #27
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	021b      	lsls	r3, r3, #8
 8008e0c:	b21a      	sxth	r2, r3
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	331a      	adds	r3, #26
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	b21b      	sxth	r3, r3
 8008e16:	4313      	orrs	r3, r2
 8008e18:	b21b      	sxth	r3, r3
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e24:	2b03      	cmp	r3, #3
 8008e26:	d10f      	bne.n	8008e48 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	3315      	adds	r3, #21
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	021b      	lsls	r3, r3, #8
 8008e30:	b21a      	sxth	r2, r3
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	3314      	adds	r3, #20
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	b21b      	sxth	r3, r3
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	b21b      	sxth	r3, r3
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	041b      	lsls	r3, r3, #16
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	60fb      	str	r3, [r7, #12]

	return cl;
 8008e48:	68fb      	ldr	r3, [r7, #12]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bc80      	pop	{r7}
 8008e52:	4770      	bx	lr

08008e54 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	331a      	adds	r3, #26
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	b2d2      	uxtb	r2, r2
 8008e66:	701a      	strb	r2, [r3, #0]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	0a1b      	lsrs	r3, r3, #8
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	331b      	adds	r3, #27
 8008e74:	b2d2      	uxtb	r2, r2
 8008e76:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	0c1a      	lsrs	r2, r3, #16
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3314      	adds	r3, #20
 8008e80:	b2d2      	uxtb	r2, r2
 8008e82:	701a      	strb	r2, [r3, #0]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	0c1b      	lsrs	r3, r3, #16
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	0a1b      	lsrs	r3, r3, #8
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3315      	adds	r3, #21
 8008e92:	b2d2      	uxtb	r2, r2
 8008e94:	701a      	strb	r2, [r3, #0]
}
 8008e96:	bf00      	nop
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bc80      	pop	{r7}
 8008e9e:	4770      	bx	lr

08008ea0 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7ff fdd0 	bl	8008a50 <dir_sdi>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008eb4:	7dfb      	ldrb	r3, [r7, #23]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <dir_find+0x1e>
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
 8008ebc:	e03b      	b.n	8008f36 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008eca:	4619      	mov	r1, r3
 8008ecc:	4610      	mov	r0, r2
 8008ece:	f7ff f9d0 	bl	8008272 <move_window>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d128      	bne.n	8008f2e <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ee2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d102      	bne.n	8008ef6 <dir_find+0x56>
 8008ef0:	2304      	movs	r3, #4
 8008ef2:	75fb      	strb	r3, [r7, #23]
 8008ef4:	e01e      	b.n	8008f34 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	330b      	adds	r3, #11
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	f003 0308 	and.w	r3, r3, #8
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10a      	bne.n	8008f1a <dir_find+0x7a>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008f0a:	220b      	movs	r2, #11
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6938      	ldr	r0, [r7, #16]
 8008f10:	f7fe ff44 	bl	8007d9c <mem_cmp>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00b      	beq.n	8008f32 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7ff fe2b 	bl	8008b78 <dir_next>
 8008f22:	4603      	mov	r3, r0
 8008f24:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008f26:	7dfb      	ldrb	r3, [r7, #23]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d0c8      	beq.n	8008ebe <dir_find+0x1e>
 8008f2c:	e002      	b.n	8008f34 <dir_find+0x94>
		if (res != FR_OK) break;
 8008f2e:	bf00      	nop
 8008f30:	e000      	b.n	8008f34 <dir_find+0x94>
			break;
 8008f32:	bf00      	nop

	return res;
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b084      	sub	sp, #16
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008f46:	2101      	movs	r1, #1
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7ff ff0c 	bl	8008d66 <dir_alloc>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d126      	bne.n	8008fa6 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008f64:	4619      	mov	r1, r3
 8008f66:	4610      	mov	r0, r2
 8008f68:	f7ff f983 	bl	8008272 <move_window>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d117      	bne.n	8008fa6 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	2100      	movs	r1, #0
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fe fef1 	bl	8007d68 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008f92:	220b      	movs	r2, #11
 8008f94:	4619      	mov	r1, r3
 8008f96:	f7fe fec9 	bl	8007d2c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	3309      	adds	r3, #9
 8008fbe:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d05a      	beq.n	8009080 <get_fileinfo+0xd0>
		dir = dp->dir;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008fd0:	60bb      	str	r3, [r7, #8]
		i = 0;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8008fd6:	e01c      	b.n	8009012 <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	1c5a      	adds	r2, r3, #1
 8008fdc:	617a      	str	r2, [r7, #20]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
 8008fe8:	2b20      	cmp	r3, #32
 8008fea:	d100      	bne.n	8008fee <get_fileinfo+0x3e>
 8008fec:	e011      	b.n	8009012 <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
 8008ff0:	2b05      	cmp	r3, #5
 8008ff2:	d101      	bne.n	8008ff8 <get_fileinfo+0x48>
 8008ff4:	23e5      	movs	r3, #229	; 0xe5
 8008ff6:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	2b09      	cmp	r3, #9
 8008ffc:	d104      	bne.n	8009008 <get_fileinfo+0x58>
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	1c5a      	adds	r2, r3, #1
 8009002:	613a      	str	r2, [r7, #16]
 8009004:	222e      	movs	r2, #46	; 0x2e
 8009006:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	1c5a      	adds	r2, r3, #1
 800900c:	613a      	str	r2, [r7, #16]
 800900e:	7bfa      	ldrb	r2, [r7, #15]
 8009010:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2b0a      	cmp	r3, #10
 8009016:	d9df      	bls.n	8008fd8 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	7ada      	ldrb	r2, [r3, #11]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	331f      	adds	r3, #31
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	061a      	lsls	r2, r3, #24
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	331e      	adds	r3, #30
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	041b      	lsls	r3, r3, #16
 8009030:	4313      	orrs	r3, r2
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	321d      	adds	r2, #29
 8009036:	7812      	ldrb	r2, [r2, #0]
 8009038:	0212      	lsls	r2, r2, #8
 800903a:	4313      	orrs	r3, r2
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	321c      	adds	r2, #28
 8009040:	7812      	ldrb	r2, [r2, #0]
 8009042:	431a      	orrs	r2, r3
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	3319      	adds	r3, #25
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	021b      	lsls	r3, r3, #8
 8009050:	b21a      	sxth	r2, r3
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	3318      	adds	r3, #24
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	b21b      	sxth	r3, r3
 800905a:	4313      	orrs	r3, r2
 800905c:	b21b      	sxth	r3, r3
 800905e:	b29a      	uxth	r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	3317      	adds	r3, #23
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	021b      	lsls	r3, r3, #8
 800906c:	b21a      	sxth	r2, r3
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	3316      	adds	r3, #22
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	b21b      	sxth	r3, r3
 8009076:	4313      	orrs	r3, r2
 8009078:	b21b      	sxth	r3, r3
 800907a:	b29a      	uxth	r2, r3
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	2200      	movs	r2, #0
 8009084:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8009086:	bf00      	nop
 8009088:	371c      	adds	r7, #28
 800908a:	46bd      	mov	sp, r7
 800908c:	bc80      	pop	{r7}
 800908e:	4770      	bx	lr

08009090 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b088      	sub	sp, #32
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	60fb      	str	r3, [r7, #12]
 80090a0:	e002      	b.n	80090a8 <create_name+0x18>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3301      	adds	r3, #1
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2b2f      	cmp	r3, #47	; 0x2f
 80090ae:	d0f8      	beq.n	80090a2 <create_name+0x12>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b5c      	cmp	r3, #92	; 0x5c
 80090b6:	d0f4      	beq.n	80090a2 <create_name+0x12>
	sfn = dp->fn;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80090be:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80090c0:	220b      	movs	r2, #11
 80090c2:	2120      	movs	r1, #32
 80090c4:	68b8      	ldr	r0, [r7, #8]
 80090c6:	f7fe fe4f 	bl	8007d68 <mem_set>
	si = i = b = 0; ni = 8;
 80090ca:	2300      	movs	r3, #0
 80090cc:	77fb      	strb	r3, [r7, #31]
 80090ce:	2300      	movs	r3, #0
 80090d0:	613b      	str	r3, [r7, #16]
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	617b      	str	r3, [r7, #20]
 80090d6:	2308      	movs	r3, #8
 80090d8:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	617a      	str	r2, [r7, #20]
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	4413      	add	r3, r2
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80090e8:	7fbb      	ldrb	r3, [r7, #30]
 80090ea:	2b20      	cmp	r3, #32
 80090ec:	d953      	bls.n	8009196 <create_name+0x106>
 80090ee:	7fbb      	ldrb	r3, [r7, #30]
 80090f0:	2b2f      	cmp	r3, #47	; 0x2f
 80090f2:	d050      	beq.n	8009196 <create_name+0x106>
 80090f4:	7fbb      	ldrb	r3, [r7, #30]
 80090f6:	2b5c      	cmp	r3, #92	; 0x5c
 80090f8:	d04d      	beq.n	8009196 <create_name+0x106>
		if (c == '.' || i >= ni) {
 80090fa:	7fbb      	ldrb	r3, [r7, #30]
 80090fc:	2b2e      	cmp	r3, #46	; 0x2e
 80090fe:	d003      	beq.n	8009108 <create_name+0x78>
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	429a      	cmp	r2, r3
 8009106:	d30f      	bcc.n	8009128 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	2b08      	cmp	r3, #8
 800910c:	d102      	bne.n	8009114 <create_name+0x84>
 800910e:	7fbb      	ldrb	r3, [r7, #30]
 8009110:	2b2e      	cmp	r3, #46	; 0x2e
 8009112:	d001      	beq.n	8009118 <create_name+0x88>
 8009114:	2306      	movs	r3, #6
 8009116:	e073      	b.n	8009200 <create_name+0x170>
			i = 8; ni = 11;
 8009118:	2308      	movs	r3, #8
 800911a:	613b      	str	r3, [r7, #16]
 800911c:	230b      	movs	r3, #11
 800911e:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8009120:	7ffb      	ldrb	r3, [r7, #31]
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	77fb      	strb	r3, [r7, #31]
 8009126:	e035      	b.n	8009194 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009128:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800912c:	2b00      	cmp	r3, #0
 800912e:	da08      	bge.n	8009142 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8009130:	7ffb      	ldrb	r3, [r7, #31]
 8009132:	f043 0303 	orr.w	r3, r3, #3
 8009136:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009138:	7fbb      	ldrb	r3, [r7, #30]
 800913a:	3b80      	subs	r3, #128	; 0x80
 800913c:	4a32      	ldr	r2, [pc, #200]	; (8009208 <create_name+0x178>)
 800913e:	5cd3      	ldrb	r3, [r2, r3]
 8009140:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8009142:	7fbb      	ldrb	r3, [r7, #30]
 8009144:	4619      	mov	r1, r3
 8009146:	4831      	ldr	r0, [pc, #196]	; (800920c <create_name+0x17c>)
 8009148:	f7fe fe4e 	bl	8007de8 <chk_chr>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <create_name+0xc6>
				return FR_INVALID_NAME;
 8009152:	2306      	movs	r3, #6
 8009154:	e054      	b.n	8009200 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8009156:	7fbb      	ldrb	r3, [r7, #30]
 8009158:	2b40      	cmp	r3, #64	; 0x40
 800915a:	d907      	bls.n	800916c <create_name+0xdc>
 800915c:	7fbb      	ldrb	r3, [r7, #30]
 800915e:	2b5a      	cmp	r3, #90	; 0x5a
 8009160:	d804      	bhi.n	800916c <create_name+0xdc>
				b |= 2;
 8009162:	7ffb      	ldrb	r3, [r7, #31]
 8009164:	f043 0302 	orr.w	r3, r3, #2
 8009168:	77fb      	strb	r3, [r7, #31]
 800916a:	e00c      	b.n	8009186 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800916c:	7fbb      	ldrb	r3, [r7, #30]
 800916e:	2b60      	cmp	r3, #96	; 0x60
 8009170:	d909      	bls.n	8009186 <create_name+0xf6>
 8009172:	7fbb      	ldrb	r3, [r7, #30]
 8009174:	2b7a      	cmp	r3, #122	; 0x7a
 8009176:	d806      	bhi.n	8009186 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8009178:	7ffb      	ldrb	r3, [r7, #31]
 800917a:	f043 0301 	orr.w	r3, r3, #1
 800917e:	77fb      	strb	r3, [r7, #31]
 8009180:	7fbb      	ldrb	r3, [r7, #30]
 8009182:	3b20      	subs	r3, #32
 8009184:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	1c5a      	adds	r2, r3, #1
 800918a:	613a      	str	r2, [r7, #16]
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	4413      	add	r3, r2
 8009190:	7fba      	ldrb	r2, [r7, #30]
 8009192:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009194:	e7a1      	b.n	80090da <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	441a      	add	r2, r3
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80091a0:	7fbb      	ldrb	r3, [r7, #30]
 80091a2:	2b20      	cmp	r3, #32
 80091a4:	d801      	bhi.n	80091aa <create_name+0x11a>
 80091a6:	2304      	movs	r3, #4
 80091a8:	e000      	b.n	80091ac <create_name+0x11c>
 80091aa:	2300      	movs	r3, #0
 80091ac:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <create_name+0x128>
 80091b4:	2306      	movs	r3, #6
 80091b6:	e023      	b.n	8009200 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	2be5      	cmp	r3, #229	; 0xe5
 80091be:	d102      	bne.n	80091c6 <create_name+0x136>
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2205      	movs	r2, #5
 80091c4:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	2b08      	cmp	r3, #8
 80091ca:	d102      	bne.n	80091d2 <create_name+0x142>
 80091cc:	7ffb      	ldrb	r3, [r7, #31]
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80091d2:	7ffb      	ldrb	r3, [r7, #31]
 80091d4:	f003 0303 	and.w	r3, r3, #3
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d103      	bne.n	80091e4 <create_name+0x154>
 80091dc:	7fbb      	ldrb	r3, [r7, #30]
 80091de:	f043 0310 	orr.w	r3, r3, #16
 80091e2:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80091e4:	7ffb      	ldrb	r3, [r7, #31]
 80091e6:	f003 030c 	and.w	r3, r3, #12
 80091ea:	2b04      	cmp	r3, #4
 80091ec:	d103      	bne.n	80091f6 <create_name+0x166>
 80091ee:	7fbb      	ldrb	r3, [r7, #30]
 80091f0:	f043 0308 	orr.w	r3, r3, #8
 80091f4:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	330b      	adds	r3, #11
 80091fa:	7fba      	ldrb	r2, [r7, #30]
 80091fc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80091fe:	2300      	movs	r3, #0
#endif
}
 8009200:	4618      	mov	r0, r3
 8009202:	3720      	adds	r7, #32
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	0800e884 	.word	0x0800e884
 800920c:	0800e820 	.word	0x0800e820

08009210 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b2f      	cmp	r3, #47	; 0x2f
 8009220:	d003      	beq.n	800922a <follow_path+0x1a>
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	2b5c      	cmp	r3, #92	; 0x5c
 8009228:	d102      	bne.n	8009230 <follow_path+0x20>
		path++;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	3301      	adds	r3, #1
 800922e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b1f      	cmp	r3, #31
 800923e:	d80a      	bhi.n	8009256 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8009240:	2100      	movs	r1, #0
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff fc04 	bl	8008a50 <dir_sdi>
 8009248:	4603      	mov	r3, r0
 800924a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009254:	e045      	b.n	80092e2 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009256:	463b      	mov	r3, r7
 8009258:	4619      	mov	r1, r3
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7ff ff18 	bl	8009090 <create_name>
 8009260:	4603      	mov	r3, r0
 8009262:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009264:	7bfb      	ldrb	r3, [r7, #15]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d136      	bne.n	80092d8 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7ff fe18 	bl	8008ea0 <dir_find>
 8009270:	4603      	mov	r3, r0
 8009272:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800927a:	7adb      	ldrb	r3, [r3, #11]
 800927c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800927e:	7bfb      	ldrb	r3, [r7, #15]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00a      	beq.n	800929a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	2b04      	cmp	r3, #4
 8009288:	d128      	bne.n	80092dc <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800928a:	7bbb      	ldrb	r3, [r7, #14]
 800928c:	f003 0304 	and.w	r3, r3, #4
 8009290:	2b00      	cmp	r3, #0
 8009292:	d123      	bne.n	80092dc <follow_path+0xcc>
 8009294:	2305      	movs	r3, #5
 8009296:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8009298:	e020      	b.n	80092dc <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800929a:	7bbb      	ldrb	r3, [r7, #14]
 800929c:	f003 0304 	and.w	r3, r3, #4
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d11d      	bne.n	80092e0 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092aa:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	330b      	adds	r3, #11
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	f003 0310 	and.w	r3, r3, #16
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d102      	bne.n	80092c0 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80092ba:	2305      	movs	r3, #5
 80092bc:	73fb      	strb	r3, [r7, #15]
 80092be:	e010      	b.n	80092e2 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80092c6:	68b9      	ldr	r1, [r7, #8]
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7ff fd96 	bl	8008dfa <ld_clust>
 80092ce:	4602      	mov	r2, r0
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80092d6:	e7be      	b.n	8009256 <follow_path+0x46>
			if (res != FR_OK) break;
 80092d8:	bf00      	nop
 80092da:	e002      	b.n	80092e2 <follow_path+0xd2>
				break;
 80092dc:	bf00      	nop
 80092de:	e000      	b.n	80092e2 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80092e0:	bf00      	nop
		}
	}

	return res;
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b087      	sub	sp, #28
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80092f4:	f04f 33ff 	mov.w	r3, #4294967295
 80092f8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d031      	beq.n	8009366 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	617b      	str	r3, [r7, #20]
 8009308:	e002      	b.n	8009310 <get_ldnumber+0x24>
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	3301      	adds	r3, #1
 800930e:	617b      	str	r3, [r7, #20]
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	2b20      	cmp	r3, #32
 8009316:	d903      	bls.n	8009320 <get_ldnumber+0x34>
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b3a      	cmp	r3, #58	; 0x3a
 800931e:	d1f4      	bne.n	800930a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	2b3a      	cmp	r3, #58	; 0x3a
 8009326:	d11c      	bne.n	8009362 <get_ldnumber+0x76>
			tp = *path;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	60fa      	str	r2, [r7, #12]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	3b30      	subs	r3, #48	; 0x30
 8009338:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	2b09      	cmp	r3, #9
 800933e:	d80e      	bhi.n	800935e <get_ldnumber+0x72>
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	429a      	cmp	r2, r3
 8009346:	d10a      	bne.n	800935e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d107      	bne.n	800935e <get_ldnumber+0x72>
					vol = (int)i;
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	3301      	adds	r3, #1
 8009356:	617b      	str	r3, [r7, #20]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	e002      	b.n	8009368 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009362:	2300      	movs	r3, #0
 8009364:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009366:	693b      	ldr	r3, [r7, #16]
}
 8009368:	4618      	mov	r0, r3
 800936a:	371c      	adds	r7, #28
 800936c:	46bd      	mov	sp, r7
 800936e:	bc80      	pop	{r7}
 8009370:	4770      	bx	lr
	...

08009374 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f04f 32ff 	mov.w	r2, #4294967295
 800938c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7fe ff6d 	bl	8008272 <move_window>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <check_fs+0x2e>
		return 3;
 800939e:	2303      	movs	r3, #3
 80093a0:	e04a      	b.n	8009438 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80093a8:	3301      	adds	r3, #1
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	021b      	lsls	r3, r3, #8
 80093ae:	b21a      	sxth	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80093b6:	b21b      	sxth	r3, r3
 80093b8:	4313      	orrs	r3, r2
 80093ba:	b21b      	sxth	r3, r3
 80093bc:	4a20      	ldr	r2, [pc, #128]	; (8009440 <check_fs+0xcc>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d001      	beq.n	80093c6 <check_fs+0x52>
		return 2;
 80093c2:	2302      	movs	r3, #2
 80093c4:	e038      	b.n	8009438 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	3336      	adds	r3, #54	; 0x36
 80093ca:	3303      	adds	r3, #3
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	061a      	lsls	r2, r3, #24
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	3336      	adds	r3, #54	; 0x36
 80093d4:	3302      	adds	r3, #2
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	041b      	lsls	r3, r3, #16
 80093da:	4313      	orrs	r3, r2
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	3236      	adds	r2, #54	; 0x36
 80093e0:	3201      	adds	r2, #1
 80093e2:	7812      	ldrb	r2, [r2, #0]
 80093e4:	0212      	lsls	r2, r2, #8
 80093e6:	4313      	orrs	r3, r2
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80093ee:	4313      	orrs	r3, r2
 80093f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80093f4:	4a13      	ldr	r2, [pc, #76]	; (8009444 <check_fs+0xd0>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d101      	bne.n	80093fe <check_fs+0x8a>
		return 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	e01c      	b.n	8009438 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3352      	adds	r3, #82	; 0x52
 8009402:	3303      	adds	r3, #3
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	061a      	lsls	r2, r3, #24
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	3352      	adds	r3, #82	; 0x52
 800940c:	3302      	adds	r3, #2
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	041b      	lsls	r3, r3, #16
 8009412:	4313      	orrs	r3, r2
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	3252      	adds	r2, #82	; 0x52
 8009418:	3201      	adds	r2, #1
 800941a:	7812      	ldrb	r2, [r2, #0]
 800941c:	0212      	lsls	r2, r2, #8
 800941e:	4313      	orrs	r3, r2
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8009426:	4313      	orrs	r3, r2
 8009428:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800942c:	4a05      	ldr	r2, [pc, #20]	; (8009444 <check_fs+0xd0>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d101      	bne.n	8009436 <check_fs+0xc2>
		return 0;
 8009432:	2300      	movs	r3, #0
 8009434:	e000      	b.n	8009438 <check_fs+0xc4>

	return 1;
 8009436:	2301      	movs	r3, #1
}
 8009438:	4618      	mov	r0, r3
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	ffffaa55 	.word	0xffffaa55
 8009444:	00544146 	.word	0x00544146

08009448 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b096      	sub	sp, #88	; 0x58
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	4613      	mov	r3, r2
 8009454:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800945c:	68b8      	ldr	r0, [r7, #8]
 800945e:	f7ff ff45 	bl	80092ec <get_ldnumber>
 8009462:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009466:	2b00      	cmp	r3, #0
 8009468:	da01      	bge.n	800946e <find_volume+0x26>
 800946a:	230b      	movs	r3, #11
 800946c:	e2b0      	b.n	80099d0 <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800946e:	4aa1      	ldr	r2, [pc, #644]	; (80096f4 <find_volume+0x2ac>)
 8009470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009476:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947a:	2b00      	cmp	r3, #0
 800947c:	d101      	bne.n	8009482 <find_volume+0x3a>
 800947e:	230c      	movs	r3, #12
 8009480:	e2a6      	b.n	80099d0 <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 8009482:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009484:	f7fe fcca 	bl	8007e1c <lock_fs>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d101      	bne.n	8009492 <find_volume+0x4a>
 800948e:	230f      	movs	r3, #15
 8009490:	e29e      	b.n	80099d0 <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009496:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8009498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d01b      	beq.n	80094da <find_volume+0x92>
		stat = disk_status(fs->drv);
 80094a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fe fba1 	bl	8007bf0 <disk_status>
 80094ae:	4603      	mov	r3, r0
 80094b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80094b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80094b8:	f003 0301 	and.w	r3, r3, #1
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10c      	bne.n	80094da <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80094c0:	79fb      	ldrb	r3, [r7, #7]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d007      	beq.n	80094d6 <find_volume+0x8e>
 80094c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80094ca:	f003 0304 	and.w	r3, r3, #4
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 80094d2:	230a      	movs	r3, #10
 80094d4:	e27c      	b.n	80099d0 <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 80094d6:	2300      	movs	r3, #0
 80094d8:	e27a      	b.n	80099d0 <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80094da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80094e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fe fb96 	bl	8007c24 <disk_initialize>
 80094f8:	4603      	mov	r3, r0
 80094fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80094fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800950a:	2303      	movs	r3, #3
 800950c:	e260      	b.n	80099d0 <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d007      	beq.n	8009524 <find_volume+0xdc>
 8009514:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009518:	f003 0304 	and.w	r3, r3, #4
 800951c:	2b00      	cmp	r3, #0
 800951e:	d001      	beq.n	8009524 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8009520:	230a      	movs	r3, #10
 8009522:	e255      	b.n	80099d0 <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8009524:	2300      	movs	r3, #0
 8009526:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8009528:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800952a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800952c:	f7ff ff22 	bl	8009374 <check_fs>
 8009530:	4603      	mov	r3, r0
 8009532:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8009536:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800953a:	2b01      	cmp	r3, #1
 800953c:	d153      	bne.n	80095e6 <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800953e:	2300      	movs	r3, #0
 8009540:	643b      	str	r3, [r7, #64]	; 0x40
 8009542:	e028      	b.n	8009596 <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8009544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009548:	011b      	lsls	r3, r3, #4
 800954a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800954e:	4413      	add	r3, r2
 8009550:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8009552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009554:	3304      	adds	r3, #4
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d012      	beq.n	8009582 <find_volume+0x13a>
 800955c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955e:	330b      	adds	r3, #11
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	061a      	lsls	r2, r3, #24
 8009564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009566:	330a      	adds	r3, #10
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	041b      	lsls	r3, r3, #16
 800956c:	4313      	orrs	r3, r2
 800956e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009570:	3209      	adds	r2, #9
 8009572:	7812      	ldrb	r2, [r2, #0]
 8009574:	0212      	lsls	r2, r2, #8
 8009576:	4313      	orrs	r3, r2
 8009578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800957a:	3208      	adds	r2, #8
 800957c:	7812      	ldrb	r2, [r2, #0]
 800957e:	431a      	orrs	r2, r3
 8009580:	e000      	b.n	8009584 <find_volume+0x13c>
 8009582:	2200      	movs	r2, #0
 8009584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	3358      	adds	r3, #88	; 0x58
 800958a:	443b      	add	r3, r7
 800958c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009592:	3301      	adds	r3, #1
 8009594:	643b      	str	r3, [r7, #64]	; 0x40
 8009596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009598:	2b03      	cmp	r3, #3
 800959a:	d9d3      	bls.n	8009544 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800959c:	2300      	movs	r3, #0
 800959e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80095a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d002      	beq.n	80095ac <find_volume+0x164>
 80095a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095a8:	3b01      	subs	r3, #1
 80095aa:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80095ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	3358      	adds	r3, #88	; 0x58
 80095b2:	443b      	add	r3, r7
 80095b4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80095b8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80095ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d005      	beq.n	80095cc <find_volume+0x184>
 80095c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80095c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095c4:	f7ff fed6 	bl	8009374 <check_fs>
 80095c8:	4603      	mov	r3, r0
 80095ca:	e000      	b.n	80095ce <find_volume+0x186>
 80095cc:	2302      	movs	r3, #2
 80095ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80095d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d005      	beq.n	80095e6 <find_volume+0x19e>
 80095da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095dc:	3301      	adds	r3, #1
 80095de:	643b      	str	r3, [r7, #64]	; 0x40
 80095e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d9e2      	bls.n	80095ac <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80095e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80095ea:	2b03      	cmp	r3, #3
 80095ec:	d101      	bne.n	80095f2 <find_volume+0x1aa>
 80095ee:	2301      	movs	r3, #1
 80095f0:	e1ee      	b.n	80099d0 <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80095f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d001      	beq.n	80095fe <find_volume+0x1b6>
 80095fa:	230d      	movs	r3, #13
 80095fc:	e1e8      	b.n	80099d0 <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80095fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009600:	7b1b      	ldrb	r3, [r3, #12]
 8009602:	021b      	lsls	r3, r3, #8
 8009604:	b21a      	sxth	r2, r3
 8009606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009608:	7adb      	ldrb	r3, [r3, #11]
 800960a:	b21b      	sxth	r3, r3
 800960c:	4313      	orrs	r3, r2
 800960e:	b21b      	sxth	r3, r3
 8009610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009614:	d001      	beq.n	800961a <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 8009616:	230d      	movs	r3, #13
 8009618:	e1da      	b.n	80099d0 <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800961a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961c:	7ddb      	ldrb	r3, [r3, #23]
 800961e:	021b      	lsls	r3, r3, #8
 8009620:	b21a      	sxth	r2, r3
 8009622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009624:	7d9b      	ldrb	r3, [r3, #22]
 8009626:	b21b      	sxth	r3, r3
 8009628:	4313      	orrs	r3, r2
 800962a:	b21b      	sxth	r3, r3
 800962c:	b29b      	uxth	r3, r3
 800962e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8009630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009632:	2b00      	cmp	r3, #0
 8009634:	d112      	bne.n	800965c <find_volume+0x214>
 8009636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009638:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800963c:	061a      	lsls	r2, r3, #24
 800963e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009640:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009644:	041b      	lsls	r3, r3, #16
 8009646:	4313      	orrs	r3, r2
 8009648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800964a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800964e:	0212      	lsls	r2, r2, #8
 8009650:	4313      	orrs	r3, r2
 8009652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009654:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8009658:	4313      	orrs	r3, r2
 800965a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800965c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009660:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8009664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009666:	7c1a      	ldrb	r2, [r3, #16]
 8009668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800966e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009670:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8009674:	2b01      	cmp	r3, #1
 8009676:	d006      	beq.n	8009686 <find_volume+0x23e>
 8009678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967a:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800967e:	2b02      	cmp	r3, #2
 8009680:	d001      	beq.n	8009686 <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 8009682:	230d      	movs	r3, #13
 8009684:	e1a4      	b.n	80099d0 <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8009686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009688:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800968c:	461a      	mov	r2, r3
 800968e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009690:	fb02 f303 	mul.w	r3, r2, r3
 8009694:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8009696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009698:	7b5a      	ldrb	r2, [r3, #13]
 800969a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969c:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80096a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00a      	beq.n	80096c0 <find_volume+0x278>
 80096aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ac:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80096b0:	461a      	mov	r2, r3
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80096b8:	3b01      	subs	r3, #1
 80096ba:	4013      	ands	r3, r2
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 80096c0:	230d      	movs	r3, #13
 80096c2:	e185      	b.n	80099d0 <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80096c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c6:	7c9b      	ldrb	r3, [r3, #18]
 80096c8:	021b      	lsls	r3, r3, #8
 80096ca:	b21a      	sxth	r2, r3
 80096cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ce:	7c5b      	ldrb	r3, [r3, #17]
 80096d0:	b21b      	sxth	r3, r3
 80096d2:	4313      	orrs	r3, r2
 80096d4:	b21b      	sxth	r3, r3
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096da:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80096de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80096e4:	f003 030f 	and.w	r3, r3, #15
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d004      	beq.n	80096f8 <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 80096ee:	230d      	movs	r3, #13
 80096f0:	e16e      	b.n	80099d0 <find_volume+0x588>
 80096f2:	bf00      	nop
 80096f4:	20000ab0 	.word	0x20000ab0

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80096f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fa:	7d1b      	ldrb	r3, [r3, #20]
 80096fc:	021b      	lsls	r3, r3, #8
 80096fe:	b21a      	sxth	r2, r3
 8009700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009702:	7cdb      	ldrb	r3, [r3, #19]
 8009704:	b21b      	sxth	r3, r3
 8009706:	4313      	orrs	r3, r2
 8009708:	b21b      	sxth	r3, r3
 800970a:	b29b      	uxth	r3, r3
 800970c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800970e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009710:	2b00      	cmp	r3, #0
 8009712:	d112      	bne.n	800973a <find_volume+0x2f2>
 8009714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009716:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800971a:	061a      	lsls	r2, r3, #24
 800971c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009722:	041b      	lsls	r3, r3, #16
 8009724:	4313      	orrs	r3, r2
 8009726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009728:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800972c:	0212      	lsls	r2, r2, #8
 800972e:	4313      	orrs	r3, r2
 8009730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009732:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009736:	4313      	orrs	r3, r2
 8009738:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800973a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973c:	7bdb      	ldrb	r3, [r3, #15]
 800973e:	021b      	lsls	r3, r3, #8
 8009740:	b21a      	sxth	r2, r3
 8009742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009744:	7b9b      	ldrb	r3, [r3, #14]
 8009746:	b21b      	sxth	r3, r3
 8009748:	4313      	orrs	r3, r2
 800974a:	b21b      	sxth	r3, r3
 800974c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800974e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009750:	2b00      	cmp	r3, #0
 8009752:	d101      	bne.n	8009758 <find_volume+0x310>
 8009754:	230d      	movs	r3, #13
 8009756:	e13b      	b.n	80099d0 <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8009758:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800975a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800975c:	4413      	add	r3, r2
 800975e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009760:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8009764:	0912      	lsrs	r2, r2, #4
 8009766:	b292      	uxth	r2, r2
 8009768:	4413      	add	r3, r2
 800976a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800976c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	429a      	cmp	r2, r3
 8009772:	d201      	bcs.n	8009778 <find_volume+0x330>
 8009774:	230d      	movs	r3, #13
 8009776:	e12b      	b.n	80099d0 <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8009778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800977a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009780:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8009784:	fbb3 f3f2 	udiv	r3, r3, r2
 8009788:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	2b00      	cmp	r3, #0
 800978e:	d101      	bne.n	8009794 <find_volume+0x34c>
 8009790:	230d      	movs	r3, #13
 8009792:	e11d      	b.n	80099d0 <find_volume+0x588>
	fmt = FS_FAT12;
 8009794:	2301      	movs	r3, #1
 8009796:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979c:	f640 72f5 	movw	r2, #4085	; 0xff5
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d902      	bls.n	80097aa <find_volume+0x362>
 80097a4:	2302      	movs	r3, #2
 80097a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d902      	bls.n	80097ba <find_volume+0x372>
 80097b4:	2303      	movs	r3, #3
 80097b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	1c9a      	adds	r2, r3, #2
 80097be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 80097c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80097c8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80097cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80097ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097d0:	441a      	add	r2, r3
 80097d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d4:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 80097d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80097da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097dc:	441a      	add	r2, r3
 80097de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 80097e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097e8:	2b03      	cmp	r3, #3
 80097ea:	d121      	bne.n	8009830 <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80097ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ee:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <find_volume+0x3b2>
 80097f6:	230d      	movs	r3, #13
 80097f8:	e0ea      	b.n	80099d0 <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80097fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009800:	061a      	lsls	r2, r3, #24
 8009802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009804:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009808:	041b      	lsls	r3, r3, #16
 800980a:	4313      	orrs	r3, r2
 800980c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800980e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8009812:	0212      	lsls	r2, r2, #8
 8009814:	4313      	orrs	r3, r2
 8009816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009818:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800981c:	431a      	orrs	r2, r3
 800981e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009820:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8009824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009826:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	647b      	str	r3, [r7, #68]	; 0x44
 800982e:	e025      	b.n	800987c <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009832:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <find_volume+0x3f6>
 800983a:	230d      	movs	r3, #13
 800983c:	e0c8      	b.n	80099d0 <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800983e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009840:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8009844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009846:	441a      	add	r2, r3
 8009848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800984e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009852:	2b02      	cmp	r3, #2
 8009854:	d104      	bne.n	8009860 <find_volume+0x418>
 8009856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009858:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	e00c      	b.n	800987a <find_volume+0x432>
 8009860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009862:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009866:	4613      	mov	r3, r2
 8009868:	005b      	lsls	r3, r3, #1
 800986a:	4413      	add	r3, r2
 800986c:	085a      	lsrs	r2, r3, #1
 800986e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009870:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009874:	f003 0301 	and.w	r3, r3, #1
 8009878:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800987a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009884:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009888:	0a5b      	lsrs	r3, r3, #9
 800988a:	429a      	cmp	r2, r3
 800988c:	d201      	bcs.n	8009892 <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 800988e:	230d      	movs	r3, #13
 8009890:	e09e      	b.n	80099d0 <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8009892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009894:	f04f 32ff 	mov.w	r2, #4294967295
 8009898:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800989c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80098a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80098a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098aa:	2280      	movs	r2, #128	; 0x80
 80098ac:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80098b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d177      	bne.n	80099a8 <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80098b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80098be:	021b      	lsls	r3, r3, #8
 80098c0:	b21a      	sxth	r2, r3
 80098c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80098c8:	b21b      	sxth	r3, r3
 80098ca:	4313      	orrs	r3, r2
 80098cc:	b21b      	sxth	r3, r3
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d16a      	bne.n	80099a8 <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 80098d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098d4:	3301      	adds	r3, #1
 80098d6:	4619      	mov	r1, r3
 80098d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80098da:	f7fe fcca 	bl	8008272 <move_window>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d161      	bne.n	80099a8 <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 80098e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80098ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ee:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80098f2:	021b      	lsls	r3, r3, #8
 80098f4:	b21a      	sxth	r2, r3
 80098f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80098fc:	b21b      	sxth	r3, r3
 80098fe:	4313      	orrs	r3, r2
 8009900:	b21b      	sxth	r3, r3
 8009902:	4a35      	ldr	r2, [pc, #212]	; (80099d8 <find_volume+0x590>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d14f      	bne.n	80099a8 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8009908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990a:	78db      	ldrb	r3, [r3, #3]
 800990c:	061a      	lsls	r2, r3, #24
 800990e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009910:	789b      	ldrb	r3, [r3, #2]
 8009912:	041b      	lsls	r3, r3, #16
 8009914:	4313      	orrs	r3, r2
 8009916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009918:	7852      	ldrb	r2, [r2, #1]
 800991a:	0212      	lsls	r2, r2, #8
 800991c:	4313      	orrs	r3, r2
 800991e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009920:	7812      	ldrb	r2, [r2, #0]
 8009922:	4313      	orrs	r3, r2
 8009924:	4a2d      	ldr	r2, [pc, #180]	; (80099dc <find_volume+0x594>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d13e      	bne.n	80099a8 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800992a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8009930:	061a      	lsls	r2, r3, #24
 8009932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009934:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8009938:	041b      	lsls	r3, r3, #16
 800993a:	4313      	orrs	r3, r2
 800993c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800993e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8009942:	0212      	lsls	r2, r2, #8
 8009944:	4313      	orrs	r3, r2
 8009946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009948:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800994c:	4313      	orrs	r3, r2
 800994e:	4a24      	ldr	r2, [pc, #144]	; (80099e0 <find_volume+0x598>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d129      	bne.n	80099a8 <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8009954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009956:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800995a:	061a      	lsls	r2, r3, #24
 800995c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8009962:	041b      	lsls	r3, r3, #16
 8009964:	4313      	orrs	r3, r2
 8009966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009968:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800996c:	0212      	lsls	r2, r2, #8
 800996e:	4313      	orrs	r3, r2
 8009970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009972:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8009976:	431a      	orrs	r2, r3
 8009978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800997e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009980:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8009984:	061a      	lsls	r2, r3, #24
 8009986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009988:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800998c:	041b      	lsls	r3, r3, #16
 800998e:	4313      	orrs	r3, r2
 8009990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009992:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8009996:	0212      	lsls	r2, r2, #8
 8009998:	4313      	orrs	r3, r2
 800999a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800999c:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80099a0:	431a      	orrs	r2, r3
 80099a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80099a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80099ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80099b2:	4b0c      	ldr	r3, [pc, #48]	; (80099e4 <find_volume+0x59c>)
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	3301      	adds	r3, #1
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	4b0a      	ldr	r3, [pc, #40]	; (80099e4 <find_volume+0x59c>)
 80099bc:	801a      	strh	r2, [r3, #0]
 80099be:	4b09      	ldr	r3, [pc, #36]	; (80099e4 <find_volume+0x59c>)
 80099c0:	881a      	ldrh	r2, [r3, #0]
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80099c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099ca:	f7fe fbdf 	bl	800818c <clear_lock>
#endif

	return FR_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3758      	adds	r7, #88	; 0x58
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	ffffaa55 	.word	0xffffaa55
 80099dc:	41615252 	.word	0x41615252
 80099e0:	61417272 	.word	0x61417272
 80099e4:	20000ab4 	.word	0x20000ab4

080099e8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d022      	beq.n	8009a40 <validate+0x58>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d01d      	beq.n	8009a40 <validate+0x58>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a0a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d016      	beq.n	8009a40 <validate+0x58>
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a18:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d10c      	bne.n	8009a40 <validate+0x58>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a2c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7fe f8dd 	bl	8007bf0 <disk_status>
 8009a36:	4603      	mov	r3, r0
 8009a38:	f003 0301 	and.w	r3, r3, #1
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8009a40:	2309      	movs	r3, #9
 8009a42:	e00b      	b.n	8009a5c <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fe f9e6 	bl	8007e1c <lock_fs>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d101      	bne.n	8009a5a <validate+0x72>
 8009a56:	230f      	movs	r3, #15
 8009a58:	e000      	b.n	8009a5c <validate+0x74>

	return FR_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b088      	sub	sp, #32
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8009a76:	f107 0310 	add.w	r3, r7, #16
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7ff fc36 	bl	80092ec <get_ldnumber>
 8009a80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	da01      	bge.n	8009a8c <f_mount+0x28>
 8009a88:	230b      	movs	r3, #11
 8009a8a:	e04c      	b.n	8009b26 <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009a8c:	4a28      	ldr	r2, [pc, #160]	; (8009b30 <f_mount+0xcc>)
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a94:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d011      	beq.n	8009ac0 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 8009a9c:	69b8      	ldr	r0, [r7, #24]
 8009a9e:	f7fe fb75 	bl	800818c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f001 fb1e 	bl	800b0ea <ff_del_syncobj>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <f_mount+0x54>
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	e036      	b.n	8009b26 <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d011      	beq.n	8009aea <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4610      	mov	r0, r2
 8009adc:	f001 fae5 	bl	800b0aa <ff_cre_syncobj>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d101      	bne.n	8009aea <f_mount+0x86>
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	e01d      	b.n	8009b26 <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	4910      	ldr	r1, [pc, #64]	; (8009b30 <f_mount+0xcc>)
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d002      	beq.n	8009b00 <f_mount+0x9c>
 8009afa:	79fb      	ldrb	r3, [r7, #7]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d001      	beq.n	8009b04 <f_mount+0xa0>
 8009b00:	2300      	movs	r3, #0
 8009b02:	e010      	b.n	8009b26 <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8009b04:	f107 0108 	add.w	r1, r7, #8
 8009b08:	f107 030c 	add.w	r3, r7, #12
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7ff fc9a 	bl	8009448 <find_volume>
 8009b14:	4603      	mov	r3, r0
 8009b16:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	7dfa      	ldrb	r2, [r7, #23]
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fe f98b 	bl	8007e3a <unlock_fs>
 8009b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3720      	adds	r7, #32
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	20000ab0 	.word	0x20000ab0

08009b34 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b40:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009b44:	6018      	str	r0, [r3, #0]
 8009b46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b4a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8009b4e:	6019      	str	r1, [r3, #0]
 8009b50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b54:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009b58:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8009b5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b5e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <f_open+0x38>
 8009b68:	2309      	movs	r3, #9
 8009b6a:	e263      	b.n	800a034 <f_open+0x500>
	fp->fs = 0;			/* Clear file object */
 8009b6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b70:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8009b7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b80:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009b84:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8009b88:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8009b8c:	7812      	ldrb	r2, [r2, #0]
 8009b8e:	f002 021f 	and.w	r2, r2, #31
 8009b92:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8009b94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b98:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	f023 0301 	bic.w	r3, r3, #1
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	f107 0108 	add.w	r1, r7, #8
 8009ba8:	f107 0320 	add.w	r3, r7, #32
 8009bac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7ff fc49 	bl	8009448 <find_volume>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8009bbc:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f040 8229 	bne.w	800a018 <f_open+0x4e4>
		INIT_BUF(dj);
 8009bc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bca:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009bce:	f107 0214 	add.w	r2, r7, #20
 8009bd2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8009bd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bda:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	f107 0320 	add.w	r3, r7, #32
 8009be4:	4611      	mov	r1, r2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7ff fb12 	bl	8009210 <follow_path>
 8009bec:	4603      	mov	r3, r0
 8009bee:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8009bf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bf6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009bfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009bfe:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009c02:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d11d      	bne.n	8009c46 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 8009c0a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d103      	bne.n	8009c1a <f_open+0xe6>
				res = FR_INVALID_NAME;
 8009c12:	2306      	movs	r3, #6
 8009c14:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8009c18:	e015      	b.n	8009c46 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009c1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c1e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	f023 0301 	bic.w	r3, r3, #1
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	bf14      	ite	ne
 8009c2c:	2301      	movne	r3, #1
 8009c2e:	2300      	moveq	r3, #0
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	461a      	mov	r2, r3
 8009c34:	f107 0320 	add.w	r3, r7, #32
 8009c38:	4611      	mov	r1, r2
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fe f91c 	bl	8007e78 <chk_lock>
 8009c40:	4603      	mov	r3, r0
 8009c42:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009c46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c4a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	f003 031c 	and.w	r3, r3, #28
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 80e6 	beq.w	8009e26 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8009c5a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d027      	beq.n	8009cb2 <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8009c62:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009c66:	2b04      	cmp	r3, #4
 8009c68:	d10e      	bne.n	8009c88 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009c6a:	f7fe f971 	bl	8007f50 <enq_lock>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d006      	beq.n	8009c82 <f_open+0x14e>
 8009c74:	f107 0320 	add.w	r3, r7, #32
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7ff f960 	bl	8008f3e <dir_register>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	e000      	b.n	8009c84 <f_open+0x150>
 8009c82:	2312      	movs	r3, #18
 8009c84:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009c88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c8c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009c90:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8009c94:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8009c98:	7812      	ldrb	r2, [r2, #0]
 8009c9a:	f042 0208 	orr.w	r2, r2, #8
 8009c9e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8009ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ca4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009ca8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009cac:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8009cb0:	e017      	b.n	8009ce2 <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009cb2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009cb6:	330b      	adds	r3, #11
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	f003 0311 	and.w	r3, r3, #17
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <f_open+0x196>
					res = FR_DENIED;
 8009cc2:	2307      	movs	r3, #7
 8009cc4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8009cc8:	e00b      	b.n	8009ce2 <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8009cca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cce:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	f003 0304 	and.w	r3, r3, #4
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <f_open+0x1ae>
						res = FR_EXIST;
 8009cdc:	2308      	movs	r3, #8
 8009cde:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009ce2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f040 80c1 	bne.w	8009e6e <f_open+0x33a>
 8009cec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cf0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	f003 0308 	and.w	r3, r3, #8
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 80b7 	beq.w	8009e6e <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8009d00:	f7fd ff1a 	bl	8007b38 <get_fattime>
 8009d04:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8009d08:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009d0c:	330e      	adds	r3, #14
 8009d0e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8009d12:	b2d2      	uxtb	r2, r2
 8009d14:	701a      	strb	r2, [r3, #0]
 8009d16:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	0a1b      	lsrs	r3, r3, #8
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009d24:	330f      	adds	r3, #15
 8009d26:	b2d2      	uxtb	r2, r2
 8009d28:	701a      	strb	r2, [r3, #0]
 8009d2a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009d2e:	0c1a      	lsrs	r2, r3, #16
 8009d30:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009d34:	3310      	adds	r3, #16
 8009d36:	b2d2      	uxtb	r2, r2
 8009d38:	701a      	strb	r2, [r3, #0]
 8009d3a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009d3e:	0e1a      	lsrs	r2, r3, #24
 8009d40:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009d44:	3311      	adds	r3, #17
 8009d46:	b2d2      	uxtb	r2, r2
 8009d48:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8009d4a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009d4e:	330b      	adds	r3, #11
 8009d50:	2200      	movs	r2, #0
 8009d52:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8009d54:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009d58:	331c      	adds	r3, #28
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	701a      	strb	r2, [r3, #0]
 8009d5e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009d62:	331d      	adds	r3, #29
 8009d64:	2200      	movs	r2, #0
 8009d66:	701a      	strb	r2, [r3, #0]
 8009d68:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009d6c:	331e      	adds	r3, #30
 8009d6e:	2200      	movs	r2, #0
 8009d70:	701a      	strb	r2, [r3, #0]
 8009d72:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009d76:	331f      	adds	r3, #31
 8009d78:	2200      	movs	r2, #0
 8009d7a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8009d7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d80:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009d84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009d88:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7ff f834 	bl	8008dfa <ld_clust>
 8009d92:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8009d96:	2100      	movs	r1, #0
 8009d98:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8009d9c:	f7ff f85a 	bl	8008e54 <st_clust>
				dj.fs->wflag = 1;
 8009da0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009da4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009da8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8009db2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d059      	beq.n	8009e6e <f_open+0x33a>
					dw = dj.fs->winsect;
 8009dba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dbe:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009dc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009dc6:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8009dca:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8009dce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dd2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009dd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009dda:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fe fd0b 	bl	80087fa <remove_chain>
 8009de4:	4603      	mov	r3, r0
 8009de6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8009dea:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d13d      	bne.n	8009e6e <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8009df2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009df6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009dfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009dfe:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8009e02:	3a01      	subs	r2, #1
 8009e04:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 8009e08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e0c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009e10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009e14:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fe fa2a 	bl	8008272 <move_window>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8009e24:	e023      	b.n	8009e6e <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8009e26:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d11f      	bne.n	8009e6e <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8009e2e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009e32:	330b      	adds	r3, #11
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	f003 0310 	and.w	r3, r3, #16
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <f_open+0x312>
					res = FR_NO_FILE;
 8009e3e:	2304      	movs	r3, #4
 8009e40:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8009e44:	e013      	b.n	8009e6e <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8009e46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e4a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	f003 0302 	and.w	r3, r3, #2
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00a      	beq.n	8009e6e <f_open+0x33a>
 8009e58:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009e5c:	330b      	adds	r3, #11
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	f003 0301 	and.w	r3, r3, #1
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d002      	beq.n	8009e6e <f_open+0x33a>
						res = FR_DENIED;
 8009e68:	2307      	movs	r3, #7
 8009e6a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8009e6e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d153      	bne.n	8009f1e <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009e76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e7a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	f003 0308 	and.w	r3, r3, #8
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00b      	beq.n	8009ea0 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8009e88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e8c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009e90:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8009e94:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8009e98:	7812      	ldrb	r2, [r2, #0]
 8009e9a:	f042 0220 	orr.w	r2, r2, #32
 8009e9e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009ea0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ea4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009ea8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009eac:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8009eb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009eb4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8009ebe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ec2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8009ecc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ed0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ed4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	f023 0301 	bic.w	r3, r3, #1
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	bf14      	ite	ne
 8009ee2:	2301      	movne	r3, #1
 8009ee4:	2300      	moveq	r3, #0
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	461a      	mov	r2, r3
 8009eea:	f107 0320 	add.w	r3, r7, #32
 8009eee:	4611      	mov	r1, r2
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fe f851 	bl	8007f98 <inc_lock>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009efc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8009f06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f0a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d102      	bne.n	8009f1e <f_open+0x3ea>
 8009f18:	2302      	movs	r3, #2
 8009f1a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8009f1e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d178      	bne.n	800a018 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 8009f26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f2a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8009f34:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8009f38:	7812      	ldrb	r2, [r2, #0]
 8009f3a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8009f3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f42:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8009f4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f52:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009f56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009f5a:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fe ff4b 	bl	8008dfa <ld_clust>
 8009f64:	4602      	mov	r2, r0
 8009f66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009f6a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8009f74:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009f78:	331f      	adds	r3, #31
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	061a      	lsls	r2, r3, #24
 8009f7e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009f82:	331e      	adds	r3, #30
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	041b      	lsls	r3, r3, #16
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8009f8e:	321d      	adds	r2, #29
 8009f90:	7812      	ldrb	r2, [r2, #0]
 8009f92:	0212      	lsls	r2, r2, #8
 8009f94:	4313      	orrs	r3, r2
 8009f96:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8009f9a:	321c      	adds	r2, #28
 8009f9c:	7812      	ldrb	r2, [r2, #0]
 8009f9e:	431a      	orrs	r2, r3
 8009fa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009fa4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8009fae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009fb2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8009fbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009fc2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8009fce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009fd2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8009fde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009fe2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8009fe6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009fea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009fee:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8009ff8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ffc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a006:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800a00a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a00e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800a018:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a01c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a020:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a024:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 800a028:	4611      	mov	r1, r2
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7fd ff05 	bl	8007e3a <unlock_fs>
 800a030:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800a034:	4618      	mov	r0, r3
 800a036:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b08c      	sub	sp, #48	; 0x30
 800a042:	af00      	add	r7, sp, #0
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	60b9      	str	r1, [r7, #8]
 800a048:	607a      	str	r2, [r7, #4]
 800a04a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	2200      	movs	r2, #0
 800a054:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f7ff fcc6 	bl	80099e8 <validate>
 800a05c:	4603      	mov	r3, r0
 800a05e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a060:	7ffb      	ldrb	r3, [r7, #31]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d009      	beq.n	800a07a <f_read+0x3c>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a06c:	7ffa      	ldrb	r2, [r7, #31]
 800a06e:	4611      	mov	r1, r2
 800a070:	4618      	mov	r0, r3
 800a072:	f7fd fee2 	bl	8007e3a <unlock_fs>
 800a076:	7ffb      	ldrb	r3, [r7, #31]
 800a078:	e192      	b.n	800a3a0 <f_read+0x362>
	if (fp->err)								/* Check error */
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00d      	beq.n	800a0a0 <f_read+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800a090:	4619      	mov	r1, r3
 800a092:	4610      	mov	r0, r2
 800a094:	f7fd fed1 	bl	8007e3a <unlock_fs>
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800a09e:	e17f      	b.n	800a3a0 <f_read+0x362>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a0a6:	f003 0301 	and.w	r3, r3, #1
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d108      	bne.n	800a0c0 <f_read+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a0b4:	2107      	movs	r1, #7
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fd febf 	bl	8007e3a <unlock_fs>
 800a0bc:	2307      	movs	r3, #7
 800a0be:	e16f      	b.n	800a3a0 <f_read+0x362>
	remain = fp->fsize - fp->fptr;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	f240 8157 	bls.w	800a388 <f_read+0x34a>
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a0de:	e153      	b.n	800a388 <f_read+0x34a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f040 811c 	bne.w	800a328 <f_read+0x2ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a0f6:	0a5b      	lsrs	r3, r3, #9
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a100:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a104:	3b01      	subs	r3, #1
 800a106:	b2db      	uxtb	r3, r3
 800a108:	4013      	ands	r3, r2
 800a10a:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800a10c:	7dfb      	ldrb	r3, [r7, #23]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d147      	bne.n	800a1a2 <f_read+0x164>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d104      	bne.n	800a126 <f_read+0xe8>
					clst = fp->sclust;			/* Follow from the origin */
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a122:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a124:	e018      	b.n	800a158 <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d008      	beq.n	800a142 <f_read+0x104>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a136:	4619      	mov	r1, r3
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f7fe fc55 	bl	80089e8 <clmt_clust>
 800a13e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a140:	e00a      	b.n	800a158 <f_read+0x11a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a14e:	4619      	mov	r1, r3
 800a150:	4610      	mov	r0, r2
 800a152:	f7fe f98a 	bl	800846a <get_fat>
 800a156:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800a158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d80c      	bhi.n	800a178 <f_read+0x13a>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2202      	movs	r2, #2
 800a162:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a16c:	2102      	movs	r1, #2
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fd fe63 	bl	8007e3a <unlock_fs>
 800a174:	2302      	movs	r3, #2
 800a176:	e113      	b.n	800a3a0 <f_read+0x362>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a17e:	d10c      	bne.n	800a19a <f_read+0x15c>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a18e:	2101      	movs	r1, #1
 800a190:	4618      	mov	r0, r3
 800a192:	f7fd fe52 	bl	8007e3a <unlock_fs>
 800a196:	2301      	movs	r3, #1
 800a198:	e102      	b.n	800a3a0 <f_read+0x362>
				fp->clust = clst;				/* Update current cluster */
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a19e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	f7fe f939 	bl	8008428 <clust2sect>
 800a1b6:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10c      	bne.n	800a1d8 <f_read+0x19a>
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2202      	movs	r2, #2
 800a1c2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a1cc:	2102      	movs	r1, #2
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fd fe33 	bl	8007e3a <unlock_fs>
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	e0e3      	b.n	800a3a0 <f_read+0x362>
			sect += csect;
 800a1d8:	7dfb      	ldrb	r3, [r7, #23]
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	4413      	add	r3, r2
 800a1de:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	0a5b      	lsrs	r3, r3, #9
 800a1e4:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d04d      	beq.n	800a288 <f_read+0x24a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800a1ec:	7dfa      	ldrb	r2, [r7, #23]
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	4413      	add	r3, r2
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a1f8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d908      	bls.n	800a212 <f_read+0x1d4>
					cc = fp->fs->csize - csect;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a206:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a20a:	461a      	mov	r2, r3
 800a20c:	7dfb      	ldrb	r3, [r7, #23]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a218:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	6a39      	ldr	r1, [r7, #32]
 800a222:	f7fd fd25 	bl	8007c70 <disk_read>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00c      	beq.n	800a246 <f_read+0x208>
					ABORT(fp->fs, FR_DISK_ERR);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a23a:	2101      	movs	r1, #1
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fd fdfc 	bl	8007e3a <unlock_fs>
 800a242:	2301      	movs	r3, #1
 800a244:	e0ac      	b.n	800a3a0 <f_read+0x362>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a24c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a250:	2b00      	cmp	r3, #0
 800a252:	d015      	beq.n	800a280 <f_read+0x242>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a260:	429a      	cmp	r2, r3
 800a262:	d90d      	bls.n	800a280 <f_read+0x242>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	025b      	lsls	r3, r3, #9
 800a270:	6a3a      	ldr	r2, [r7, #32]
 800a272:	4413      	add	r3, r2
 800a274:	68f9      	ldr	r1, [r7, #12]
 800a276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7fd fd56 	bl	8007d2c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	025b      	lsls	r3, r3, #9
 800a284:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800a286:	e069      	b.n	800a35c <f_read+0x31e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a28e:	693a      	ldr	r2, [r7, #16]
 800a290:	429a      	cmp	r2, r3
 800a292:	d045      	beq.n	800a320 <f_read+0x2e2>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d024      	beq.n	800a2ec <f_read+0x2ae>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a2a8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a2ac:	68f9      	ldr	r1, [r7, #12]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	f7fd fcfb 	bl	8007cb0 <disk_write>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00c      	beq.n	800a2da <f_read+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a2ce:	2101      	movs	r1, #1
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fd fdb2 	bl	8007e3a <unlock_fs>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e062      	b.n	800a3a0 <f_read+0x362>
					fp->flag &= ~FA__DIRTY;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a2e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a2f2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a2f6:	68f9      	ldr	r1, [r7, #12]
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	693a      	ldr	r2, [r7, #16]
 800a2fc:	f7fd fcb8 	bl	8007c70 <disk_read>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00c      	beq.n	800a320 <f_read+0x2e2>
					ABORT(fp->fs, FR_DISK_ERR);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a314:	2101      	movs	r1, #1
 800a316:	4618      	mov	r0, r3
 800a318:	f7fd fd8f 	bl	8007e3a <unlock_fs>
 800a31c:	2301      	movs	r3, #1
 800a31e:	e03f      	b.n	800a3a0 <f_read+0x362>
			}
#endif
			fp->dsect = sect;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a32e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a332:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a336:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800a338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d901      	bls.n	800a344 <f_read+0x306>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	4413      	add	r3, r2
 800a352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a354:	4619      	mov	r1, r3
 800a356:	6a38      	ldr	r0, [r7, #32]
 800a358:	f7fd fce8 	bl	8007d2c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a35c:	6a3a      	ldr	r2, [r7, #32]
 800a35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a360:	4413      	add	r3, r2
 800a362:	623b      	str	r3, [r7, #32]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36c:	441a      	add	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37a:	441a      	add	r2, r3
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f47f aea8 	bne.w	800a0e0 <f_read+0xa2>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a396:	2100      	movs	r1, #0
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fd fd4e 	bl	8007e3a <unlock_fs>
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3730      	adds	r7, #48	; 0x30
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08a      	sub	sp, #40	; 0x28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	607a      	str	r2, [r7, #4]
 800a3b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f7ff fb11 	bl	80099e8 <validate>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a3ca:	7dfb      	ldrb	r3, [r7, #23]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d009      	beq.n	800a3e4 <f_write+0x3c>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a3d6:	7dfa      	ldrb	r2, [r7, #23]
 800a3d8:	4611      	mov	r1, r2
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fd fd2d 	bl	8007e3a <unlock_fs>
 800a3e0:	7dfb      	ldrb	r3, [r7, #23]
 800a3e2:	e1d4      	b.n	800a78e <f_write+0x3e6>
	if (fp->err)							/* Check error */
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00d      	beq.n	800a40a <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	4610      	mov	r0, r2
 800a3fe:	f7fd fd1c 	bl	8007e3a <unlock_fs>
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800a408:	e1c1      	b.n	800a78e <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a410:	f003 0302 	and.w	r3, r3, #2
 800a414:	2b00      	cmp	r3, #0
 800a416:	d108      	bne.n	800a42a <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a41e:	2107      	movs	r1, #7
 800a420:	4618      	mov	r0, r3
 800a422:	f7fd fd0a 	bl	8007e3a <unlock_fs>
 800a426:	2307      	movs	r3, #7
 800a428:	e1b1      	b.n	800a78e <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	441a      	add	r2, r3
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a43a:	429a      	cmp	r2, r3
 800a43c:	f080 8182 	bcs.w	800a744 <f_write+0x39c>
 800a440:	2300      	movs	r3, #0
 800a442:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800a444:	e17e      	b.n	800a744 <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a44c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a450:	2b00      	cmp	r3, #0
 800a452:	f040 813e 	bne.w	800a6d2 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a45c:	0a5b      	lsrs	r3, r3, #9
 800a45e:	b2da      	uxtb	r2, r3
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a466:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a46a:	3b01      	subs	r3, #1
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	4013      	ands	r3, r2
 800a470:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800a472:	7dbb      	ldrb	r3, [r7, #22]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d15f      	bne.n	800a538 <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10f      	bne.n	800a4a2 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a488:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800a48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d121      	bne.n	800a4d4 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a496:	2100      	movs	r1, #0
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fe fa08 	bl	80088ae <create_chain>
 800a49e:	6278      	str	r0, [r7, #36]	; 0x24
 800a4a0:	e018      	b.n	800a4d4 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d008      	beq.n	800a4be <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f7fe fa97 	bl	80089e8 <clmt_clust>
 800a4ba:	6278      	str	r0, [r7, #36]	; 0x24
 800a4bc:	e00a      	b.n	800a4d4 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	f7fe f9ee 	bl	80088ae <create_chain>
 800a4d2:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f000 8139 	beq.w	800a74e <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d10c      	bne.n	800a4fc <f_write+0x154>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2202      	movs	r2, #2
 800a4e6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a4f0:	2102      	movs	r1, #2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fd fca1 	bl	8007e3a <unlock_fs>
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	e148      	b.n	800a78e <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a502:	d10c      	bne.n	800a51e <f_write+0x176>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a512:	2101      	movs	r1, #1
 800a514:	4618      	mov	r0, r3
 800a516:	f7fd fc90 	bl	8007e3a <unlock_fs>
 800a51a:	2301      	movs	r3, #1
 800a51c:	e137      	b.n	800a78e <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a522:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d103      	bne.n	800a538 <f_write+0x190>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a534:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a53e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a542:	2b00      	cmp	r3, #0
 800a544:	d024      	beq.n	800a590 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a54c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a550:	68f9      	ldr	r1, [r7, #12]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a558:	2301      	movs	r3, #1
 800a55a:	f7fd fba9 	bl	8007cb0 <disk_write>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00c      	beq.n	800a57e <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a572:	2101      	movs	r1, #1
 800a574:	4618      	mov	r0, r3
 800a576:	f7fd fc60 	bl	8007e3a <unlock_fs>
 800a57a:	2301      	movs	r3, #1
 800a57c:	e107      	b.n	800a78e <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a59c:	4619      	mov	r1, r3
 800a59e:	4610      	mov	r0, r2
 800a5a0:	f7fd ff42 	bl	8008428 <clust2sect>
 800a5a4:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10c      	bne.n	800a5c6 <f_write+0x21e>
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5ba:	2102      	movs	r1, #2
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fd fc3c 	bl	8007e3a <unlock_fs>
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	e0e3      	b.n	800a78e <f_write+0x3e6>
			sect += csect;
 800a5c6:	7dbb      	ldrb	r3, [r7, #22]
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	0a5b      	lsrs	r3, r3, #9
 800a5d2:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d04f      	beq.n	800a67a <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800a5da:	7dba      	ldrb	r2, [r7, #22]
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	4413      	add	r3, r2
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a5e6:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d908      	bls.n	800a600 <f_write+0x258>
					cc = fp->fs->csize - csect;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5f4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	7dbb      	ldrb	r3, [r7, #22]
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a606:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	69b9      	ldr	r1, [r7, #24]
 800a610:	f7fd fb4e 	bl	8007cb0 <disk_write>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00c      	beq.n	800a634 <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a628:	2101      	movs	r1, #1
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fd fc05 	bl	8007e3a <unlock_fs>
 800a630:	2301      	movs	r3, #1
 800a632:	e0ac      	b.n	800a78e <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	69fa      	ldr	r2, [r7, #28]
 800a640:	429a      	cmp	r2, r3
 800a642:	d916      	bls.n	800a672 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	025b      	lsls	r3, r3, #9
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	4413      	add	r3, r2
 800a656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a65a:	4619      	mov	r1, r3
 800a65c:	f7fd fb66 	bl	8007d2c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a66a:	b2da      	uxtb	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	025b      	lsls	r3, r3, #9
 800a676:	623b      	str	r3, [r7, #32]
				continue;
 800a678:	e04e      	b.n	800a718 <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	429a      	cmp	r2, r3
 800a684:	d021      	beq.n	800a6ca <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a692:	429a      	cmp	r2, r3
 800a694:	d219      	bcs.n	800a6ca <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a69c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a6a0:	68f9      	ldr	r1, [r7, #12]
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	693a      	ldr	r2, [r7, #16]
 800a6a6:	f7fd fae3 	bl	8007c70 <disk_read>
 800a6aa:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00c      	beq.n	800a6ca <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6be:	2101      	movs	r1, #1
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fd fbba 	bl	8007e3a <unlock_fs>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e061      	b.n	800a78e <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	693a      	ldr	r2, [r7, #16]
 800a6ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6dc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a6e0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800a6e2:	6a3a      	ldr	r2, [r7, #32]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d901      	bls.n	800a6ee <f_write+0x346>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a6f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	6a3a      	ldr	r2, [r7, #32]
 800a6fe:	69b9      	ldr	r1, [r7, #24]
 800a700:	4618      	mov	r0, r3
 800a702:	f7fd fb13 	bl	8007d2c <mem_cpy>
		fp->flag |= FA__DIRTY;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a70c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a710:	b2da      	uxtb	r2, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800a718:	69ba      	ldr	r2, [r7, #24]
 800a71a:	6a3b      	ldr	r3, [r7, #32]
 800a71c:	4413      	add	r3, r2
 800a71e:	61bb      	str	r3, [r7, #24]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	441a      	add	r2, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	441a      	add	r2, r3
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	601a      	str	r2, [r3, #0]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	6a3b      	ldr	r3, [r7, #32]
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	f47f ae7d 	bne.w	800a446 <f_write+0x9e>
 800a74c:	e000      	b.n	800a750 <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a74e:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d905      	bls.n	800a76c <f_write+0x3c4>
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a772:	f043 0320 	orr.w	r3, r3, #32
 800a776:	b2da      	uxtb	r2, r3
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a784:	2100      	movs	r1, #0
 800a786:	4618      	mov	r0, r3
 800a788:	f7fd fb57 	bl	8007e3a <unlock_fs>
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3728      	adds	r7, #40	; 0x28
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b086      	sub	sp, #24
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f7ff f922 	bl	80099e8 <validate>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a7a8:	7dfb      	ldrb	r3, [r7, #23]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f040 80af 	bne.w	800a90e <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a7b6:	f003 0320 	and.w	r3, r3, #32
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f000 80a7 	beq.w	800a90e <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a7c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d020      	beq.n	800a810 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7d4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a7d8:	6879      	ldr	r1, [r7, #4]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	f7fd fa65 	bl	8007cb0 <disk_write>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d008      	beq.n	800a7fe <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7f2:	2101      	movs	r1, #1
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fd fb20 	bl	8007e3a <unlock_fs>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e090      	b.n	800a920 <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800a81c:	4619      	mov	r1, r3
 800a81e:	4610      	mov	r0, r2
 800a820:	f7fd fd27 	bl	8008272 <move_window>
 800a824:	4603      	mov	r3, r0
 800a826:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800a828:	7dfb      	ldrb	r3, [r7, #23]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d16f      	bne.n	800a90e <f_sync+0x178>
				dir = fp->dir_ptr;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a834:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	330b      	adds	r3, #11
 800a83a:	781a      	ldrb	r2, [r3, #0]
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	330b      	adds	r3, #11
 800a840:	f042 0220 	orr.w	r2, r2, #32
 800a844:	b2d2      	uxtb	r2, r2
 800a846:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	331c      	adds	r3, #28
 800a852:	b2d2      	uxtb	r2, r2
 800a854:	701a      	strb	r2, [r3, #0]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	0a1b      	lsrs	r3, r3, #8
 800a860:	b29a      	uxth	r2, r3
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	331d      	adds	r3, #29
 800a866:	b2d2      	uxtb	r2, r2
 800a868:	701a      	strb	r2, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a870:	0c1a      	lsrs	r2, r3, #16
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	331e      	adds	r3, #30
 800a876:	b2d2      	uxtb	r2, r2
 800a878:	701a      	strb	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a880:	0e1a      	lsrs	r2, r3, #24
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	331f      	adds	r3, #31
 800a886:	b2d2      	uxtb	r2, r2
 800a888:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a890:	4619      	mov	r1, r3
 800a892:	6938      	ldr	r0, [r7, #16]
 800a894:	f7fe fade 	bl	8008e54 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800a898:	f7fd f94e 	bl	8007b38 <get_fattime>
 800a89c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	3316      	adds	r3, #22
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	b2d2      	uxtb	r2, r2
 800a8a6:	701a      	strb	r2, [r3, #0]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	0a1b      	lsrs	r3, r3, #8
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	3317      	adds	r3, #23
 800a8b4:	b2d2      	uxtb	r2, r2
 800a8b6:	701a      	strb	r2, [r3, #0]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	0c1a      	lsrs	r2, r3, #16
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	3318      	adds	r3, #24
 800a8c0:	b2d2      	uxtb	r2, r2
 800a8c2:	701a      	strb	r2, [r3, #0]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	0e1a      	lsrs	r2, r3, #24
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	3319      	adds	r3, #25
 800a8cc:	b2d2      	uxtb	r2, r2
 800a8ce:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	3312      	adds	r3, #18
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	701a      	strb	r2, [r3, #0]
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	3313      	adds	r3, #19
 800a8dc:	2200      	movs	r2, #0
 800a8de:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a8e6:	f023 0320 	bic.w	r3, r3, #32
 800a8ea:	b2da      	uxtb	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a904:	4618      	mov	r0, r3
 800a906:	f7fd fce2 	bl	80082ce <sync_fs>
 800a90a:	4603      	mov	r3, r0
 800a90c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a914:	7dfa      	ldrb	r2, [r7, #23]
 800a916:	4611      	mov	r1, r2
 800a918:	4618      	mov	r0, r3
 800a91a:	f7fd fa8e 	bl	8007e3a <unlock_fs>
 800a91e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3718      	adds	r7, #24
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f7ff ff30 	bl	800a796 <f_sync>
 800a936:	4603      	mov	r3, r0
 800a938:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a93a:	7bfb      	ldrb	r3, [r7, #15]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d11e      	bne.n	800a97e <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f7ff f851 	bl	80099e8 <validate>
 800a946:	4603      	mov	r3, r0
 800a948:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a94a:	7bfb      	ldrb	r3, [r7, #15]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d116      	bne.n	800a97e <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a956:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fd fbd0 	bl	8008104 <dec_lock>
 800a964:	4603      	mov	r3, r0
 800a966:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a968:	7bfb      	ldrb	r3, [r7, #15]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d103      	bne.n	800a976 <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a976:	2100      	movs	r1, #0
 800a978:	68b8      	ldr	r0, [r7, #8]
 800a97a:	f7fd fa5e 	bl	8007e3a <unlock_fs>
#endif
		}
	}
	return res;
 800a97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b090      	sub	sp, #64	; 0x40
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f7ff f828 	bl	80099e8 <validate>
 800a998:	4603      	mov	r3, r0
 800a99a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a99e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00b      	beq.n	800a9be <f_lseek+0x36>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a9ac:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a9b0:	4611      	mov	r1, r2
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fd fa41 	bl	8007e3a <unlock_fs>
 800a9b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a9bc:	e2af      	b.n	800af1e <f_lseek+0x596>
	if (fp->err)						/* Check error */
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00d      	beq.n	800a9e4 <f_lseek+0x5c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	4610      	mov	r0, r2
 800a9d8:	f7fd fa2f 	bl	8007e3a <unlock_fs>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800a9e2:	e29c      	b.n	800af1e <f_lseek+0x596>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f000 8115 	beq.w	800ac1a <f_lseek+0x292>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f6:	d172      	bne.n	800aade <f_lseek+0x156>
			tbl = fp->cltbl;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a9fe:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	1d1a      	adds	r2, r3, #4
 800aa04:	627a      	str	r2, [r7, #36]	; 0x24
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	617b      	str	r3, [r7, #20]
 800aa0a:	2302      	movs	r3, #2
 800aa0c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aa14:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800aa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d04f      	beq.n	800aabc <f_lseek+0x134>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800aa1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1e:	613b      	str	r3, [r7, #16]
 800aa20:	2300      	movs	r3, #0
 800aa22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa26:	3302      	adds	r3, #2
 800aa28:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2c:	60fb      	str	r3, [r7, #12]
 800aa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa30:	3301      	adds	r3, #1
 800aa32:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fd fd14 	bl	800846a <get_fat>
 800aa42:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800aa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d80c      	bhi.n	800aa64 <f_lseek+0xdc>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2202      	movs	r2, #2
 800aa4e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa58:	2102      	movs	r1, #2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fd f9ed 	bl	8007e3a <unlock_fs>
 800aa60:	2302      	movs	r3, #2
 800aa62:	e25c      	b.n	800af1e <f_lseek+0x596>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800aa64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa6a:	d10c      	bne.n	800aa86 <f_lseek+0xfe>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa7a:	2101      	movs	r1, #1
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fd f9dc 	bl	8007e3a <unlock_fs>
 800aa82:	2301      	movs	r3, #1
 800aa84:	e24b      	b.n	800af1e <f_lseek+0x596>
					} while (cl == pcl + 1);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d0cc      	beq.n	800aa2a <f_lseek+0xa2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800aa90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d809      	bhi.n	800aaac <f_lseek+0x124>
						*tbl++ = ncl; *tbl++ = tcl;
 800aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9a:	1d1a      	adds	r2, r3, #4
 800aa9c:	627a      	str	r2, [r7, #36]	; 0x24
 800aa9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaa0:	601a      	str	r2, [r3, #0]
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa4:	1d1a      	adds	r2, r3, #4
 800aaa6:	627a      	str	r2, [r7, #36]	; 0x24
 800aaa8:	693a      	ldr	r2, [r7, #16]
 800aaaa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aab2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d3af      	bcc.n	800aa1c <f_lseek+0x94>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800aac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aac4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800aac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d803      	bhi.n	800aad6 <f_lseek+0x14e>
				*tbl = 0;		/* Terminate table */
 800aace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad0:	2200      	movs	r2, #0
 800aad2:	601a      	str	r2, [r3, #0]
 800aad4:	e218      	b.n	800af08 <f_lseek+0x580>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800aad6:	2311      	movs	r3, #17
 800aad8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800aadc:	e214      	b.n	800af08 <f_lseek+0x580>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d903      	bls.n	800aaf2 <f_lseek+0x16a>
				ofs = fp->fsize;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800aaf0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	683a      	ldr	r2, [r7, #0]
 800aaf6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 8203 	beq.w	800af08 <f_lseek+0x580>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	3b01      	subs	r3, #1
 800ab06:	4619      	mov	r1, r3
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7fd ff6d 	bl	80089e8 <clmt_clust>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab22:	4619      	mov	r1, r3
 800ab24:	4610      	mov	r0, r2
 800ab26:	f7fd fc7f 	bl	8008428 <clust2sect>
 800ab2a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d10c      	bne.n	800ab4c <f_lseek+0x1c4>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2202      	movs	r2, #2
 800ab36:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab40:	2102      	movs	r1, #2
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7fd f979 	bl	8007e3a <unlock_fs>
 800ab48:	2302      	movs	r3, #2
 800ab4a:	e1e8      	b.n	800af1e <f_lseek+0x596>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	0a5b      	lsrs	r3, r3, #9
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800ab58:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800ab5c:	3a01      	subs	r2, #1
 800ab5e:	4013      	ands	r3, r2
 800ab60:	69ba      	ldr	r2, [r7, #24]
 800ab62:	4413      	add	r3, r2
 800ab64:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ab6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f000 81c9 	beq.w	800af08 <f_lseek+0x580>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	f000 81c2 	beq.w	800af08 <f_lseek+0x580>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ab8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d024      	beq.n	800abdc <f_lseek+0x254>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab98:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800ab9c:	6879      	ldr	r1, [r7, #4]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800aba4:	2301      	movs	r3, #1
 800aba6:	f7fd f883 	bl	8007cb0 <disk_write>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00c      	beq.n	800abca <f_lseek+0x242>
							ABORT(fp->fs, FR_DISK_ERR);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800abbe:	2101      	movs	r1, #1
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7fd f93a 	bl	8007e3a <unlock_fs>
 800abc6:	2301      	movs	r3, #1
 800abc8:	e1a9      	b.n	800af1e <f_lseek+0x596>
						fp->flag &= ~FA__DIRTY;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800abd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800abe2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800abe6:	6879      	ldr	r1, [r7, #4]
 800abe8:	2301      	movs	r3, #1
 800abea:	69ba      	ldr	r2, [r7, #24]
 800abec:	f7fd f840 	bl	8007c70 <disk_read>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00c      	beq.n	800ac10 <f_lseek+0x288>
						ABORT(fp->fs, FR_DISK_ERR);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ac04:	2101      	movs	r1, #1
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fd f917 	bl	8007e3a <unlock_fs>
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e186      	b.n	800af1e <f_lseek+0x596>
#endif
					fp->dsect = dsc;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	69ba      	ldr	r2, [r7, #24]
 800ac14:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800ac18:	e176      	b.n	800af08 <f_lseek+0x580>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ac20:	683a      	ldr	r2, [r7, #0]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d90a      	bls.n	800ac3c <f_lseek+0x2b4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ac2c:	f003 0302 	and.w	r3, r3, #2
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d103      	bne.n	800ac3c <f_lseek+0x2b4>
#endif
			) ofs = fp->fsize;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ac3a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ac42:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	637b      	str	r3, [r7, #52]	; 0x34
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac4c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f000 80ea 	beq.w	800ae2c <f_lseek+0x4a4>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ac5e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ac62:	025b      	lsls	r3, r3, #9
 800ac64:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d01e      	beq.n	800acaa <f_lseek+0x322>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	1e5a      	subs	r2, r3, #1
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	fbb2 f2f3 	udiv	r2, r2, r3
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	1e59      	subs	r1, r3, #1
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d312      	bcc.n	800acaa <f_lseek+0x322>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800ac84:	6a3b      	ldr	r3, [r7, #32]
 800ac86:	1e5a      	subs	r2, r3, #1
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	425b      	negs	r3, r3
 800ac8c:	401a      	ands	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	1ad3      	subs	r3, r2, r3
 800ac9e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aca6:	63bb      	str	r3, [r7, #56]	; 0x38
 800aca8:	e037      	b.n	800ad1a <f_lseek+0x392>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800acb0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800acb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d12c      	bne.n	800ad12 <f_lseek+0x38a>
					clst = create_chain(fp->fs, 0);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800acbe:	2100      	movs	r1, #0
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7fd fdf4 	bl	80088ae <create_chain>
 800acc6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800acc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acca:	2b01      	cmp	r3, #1
 800accc:	d10c      	bne.n	800ace8 <f_lseek+0x360>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2202      	movs	r2, #2
 800acd2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800acdc:	2102      	movs	r1, #2
 800acde:	4618      	mov	r0, r3
 800ace0:	f7fd f8ab 	bl	8007e3a <unlock_fs>
 800ace4:	2302      	movs	r3, #2
 800ace6:	e11a      	b.n	800af1e <f_lseek+0x596>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ace8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acee:	d10c      	bne.n	800ad0a <f_lseek+0x382>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800acfe:	2101      	movs	r1, #1
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fd f89a 	bl	8007e3a <unlock_fs>
 800ad06:	2301      	movs	r3, #1
 800ad08:	e109      	b.n	800af1e <f_lseek+0x596>
					fp->sclust = clst;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 8085 	beq.w	800ae2c <f_lseek+0x4a4>
				while (ofs > bcs) {						/* Cluster following loop */
 800ad22:	e055      	b.n	800add0 <f_lseek+0x448>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ad2a:	f003 0302 	and.w	r3, r3, #2
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00d      	beq.n	800ad4e <f_lseek+0x3c6>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ad38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fd fdb7 	bl	80088ae <create_chain>
 800ad40:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800ad42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10a      	bne.n	800ad5e <f_lseek+0x3d6>
							ofs = bcs; break;
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	603b      	str	r3, [r7, #0]
 800ad4c:	e044      	b.n	800add8 <f_lseek+0x450>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ad54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fd fb87 	bl	800846a <get_fat>
 800ad5c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad64:	d10c      	bne.n	800ad80 <f_lseek+0x3f8>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2201      	movs	r2, #1
 800ad6a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ad74:	2101      	movs	r1, #1
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fd f85f 	bl	8007e3a <unlock_fs>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e0ce      	b.n	800af1e <f_lseek+0x596>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d907      	bls.n	800ad96 <f_lseek+0x40e>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ad8c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ad90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d30c      	bcc.n	800adb0 <f_lseek+0x428>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2202      	movs	r2, #2
 800ad9a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ada4:	2102      	movs	r1, #2
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fd f847 	bl	8007e3a <unlock_fs>
 800adac:	2302      	movs	r3, #2
 800adae:	e0b6      	b.n	800af1e <f_lseek+0x596>
					fp->clust = clst;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	441a      	add	r2, r3
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 800adc8:	683a      	ldr	r2, [r7, #0]
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800add0:	683a      	ldr	r2, [r7, #0]
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	429a      	cmp	r2, r3
 800add6:	d8a5      	bhi.n	800ad24 <f_lseek+0x39c>
				}
				fp->fptr += ofs;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	441a      	add	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d01c      	beq.n	800ae2c <f_lseek+0x4a4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800adf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fd fb14 	bl	8008428 <clust2sect>
 800ae00:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800ae02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10c      	bne.n	800ae22 <f_lseek+0x49a>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2202      	movs	r2, #2
 800ae0c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ae16:	2102      	movs	r1, #2
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7fd f80e 	bl	8007e3a <unlock_fs>
 800ae1e:	2302      	movs	r3, #2
 800ae20:	e07d      	b.n	800af1e <f_lseek+0x596>
					nsect += ofs / SS(fp->fs);
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	0a5b      	lsrs	r3, r3, #9
 800ae26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae28:	4413      	add	r3, r2
 800ae2a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ae32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d04f      	beq.n	800aeda <f_lseek+0x552>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ae40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d049      	beq.n	800aeda <f_lseek+0x552>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ae4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d024      	beq.n	800ae9e <f_lseek+0x516>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ae5a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ae66:	2301      	movs	r3, #1
 800ae68:	f7fc ff22 	bl	8007cb0 <disk_write>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00c      	beq.n	800ae8c <f_lseek+0x504>
					ABORT(fp->fs, FR_DISK_ERR);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2201      	movs	r2, #1
 800ae76:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ae80:	2101      	movs	r1, #1
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fc ffd9 	bl	8007e3a <unlock_fs>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	e048      	b.n	800af1e <f_lseek+0x596>
				fp->flag &= ~FA__DIRTY;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ae92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae96:	b2da      	uxtb	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aea4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800aea8:	6879      	ldr	r1, [r7, #4]
 800aeaa:	2301      	movs	r3, #1
 800aeac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aeae:	f7fc fedf 	bl	8007c70 <disk_read>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00c      	beq.n	800aed2 <f_lseek+0x54a>
				ABORT(fp->fs, FR_DISK_ERR);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aec6:	2101      	movs	r1, #1
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7fc ffb6 	bl	8007e3a <unlock_fs>
 800aece:	2301      	movs	r3, #1
 800aed0:	e025      	b.n	800af1e <f_lseek+0x596>
#endif
			fp->dsect = nsect;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aed6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d90e      	bls.n	800af08 <f_lseek+0x580>
			fp->fsize = fp->fptr;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800aefc:	f043 0320 	orr.w	r3, r3, #32
 800af00:	b2da      	uxtb	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800af0e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800af12:	4611      	mov	r1, r2
 800af14:	4618      	mov	r0, r3
 800af16:	f7fc ff90 	bl	8007e3a <unlock_fs>
 800af1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3740      	adds	r7, #64	; 0x40
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800af32:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800af36:	6018      	str	r0, [r3, #0]
 800af38:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800af3c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800af40:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 800af42:	1d39      	adds	r1, r7, #4
 800af44:	f107 0314 	add.w	r3, r7, #20
 800af48:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800af4c:	2200      	movs	r2, #0
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fe fa7a 	bl	8009448 <find_volume>
 800af54:	4603      	mov	r3, r0
 800af56:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	if (res == FR_OK) {
 800af5a:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d136      	bne.n	800afd0 <f_stat+0xaa>
		INIT_BUF(dj);
 800af62:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800af66:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800af6a:	f107 0208 	add.w	r2, r7, #8
 800af6e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800af72:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800af76:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	f107 0314 	add.w	r3, r7, #20
 800af80:	4611      	mov	r1, r2
 800af82:	4618      	mov	r0, r3
 800af84:	f7fe f944 	bl	8009210 <follow_path>
 800af88:	4603      	mov	r3, r0
 800af8a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		if (res == FR_OK) {				/* Follow completed */
 800af8e:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800af92:	2b00      	cmp	r3, #0
 800af94:	d11c      	bne.n	800afd0 <f_stat+0xaa>
			if (dj.dir) {		/* Found an object */
 800af96:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800af9a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800af9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d011      	beq.n	800afca <f_stat+0xa4>
				if (fno) get_fileinfo(&dj, fno);
 800afa6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800afaa:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00d      	beq.n	800afd0 <f_stat+0xaa>
 800afb4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800afb8:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800afbc:	f107 0214 	add.w	r2, r7, #20
 800afc0:	6819      	ldr	r1, [r3, #0]
 800afc2:	4610      	mov	r0, r2
 800afc4:	f7fd fff4 	bl	8008fb0 <get_fileinfo>
 800afc8:	e002      	b.n	800afd0 <f_stat+0xaa>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 800afca:	2306      	movs	r3, #6
 800afcc:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 800afd0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800afd4:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800afd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800afdc:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 800afe0:	4611      	mov	r1, r2
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fc ff29 	bl	8007e3a <unlock_fs>
 800afe8:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 800afec:	4618      	mov	r0, r3
 800afee:	f507 770e 	add.w	r7, r7, #568	; 0x238
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
	...

0800aff8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aff8:	b480      	push	{r7}
 800affa:	b087      	sub	sp, #28
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	4613      	mov	r3, r2
 800b004:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b006:	2301      	movs	r3, #1
 800b008:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800b00e:	4b1e      	ldr	r3, [pc, #120]	; (800b088 <FATFS_LinkDriverEx+0x90>)
 800b010:	7a5b      	ldrb	r3, [r3, #9]
 800b012:	b2db      	uxtb	r3, r3
 800b014:	2b01      	cmp	r3, #1
 800b016:	d831      	bhi.n	800b07c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b018:	4b1b      	ldr	r3, [pc, #108]	; (800b088 <FATFS_LinkDriverEx+0x90>)
 800b01a:	7a5b      	ldrb	r3, [r3, #9]
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	461a      	mov	r2, r3
 800b020:	4b19      	ldr	r3, [pc, #100]	; (800b088 <FATFS_LinkDriverEx+0x90>)
 800b022:	2100      	movs	r1, #0
 800b024:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800b026:	4b18      	ldr	r3, [pc, #96]	; (800b088 <FATFS_LinkDriverEx+0x90>)
 800b028:	7a5b      	ldrb	r3, [r3, #9]
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	4a16      	ldr	r2, [pc, #88]	; (800b088 <FATFS_LinkDriverEx+0x90>)
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	4413      	add	r3, r2
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800b036:	4b14      	ldr	r3, [pc, #80]	; (800b088 <FATFS_LinkDriverEx+0x90>)
 800b038:	7a5b      	ldrb	r3, [r3, #9]
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	461a      	mov	r2, r3
 800b03e:	4b12      	ldr	r3, [pc, #72]	; (800b088 <FATFS_LinkDriverEx+0x90>)
 800b040:	4413      	add	r3, r2
 800b042:	79fa      	ldrb	r2, [r7, #7]
 800b044:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b046:	4b10      	ldr	r3, [pc, #64]	; (800b088 <FATFS_LinkDriverEx+0x90>)
 800b048:	7a5b      	ldrb	r3, [r3, #9]
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	1c5a      	adds	r2, r3, #1
 800b04e:	b2d1      	uxtb	r1, r2
 800b050:	4a0d      	ldr	r2, [pc, #52]	; (800b088 <FATFS_LinkDriverEx+0x90>)
 800b052:	7251      	strb	r1, [r2, #9]
 800b054:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b056:	7dbb      	ldrb	r3, [r7, #22]
 800b058:	3330      	adds	r3, #48	; 0x30
 800b05a:	b2da      	uxtb	r2, r3
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	3301      	adds	r3, #1
 800b064:	223a      	movs	r2, #58	; 0x3a
 800b066:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	3302      	adds	r3, #2
 800b06c:	222f      	movs	r2, #47	; 0x2f
 800b06e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	3303      	adds	r3, #3
 800b074:	2200      	movs	r2, #0
 800b076:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800b07c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	371c      	adds	r7, #28
 800b082:	46bd      	mov	sp, r7
 800b084:	bc80      	pop	{r7}
 800b086:	4770      	bx	lr
 800b088:	20000ad0 	.word	0x20000ad0

0800b08c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b096:	2200      	movs	r2, #0
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7ff ffac 	bl	800aff8 <FATFS_LinkDriverEx>
 800b0a0:	4603      	mov	r3, r0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b086      	sub	sp, #24
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	6039      	str	r1, [r7, #0]
 800b0b4:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	60fb      	str	r3, [r7, #12]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 800b0be:	f107 030c 	add.w	r3, r7, #12
 800b0c2:	2101      	movs	r1, #1
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f000 f8cb 	bl	800b260 <osSemaphoreCreate>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	bf14      	ite	ne
 800b0d8:	2301      	movne	r3, #1
 800b0da:	2300      	moveq	r3, #0
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	617b      	str	r3, [r7, #20]
  
  return ret;
 800b0e0:	697b      	ldr	r3, [r7, #20]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3718      	adds	r7, #24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b082      	sub	sp, #8
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f96a 	bl	800b3cc <osSemaphoreDelete>
  return 1;
 800b0f8:	2301      	movs	r3, #1
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3708      	adds	r7, #8
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800b10e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f8d6 	bl	800b2c4 <osSemaphoreWait>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <ff_req_grant+0x20>
  {
    ret = 1;
 800b11e:	2301      	movs	r3, #1
 800b120:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800b122:	68fb      	ldr	r3, [r7, #12]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 f913 	bl	800b360 <osSemaphoreRelease>
}
 800b13a:	bf00      	nop
 800b13c:	3708      	adds	r7, #8
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b142:	b480      	push	{r7}
 800b144:	b085      	sub	sp, #20
 800b146:	af00      	add	r7, sp, #0
 800b148:	4603      	mov	r3, r0
 800b14a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b14c:	2300      	movs	r3, #0
 800b14e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b154:	2b84      	cmp	r3, #132	; 0x84
 800b156:	d005      	beq.n	800b164 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b158:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	4413      	add	r3, r2
 800b160:	3303      	adds	r3, #3
 800b162:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b164:	68fb      	ldr	r3, [r7, #12]
}
 800b166:	4618      	mov	r0, r3
 800b168:	3714      	adds	r7, #20
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bc80      	pop	{r7}
 800b16e:	4770      	bx	lr

0800b170 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b176:	f3ef 8305 	mrs	r3, IPSR
 800b17a:	607b      	str	r3, [r7, #4]
  return(result);
 800b17c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b17e:	2b00      	cmp	r3, #0
 800b180:	bf14      	ite	ne
 800b182:	2301      	movne	r3, #1
 800b184:	2300      	moveq	r3, #0
 800b186:	b2db      	uxtb	r3, r3
}
 800b188:	4618      	mov	r0, r3
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bc80      	pop	{r7}
 800b190:	4770      	bx	lr

0800b192 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b196:	f001 f9f7 	bl	800c588 <vTaskStartScheduler>
  
  return osOK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1a2:	b089      	sub	sp, #36	; 0x24
 800b1a4:	af04      	add	r7, sp, #16
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	695b      	ldr	r3, [r3, #20]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d020      	beq.n	800b1f4 <osThreadCreate+0x54>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d01c      	beq.n	800b1f4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	685c      	ldr	r4, [r3, #4]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681d      	ldr	r5, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	691e      	ldr	r6, [r3, #16]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7ff ffb8 	bl	800b142 <makeFreeRtosPriority>
 800b1d2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	695b      	ldr	r3, [r3, #20]
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b1dc:	9202      	str	r2, [sp, #8]
 800b1de:	9301      	str	r3, [sp, #4]
 800b1e0:	9100      	str	r1, [sp, #0]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	4632      	mov	r2, r6
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f000 ff79 	bl	800c0e0 <xTaskCreateStatic>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	60fb      	str	r3, [r7, #12]
 800b1f2:	e01c      	b.n	800b22e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	685c      	ldr	r4, [r3, #4]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b200:	b29e      	uxth	r6, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b208:	4618      	mov	r0, r3
 800b20a:	f7ff ff9a 	bl	800b142 <makeFreeRtosPriority>
 800b20e:	4602      	mov	r2, r0
 800b210:	f107 030c 	add.w	r3, r7, #12
 800b214:	9301      	str	r3, [sp, #4]
 800b216:	9200      	str	r2, [sp, #0]
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	4632      	mov	r2, r6
 800b21c:	4629      	mov	r1, r5
 800b21e:	4620      	mov	r0, r4
 800b220:	f000 ffba 	bl	800c198 <xTaskCreate>
 800b224:	4603      	mov	r3, r0
 800b226:	2b01      	cmp	r3, #1
 800b228:	d001      	beq.n	800b22e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b22a:	2300      	movs	r3, #0
 800b22c:	e000      	b.n	800b230 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b22e:	68fb      	ldr	r3, [r7, #12]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3714      	adds	r7, #20
 800b234:	46bd      	mov	sp, r7
 800b236:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b238 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d001      	beq.n	800b24e <osDelay+0x16>
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	e000      	b.n	800b250 <osDelay+0x18>
 800b24e:	2301      	movs	r3, #1
 800b250:	4618      	mov	r0, r3
 800b252:	f001 f965 	bl	800c520 <vTaskDelay>
  
  return osOK;
 800b256:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af02      	add	r7, sp, #8
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00f      	beq.n	800b292 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	2b01      	cmp	r3, #1
 800b276:	d10a      	bne.n	800b28e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	2203      	movs	r2, #3
 800b27e:	9200      	str	r2, [sp, #0]
 800b280:	2200      	movs	r2, #0
 800b282:	2100      	movs	r1, #0
 800b284:	2001      	movs	r0, #1
 800b286:	f000 f9cb 	bl	800b620 <xQueueGenericCreateStatic>
 800b28a:	4603      	mov	r3, r0
 800b28c:	e016      	b.n	800b2bc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b28e:	2300      	movs	r3, #0
 800b290:	e014      	b.n	800b2bc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d110      	bne.n	800b2ba <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b298:	2203      	movs	r2, #3
 800b29a:	2100      	movs	r1, #0
 800b29c:	2001      	movs	r0, #1
 800b29e:	f000 fa36 	bl	800b70e <xQueueGenericCreate>
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d005      	beq.n	800b2b6 <osSemaphoreCreate+0x56>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f000 fa89 	bl	800b7c8 <xQueueGenericSend>
      return sema;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	e000      	b.n	800b2bc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b2ba:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d101      	bne.n	800b2dc <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b2d8:	2380      	movs	r3, #128	; 0x80
 800b2da:	e03a      	b.n	800b352 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e6:	d103      	bne.n	800b2f0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ec:	60fb      	str	r3, [r7, #12]
 800b2ee:	e009      	b.n	800b304 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d006      	beq.n	800b304 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d101      	bne.n	800b304 <osSemaphoreWait+0x40>
      ticks = 1;
 800b300:	2301      	movs	r3, #1
 800b302:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b304:	f7ff ff34 	bl	800b170 <inHandlerMode>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d017      	beq.n	800b33e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b30e:	f107 0308 	add.w	r3, r7, #8
 800b312:	461a      	mov	r2, r3
 800b314:	2100      	movs	r1, #0
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fcee 	bl	800bcf8 <xQueueReceiveFromISR>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d001      	beq.n	800b326 <osSemaphoreWait+0x62>
      return osErrorOS;
 800b322:	23ff      	movs	r3, #255	; 0xff
 800b324:	e015      	b.n	800b352 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d011      	beq.n	800b350 <osSemaphoreWait+0x8c>
 800b32c:	4b0b      	ldr	r3, [pc, #44]	; (800b35c <osSemaphoreWait+0x98>)
 800b32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b332:	601a      	str	r2, [r3, #0]
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	f3bf 8f6f 	isb	sy
 800b33c:	e008      	b.n	800b350 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b33e:	68f9      	ldr	r1, [r7, #12]
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fbcd 	bl	800bae0 <xQueueSemaphoreTake>
 800b346:	4603      	mov	r3, r0
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d001      	beq.n	800b350 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b34c:	23ff      	movs	r3, #255	; 0xff
 800b34e:	e000      	b.n	800b352 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	e000ed04 	.word	0xe000ed04

0800b360 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b368:	2300      	movs	r3, #0
 800b36a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b36c:	2300      	movs	r3, #0
 800b36e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b370:	f7ff fefe 	bl	800b170 <inHandlerMode>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d016      	beq.n	800b3a8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b37a:	f107 0308 	add.w	r3, r7, #8
 800b37e:	4619      	mov	r1, r3
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 fb1f 	bl	800b9c4 <xQueueGiveFromISR>
 800b386:	4603      	mov	r3, r0
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d001      	beq.n	800b390 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b38c:	23ff      	movs	r3, #255	; 0xff
 800b38e:	e017      	b.n	800b3c0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d013      	beq.n	800b3be <osSemaphoreRelease+0x5e>
 800b396:	4b0c      	ldr	r3, [pc, #48]	; (800b3c8 <osSemaphoreRelease+0x68>)
 800b398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	e00a      	b.n	800b3be <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fa0a 	bl	800b7c8 <xQueueGenericSend>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d001      	beq.n	800b3be <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b3ba:	23ff      	movs	r3, #255	; 0xff
 800b3bc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b3be:	68fb      	ldr	r3, [r7, #12]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	e000ed04 	.word	0xe000ed04

0800b3cc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b3d4:	f7ff fecc 	bl	800b170 <inHandlerMode>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b3de:	2382      	movs	r3, #130	; 0x82
 800b3e0:	e003      	b.n	800b3ea <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fd08 	bl	800bdf8 <vQueueDelete>

  return osOK; 
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3708      	adds	r7, #8
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b3f2:	b480      	push	{r7}
 800b3f4:	b083      	sub	sp, #12
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f103 0208 	add.w	r2, r3, #8
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f04f 32ff 	mov.w	r2, #4294967295
 800b40a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f103 0208 	add.w	r2, r3, #8
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f103 0208 	add.w	r2, r3, #8
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b426:	bf00      	nop
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bc80      	pop	{r7}
 800b42e:	4770      	bx	lr

0800b430 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b43e:	bf00      	nop
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	bc80      	pop	{r7}
 800b446:	4770      	bx	lr

0800b448 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	689a      	ldr	r2, [r3, #8]
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	1c5a      	adds	r2, r3, #1
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	601a      	str	r2, [r3, #0]
}
 800b484:	bf00      	nop
 800b486:	3714      	adds	r7, #20
 800b488:	46bd      	mov	sp, r7
 800b48a:	bc80      	pop	{r7}
 800b48c:	4770      	bx	lr

0800b48e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b48e:	b480      	push	{r7}
 800b490:	b085      	sub	sp, #20
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4a4:	d103      	bne.n	800b4ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	e00c      	b.n	800b4c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	3308      	adds	r3, #8
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	e002      	b.n	800b4bc <vListInsert+0x2e>
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	60fb      	str	r3, [r7, #12]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d2f6      	bcs.n	800b4b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	683a      	ldr	r2, [r7, #0]
 800b4d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	68fa      	ldr	r2, [r7, #12]
 800b4dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	683a      	ldr	r2, [r7, #0]
 800b4e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	1c5a      	adds	r2, r3, #1
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	601a      	str	r2, [r3, #0]
}
 800b4f4:	bf00      	nop
 800b4f6:	3714      	adds	r7, #20
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bc80      	pop	{r7}
 800b4fc:	4770      	bx	lr

0800b4fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b4fe:	b480      	push	{r7}
 800b500:	b085      	sub	sp, #20
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	6892      	ldr	r2, [r2, #8]
 800b514:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	6852      	ldr	r2, [r2, #4]
 800b51e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	429a      	cmp	r2, r3
 800b528:	d103      	bne.n	800b532 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	689a      	ldr	r2, [r3, #8]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	1e5a      	subs	r2, r3, #1
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3714      	adds	r7, #20
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bc80      	pop	{r7}
 800b54e:	4770      	bx	lr

0800b550 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10a      	bne.n	800b57a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b576:	bf00      	nop
 800b578:	e7fe      	b.n	800b578 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b57a:	f001 ff67 	bl	800d44c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b586:	68f9      	ldr	r1, [r7, #12]
 800b588:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b58a:	fb01 f303 	mul.w	r3, r1, r3
 800b58e:	441a      	add	r2, r3
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2200      	movs	r2, #0
 800b598:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	68f9      	ldr	r1, [r7, #12]
 800b5ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b5b0:	fb01 f303 	mul.w	r3, r1, r3
 800b5b4:	441a      	add	r2, r3
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	22ff      	movs	r2, #255	; 0xff
 800b5be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	22ff      	movs	r2, #255	; 0xff
 800b5c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d114      	bne.n	800b5fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d01a      	beq.n	800b60e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	3310      	adds	r3, #16
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f001 fa39 	bl	800ca54 <xTaskRemoveFromEventList>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d012      	beq.n	800b60e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b5e8:	4b0c      	ldr	r3, [pc, #48]	; (800b61c <xQueueGenericReset+0xcc>)
 800b5ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5ee:	601a      	str	r2, [r3, #0]
 800b5f0:	f3bf 8f4f 	dsb	sy
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	e009      	b.n	800b60e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	3310      	adds	r3, #16
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7ff fef7 	bl	800b3f2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	3324      	adds	r3, #36	; 0x24
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff fef2 	bl	800b3f2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b60e:	f001 ff4d 	bl	800d4ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b612:	2301      	movs	r3, #1
}
 800b614:	4618      	mov	r0, r3
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	e000ed04 	.word	0xe000ed04

0800b620 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b620:	b580      	push	{r7, lr}
 800b622:	b08e      	sub	sp, #56	; 0x38
 800b624:	af02      	add	r7, sp, #8
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
 800b62c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d10a      	bne.n	800b64a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b638:	f383 8811 	msr	BASEPRI, r3
 800b63c:	f3bf 8f6f 	isb	sy
 800b640:	f3bf 8f4f 	dsb	sy
 800b644:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b646:	bf00      	nop
 800b648:	e7fe      	b.n	800b648 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d10a      	bne.n	800b666 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b654:	f383 8811 	msr	BASEPRI, r3
 800b658:	f3bf 8f6f 	isb	sy
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b662:	bf00      	nop
 800b664:	e7fe      	b.n	800b664 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d002      	beq.n	800b672 <xQueueGenericCreateStatic+0x52>
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d001      	beq.n	800b676 <xQueueGenericCreateStatic+0x56>
 800b672:	2301      	movs	r3, #1
 800b674:	e000      	b.n	800b678 <xQueueGenericCreateStatic+0x58>
 800b676:	2300      	movs	r3, #0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10a      	bne.n	800b692 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b680:	f383 8811 	msr	BASEPRI, r3
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	623b      	str	r3, [r7, #32]
}
 800b68e:	bf00      	nop
 800b690:	e7fe      	b.n	800b690 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d102      	bne.n	800b69e <xQueueGenericCreateStatic+0x7e>
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d101      	bne.n	800b6a2 <xQueueGenericCreateStatic+0x82>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e000      	b.n	800b6a4 <xQueueGenericCreateStatic+0x84>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d10a      	bne.n	800b6be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ac:	f383 8811 	msr	BASEPRI, r3
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	61fb      	str	r3, [r7, #28]
}
 800b6ba:	bf00      	nop
 800b6bc:	e7fe      	b.n	800b6bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b6be:	2348      	movs	r3, #72	; 0x48
 800b6c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	2b48      	cmp	r3, #72	; 0x48
 800b6c6:	d00a      	beq.n	800b6de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6cc:	f383 8811 	msr	BASEPRI, r3
 800b6d0:	f3bf 8f6f 	isb	sy
 800b6d4:	f3bf 8f4f 	dsb	sy
 800b6d8:	61bb      	str	r3, [r7, #24]
}
 800b6da:	bf00      	nop
 800b6dc:	e7fe      	b.n	800b6dc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d00d      	beq.n	800b704 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b6f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	68b9      	ldr	r1, [r7, #8]
 800b6fe:	68f8      	ldr	r0, [r7, #12]
 800b700:	f000 f843 	bl	800b78a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b706:	4618      	mov	r0, r3
 800b708:	3730      	adds	r7, #48	; 0x30
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b08a      	sub	sp, #40	; 0x28
 800b712:	af02      	add	r7, sp, #8
 800b714:	60f8      	str	r0, [r7, #12]
 800b716:	60b9      	str	r1, [r7, #8]
 800b718:	4613      	mov	r3, r2
 800b71a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d10a      	bne.n	800b738 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b726:	f383 8811 	msr	BASEPRI, r3
 800b72a:	f3bf 8f6f 	isb	sy
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	613b      	str	r3, [r7, #16]
}
 800b734:	bf00      	nop
 800b736:	e7fe      	b.n	800b736 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d102      	bne.n	800b744 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b73e:	2300      	movs	r3, #0
 800b740:	61fb      	str	r3, [r7, #28]
 800b742:	e004      	b.n	800b74e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	fb02 f303 	mul.w	r3, r2, r3
 800b74c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	3348      	adds	r3, #72	; 0x48
 800b752:	4618      	mov	r0, r3
 800b754:	f001 ff7a 	bl	800d64c <pvPortMalloc>
 800b758:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00f      	beq.n	800b780 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	3348      	adds	r3, #72	; 0x48
 800b764:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	2200      	movs	r2, #0
 800b76a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b76e:	79fa      	ldrb	r2, [r7, #7]
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	4613      	mov	r3, r2
 800b776:	697a      	ldr	r2, [r7, #20]
 800b778:	68b9      	ldr	r1, [r7, #8]
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f000 f805 	bl	800b78a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b780:	69bb      	ldr	r3, [r7, #24]
	}
 800b782:	4618      	mov	r0, r3
 800b784:	3720      	adds	r7, #32
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b084      	sub	sp, #16
 800b78e:	af00      	add	r7, sp, #0
 800b790:	60f8      	str	r0, [r7, #12]
 800b792:	60b9      	str	r1, [r7, #8]
 800b794:	607a      	str	r2, [r7, #4]
 800b796:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d103      	bne.n	800b7a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	601a      	str	r2, [r3, #0]
 800b7a4:	e002      	b.n	800b7ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	68ba      	ldr	r2, [r7, #8]
 800b7b6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b7b8:	2101      	movs	r1, #1
 800b7ba:	69b8      	ldr	r0, [r7, #24]
 800b7bc:	f7ff fec8 	bl	800b550 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b7c0:	bf00      	nop
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b08e      	sub	sp, #56	; 0x38
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
 800b7d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10a      	bne.n	800b7fa <xQueueGenericSend+0x32>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7f6:	bf00      	nop
 800b7f8:	e7fe      	b.n	800b7f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d103      	bne.n	800b808 <xQueueGenericSend+0x40>
 800b800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b804:	2b00      	cmp	r3, #0
 800b806:	d101      	bne.n	800b80c <xQueueGenericSend+0x44>
 800b808:	2301      	movs	r3, #1
 800b80a:	e000      	b.n	800b80e <xQueueGenericSend+0x46>
 800b80c:	2300      	movs	r3, #0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10a      	bne.n	800b828 <xQueueGenericSend+0x60>
	__asm volatile
 800b812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b816:	f383 8811 	msr	BASEPRI, r3
 800b81a:	f3bf 8f6f 	isb	sy
 800b81e:	f3bf 8f4f 	dsb	sy
 800b822:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b824:	bf00      	nop
 800b826:	e7fe      	b.n	800b826 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	d103      	bne.n	800b836 <xQueueGenericSend+0x6e>
 800b82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b832:	2b01      	cmp	r3, #1
 800b834:	d101      	bne.n	800b83a <xQueueGenericSend+0x72>
 800b836:	2301      	movs	r3, #1
 800b838:	e000      	b.n	800b83c <xQueueGenericSend+0x74>
 800b83a:	2300      	movs	r3, #0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10a      	bne.n	800b856 <xQueueGenericSend+0x8e>
	__asm volatile
 800b840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	623b      	str	r3, [r7, #32]
}
 800b852:	bf00      	nop
 800b854:	e7fe      	b.n	800b854 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b856:	f001 fac1 	bl	800cddc <xTaskGetSchedulerState>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d102      	bne.n	800b866 <xQueueGenericSend+0x9e>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <xQueueGenericSend+0xa2>
 800b866:	2301      	movs	r3, #1
 800b868:	e000      	b.n	800b86c <xQueueGenericSend+0xa4>
 800b86a:	2300      	movs	r3, #0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d10a      	bne.n	800b886 <xQueueGenericSend+0xbe>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	61fb      	str	r3, [r7, #28]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b886:	f001 fde1 	bl	800d44c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b892:	429a      	cmp	r2, r3
 800b894:	d302      	bcc.n	800b89c <xQueueGenericSend+0xd4>
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d129      	bne.n	800b8f0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b89c:	683a      	ldr	r2, [r7, #0]
 800b89e:	68b9      	ldr	r1, [r7, #8]
 800b8a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8a2:	f000 fae3 	bl	800be6c <prvCopyDataToQueue>
 800b8a6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d010      	beq.n	800b8d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b2:	3324      	adds	r3, #36	; 0x24
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f001 f8cd 	bl	800ca54 <xTaskRemoveFromEventList>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d013      	beq.n	800b8e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b8c0:	4b3f      	ldr	r3, [pc, #252]	; (800b9c0 <xQueueGenericSend+0x1f8>)
 800b8c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8c6:	601a      	str	r2, [r3, #0]
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	e00a      	b.n	800b8e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d007      	beq.n	800b8e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b8d8:	4b39      	ldr	r3, [pc, #228]	; (800b9c0 <xQueueGenericSend+0x1f8>)
 800b8da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8de:	601a      	str	r2, [r3, #0]
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b8e8:	f001 fde0 	bl	800d4ac <vPortExitCritical>
				return pdPASS;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e063      	b.n	800b9b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d103      	bne.n	800b8fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b8f6:	f001 fdd9 	bl	800d4ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	e05c      	b.n	800b9b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b900:	2b00      	cmp	r3, #0
 800b902:	d106      	bne.n	800b912 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b904:	f107 0314 	add.w	r3, r7, #20
 800b908:	4618      	mov	r0, r3
 800b90a:	f001 f905 	bl	800cb18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b90e:	2301      	movs	r3, #1
 800b910:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b912:	f001 fdcb 	bl	800d4ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b916:	f000 fea1 	bl	800c65c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b91a:	f001 fd97 	bl	800d44c <vPortEnterCritical>
 800b91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b924:	b25b      	sxtb	r3, r3
 800b926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b92a:	d103      	bne.n	800b934 <xQueueGenericSend+0x16c>
 800b92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b936:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b93a:	b25b      	sxtb	r3, r3
 800b93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b940:	d103      	bne.n	800b94a <xQueueGenericSend+0x182>
 800b942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b944:	2200      	movs	r2, #0
 800b946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b94a:	f001 fdaf 	bl	800d4ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b94e:	1d3a      	adds	r2, r7, #4
 800b950:	f107 0314 	add.w	r3, r7, #20
 800b954:	4611      	mov	r1, r2
 800b956:	4618      	mov	r0, r3
 800b958:	f001 f8f4 	bl	800cb44 <xTaskCheckForTimeOut>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d124      	bne.n	800b9ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b964:	f000 fb7a 	bl	800c05c <prvIsQueueFull>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d018      	beq.n	800b9a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b970:	3310      	adds	r3, #16
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	4611      	mov	r1, r2
 800b976:	4618      	mov	r0, r3
 800b978:	f001 f848 	bl	800ca0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b97c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b97e:	f000 fb05 	bl	800bf8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b982:	f000 fe79 	bl	800c678 <xTaskResumeAll>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f47f af7c 	bne.w	800b886 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b98e:	4b0c      	ldr	r3, [pc, #48]	; (800b9c0 <xQueueGenericSend+0x1f8>)
 800b990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b994:	601a      	str	r2, [r3, #0]
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	f3bf 8f6f 	isb	sy
 800b99e:	e772      	b.n	800b886 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b9a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9a2:	f000 faf3 	bl	800bf8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b9a6:	f000 fe67 	bl	800c678 <xTaskResumeAll>
 800b9aa:	e76c      	b.n	800b886 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b9ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9ae:	f000 faed 	bl	800bf8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9b2:	f000 fe61 	bl	800c678 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b9b6:	2300      	movs	r3, #0
		}
	}
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3738      	adds	r7, #56	; 0x38
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	e000ed04 	.word	0xe000ed04

0800b9c4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b08e      	sub	sp, #56	; 0x38
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d10a      	bne.n	800b9ee <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9dc:	f383 8811 	msr	BASEPRI, r3
 800b9e0:	f3bf 8f6f 	isb	sy
 800b9e4:	f3bf 8f4f 	dsb	sy
 800b9e8:	623b      	str	r3, [r7, #32]
}
 800b9ea:	bf00      	nop
 800b9ec:	e7fe      	b.n	800b9ec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00a      	beq.n	800ba0c <xQueueGiveFromISR+0x48>
	__asm volatile
 800b9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	61fb      	str	r3, [r7, #28]
}
 800ba08:	bf00      	nop
 800ba0a:	e7fe      	b.n	800ba0a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d103      	bne.n	800ba1c <xQueueGiveFromISR+0x58>
 800ba14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d101      	bne.n	800ba20 <xQueueGiveFromISR+0x5c>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e000      	b.n	800ba22 <xQueueGiveFromISR+0x5e>
 800ba20:	2300      	movs	r3, #0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10a      	bne.n	800ba3c <xQueueGiveFromISR+0x78>
	__asm volatile
 800ba26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	61bb      	str	r3, [r7, #24]
}
 800ba38:	bf00      	nop
 800ba3a:	e7fe      	b.n	800ba3a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba3c:	f001 fdc8 	bl	800d5d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ba40:	f3ef 8211 	mrs	r2, BASEPRI
 800ba44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba48:	f383 8811 	msr	BASEPRI, r3
 800ba4c:	f3bf 8f6f 	isb	sy
 800ba50:	f3bf 8f4f 	dsb	sy
 800ba54:	617a      	str	r2, [r7, #20]
 800ba56:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ba58:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba60:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ba62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d22b      	bcs.n	800bac4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba78:	1c5a      	adds	r2, r3, #1
 800ba7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba86:	d112      	bne.n	800baae <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d016      	beq.n	800babe <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	3324      	adds	r3, #36	; 0x24
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 ffdd 	bl	800ca54 <xTaskRemoveFromEventList>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00e      	beq.n	800babe <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00b      	beq.n	800babe <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	2201      	movs	r2, #1
 800baaa:	601a      	str	r2, [r3, #0]
 800baac:	e007      	b.n	800babe <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800baae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bab2:	3301      	adds	r3, #1
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	b25a      	sxtb	r2, r3
 800bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800babe:	2301      	movs	r3, #1
 800bac0:	637b      	str	r3, [r7, #52]	; 0x34
 800bac2:	e001      	b.n	800bac8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bac4:	2300      	movs	r3, #0
 800bac6:	637b      	str	r3, [r7, #52]	; 0x34
 800bac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baca:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bad2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3738      	adds	r7, #56	; 0x38
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
	...

0800bae0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b08e      	sub	sp, #56	; 0x38
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800baea:	2300      	movs	r3, #0
 800baec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800baf2:	2300      	movs	r3, #0
 800baf4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800baf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10a      	bne.n	800bb12 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb00:	f383 8811 	msr	BASEPRI, r3
 800bb04:	f3bf 8f6f 	isb	sy
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	623b      	str	r3, [r7, #32]
}
 800bb0e:	bf00      	nop
 800bb10:	e7fe      	b.n	800bb10 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00a      	beq.n	800bb30 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1e:	f383 8811 	msr	BASEPRI, r3
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	f3bf 8f4f 	dsb	sy
 800bb2a:	61fb      	str	r3, [r7, #28]
}
 800bb2c:	bf00      	nop
 800bb2e:	e7fe      	b.n	800bb2e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb30:	f001 f954 	bl	800cddc <xTaskGetSchedulerState>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d102      	bne.n	800bb40 <xQueueSemaphoreTake+0x60>
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d101      	bne.n	800bb44 <xQueueSemaphoreTake+0x64>
 800bb40:	2301      	movs	r3, #1
 800bb42:	e000      	b.n	800bb46 <xQueueSemaphoreTake+0x66>
 800bb44:	2300      	movs	r3, #0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10a      	bne.n	800bb60 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4e:	f383 8811 	msr	BASEPRI, r3
 800bb52:	f3bf 8f6f 	isb	sy
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	61bb      	str	r3, [r7, #24]
}
 800bb5c:	bf00      	nop
 800bb5e:	e7fe      	b.n	800bb5e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb60:	f001 fc74 	bl	800d44c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb68:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d024      	beq.n	800bbba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb72:	1e5a      	subs	r2, r3, #1
 800bb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb76:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d104      	bne.n	800bb8a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800bb80:	f001 faf6 	bl	800d170 <pvTaskIncrementMutexHeldCount>
 800bb84:	4602      	mov	r2, r0
 800bb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb88:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00f      	beq.n	800bbb2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb94:	3310      	adds	r3, #16
 800bb96:	4618      	mov	r0, r3
 800bb98:	f000 ff5c 	bl	800ca54 <xTaskRemoveFromEventList>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d007      	beq.n	800bbb2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bba2:	4b54      	ldr	r3, [pc, #336]	; (800bcf4 <xQueueSemaphoreTake+0x214>)
 800bba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bba8:	601a      	str	r2, [r3, #0]
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bbb2:	f001 fc7b 	bl	800d4ac <vPortExitCritical>
				return pdPASS;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e097      	b.n	800bcea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d111      	bne.n	800bbe4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d00a      	beq.n	800bbdc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	617b      	str	r3, [r7, #20]
}
 800bbd8:	bf00      	nop
 800bbda:	e7fe      	b.n	800bbda <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bbdc:	f001 fc66 	bl	800d4ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	e082      	b.n	800bcea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d106      	bne.n	800bbf8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbea:	f107 030c 	add.w	r3, r7, #12
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f000 ff92 	bl	800cb18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbf8:	f001 fc58 	bl	800d4ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbfc:	f000 fd2e 	bl	800c65c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc00:	f001 fc24 	bl	800d44c <vPortEnterCritical>
 800bc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc0a:	b25b      	sxtb	r3, r3
 800bc0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc10:	d103      	bne.n	800bc1a <xQueueSemaphoreTake+0x13a>
 800bc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc14:	2200      	movs	r2, #0
 800bc16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc20:	b25b      	sxtb	r3, r3
 800bc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc26:	d103      	bne.n	800bc30 <xQueueSemaphoreTake+0x150>
 800bc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc30:	f001 fc3c 	bl	800d4ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc34:	463a      	mov	r2, r7
 800bc36:	f107 030c 	add.w	r3, r7, #12
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f000 ff81 	bl	800cb44 <xTaskCheckForTimeOut>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d132      	bne.n	800bcae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc4a:	f000 f9f1 	bl	800c030 <prvIsQueueEmpty>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d026      	beq.n	800bca2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d109      	bne.n	800bc70 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bc5c:	f001 fbf6 	bl	800d44c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800bc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	4618      	mov	r0, r3
 800bc66:	f001 f8d7 	bl	800ce18 <xTaskPriorityInherit>
 800bc6a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bc6c:	f001 fc1e 	bl	800d4ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc72:	3324      	adds	r3, #36	; 0x24
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	4611      	mov	r1, r2
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f000 fec7 	bl	800ca0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc80:	f000 f984 	bl	800bf8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc84:	f000 fcf8 	bl	800c678 <xTaskResumeAll>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	f47f af68 	bne.w	800bb60 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bc90:	4b18      	ldr	r3, [pc, #96]	; (800bcf4 <xQueueSemaphoreTake+0x214>)
 800bc92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc96:	601a      	str	r2, [r3, #0]
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	f3bf 8f6f 	isb	sy
 800bca0:	e75e      	b.n	800bb60 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bca2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bca4:	f000 f972 	bl	800bf8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bca8:	f000 fce6 	bl	800c678 <xTaskResumeAll>
 800bcac:	e758      	b.n	800bb60 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bcae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcb0:	f000 f96c 	bl	800bf8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bcb4:	f000 fce0 	bl	800c678 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bcb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcba:	f000 f9b9 	bl	800c030 <prvIsQueueEmpty>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	f43f af4d 	beq.w	800bb60 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00d      	beq.n	800bce8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bccc:	f001 fbbe 	bl	800d44c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bcd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcd2:	f000 f8b4 	bl	800be3e <prvGetDisinheritPriorityAfterTimeout>
 800bcd6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800bcd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcde:	4618      	mov	r0, r3
 800bce0:	f001 f9a6 	bl	800d030 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bce4:	f001 fbe2 	bl	800d4ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bce8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3738      	adds	r7, #56	; 0x38
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	e000ed04 	.word	0xe000ed04

0800bcf8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b08e      	sub	sp, #56	; 0x38
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10a      	bne.n	800bd24 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	623b      	str	r3, [r7, #32]
}
 800bd20:	bf00      	nop
 800bd22:	e7fe      	b.n	800bd22 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d103      	bne.n	800bd32 <xQueueReceiveFromISR+0x3a>
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d101      	bne.n	800bd36 <xQueueReceiveFromISR+0x3e>
 800bd32:	2301      	movs	r3, #1
 800bd34:	e000      	b.n	800bd38 <xQueueReceiveFromISR+0x40>
 800bd36:	2300      	movs	r3, #0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d10a      	bne.n	800bd52 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd40:	f383 8811 	msr	BASEPRI, r3
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	61fb      	str	r3, [r7, #28]
}
 800bd4e:	bf00      	nop
 800bd50:	e7fe      	b.n	800bd50 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd52:	f001 fc3d 	bl	800d5d0 <vPortValidateInterruptPriority>
	__asm volatile
 800bd56:	f3ef 8211 	mrs	r2, BASEPRI
 800bd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	61ba      	str	r2, [r7, #24]
 800bd6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bd6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d02f      	beq.n	800bdde <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd88:	68b9      	ldr	r1, [r7, #8]
 800bd8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd8c:	f000 f8d8 	bl	800bf40 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd92:	1e5a      	subs	r2, r3, #1
 800bd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd96:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bd98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda0:	d112      	bne.n	800bdc8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d016      	beq.n	800bdd8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdac:	3310      	adds	r3, #16
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f000 fe50 	bl	800ca54 <xTaskRemoveFromEventList>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00e      	beq.n	800bdd8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00b      	beq.n	800bdd8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	601a      	str	r2, [r3, #0]
 800bdc6:	e007      	b.n	800bdd8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bdc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdcc:	3301      	adds	r3, #1
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	b25a      	sxtb	r2, r3
 800bdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	637b      	str	r3, [r7, #52]	; 0x34
 800bddc:	e001      	b.n	800bde2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bdde:	2300      	movs	r3, #0
 800bde0:	637b      	str	r3, [r7, #52]	; 0x34
 800bde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f383 8811 	msr	BASEPRI, r3
}
 800bdec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3738      	adds	r7, #56	; 0x38
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10a      	bne.n	800be20 <vQueueDelete+0x28>
	__asm volatile
 800be0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	60bb      	str	r3, [r7, #8]
}
 800be1c:	bf00      	nop
 800be1e:	e7fe      	b.n	800be1e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f000 f933 	bl	800c08c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d102      	bne.n	800be36 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f001 fccf 	bl	800d7d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800be36:	bf00      	nop
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800be3e:	b480      	push	{r7}
 800be40:	b085      	sub	sp, #20
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d006      	beq.n	800be5c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f1c3 0307 	rsb	r3, r3, #7
 800be58:	60fb      	str	r3, [r7, #12]
 800be5a:	e001      	b.n	800be60 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800be5c:	2300      	movs	r3, #0
 800be5e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800be60:	68fb      	ldr	r3, [r7, #12]
	}
 800be62:	4618      	mov	r0, r3
 800be64:	3714      	adds	r7, #20
 800be66:	46bd      	mov	sp, r7
 800be68:	bc80      	pop	{r7}
 800be6a:	4770      	bx	lr

0800be6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b086      	sub	sp, #24
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800be78:	2300      	movs	r3, #0
 800be7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10d      	bne.n	800bea6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d14d      	bne.n	800bf2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	4618      	mov	r0, r3
 800be98:	f001 f844 	bl	800cf24 <xTaskPriorityDisinherit>
 800be9c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2200      	movs	r2, #0
 800bea2:	605a      	str	r2, [r3, #4]
 800bea4:	e043      	b.n	800bf2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d119      	bne.n	800bee0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6898      	ldr	r0, [r3, #8]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb4:	461a      	mov	r2, r3
 800beb6:	68b9      	ldr	r1, [r7, #8]
 800beb8:	f001 fdd0 	bl	800da5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	689a      	ldr	r2, [r3, #8]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec4:	441a      	add	r2, r3
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	689a      	ldr	r2, [r3, #8]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d32b      	bcc.n	800bf2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	609a      	str	r2, [r3, #8]
 800bede:	e026      	b.n	800bf2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	68d8      	ldr	r0, [r3, #12]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee8:	461a      	mov	r2, r3
 800beea:	68b9      	ldr	r1, [r7, #8]
 800beec:	f001 fdb6 	bl	800da5c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	68da      	ldr	r2, [r3, #12]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef8:	425b      	negs	r3, r3
 800befa:	441a      	add	r2, r3
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	68da      	ldr	r2, [r3, #12]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d207      	bcs.n	800bf1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	685a      	ldr	r2, [r3, #4]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf14:	425b      	negs	r3, r3
 800bf16:	441a      	add	r2, r3
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d105      	bne.n	800bf2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d002      	beq.n	800bf2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	3b01      	subs	r3, #1
 800bf2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	1c5a      	adds	r2, r3, #1
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bf36:	697b      	ldr	r3, [r7, #20]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3718      	adds	r7, #24
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d018      	beq.n	800bf84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	68da      	ldr	r2, [r3, #12]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5a:	441a      	add	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	68da      	ldr	r2, [r3, #12]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d303      	bcc.n	800bf74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	68d9      	ldr	r1, [r3, #12]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	6838      	ldr	r0, [r7, #0]
 800bf80:	f001 fd6c 	bl	800da5c <memcpy>
	}
}
 800bf84:	bf00      	nop
 800bf86:	3708      	adds	r7, #8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bf94:	f001 fa5a 	bl	800d44c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bfa0:	e011      	b.n	800bfc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d012      	beq.n	800bfd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	3324      	adds	r3, #36	; 0x24
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f000 fd50 	bl	800ca54 <xTaskRemoveFromEventList>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d001      	beq.n	800bfbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bfba:	f000 fe25 	bl	800cc08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bfbe:	7bfb      	ldrb	r3, [r7, #15]
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bfc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	dce9      	bgt.n	800bfa2 <prvUnlockQueue+0x16>
 800bfce:	e000      	b.n	800bfd2 <prvUnlockQueue+0x46>
					break;
 800bfd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	22ff      	movs	r2, #255	; 0xff
 800bfd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bfda:	f001 fa67 	bl	800d4ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bfde:	f001 fa35 	bl	800d44c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfe8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bfea:	e011      	b.n	800c010 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d012      	beq.n	800c01a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	3310      	adds	r3, #16
 800bff8:	4618      	mov	r0, r3
 800bffa:	f000 fd2b 	bl	800ca54 <xTaskRemoveFromEventList>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d001      	beq.n	800c008 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c004:	f000 fe00 	bl	800cc08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c008:	7bbb      	ldrb	r3, [r7, #14]
 800c00a:	3b01      	subs	r3, #1
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c014:	2b00      	cmp	r3, #0
 800c016:	dce9      	bgt.n	800bfec <prvUnlockQueue+0x60>
 800c018:	e000      	b.n	800c01c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c01a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	22ff      	movs	r2, #255	; 0xff
 800c020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c024:	f001 fa42 	bl	800d4ac <vPortExitCritical>
}
 800c028:	bf00      	nop
 800c02a:	3710      	adds	r7, #16
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c038:	f001 fa08 	bl	800d44c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c040:	2b00      	cmp	r3, #0
 800c042:	d102      	bne.n	800c04a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c044:	2301      	movs	r3, #1
 800c046:	60fb      	str	r3, [r7, #12]
 800c048:	e001      	b.n	800c04e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c04a:	2300      	movs	r3, #0
 800c04c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c04e:	f001 fa2d 	bl	800d4ac <vPortExitCritical>

	return xReturn;
 800c052:	68fb      	ldr	r3, [r7, #12]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c064:	f001 f9f2 	bl	800d44c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c070:	429a      	cmp	r2, r3
 800c072:	d102      	bne.n	800c07a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c074:	2301      	movs	r3, #1
 800c076:	60fb      	str	r3, [r7, #12]
 800c078:	e001      	b.n	800c07e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c07a:	2300      	movs	r3, #0
 800c07c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c07e:	f001 fa15 	bl	800d4ac <vPortExitCritical>

	return xReturn;
 800c082:	68fb      	ldr	r3, [r7, #12]
}
 800c084:	4618      	mov	r0, r3
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c08c:	b480      	push	{r7}
 800c08e:	b085      	sub	sp, #20
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c094:	2300      	movs	r3, #0
 800c096:	60fb      	str	r3, [r7, #12]
 800c098:	e016      	b.n	800c0c8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c09a:	4a10      	ldr	r2, [pc, #64]	; (800c0dc <vQueueUnregisterQueue+0x50>)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	4413      	add	r3, r2
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	687a      	ldr	r2, [r7, #4]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d10b      	bne.n	800c0c2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c0aa:	4a0c      	ldr	r2, [pc, #48]	; (800c0dc <vQueueUnregisterQueue+0x50>)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c0b4:	4a09      	ldr	r2, [pc, #36]	; (800c0dc <vQueueUnregisterQueue+0x50>)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	00db      	lsls	r3, r3, #3
 800c0ba:	4413      	add	r3, r2
 800c0bc:	2200      	movs	r2, #0
 800c0be:	605a      	str	r2, [r3, #4]
				break;
 800c0c0:	e006      	b.n	800c0d0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	60fb      	str	r3, [r7, #12]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2b07      	cmp	r3, #7
 800c0cc:	d9e5      	bls.n	800c09a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c0ce:	bf00      	nop
 800c0d0:	bf00      	nop
 800c0d2:	3714      	adds	r7, #20
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bc80      	pop	{r7}
 800c0d8:	4770      	bx	lr
 800c0da:	bf00      	nop
 800c0dc:	20000adc 	.word	0x20000adc

0800c0e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b08e      	sub	sp, #56	; 0x38
 800c0e4:	af04      	add	r7, sp, #16
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	607a      	str	r2, [r7, #4]
 800c0ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10a      	bne.n	800c10a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f8:	f383 8811 	msr	BASEPRI, r3
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	623b      	str	r3, [r7, #32]
}
 800c106:	bf00      	nop
 800c108:	e7fe      	b.n	800c108 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10a      	bne.n	800c126 <xTaskCreateStatic+0x46>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	61fb      	str	r3, [r7, #28]
}
 800c122:	bf00      	nop
 800c124:	e7fe      	b.n	800c124 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c126:	23b4      	movs	r3, #180	; 0xb4
 800c128:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	2bb4      	cmp	r3, #180	; 0xb4
 800c12e:	d00a      	beq.n	800c146 <xTaskCreateStatic+0x66>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	61bb      	str	r3, [r7, #24]
}
 800c142:	bf00      	nop
 800c144:	e7fe      	b.n	800c144 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d01e      	beq.n	800c18a <xTaskCreateStatic+0xaa>
 800c14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d01b      	beq.n	800c18a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c154:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c15a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15e:	2202      	movs	r2, #2
 800c160:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c164:	2300      	movs	r3, #0
 800c166:	9303      	str	r3, [sp, #12]
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16a:	9302      	str	r3, [sp, #8]
 800c16c:	f107 0314 	add.w	r3, r7, #20
 800c170:	9301      	str	r3, [sp, #4]
 800c172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	68b9      	ldr	r1, [r7, #8]
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f000 f851 	bl	800c224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c182:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c184:	f000 f8e4 	bl	800c350 <prvAddNewTaskToReadyList>
 800c188:	e001      	b.n	800c18e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800c18a:	2300      	movs	r3, #0
 800c18c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c18e:	697b      	ldr	r3, [r7, #20]
	}
 800c190:	4618      	mov	r0, r3
 800c192:	3728      	adds	r7, #40	; 0x28
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b08c      	sub	sp, #48	; 0x30
 800c19c:	af04      	add	r7, sp, #16
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	603b      	str	r3, [r7, #0]
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1a8:	88fb      	ldrh	r3, [r7, #6]
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f001 fa4d 	bl	800d64c <pvPortMalloc>
 800c1b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00e      	beq.n	800c1d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800c1ba:	20b4      	movs	r0, #180	; 0xb4
 800c1bc:	f001 fa46 	bl	800d64c <pvPortMalloc>
 800c1c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d003      	beq.n	800c1d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	631a      	str	r2, [r3, #48]	; 0x30
 800c1ce:	e005      	b.n	800c1dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c1d0:	6978      	ldr	r0, [r7, #20]
 800c1d2:	f001 faff 	bl	800d7d4 <vPortFree>
 800c1d6:	e001      	b.n	800c1dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c1dc:	69fb      	ldr	r3, [r7, #28]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d017      	beq.n	800c212 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c1ea:	88fa      	ldrh	r2, [r7, #6]
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	9303      	str	r3, [sp, #12]
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	9302      	str	r3, [sp, #8]
 800c1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f6:	9301      	str	r3, [sp, #4]
 800c1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fa:	9300      	str	r3, [sp, #0]
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	68b9      	ldr	r1, [r7, #8]
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f000 f80f 	bl	800c224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c206:	69f8      	ldr	r0, [r7, #28]
 800c208:	f000 f8a2 	bl	800c350 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c20c:	2301      	movs	r3, #1
 800c20e:	61bb      	str	r3, [r7, #24]
 800c210:	e002      	b.n	800c218 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c212:	f04f 33ff 	mov.w	r3, #4294967295
 800c216:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c218:	69bb      	ldr	r3, [r7, #24]
	}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3720      	adds	r7, #32
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
	...

0800c224 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b088      	sub	sp, #32
 800c228:	af00      	add	r7, sp, #0
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	60b9      	str	r1, [r7, #8]
 800c22e:	607a      	str	r2, [r7, #4]
 800c230:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800c232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c23c:	3b01      	subs	r3, #1
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	4413      	add	r3, r2
 800c242:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800c244:	69bb      	ldr	r3, [r7, #24]
 800c246:	f023 0307 	bic.w	r3, r3, #7
 800c24a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	f003 0307 	and.w	r3, r3, #7
 800c252:	2b00      	cmp	r3, #0
 800c254:	d00a      	beq.n	800c26c <prvInitialiseNewTask+0x48>
	__asm volatile
 800c256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25a:	f383 8811 	msr	BASEPRI, r3
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	617b      	str	r3, [r7, #20]
}
 800c268:	bf00      	nop
 800c26a:	e7fe      	b.n	800c26a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c26c:	2300      	movs	r3, #0
 800c26e:	61fb      	str	r3, [r7, #28]
 800c270:	e012      	b.n	800c298 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c272:	68ba      	ldr	r2, [r7, #8]
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	4413      	add	r3, r2
 800c278:	7819      	ldrb	r1, [r3, #0]
 800c27a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	4413      	add	r3, r2
 800c280:	3334      	adds	r3, #52	; 0x34
 800c282:	460a      	mov	r2, r1
 800c284:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800c286:	68ba      	ldr	r2, [r7, #8]
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	4413      	add	r3, r2
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d006      	beq.n	800c2a0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	3301      	adds	r3, #1
 800c296:	61fb      	str	r3, [r7, #28]
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	2b0f      	cmp	r3, #15
 800c29c:	d9e9      	bls.n	800c272 <prvInitialiseNewTask+0x4e>
 800c29e:	e000      	b.n	800c2a2 <prvInitialiseNewTask+0x7e>
		{
			break;
 800c2a0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ac:	2b06      	cmp	r3, #6
 800c2ae:	d901      	bls.n	800c2b4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c2b0:	2306      	movs	r3, #6
 800c2b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c8:	3304      	adds	r3, #4
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7ff f8b0 	bl	800b430 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d2:	3318      	adds	r3, #24
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7ff f8ab 	bl	800b430 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e2:	f1c3 0207 	rsb	r2, r3, #7
 800c2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c302:	334c      	adds	r3, #76	; 0x4c
 800c304:	2260      	movs	r2, #96	; 0x60
 800c306:	2100      	movs	r1, #0
 800c308:	4618      	mov	r0, r3
 800c30a:	f001 fbb5 	bl	800da78 <memset>
 800c30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c310:	4a0c      	ldr	r2, [pc, #48]	; (800c344 <prvInitialiseNewTask+0x120>)
 800c312:	651a      	str	r2, [r3, #80]	; 0x50
 800c314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c316:	4a0c      	ldr	r2, [pc, #48]	; (800c348 <prvInitialiseNewTask+0x124>)
 800c318:	655a      	str	r2, [r3, #84]	; 0x54
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	4a0b      	ldr	r2, [pc, #44]	; (800c34c <prvInitialiseNewTask+0x128>)
 800c31e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c320:	683a      	ldr	r2, [r7, #0]
 800c322:	68f9      	ldr	r1, [r7, #12]
 800c324:	69b8      	ldr	r0, [r7, #24]
 800c326:	f000 ff9d 	bl	800d264 <pxPortInitialiseStack>
 800c32a:	4602      	mov	r2, r0
 800c32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800c330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c332:	2b00      	cmp	r3, #0
 800c334:	d002      	beq.n	800c33c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c33a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c33c:	bf00      	nop
 800c33e:	3720      	adds	r7, #32
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	0800e924 	.word	0x0800e924
 800c348:	0800e944 	.word	0x0800e944
 800c34c:	0800e904 	.word	0x0800e904

0800c350 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c358:	f001 f878 	bl	800d44c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c35c:	4b2a      	ldr	r3, [pc, #168]	; (800c408 <prvAddNewTaskToReadyList+0xb8>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	3301      	adds	r3, #1
 800c362:	4a29      	ldr	r2, [pc, #164]	; (800c408 <prvAddNewTaskToReadyList+0xb8>)
 800c364:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c366:	4b29      	ldr	r3, [pc, #164]	; (800c40c <prvAddNewTaskToReadyList+0xbc>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d109      	bne.n	800c382 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c36e:	4a27      	ldr	r2, [pc, #156]	; (800c40c <prvAddNewTaskToReadyList+0xbc>)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c374:	4b24      	ldr	r3, [pc, #144]	; (800c408 <prvAddNewTaskToReadyList+0xb8>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d110      	bne.n	800c39e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c37c:	f000 fc68 	bl	800cc50 <prvInitialiseTaskLists>
 800c380:	e00d      	b.n	800c39e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c382:	4b23      	ldr	r3, [pc, #140]	; (800c410 <prvAddNewTaskToReadyList+0xc0>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d109      	bne.n	800c39e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c38a:	4b20      	ldr	r3, [pc, #128]	; (800c40c <prvAddNewTaskToReadyList+0xbc>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c394:	429a      	cmp	r2, r3
 800c396:	d802      	bhi.n	800c39e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c398:	4a1c      	ldr	r2, [pc, #112]	; (800c40c <prvAddNewTaskToReadyList+0xbc>)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c39e:	4b1d      	ldr	r3, [pc, #116]	; (800c414 <prvAddNewTaskToReadyList+0xc4>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	4a1b      	ldr	r2, [pc, #108]	; (800c414 <prvAddNewTaskToReadyList+0xc4>)
 800c3a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	409a      	lsls	r2, r3
 800c3b0:	4b19      	ldr	r3, [pc, #100]	; (800c418 <prvAddNewTaskToReadyList+0xc8>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	4a18      	ldr	r2, [pc, #96]	; (800c418 <prvAddNewTaskToReadyList+0xc8>)
 800c3b8:	6013      	str	r3, [r2, #0]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3be:	4613      	mov	r3, r2
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	4413      	add	r3, r2
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	4a15      	ldr	r2, [pc, #84]	; (800c41c <prvAddNewTaskToReadyList+0xcc>)
 800c3c8:	441a      	add	r2, r3
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	3304      	adds	r3, #4
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	f7ff f839 	bl	800b448 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c3d6:	f001 f869 	bl	800d4ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c3da:	4b0d      	ldr	r3, [pc, #52]	; (800c410 <prvAddNewTaskToReadyList+0xc0>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d00e      	beq.n	800c400 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c3e2:	4b0a      	ldr	r3, [pc, #40]	; (800c40c <prvAddNewTaskToReadyList+0xbc>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d207      	bcs.n	800c400 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c3f0:	4b0b      	ldr	r3, [pc, #44]	; (800c420 <prvAddNewTaskToReadyList+0xd0>)
 800c3f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3f6:	601a      	str	r2, [r3, #0]
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c400:	bf00      	nop
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	20000c1c 	.word	0x20000c1c
 800c40c:	20000b1c 	.word	0x20000b1c
 800c410:	20000c28 	.word	0x20000c28
 800c414:	20000c38 	.word	0x20000c38
 800c418:	20000c24 	.word	0x20000c24
 800c41c:	20000b20 	.word	0x20000b20
 800c420:	e000ed04 	.word	0xe000ed04

0800c424 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c424:	b580      	push	{r7, lr}
 800c426:	b08a      	sub	sp, #40	; 0x28
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c42e:	2300      	movs	r3, #0
 800c430:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d10a      	bne.n	800c44e <vTaskDelayUntil+0x2a>
	__asm volatile
 800c438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43c:	f383 8811 	msr	BASEPRI, r3
 800c440:	f3bf 8f6f 	isb	sy
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	617b      	str	r3, [r7, #20]
}
 800c44a:	bf00      	nop
 800c44c:	e7fe      	b.n	800c44c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10a      	bne.n	800c46a <vTaskDelayUntil+0x46>
	__asm volatile
 800c454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c458:	f383 8811 	msr	BASEPRI, r3
 800c45c:	f3bf 8f6f 	isb	sy
 800c460:	f3bf 8f4f 	dsb	sy
 800c464:	613b      	str	r3, [r7, #16]
}
 800c466:	bf00      	nop
 800c468:	e7fe      	b.n	800c468 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c46a:	4b2a      	ldr	r3, [pc, #168]	; (800c514 <vTaskDelayUntil+0xf0>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00a      	beq.n	800c488 <vTaskDelayUntil+0x64>
	__asm volatile
 800c472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	60fb      	str	r3, [r7, #12]
}
 800c484:	bf00      	nop
 800c486:	e7fe      	b.n	800c486 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c488:	f000 f8e8 	bl	800c65c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c48c:	4b22      	ldr	r3, [pc, #136]	; (800c518 <vTaskDelayUntil+0xf4>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	683a      	ldr	r2, [r7, #0]
 800c498:	4413      	add	r3, r2
 800c49a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	6a3a      	ldr	r2, [r7, #32]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d20b      	bcs.n	800c4be <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	69fa      	ldr	r2, [r7, #28]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d211      	bcs.n	800c4d4 <vTaskDelayUntil+0xb0>
 800c4b0:	69fa      	ldr	r2, [r7, #28]
 800c4b2:	6a3b      	ldr	r3, [r7, #32]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d90d      	bls.n	800c4d4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	627b      	str	r3, [r7, #36]	; 0x24
 800c4bc:	e00a      	b.n	800c4d4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	69fa      	ldr	r2, [r7, #28]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d303      	bcc.n	800c4d0 <vTaskDelayUntil+0xac>
 800c4c8:	69fa      	ldr	r2, [r7, #28]
 800c4ca:	6a3b      	ldr	r3, [r7, #32]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d901      	bls.n	800c4d4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	69fa      	ldr	r2, [r7, #28]
 800c4d8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d006      	beq.n	800c4ee <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c4e0:	69fa      	ldr	r2, [r7, #28]
 800c4e2:	6a3b      	ldr	r3, [r7, #32]
 800c4e4:	1ad3      	subs	r3, r2, r3
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f000 fe55 	bl	800d198 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c4ee:	f000 f8c3 	bl	800c678 <xTaskResumeAll>
 800c4f2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d107      	bne.n	800c50a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c4fa:	4b08      	ldr	r3, [pc, #32]	; (800c51c <vTaskDelayUntil+0xf8>)
 800c4fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c500:	601a      	str	r2, [r3, #0]
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c50a:	bf00      	nop
 800c50c:	3728      	adds	r7, #40	; 0x28
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	20000c44 	.word	0x20000c44
 800c518:	20000c20 	.word	0x20000c20
 800c51c:	e000ed04 	.word	0xe000ed04

0800c520 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c528:	2300      	movs	r3, #0
 800c52a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d017      	beq.n	800c562 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c532:	4b13      	ldr	r3, [pc, #76]	; (800c580 <vTaskDelay+0x60>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00a      	beq.n	800c550 <vTaskDelay+0x30>
	__asm volatile
 800c53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	60bb      	str	r3, [r7, #8]
}
 800c54c:	bf00      	nop
 800c54e:	e7fe      	b.n	800c54e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c550:	f000 f884 	bl	800c65c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c554:	2100      	movs	r1, #0
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 fe1e 	bl	800d198 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c55c:	f000 f88c 	bl	800c678 <xTaskResumeAll>
 800c560:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d107      	bne.n	800c578 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c568:	4b06      	ldr	r3, [pc, #24]	; (800c584 <vTaskDelay+0x64>)
 800c56a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c56e:	601a      	str	r2, [r3, #0]
 800c570:	f3bf 8f4f 	dsb	sy
 800c574:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c578:	bf00      	nop
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	20000c44 	.word	0x20000c44
 800c584:	e000ed04 	.word	0xe000ed04

0800c588 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b08a      	sub	sp, #40	; 0x28
 800c58c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c58e:	2300      	movs	r3, #0
 800c590:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c592:	2300      	movs	r3, #0
 800c594:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c596:	463a      	mov	r2, r7
 800c598:	1d39      	adds	r1, r7, #4
 800c59a:	f107 0308 	add.w	r3, r7, #8
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7f5 fbbc 	bl	8001d1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c5a4:	6839      	ldr	r1, [r7, #0]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	9202      	str	r2, [sp, #8]
 800c5ac:	9301      	str	r3, [sp, #4]
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	460a      	mov	r2, r1
 800c5b6:	4921      	ldr	r1, [pc, #132]	; (800c63c <vTaskStartScheduler+0xb4>)
 800c5b8:	4821      	ldr	r0, [pc, #132]	; (800c640 <vTaskStartScheduler+0xb8>)
 800c5ba:	f7ff fd91 	bl	800c0e0 <xTaskCreateStatic>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	4a20      	ldr	r2, [pc, #128]	; (800c644 <vTaskStartScheduler+0xbc>)
 800c5c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c5c4:	4b1f      	ldr	r3, [pc, #124]	; (800c644 <vTaskStartScheduler+0xbc>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d002      	beq.n	800c5d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	617b      	str	r3, [r7, #20]
 800c5d0:	e001      	b.n	800c5d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d11b      	bne.n	800c614 <vTaskStartScheduler+0x8c>
	__asm volatile
 800c5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	613b      	str	r3, [r7, #16]
}
 800c5ee:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c5f0:	4b15      	ldr	r3, [pc, #84]	; (800c648 <vTaskStartScheduler+0xc0>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	334c      	adds	r3, #76	; 0x4c
 800c5f6:	4a15      	ldr	r2, [pc, #84]	; (800c64c <vTaskStartScheduler+0xc4>)
 800c5f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c5fa:	4b15      	ldr	r3, [pc, #84]	; (800c650 <vTaskStartScheduler+0xc8>)
 800c5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c600:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c602:	4b14      	ldr	r3, [pc, #80]	; (800c654 <vTaskStartScheduler+0xcc>)
 800c604:	2201      	movs	r2, #1
 800c606:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800c608:	4b13      	ldr	r3, [pc, #76]	; (800c658 <vTaskStartScheduler+0xd0>)
 800c60a:	2200      	movs	r2, #0
 800c60c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c60e:	f000 feab 	bl	800d368 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c612:	e00e      	b.n	800c632 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c61a:	d10a      	bne.n	800c632 <vTaskStartScheduler+0xaa>
	__asm volatile
 800c61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c620:	f383 8811 	msr	BASEPRI, r3
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	60fb      	str	r3, [r7, #12]
}
 800c62e:	bf00      	nop
 800c630:	e7fe      	b.n	800c630 <vTaskStartScheduler+0xa8>
}
 800c632:	bf00      	nop
 800c634:	3718      	adds	r7, #24
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	0800e864 	.word	0x0800e864
 800c640:	0800cc21 	.word	0x0800cc21
 800c644:	20000c40 	.word	0x20000c40
 800c648:	20000b1c 	.word	0x20000b1c
 800c64c:	20000048 	.word	0x20000048
 800c650:	20000c3c 	.word	0x20000c3c
 800c654:	20000c28 	.word	0x20000c28
 800c658:	20000c20 	.word	0x20000c20

0800c65c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c65c:	b480      	push	{r7}
 800c65e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c660:	4b04      	ldr	r3, [pc, #16]	; (800c674 <vTaskSuspendAll+0x18>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	3301      	adds	r3, #1
 800c666:	4a03      	ldr	r2, [pc, #12]	; (800c674 <vTaskSuspendAll+0x18>)
 800c668:	6013      	str	r3, [r2, #0]
}
 800c66a:	bf00      	nop
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bc80      	pop	{r7}
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop
 800c674:	20000c44 	.word	0x20000c44

0800c678 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c67e:	2300      	movs	r3, #0
 800c680:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c682:	2300      	movs	r3, #0
 800c684:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c686:	4b41      	ldr	r3, [pc, #260]	; (800c78c <xTaskResumeAll+0x114>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10a      	bne.n	800c6a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800c68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	f3bf 8f4f 	dsb	sy
 800c69e:	603b      	str	r3, [r7, #0]
}
 800c6a0:	bf00      	nop
 800c6a2:	e7fe      	b.n	800c6a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c6a4:	f000 fed2 	bl	800d44c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c6a8:	4b38      	ldr	r3, [pc, #224]	; (800c78c <xTaskResumeAll+0x114>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	4a37      	ldr	r2, [pc, #220]	; (800c78c <xTaskResumeAll+0x114>)
 800c6b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6b2:	4b36      	ldr	r3, [pc, #216]	; (800c78c <xTaskResumeAll+0x114>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d161      	bne.n	800c77e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c6ba:	4b35      	ldr	r3, [pc, #212]	; (800c790 <xTaskResumeAll+0x118>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d05d      	beq.n	800c77e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c6c2:	e02e      	b.n	800c722 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800c6c4:	4b33      	ldr	r3, [pc, #204]	; (800c794 <xTaskResumeAll+0x11c>)
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	3318      	adds	r3, #24
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7fe ff14 	bl	800b4fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	3304      	adds	r3, #4
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7fe ff0f 	bl	800b4fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	409a      	lsls	r2, r3
 800c6e8:	4b2b      	ldr	r3, [pc, #172]	; (800c798 <xTaskResumeAll+0x120>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	4a2a      	ldr	r2, [pc, #168]	; (800c798 <xTaskResumeAll+0x120>)
 800c6f0:	6013      	str	r3, [r2, #0]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	4413      	add	r3, r2
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4a27      	ldr	r2, [pc, #156]	; (800c79c <xTaskResumeAll+0x124>)
 800c700:	441a      	add	r2, r3
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	3304      	adds	r3, #4
 800c706:	4619      	mov	r1, r3
 800c708:	4610      	mov	r0, r2
 800c70a:	f7fe fe9d 	bl	800b448 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c712:	4b23      	ldr	r3, [pc, #140]	; (800c7a0 <xTaskResumeAll+0x128>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c718:	429a      	cmp	r2, r3
 800c71a:	d302      	bcc.n	800c722 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c71c:	4b21      	ldr	r3, [pc, #132]	; (800c7a4 <xTaskResumeAll+0x12c>)
 800c71e:	2201      	movs	r2, #1
 800c720:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c722:	4b1c      	ldr	r3, [pc, #112]	; (800c794 <xTaskResumeAll+0x11c>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1cc      	bne.n	800c6c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d001      	beq.n	800c734 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c730:	f000 fb30 	bl	800cd94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c734:	4b1c      	ldr	r3, [pc, #112]	; (800c7a8 <xTaskResumeAll+0x130>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d010      	beq.n	800c762 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c740:	f000 f844 	bl	800c7cc <xTaskIncrementTick>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d002      	beq.n	800c750 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c74a:	4b16      	ldr	r3, [pc, #88]	; (800c7a4 <xTaskResumeAll+0x12c>)
 800c74c:	2201      	movs	r2, #1
 800c74e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	3b01      	subs	r3, #1
 800c754:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d1f1      	bne.n	800c740 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c75c:	4b12      	ldr	r3, [pc, #72]	; (800c7a8 <xTaskResumeAll+0x130>)
 800c75e:	2200      	movs	r2, #0
 800c760:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c762:	4b10      	ldr	r3, [pc, #64]	; (800c7a4 <xTaskResumeAll+0x12c>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d009      	beq.n	800c77e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c76a:	2301      	movs	r3, #1
 800c76c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c76e:	4b0f      	ldr	r3, [pc, #60]	; (800c7ac <xTaskResumeAll+0x134>)
 800c770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c774:	601a      	str	r2, [r3, #0]
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c77e:	f000 fe95 	bl	800d4ac <vPortExitCritical>

	return xAlreadyYielded;
 800c782:	68bb      	ldr	r3, [r7, #8]
}
 800c784:	4618      	mov	r0, r3
 800c786:	3710      	adds	r7, #16
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	20000c44 	.word	0x20000c44
 800c790:	20000c1c 	.word	0x20000c1c
 800c794:	20000bdc 	.word	0x20000bdc
 800c798:	20000c24 	.word	0x20000c24
 800c79c:	20000b20 	.word	0x20000b20
 800c7a0:	20000b1c 	.word	0x20000b1c
 800c7a4:	20000c30 	.word	0x20000c30
 800c7a8:	20000c2c 	.word	0x20000c2c
 800c7ac:	e000ed04 	.word	0xe000ed04

0800c7b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c7b6:	4b04      	ldr	r3, [pc, #16]	; (800c7c8 <xTaskGetTickCount+0x18>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c7bc:	687b      	ldr	r3, [r7, #4]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	370c      	adds	r7, #12
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bc80      	pop	{r7}
 800c7c6:	4770      	bx	lr
 800c7c8:	20000c20 	.word	0x20000c20

0800c7cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b086      	sub	sp, #24
 800c7d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7d6:	4b51      	ldr	r3, [pc, #324]	; (800c91c <xTaskIncrementTick+0x150>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f040 808d 	bne.w	800c8fa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c7e0:	4b4f      	ldr	r3, [pc, #316]	; (800c920 <xTaskIncrementTick+0x154>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c7e8:	4a4d      	ldr	r2, [pc, #308]	; (800c920 <xTaskIncrementTick+0x154>)
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d120      	bne.n	800c836 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c7f4:	4b4b      	ldr	r3, [pc, #300]	; (800c924 <xTaskIncrementTick+0x158>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00a      	beq.n	800c814 <xTaskIncrementTick+0x48>
	__asm volatile
 800c7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c802:	f383 8811 	msr	BASEPRI, r3
 800c806:	f3bf 8f6f 	isb	sy
 800c80a:	f3bf 8f4f 	dsb	sy
 800c80e:	603b      	str	r3, [r7, #0]
}
 800c810:	bf00      	nop
 800c812:	e7fe      	b.n	800c812 <xTaskIncrementTick+0x46>
 800c814:	4b43      	ldr	r3, [pc, #268]	; (800c924 <xTaskIncrementTick+0x158>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	60fb      	str	r3, [r7, #12]
 800c81a:	4b43      	ldr	r3, [pc, #268]	; (800c928 <xTaskIncrementTick+0x15c>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a41      	ldr	r2, [pc, #260]	; (800c924 <xTaskIncrementTick+0x158>)
 800c820:	6013      	str	r3, [r2, #0]
 800c822:	4a41      	ldr	r2, [pc, #260]	; (800c928 <xTaskIncrementTick+0x15c>)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6013      	str	r3, [r2, #0]
 800c828:	4b40      	ldr	r3, [pc, #256]	; (800c92c <xTaskIncrementTick+0x160>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	3301      	adds	r3, #1
 800c82e:	4a3f      	ldr	r2, [pc, #252]	; (800c92c <xTaskIncrementTick+0x160>)
 800c830:	6013      	str	r3, [r2, #0]
 800c832:	f000 faaf 	bl	800cd94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c836:	4b3e      	ldr	r3, [pc, #248]	; (800c930 <xTaskIncrementTick+0x164>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d34d      	bcc.n	800c8dc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c840:	4b38      	ldr	r3, [pc, #224]	; (800c924 <xTaskIncrementTick+0x158>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d101      	bne.n	800c84e <xTaskIncrementTick+0x82>
 800c84a:	2301      	movs	r3, #1
 800c84c:	e000      	b.n	800c850 <xTaskIncrementTick+0x84>
 800c84e:	2300      	movs	r3, #0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d004      	beq.n	800c85e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c854:	4b36      	ldr	r3, [pc, #216]	; (800c930 <xTaskIncrementTick+0x164>)
 800c856:	f04f 32ff 	mov.w	r2, #4294967295
 800c85a:	601a      	str	r2, [r3, #0]
					break;
 800c85c:	e03e      	b.n	800c8dc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c85e:	4b31      	ldr	r3, [pc, #196]	; (800c924 <xTaskIncrementTick+0x158>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	429a      	cmp	r2, r3
 800c874:	d203      	bcs.n	800c87e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c876:	4a2e      	ldr	r2, [pc, #184]	; (800c930 <xTaskIncrementTick+0x164>)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6013      	str	r3, [r2, #0]
						break;
 800c87c:	e02e      	b.n	800c8dc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	3304      	adds	r3, #4
 800c882:	4618      	mov	r0, r3
 800c884:	f7fe fe3b 	bl	800b4fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d004      	beq.n	800c89a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	3318      	adds	r3, #24
 800c894:	4618      	mov	r0, r3
 800c896:	f7fe fe32 	bl	800b4fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89e:	2201      	movs	r2, #1
 800c8a0:	409a      	lsls	r2, r3
 800c8a2:	4b24      	ldr	r3, [pc, #144]	; (800c934 <xTaskIncrementTick+0x168>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4313      	orrs	r3, r2
 800c8a8:	4a22      	ldr	r2, [pc, #136]	; (800c934 <xTaskIncrementTick+0x168>)
 800c8aa:	6013      	str	r3, [r2, #0]
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	4413      	add	r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4a1f      	ldr	r2, [pc, #124]	; (800c938 <xTaskIncrementTick+0x16c>)
 800c8ba:	441a      	add	r2, r3
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	3304      	adds	r3, #4
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4610      	mov	r0, r2
 800c8c4:	f7fe fdc0 	bl	800b448 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8cc:	4b1b      	ldr	r3, [pc, #108]	; (800c93c <xTaskIncrementTick+0x170>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d3b4      	bcc.n	800c840 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8da:	e7b1      	b.n	800c840 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c8dc:	4b17      	ldr	r3, [pc, #92]	; (800c93c <xTaskIncrementTick+0x170>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e2:	4915      	ldr	r1, [pc, #84]	; (800c938 <xTaskIncrementTick+0x16c>)
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	4413      	add	r3, r2
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	440b      	add	r3, r1
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d907      	bls.n	800c904 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	617b      	str	r3, [r7, #20]
 800c8f8:	e004      	b.n	800c904 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c8fa:	4b11      	ldr	r3, [pc, #68]	; (800c940 <xTaskIncrementTick+0x174>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	3301      	adds	r3, #1
 800c900:	4a0f      	ldr	r2, [pc, #60]	; (800c940 <xTaskIncrementTick+0x174>)
 800c902:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c904:	4b0f      	ldr	r3, [pc, #60]	; (800c944 <xTaskIncrementTick+0x178>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d001      	beq.n	800c910 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800c90c:	2301      	movs	r3, #1
 800c90e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c910:	697b      	ldr	r3, [r7, #20]
}
 800c912:	4618      	mov	r0, r3
 800c914:	3718      	adds	r7, #24
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	20000c44 	.word	0x20000c44
 800c920:	20000c20 	.word	0x20000c20
 800c924:	20000bd4 	.word	0x20000bd4
 800c928:	20000bd8 	.word	0x20000bd8
 800c92c:	20000c34 	.word	0x20000c34
 800c930:	20000c3c 	.word	0x20000c3c
 800c934:	20000c24 	.word	0x20000c24
 800c938:	20000b20 	.word	0x20000b20
 800c93c:	20000b1c 	.word	0x20000b1c
 800c940:	20000c2c 	.word	0x20000c2c
 800c944:	20000c30 	.word	0x20000c30

0800c948 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c948:	b480      	push	{r7}
 800c94a:	b087      	sub	sp, #28
 800c94c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c94e:	4b29      	ldr	r3, [pc, #164]	; (800c9f4 <vTaskSwitchContext+0xac>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d003      	beq.n	800c95e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c956:	4b28      	ldr	r3, [pc, #160]	; (800c9f8 <vTaskSwitchContext+0xb0>)
 800c958:	2201      	movs	r2, #1
 800c95a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c95c:	e044      	b.n	800c9e8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c95e:	4b26      	ldr	r3, [pc, #152]	; (800c9f8 <vTaskSwitchContext+0xb0>)
 800c960:	2200      	movs	r2, #0
 800c962:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c964:	4b25      	ldr	r3, [pc, #148]	; (800c9fc <vTaskSwitchContext+0xb4>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	fab3 f383 	clz	r3, r3
 800c970:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c972:	7afb      	ldrb	r3, [r7, #11]
 800c974:	f1c3 031f 	rsb	r3, r3, #31
 800c978:	617b      	str	r3, [r7, #20]
 800c97a:	4921      	ldr	r1, [pc, #132]	; (800ca00 <vTaskSwitchContext+0xb8>)
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	4613      	mov	r3, r2
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	4413      	add	r3, r2
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	440b      	add	r3, r1
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d10a      	bne.n	800c9a4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	607b      	str	r3, [r7, #4]
}
 800c9a0:	bf00      	nop
 800c9a2:	e7fe      	b.n	800c9a2 <vTaskSwitchContext+0x5a>
 800c9a4:	697a      	ldr	r2, [r7, #20]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	4413      	add	r3, r2
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	4a14      	ldr	r2, [pc, #80]	; (800ca00 <vTaskSwitchContext+0xb8>)
 800c9b0:	4413      	add	r3, r2
 800c9b2:	613b      	str	r3, [r7, #16]
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	685a      	ldr	r2, [r3, #4]
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	605a      	str	r2, [r3, #4]
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	685a      	ldr	r2, [r3, #4]
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d104      	bne.n	800c9d4 <vTaskSwitchContext+0x8c>
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	685a      	ldr	r2, [r3, #4]
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	605a      	str	r2, [r3, #4]
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	4a0a      	ldr	r2, [pc, #40]	; (800ca04 <vTaskSwitchContext+0xbc>)
 800c9dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c9de:	4b09      	ldr	r3, [pc, #36]	; (800ca04 <vTaskSwitchContext+0xbc>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	334c      	adds	r3, #76	; 0x4c
 800c9e4:	4a08      	ldr	r2, [pc, #32]	; (800ca08 <vTaskSwitchContext+0xc0>)
 800c9e6:	6013      	str	r3, [r2, #0]
}
 800c9e8:	bf00      	nop
 800c9ea:	371c      	adds	r7, #28
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bc80      	pop	{r7}
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	20000c44 	.word	0x20000c44
 800c9f8:	20000c30 	.word	0x20000c30
 800c9fc:	20000c24 	.word	0x20000c24
 800ca00:	20000b20 	.word	0x20000b20
 800ca04:	20000b1c 	.word	0x20000b1c
 800ca08:	20000048 	.word	0x20000048

0800ca0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10a      	bne.n	800ca32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ca1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	60fb      	str	r3, [r7, #12]
}
 800ca2e:	bf00      	nop
 800ca30:	e7fe      	b.n	800ca30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca32:	4b07      	ldr	r3, [pc, #28]	; (800ca50 <vTaskPlaceOnEventList+0x44>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	3318      	adds	r3, #24
 800ca38:	4619      	mov	r1, r3
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7fe fd27 	bl	800b48e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca40:	2101      	movs	r1, #1
 800ca42:	6838      	ldr	r0, [r7, #0]
 800ca44:	f000 fba8 	bl	800d198 <prvAddCurrentTaskToDelayedList>
}
 800ca48:	bf00      	nop
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	20000b1c 	.word	0x20000b1c

0800ca54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b086      	sub	sp, #24
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	68db      	ldr	r3, [r3, #12]
 800ca62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10a      	bne.n	800ca80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ca6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6e:	f383 8811 	msr	BASEPRI, r3
 800ca72:	f3bf 8f6f 	isb	sy
 800ca76:	f3bf 8f4f 	dsb	sy
 800ca7a:	60fb      	str	r3, [r7, #12]
}
 800ca7c:	bf00      	nop
 800ca7e:	e7fe      	b.n	800ca7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	3318      	adds	r3, #24
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7fe fd3a 	bl	800b4fe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca8a:	4b1d      	ldr	r3, [pc, #116]	; (800cb00 <xTaskRemoveFromEventList+0xac>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d11c      	bne.n	800cacc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	3304      	adds	r3, #4
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7fe fd31 	bl	800b4fe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa0:	2201      	movs	r2, #1
 800caa2:	409a      	lsls	r2, r3
 800caa4:	4b17      	ldr	r3, [pc, #92]	; (800cb04 <xTaskRemoveFromEventList+0xb0>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4313      	orrs	r3, r2
 800caaa:	4a16      	ldr	r2, [pc, #88]	; (800cb04 <xTaskRemoveFromEventList+0xb0>)
 800caac:	6013      	str	r3, [r2, #0]
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cab2:	4613      	mov	r3, r2
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	4413      	add	r3, r2
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	4a13      	ldr	r2, [pc, #76]	; (800cb08 <xTaskRemoveFromEventList+0xb4>)
 800cabc:	441a      	add	r2, r3
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	3304      	adds	r3, #4
 800cac2:	4619      	mov	r1, r3
 800cac4:	4610      	mov	r0, r2
 800cac6:	f7fe fcbf 	bl	800b448 <vListInsertEnd>
 800caca:	e005      	b.n	800cad8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	3318      	adds	r3, #24
 800cad0:	4619      	mov	r1, r3
 800cad2:	480e      	ldr	r0, [pc, #56]	; (800cb0c <xTaskRemoveFromEventList+0xb8>)
 800cad4:	f7fe fcb8 	bl	800b448 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cadc:	4b0c      	ldr	r3, [pc, #48]	; (800cb10 <xTaskRemoveFromEventList+0xbc>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d905      	bls.n	800caf2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cae6:	2301      	movs	r3, #1
 800cae8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800caea:	4b0a      	ldr	r3, [pc, #40]	; (800cb14 <xTaskRemoveFromEventList+0xc0>)
 800caec:	2201      	movs	r2, #1
 800caee:	601a      	str	r2, [r3, #0]
 800caf0:	e001      	b.n	800caf6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800caf2:	2300      	movs	r3, #0
 800caf4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800caf6:	697b      	ldr	r3, [r7, #20]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3718      	adds	r7, #24
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	20000c44 	.word	0x20000c44
 800cb04:	20000c24 	.word	0x20000c24
 800cb08:	20000b20 	.word	0x20000b20
 800cb0c:	20000bdc 	.word	0x20000bdc
 800cb10:	20000b1c 	.word	0x20000b1c
 800cb14:	20000c30 	.word	0x20000c30

0800cb18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b083      	sub	sp, #12
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cb20:	4b06      	ldr	r3, [pc, #24]	; (800cb3c <vTaskInternalSetTimeOutState+0x24>)
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cb28:	4b05      	ldr	r3, [pc, #20]	; (800cb40 <vTaskInternalSetTimeOutState+0x28>)
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	605a      	str	r2, [r3, #4]
}
 800cb30:	bf00      	nop
 800cb32:	370c      	adds	r7, #12
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bc80      	pop	{r7}
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	20000c34 	.word	0x20000c34
 800cb40:	20000c20 	.word	0x20000c20

0800cb44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b088      	sub	sp, #32
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d10a      	bne.n	800cb6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb58:	f383 8811 	msr	BASEPRI, r3
 800cb5c:	f3bf 8f6f 	isb	sy
 800cb60:	f3bf 8f4f 	dsb	sy
 800cb64:	613b      	str	r3, [r7, #16]
}
 800cb66:	bf00      	nop
 800cb68:	e7fe      	b.n	800cb68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d10a      	bne.n	800cb86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	60fb      	str	r3, [r7, #12]
}
 800cb82:	bf00      	nop
 800cb84:	e7fe      	b.n	800cb84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cb86:	f000 fc61 	bl	800d44c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cb8a:	4b1d      	ldr	r3, [pc, #116]	; (800cc00 <xTaskCheckForTimeOut+0xbc>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	69ba      	ldr	r2, [r7, #24]
 800cb96:	1ad3      	subs	r3, r2, r3
 800cb98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba2:	d102      	bne.n	800cbaa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cba4:	2300      	movs	r3, #0
 800cba6:	61fb      	str	r3, [r7, #28]
 800cba8:	e023      	b.n	800cbf2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	4b15      	ldr	r3, [pc, #84]	; (800cc04 <xTaskCheckForTimeOut+0xc0>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d007      	beq.n	800cbc6 <xTaskCheckForTimeOut+0x82>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	69ba      	ldr	r2, [r7, #24]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d302      	bcc.n	800cbc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	61fb      	str	r3, [r7, #28]
 800cbc4:	e015      	b.n	800cbf2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	697a      	ldr	r2, [r7, #20]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d20b      	bcs.n	800cbe8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	1ad2      	subs	r2, r2, r3
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f7ff ff9b 	bl	800cb18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	61fb      	str	r3, [r7, #28]
 800cbe6:	e004      	b.n	800cbf2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	2200      	movs	r2, #0
 800cbec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cbf2:	f000 fc5b 	bl	800d4ac <vPortExitCritical>

	return xReturn;
 800cbf6:	69fb      	ldr	r3, [r7, #28]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3720      	adds	r7, #32
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	20000c20 	.word	0x20000c20
 800cc04:	20000c34 	.word	0x20000c34

0800cc08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cc08:	b480      	push	{r7}
 800cc0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cc0c:	4b03      	ldr	r3, [pc, #12]	; (800cc1c <vTaskMissedYield+0x14>)
 800cc0e:	2201      	movs	r2, #1
 800cc10:	601a      	str	r2, [r3, #0]
}
 800cc12:	bf00      	nop
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bc80      	pop	{r7}
 800cc18:	4770      	bx	lr
 800cc1a:	bf00      	nop
 800cc1c:	20000c30 	.word	0x20000c30

0800cc20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cc28:	f000 f852 	bl	800ccd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cc2c:	4b06      	ldr	r3, [pc, #24]	; (800cc48 <prvIdleTask+0x28>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d9f9      	bls.n	800cc28 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cc34:	4b05      	ldr	r3, [pc, #20]	; (800cc4c <prvIdleTask+0x2c>)
 800cc36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc3a:	601a      	str	r2, [r3, #0]
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cc44:	e7f0      	b.n	800cc28 <prvIdleTask+0x8>
 800cc46:	bf00      	nop
 800cc48:	20000b20 	.word	0x20000b20
 800cc4c:	e000ed04 	.word	0xe000ed04

0800cc50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc56:	2300      	movs	r3, #0
 800cc58:	607b      	str	r3, [r7, #4]
 800cc5a:	e00c      	b.n	800cc76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	4613      	mov	r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	4413      	add	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4a12      	ldr	r2, [pc, #72]	; (800ccb0 <prvInitialiseTaskLists+0x60>)
 800cc68:	4413      	add	r3, r2
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fe fbc1 	bl	800b3f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	3301      	adds	r3, #1
 800cc74:	607b      	str	r3, [r7, #4]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2b06      	cmp	r3, #6
 800cc7a:	d9ef      	bls.n	800cc5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cc7c:	480d      	ldr	r0, [pc, #52]	; (800ccb4 <prvInitialiseTaskLists+0x64>)
 800cc7e:	f7fe fbb8 	bl	800b3f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cc82:	480d      	ldr	r0, [pc, #52]	; (800ccb8 <prvInitialiseTaskLists+0x68>)
 800cc84:	f7fe fbb5 	bl	800b3f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cc88:	480c      	ldr	r0, [pc, #48]	; (800ccbc <prvInitialiseTaskLists+0x6c>)
 800cc8a:	f7fe fbb2 	bl	800b3f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cc8e:	480c      	ldr	r0, [pc, #48]	; (800ccc0 <prvInitialiseTaskLists+0x70>)
 800cc90:	f7fe fbaf 	bl	800b3f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cc94:	480b      	ldr	r0, [pc, #44]	; (800ccc4 <prvInitialiseTaskLists+0x74>)
 800cc96:	f7fe fbac 	bl	800b3f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cc9a:	4b0b      	ldr	r3, [pc, #44]	; (800ccc8 <prvInitialiseTaskLists+0x78>)
 800cc9c:	4a05      	ldr	r2, [pc, #20]	; (800ccb4 <prvInitialiseTaskLists+0x64>)
 800cc9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cca0:	4b0a      	ldr	r3, [pc, #40]	; (800cccc <prvInitialiseTaskLists+0x7c>)
 800cca2:	4a05      	ldr	r2, [pc, #20]	; (800ccb8 <prvInitialiseTaskLists+0x68>)
 800cca4:	601a      	str	r2, [r3, #0]
}
 800cca6:	bf00      	nop
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	20000b20 	.word	0x20000b20
 800ccb4:	20000bac 	.word	0x20000bac
 800ccb8:	20000bc0 	.word	0x20000bc0
 800ccbc:	20000bdc 	.word	0x20000bdc
 800ccc0:	20000bf0 	.word	0x20000bf0
 800ccc4:	20000c08 	.word	0x20000c08
 800ccc8:	20000bd4 	.word	0x20000bd4
 800cccc:	20000bd8 	.word	0x20000bd8

0800ccd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ccd6:	e019      	b.n	800cd0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ccd8:	f000 fbb8 	bl	800d44c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ccdc:	4b10      	ldr	r3, [pc, #64]	; (800cd20 <prvCheckTasksWaitingTermination+0x50>)
 800ccde:	68db      	ldr	r3, [r3, #12]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	3304      	adds	r3, #4
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7fe fc08 	bl	800b4fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ccee:	4b0d      	ldr	r3, [pc, #52]	; (800cd24 <prvCheckTasksWaitingTermination+0x54>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	4a0b      	ldr	r2, [pc, #44]	; (800cd24 <prvCheckTasksWaitingTermination+0x54>)
 800ccf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ccf8:	4b0b      	ldr	r3, [pc, #44]	; (800cd28 <prvCheckTasksWaitingTermination+0x58>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	4a0a      	ldr	r2, [pc, #40]	; (800cd28 <prvCheckTasksWaitingTermination+0x58>)
 800cd00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cd02:	f000 fbd3 	bl	800d4ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 f810 	bl	800cd2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd0c:	4b06      	ldr	r3, [pc, #24]	; (800cd28 <prvCheckTasksWaitingTermination+0x58>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1e1      	bne.n	800ccd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cd14:	bf00      	nop
 800cd16:	bf00      	nop
 800cd18:	3708      	adds	r7, #8
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	20000bf0 	.word	0x20000bf0
 800cd24:	20000c1c 	.word	0x20000c1c
 800cd28:	20000c04 	.word	0x20000c04

0800cd2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	334c      	adds	r3, #76	; 0x4c
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f000 ff47 	bl	800dbcc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d108      	bne.n	800cd5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 fd41 	bl	800d7d4 <vPortFree>
				vPortFree( pxTCB );
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 fd3e 	bl	800d7d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cd58:	e018      	b.n	800cd8c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d103      	bne.n	800cd6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 fd35 	bl	800d7d4 <vPortFree>
	}
 800cd6a:	e00f      	b.n	800cd8c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d00a      	beq.n	800cd8c <prvDeleteTCB+0x60>
	__asm volatile
 800cd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7a:	f383 8811 	msr	BASEPRI, r3
 800cd7e:	f3bf 8f6f 	isb	sy
 800cd82:	f3bf 8f4f 	dsb	sy
 800cd86:	60fb      	str	r3, [r7, #12]
}
 800cd88:	bf00      	nop
 800cd8a:	e7fe      	b.n	800cd8a <prvDeleteTCB+0x5e>
	}
 800cd8c:	bf00      	nop
 800cd8e:	3710      	adds	r7, #16
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd9a:	4b0e      	ldr	r3, [pc, #56]	; (800cdd4 <prvResetNextTaskUnblockTime+0x40>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <prvResetNextTaskUnblockTime+0x14>
 800cda4:	2301      	movs	r3, #1
 800cda6:	e000      	b.n	800cdaa <prvResetNextTaskUnblockTime+0x16>
 800cda8:	2300      	movs	r3, #0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d004      	beq.n	800cdb8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cdae:	4b0a      	ldr	r3, [pc, #40]	; (800cdd8 <prvResetNextTaskUnblockTime+0x44>)
 800cdb0:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cdb6:	e008      	b.n	800cdca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800cdb8:	4b06      	ldr	r3, [pc, #24]	; (800cdd4 <prvResetNextTaskUnblockTime+0x40>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	68db      	ldr	r3, [r3, #12]
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	4a04      	ldr	r2, [pc, #16]	; (800cdd8 <prvResetNextTaskUnblockTime+0x44>)
 800cdc8:	6013      	str	r3, [r2, #0]
}
 800cdca:	bf00      	nop
 800cdcc:	370c      	adds	r7, #12
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bc80      	pop	{r7}
 800cdd2:	4770      	bx	lr
 800cdd4:	20000bd4 	.word	0x20000bd4
 800cdd8:	20000c3c 	.word	0x20000c3c

0800cddc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cde2:	4b0b      	ldr	r3, [pc, #44]	; (800ce10 <xTaskGetSchedulerState+0x34>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d102      	bne.n	800cdf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cdea:	2301      	movs	r3, #1
 800cdec:	607b      	str	r3, [r7, #4]
 800cdee:	e008      	b.n	800ce02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdf0:	4b08      	ldr	r3, [pc, #32]	; (800ce14 <xTaskGetSchedulerState+0x38>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d102      	bne.n	800cdfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cdf8:	2302      	movs	r3, #2
 800cdfa:	607b      	str	r3, [r7, #4]
 800cdfc:	e001      	b.n	800ce02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce02:	687b      	ldr	r3, [r7, #4]
	}
 800ce04:	4618      	mov	r0, r3
 800ce06:	370c      	adds	r7, #12
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bc80      	pop	{r7}
 800ce0c:	4770      	bx	lr
 800ce0e:	bf00      	nop
 800ce10:	20000c28 	.word	0x20000c28
 800ce14:	20000c44 	.word	0x20000c44

0800ce18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ce24:	2300      	movs	r3, #0
 800ce26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d06e      	beq.n	800cf0c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce32:	4b39      	ldr	r3, [pc, #228]	; (800cf18 <xTaskPriorityInherit+0x100>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d25e      	bcs.n	800cefa <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	699b      	ldr	r3, [r3, #24]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	db06      	blt.n	800ce52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce44:	4b34      	ldr	r3, [pc, #208]	; (800cf18 <xTaskPriorityInherit+0x100>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce4a:	f1c3 0207 	rsb	r2, r3, #7
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	6959      	ldr	r1, [r3, #20]
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	4413      	add	r3, r2
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	4a2e      	ldr	r2, [pc, #184]	; (800cf1c <xTaskPriorityInherit+0x104>)
 800ce64:	4413      	add	r3, r2
 800ce66:	4299      	cmp	r1, r3
 800ce68:	d101      	bne.n	800ce6e <xTaskPriorityInherit+0x56>
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e000      	b.n	800ce70 <xTaskPriorityInherit+0x58>
 800ce6e:	2300      	movs	r3, #0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d03a      	beq.n	800ceea <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	3304      	adds	r3, #4
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7fe fb40 	bl	800b4fe <uxListRemove>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d115      	bne.n	800ceb0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce88:	4924      	ldr	r1, [pc, #144]	; (800cf1c <xTaskPriorityInherit+0x104>)
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	4413      	add	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	440b      	add	r3, r1
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d10a      	bne.n	800ceb0 <xTaskPriorityInherit+0x98>
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9e:	2201      	movs	r2, #1
 800cea0:	fa02 f303 	lsl.w	r3, r2, r3
 800cea4:	43da      	mvns	r2, r3
 800cea6:	4b1e      	ldr	r3, [pc, #120]	; (800cf20 <xTaskPriorityInherit+0x108>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4013      	ands	r3, r2
 800ceac:	4a1c      	ldr	r2, [pc, #112]	; (800cf20 <xTaskPriorityInherit+0x108>)
 800ceae:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ceb0:	4b19      	ldr	r3, [pc, #100]	; (800cf18 <xTaskPriorityInherit+0x100>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebe:	2201      	movs	r2, #1
 800cec0:	409a      	lsls	r2, r3
 800cec2:	4b17      	ldr	r3, [pc, #92]	; (800cf20 <xTaskPriorityInherit+0x108>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4313      	orrs	r3, r2
 800cec8:	4a15      	ldr	r2, [pc, #84]	; (800cf20 <xTaskPriorityInherit+0x108>)
 800ceca:	6013      	str	r3, [r2, #0]
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced0:	4613      	mov	r3, r2
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	4413      	add	r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	4a10      	ldr	r2, [pc, #64]	; (800cf1c <xTaskPriorityInherit+0x104>)
 800ceda:	441a      	add	r2, r3
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	3304      	adds	r3, #4
 800cee0:	4619      	mov	r1, r3
 800cee2:	4610      	mov	r0, r2
 800cee4:	f7fe fab0 	bl	800b448 <vListInsertEnd>
 800cee8:	e004      	b.n	800cef4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ceea:	4b0b      	ldr	r3, [pc, #44]	; (800cf18 <xTaskPriorityInherit+0x100>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cef4:	2301      	movs	r3, #1
 800cef6:	60fb      	str	r3, [r7, #12]
 800cef8:	e008      	b.n	800cf0c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cefe:	4b06      	ldr	r3, [pc, #24]	; (800cf18 <xTaskPriorityInherit+0x100>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d201      	bcs.n	800cf0c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
	}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	20000b1c 	.word	0x20000b1c
 800cf1c:	20000b20 	.word	0x20000b20
 800cf20:	20000c24 	.word	0x20000c24

0800cf24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b086      	sub	sp, #24
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf30:	2300      	movs	r3, #0
 800cf32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d06e      	beq.n	800d018 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf3a:	4b3a      	ldr	r3, [pc, #232]	; (800d024 <xTaskPriorityDisinherit+0x100>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	693a      	ldr	r2, [r7, #16]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d00a      	beq.n	800cf5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf48:	f383 8811 	msr	BASEPRI, r3
 800cf4c:	f3bf 8f6f 	isb	sy
 800cf50:	f3bf 8f4f 	dsb	sy
 800cf54:	60fb      	str	r3, [r7, #12]
}
 800cf56:	bf00      	nop
 800cf58:	e7fe      	b.n	800cf58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d10a      	bne.n	800cf78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf66:	f383 8811 	msr	BASEPRI, r3
 800cf6a:	f3bf 8f6f 	isb	sy
 800cf6e:	f3bf 8f4f 	dsb	sy
 800cf72:	60bb      	str	r3, [r7, #8]
}
 800cf74:	bf00      	nop
 800cf76:	e7fe      	b.n	800cf76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf7c:	1e5a      	subs	r2, r3, #1
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d044      	beq.n	800d018 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d140      	bne.n	800d018 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	3304      	adds	r3, #4
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fe faaf 	bl	800b4fe <uxListRemove>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d115      	bne.n	800cfd2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfaa:	491f      	ldr	r1, [pc, #124]	; (800d028 <xTaskPriorityDisinherit+0x104>)
 800cfac:	4613      	mov	r3, r2
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	4413      	add	r3, r2
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	440b      	add	r3, r1
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10a      	bne.n	800cfd2 <xTaskPriorityDisinherit+0xae>
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	fa02 f303 	lsl.w	r3, r2, r3
 800cfc6:	43da      	mvns	r2, r3
 800cfc8:	4b18      	ldr	r3, [pc, #96]	; (800d02c <xTaskPriorityDisinherit+0x108>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4013      	ands	r3, r2
 800cfce:	4a17      	ldr	r2, [pc, #92]	; (800d02c <xTaskPriorityDisinherit+0x108>)
 800cfd0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfde:	f1c3 0207 	rsb	r2, r3, #7
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfea:	2201      	movs	r2, #1
 800cfec:	409a      	lsls	r2, r3
 800cfee:	4b0f      	ldr	r3, [pc, #60]	; (800d02c <xTaskPriorityDisinherit+0x108>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4313      	orrs	r3, r2
 800cff4:	4a0d      	ldr	r2, [pc, #52]	; (800d02c <xTaskPriorityDisinherit+0x108>)
 800cff6:	6013      	str	r3, [r2, #0]
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cffc:	4613      	mov	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4413      	add	r3, r2
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	4a08      	ldr	r2, [pc, #32]	; (800d028 <xTaskPriorityDisinherit+0x104>)
 800d006:	441a      	add	r2, r3
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	3304      	adds	r3, #4
 800d00c:	4619      	mov	r1, r3
 800d00e:	4610      	mov	r0, r2
 800d010:	f7fe fa1a 	bl	800b448 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d014:	2301      	movs	r3, #1
 800d016:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d018:	697b      	ldr	r3, [r7, #20]
	}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3718      	adds	r7, #24
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	20000b1c 	.word	0x20000b1c
 800d028:	20000b20 	.word	0x20000b20
 800d02c:	20000c24 	.word	0x20000c24

0800d030 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d030:	b580      	push	{r7, lr}
 800d032:	b088      	sub	sp, #32
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d03e:	2301      	movs	r3, #1
 800d040:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2b00      	cmp	r3, #0
 800d046:	f000 8088 	beq.w	800d15a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d10a      	bne.n	800d068 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d056:	f383 8811 	msr	BASEPRI, r3
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	60fb      	str	r3, [r7, #12]
}
 800d064:	bf00      	nop
 800d066:	e7fe      	b.n	800d066 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d06c:	683a      	ldr	r2, [r7, #0]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d902      	bls.n	800d078 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	61fb      	str	r3, [r7, #28]
 800d076:	e002      	b.n	800d07e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d07c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d082:	69fa      	ldr	r2, [r7, #28]
 800d084:	429a      	cmp	r2, r3
 800d086:	d068      	beq.n	800d15a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d08c:	697a      	ldr	r2, [r7, #20]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d163      	bne.n	800d15a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d092:	4b34      	ldr	r3, [pc, #208]	; (800d164 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	69ba      	ldr	r2, [r7, #24]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d10a      	bne.n	800d0b2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	60bb      	str	r3, [r7, #8]
}
 800d0ae:	bf00      	nop
 800d0b0:	e7fe      	b.n	800d0b0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	69fa      	ldr	r2, [r7, #28]
 800d0bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	699b      	ldr	r3, [r3, #24]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	db04      	blt.n	800d0d0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	f1c3 0207 	rsb	r2, r3, #7
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	6959      	ldr	r1, [r3, #20]
 800d0d4:	693a      	ldr	r2, [r7, #16]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	4413      	add	r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	4a22      	ldr	r2, [pc, #136]	; (800d168 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d0e0:	4413      	add	r3, r2
 800d0e2:	4299      	cmp	r1, r3
 800d0e4:	d101      	bne.n	800d0ea <vTaskPriorityDisinheritAfterTimeout+0xba>
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	e000      	b.n	800d0ec <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d034      	beq.n	800d15a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7fe fa02 	bl	800b4fe <uxListRemove>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d115      	bne.n	800d12c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d104:	4918      	ldr	r1, [pc, #96]	; (800d168 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d106:	4613      	mov	r3, r2
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	4413      	add	r3, r2
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	440b      	add	r3, r1
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d10a      	bne.n	800d12c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d11a:	2201      	movs	r2, #1
 800d11c:	fa02 f303 	lsl.w	r3, r2, r3
 800d120:	43da      	mvns	r2, r3
 800d122:	4b12      	ldr	r3, [pc, #72]	; (800d16c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4013      	ands	r3, r2
 800d128:	4a10      	ldr	r2, [pc, #64]	; (800d16c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d12a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d12c:	69bb      	ldr	r3, [r7, #24]
 800d12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d130:	2201      	movs	r2, #1
 800d132:	409a      	lsls	r2, r3
 800d134:	4b0d      	ldr	r3, [pc, #52]	; (800d16c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4313      	orrs	r3, r2
 800d13a:	4a0c      	ldr	r2, [pc, #48]	; (800d16c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d13c:	6013      	str	r3, [r2, #0]
 800d13e:	69bb      	ldr	r3, [r7, #24]
 800d140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d142:	4613      	mov	r3, r2
 800d144:	009b      	lsls	r3, r3, #2
 800d146:	4413      	add	r3, r2
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	4a07      	ldr	r2, [pc, #28]	; (800d168 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d14c:	441a      	add	r2, r3
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	3304      	adds	r3, #4
 800d152:	4619      	mov	r1, r3
 800d154:	4610      	mov	r0, r2
 800d156:	f7fe f977 	bl	800b448 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d15a:	bf00      	nop
 800d15c:	3720      	adds	r7, #32
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
 800d162:	bf00      	nop
 800d164:	20000b1c 	.word	0x20000b1c
 800d168:	20000b20 	.word	0x20000b20
 800d16c:	20000c24 	.word	0x20000c24

0800d170 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800d170:	b480      	push	{r7}
 800d172:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d174:	4b07      	ldr	r3, [pc, #28]	; (800d194 <pvTaskIncrementMutexHeldCount+0x24>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d004      	beq.n	800d186 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d17c:	4b05      	ldr	r3, [pc, #20]	; (800d194 <pvTaskIncrementMutexHeldCount+0x24>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d182:	3201      	adds	r2, #1
 800d184:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d186:	4b03      	ldr	r3, [pc, #12]	; (800d194 <pvTaskIncrementMutexHeldCount+0x24>)
 800d188:	681b      	ldr	r3, [r3, #0]
	}
 800d18a:	4618      	mov	r0, r3
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bc80      	pop	{r7}
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	20000b1c 	.word	0x20000b1c

0800d198 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d1a2:	4b29      	ldr	r3, [pc, #164]	; (800d248 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1a8:	4b28      	ldr	r3, [pc, #160]	; (800d24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7fe f9a5 	bl	800b4fe <uxListRemove>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d10b      	bne.n	800d1d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800d1ba:	4b24      	ldr	r3, [pc, #144]	; (800d24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d1c6:	43da      	mvns	r2, r3
 800d1c8:	4b21      	ldr	r3, [pc, #132]	; (800d250 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4013      	ands	r3, r2
 800d1ce:	4a20      	ldr	r2, [pc, #128]	; (800d250 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d1d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1d8:	d10a      	bne.n	800d1f0 <prvAddCurrentTaskToDelayedList+0x58>
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d007      	beq.n	800d1f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1e0:	4b1a      	ldr	r3, [pc, #104]	; (800d24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	3304      	adds	r3, #4
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	481a      	ldr	r0, [pc, #104]	; (800d254 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d1ea:	f7fe f92d 	bl	800b448 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d1ee:	e026      	b.n	800d23e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d1f0:	68fa      	ldr	r2, [r7, #12]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	4413      	add	r3, r2
 800d1f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d1f8:	4b14      	ldr	r3, [pc, #80]	; (800d24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	68ba      	ldr	r2, [r7, #8]
 800d1fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d200:	68ba      	ldr	r2, [r7, #8]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	429a      	cmp	r2, r3
 800d206:	d209      	bcs.n	800d21c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d208:	4b13      	ldr	r3, [pc, #76]	; (800d258 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	4b0f      	ldr	r3, [pc, #60]	; (800d24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	3304      	adds	r3, #4
 800d212:	4619      	mov	r1, r3
 800d214:	4610      	mov	r0, r2
 800d216:	f7fe f93a 	bl	800b48e <vListInsert>
}
 800d21a:	e010      	b.n	800d23e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d21c:	4b0f      	ldr	r3, [pc, #60]	; (800d25c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	4b0a      	ldr	r3, [pc, #40]	; (800d24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	3304      	adds	r3, #4
 800d226:	4619      	mov	r1, r3
 800d228:	4610      	mov	r0, r2
 800d22a:	f7fe f930 	bl	800b48e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d22e:	4b0c      	ldr	r3, [pc, #48]	; (800d260 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	429a      	cmp	r2, r3
 800d236:	d202      	bcs.n	800d23e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d238:	4a09      	ldr	r2, [pc, #36]	; (800d260 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	6013      	str	r3, [r2, #0]
}
 800d23e:	bf00      	nop
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	20000c20 	.word	0x20000c20
 800d24c:	20000b1c 	.word	0x20000b1c
 800d250:	20000c24 	.word	0x20000c24
 800d254:	20000c08 	.word	0x20000c08
 800d258:	20000bd8 	.word	0x20000bd8
 800d25c:	20000bd4 	.word	0x20000bd4
 800d260:	20000c3c 	.word	0x20000c3c

0800d264 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d264:	b480      	push	{r7}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	3b04      	subs	r3, #4
 800d274:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d27c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	3b04      	subs	r3, #4
 800d282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	f023 0201 	bic.w	r2, r3, #1
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	3b04      	subs	r3, #4
 800d292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d294:	4a08      	ldr	r2, [pc, #32]	; (800d2b8 <pxPortInitialiseStack+0x54>)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	3b14      	subs	r3, #20
 800d29e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	3b20      	subs	r3, #32
 800d2aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3714      	adds	r7, #20
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bc80      	pop	{r7}
 800d2b6:	4770      	bx	lr
 800d2b8:	0800d2bd 	.word	0x0800d2bd

0800d2bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d2c6:	4b12      	ldr	r3, [pc, #72]	; (800d310 <prvTaskExitError+0x54>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ce:	d00a      	beq.n	800d2e6 <prvTaskExitError+0x2a>
	__asm volatile
 800d2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d4:	f383 8811 	msr	BASEPRI, r3
 800d2d8:	f3bf 8f6f 	isb	sy
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	60fb      	str	r3, [r7, #12]
}
 800d2e2:	bf00      	nop
 800d2e4:	e7fe      	b.n	800d2e4 <prvTaskExitError+0x28>
	__asm volatile
 800d2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ea:	f383 8811 	msr	BASEPRI, r3
 800d2ee:	f3bf 8f6f 	isb	sy
 800d2f2:	f3bf 8f4f 	dsb	sy
 800d2f6:	60bb      	str	r3, [r7, #8]
}
 800d2f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d2fa:	bf00      	nop
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d0fc      	beq.n	800d2fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d302:	bf00      	nop
 800d304:	bf00      	nop
 800d306:	3714      	adds	r7, #20
 800d308:	46bd      	mov	sp, r7
 800d30a:	bc80      	pop	{r7}
 800d30c:	4770      	bx	lr
 800d30e:	bf00      	nop
 800d310:	20000044 	.word	0x20000044
	...

0800d320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d320:	4b07      	ldr	r3, [pc, #28]	; (800d340 <pxCurrentTCBConst2>)
 800d322:	6819      	ldr	r1, [r3, #0]
 800d324:	6808      	ldr	r0, [r1, #0]
 800d326:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d32a:	f380 8809 	msr	PSP, r0
 800d32e:	f3bf 8f6f 	isb	sy
 800d332:	f04f 0000 	mov.w	r0, #0
 800d336:	f380 8811 	msr	BASEPRI, r0
 800d33a:	f04e 0e0d 	orr.w	lr, lr, #13
 800d33e:	4770      	bx	lr

0800d340 <pxCurrentTCBConst2>:
 800d340:	20000b1c 	.word	0x20000b1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d344:	bf00      	nop
 800d346:	bf00      	nop

0800d348 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800d348:	4806      	ldr	r0, [pc, #24]	; (800d364 <prvPortStartFirstTask+0x1c>)
 800d34a:	6800      	ldr	r0, [r0, #0]
 800d34c:	6800      	ldr	r0, [r0, #0]
 800d34e:	f380 8808 	msr	MSP, r0
 800d352:	b662      	cpsie	i
 800d354:	b661      	cpsie	f
 800d356:	f3bf 8f4f 	dsb	sy
 800d35a:	f3bf 8f6f 	isb	sy
 800d35e:	df00      	svc	0
 800d360:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d362:	bf00      	nop
 800d364:	e000ed08 	.word	0xe000ed08

0800d368 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d36e:	4b32      	ldr	r3, [pc, #200]	; (800d438 <xPortStartScheduler+0xd0>)
 800d370:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	b2db      	uxtb	r3, r3
 800d378:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	22ff      	movs	r2, #255	; 0xff
 800d37e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	b2db      	uxtb	r3, r3
 800d386:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d388:	78fb      	ldrb	r3, [r7, #3]
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d390:	b2da      	uxtb	r2, r3
 800d392:	4b2a      	ldr	r3, [pc, #168]	; (800d43c <xPortStartScheduler+0xd4>)
 800d394:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d396:	4b2a      	ldr	r3, [pc, #168]	; (800d440 <xPortStartScheduler+0xd8>)
 800d398:	2207      	movs	r2, #7
 800d39a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d39c:	e009      	b.n	800d3b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d39e:	4b28      	ldr	r3, [pc, #160]	; (800d440 <xPortStartScheduler+0xd8>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	3b01      	subs	r3, #1
 800d3a4:	4a26      	ldr	r2, [pc, #152]	; (800d440 <xPortStartScheduler+0xd8>)
 800d3a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d3a8:	78fb      	ldrb	r3, [r7, #3]
 800d3aa:	b2db      	uxtb	r3, r3
 800d3ac:	005b      	lsls	r3, r3, #1
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3b2:	78fb      	ldrb	r3, [r7, #3]
 800d3b4:	b2db      	uxtb	r3, r3
 800d3b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3ba:	2b80      	cmp	r3, #128	; 0x80
 800d3bc:	d0ef      	beq.n	800d39e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d3be:	4b20      	ldr	r3, [pc, #128]	; (800d440 <xPortStartScheduler+0xd8>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f1c3 0307 	rsb	r3, r3, #7
 800d3c6:	2b04      	cmp	r3, #4
 800d3c8:	d00a      	beq.n	800d3e0 <xPortStartScheduler+0x78>
	__asm volatile
 800d3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ce:	f383 8811 	msr	BASEPRI, r3
 800d3d2:	f3bf 8f6f 	isb	sy
 800d3d6:	f3bf 8f4f 	dsb	sy
 800d3da:	60bb      	str	r3, [r7, #8]
}
 800d3dc:	bf00      	nop
 800d3de:	e7fe      	b.n	800d3de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d3e0:	4b17      	ldr	r3, [pc, #92]	; (800d440 <xPortStartScheduler+0xd8>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	021b      	lsls	r3, r3, #8
 800d3e6:	4a16      	ldr	r2, [pc, #88]	; (800d440 <xPortStartScheduler+0xd8>)
 800d3e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d3ea:	4b15      	ldr	r3, [pc, #84]	; (800d440 <xPortStartScheduler+0xd8>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d3f2:	4a13      	ldr	r2, [pc, #76]	; (800d440 <xPortStartScheduler+0xd8>)
 800d3f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d3fe:	4b11      	ldr	r3, [pc, #68]	; (800d444 <xPortStartScheduler+0xdc>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a10      	ldr	r2, [pc, #64]	; (800d444 <xPortStartScheduler+0xdc>)
 800d404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d408:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d40a:	4b0e      	ldr	r3, [pc, #56]	; (800d444 <xPortStartScheduler+0xdc>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	4a0d      	ldr	r2, [pc, #52]	; (800d444 <xPortStartScheduler+0xdc>)
 800d410:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d414:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d416:	f000 f8b9 	bl	800d58c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d41a:	4b0b      	ldr	r3, [pc, #44]	; (800d448 <xPortStartScheduler+0xe0>)
 800d41c:	2200      	movs	r2, #0
 800d41e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d420:	f7ff ff92 	bl	800d348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d424:	f7ff fa90 	bl	800c948 <vTaskSwitchContext>
	prvTaskExitError();
 800d428:	f7ff ff48 	bl	800d2bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	e000e400 	.word	0xe000e400
 800d43c:	20000c48 	.word	0x20000c48
 800d440:	20000c4c 	.word	0x20000c4c
 800d444:	e000ed20 	.word	0xe000ed20
 800d448:	20000044 	.word	0x20000044

0800d44c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d44c:	b480      	push	{r7}
 800d44e:	b083      	sub	sp, #12
 800d450:	af00      	add	r7, sp, #0
	__asm volatile
 800d452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d456:	f383 8811 	msr	BASEPRI, r3
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	607b      	str	r3, [r7, #4]
}
 800d464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d466:	4b0f      	ldr	r3, [pc, #60]	; (800d4a4 <vPortEnterCritical+0x58>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	3301      	adds	r3, #1
 800d46c:	4a0d      	ldr	r2, [pc, #52]	; (800d4a4 <vPortEnterCritical+0x58>)
 800d46e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d470:	4b0c      	ldr	r3, [pc, #48]	; (800d4a4 <vPortEnterCritical+0x58>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2b01      	cmp	r3, #1
 800d476:	d10f      	bne.n	800d498 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d478:	4b0b      	ldr	r3, [pc, #44]	; (800d4a8 <vPortEnterCritical+0x5c>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d00a      	beq.n	800d498 <vPortEnterCritical+0x4c>
	__asm volatile
 800d482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d486:	f383 8811 	msr	BASEPRI, r3
 800d48a:	f3bf 8f6f 	isb	sy
 800d48e:	f3bf 8f4f 	dsb	sy
 800d492:	603b      	str	r3, [r7, #0]
}
 800d494:	bf00      	nop
 800d496:	e7fe      	b.n	800d496 <vPortEnterCritical+0x4a>
	}
}
 800d498:	bf00      	nop
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bc80      	pop	{r7}
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	20000044 	.word	0x20000044
 800d4a8:	e000ed04 	.word	0xe000ed04

0800d4ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d4b2:	4b11      	ldr	r3, [pc, #68]	; (800d4f8 <vPortExitCritical+0x4c>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d10a      	bne.n	800d4d0 <vPortExitCritical+0x24>
	__asm volatile
 800d4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	607b      	str	r3, [r7, #4]
}
 800d4cc:	bf00      	nop
 800d4ce:	e7fe      	b.n	800d4ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d4d0:	4b09      	ldr	r3, [pc, #36]	; (800d4f8 <vPortExitCritical+0x4c>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	4a08      	ldr	r2, [pc, #32]	; (800d4f8 <vPortExitCritical+0x4c>)
 800d4d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d4da:	4b07      	ldr	r3, [pc, #28]	; (800d4f8 <vPortExitCritical+0x4c>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d105      	bne.n	800d4ee <vPortExitCritical+0x42>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	f383 8811 	msr	BASEPRI, r3
}
 800d4ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d4ee:	bf00      	nop
 800d4f0:	370c      	adds	r7, #12
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bc80      	pop	{r7}
 800d4f6:	4770      	bx	lr
 800d4f8:	20000044 	.word	0x20000044
 800d4fc:	00000000 	.word	0x00000000

0800d500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d500:	f3ef 8009 	mrs	r0, PSP
 800d504:	f3bf 8f6f 	isb	sy
 800d508:	4b0d      	ldr	r3, [pc, #52]	; (800d540 <pxCurrentTCBConst>)
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d510:	6010      	str	r0, [r2, #0]
 800d512:	e92d 4008 	stmdb	sp!, {r3, lr}
 800d516:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d51a:	f380 8811 	msr	BASEPRI, r0
 800d51e:	f7ff fa13 	bl	800c948 <vTaskSwitchContext>
 800d522:	f04f 0000 	mov.w	r0, #0
 800d526:	f380 8811 	msr	BASEPRI, r0
 800d52a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d52e:	6819      	ldr	r1, [r3, #0]
 800d530:	6808      	ldr	r0, [r1, #0]
 800d532:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d536:	f380 8809 	msr	PSP, r0
 800d53a:	f3bf 8f6f 	isb	sy
 800d53e:	4770      	bx	lr

0800d540 <pxCurrentTCBConst>:
 800d540:	20000b1c 	.word	0x20000b1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d544:	bf00      	nop
 800d546:	bf00      	nop

0800d548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
	__asm volatile
 800d54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d552:	f383 8811 	msr	BASEPRI, r3
 800d556:	f3bf 8f6f 	isb	sy
 800d55a:	f3bf 8f4f 	dsb	sy
 800d55e:	607b      	str	r3, [r7, #4]
}
 800d560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d562:	f7ff f933 	bl	800c7cc <xTaskIncrementTick>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d003      	beq.n	800d574 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d56c:	4b06      	ldr	r3, [pc, #24]	; (800d588 <SysTick_Handler+0x40>)
 800d56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	2300      	movs	r3, #0
 800d576:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	f383 8811 	msr	BASEPRI, r3
}
 800d57e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d580:	bf00      	nop
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	e000ed04 	.word	0xe000ed04

0800d58c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d58c:	b480      	push	{r7}
 800d58e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d590:	4b0a      	ldr	r3, [pc, #40]	; (800d5bc <vPortSetupTimerInterrupt+0x30>)
 800d592:	2200      	movs	r2, #0
 800d594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d596:	4b0a      	ldr	r3, [pc, #40]	; (800d5c0 <vPortSetupTimerInterrupt+0x34>)
 800d598:	2200      	movs	r2, #0
 800d59a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d59c:	4b09      	ldr	r3, [pc, #36]	; (800d5c4 <vPortSetupTimerInterrupt+0x38>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a09      	ldr	r2, [pc, #36]	; (800d5c8 <vPortSetupTimerInterrupt+0x3c>)
 800d5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5a6:	099b      	lsrs	r3, r3, #6
 800d5a8:	4a08      	ldr	r2, [pc, #32]	; (800d5cc <vPortSetupTimerInterrupt+0x40>)
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d5ae:	4b03      	ldr	r3, [pc, #12]	; (800d5bc <vPortSetupTimerInterrupt+0x30>)
 800d5b0:	2207      	movs	r2, #7
 800d5b2:	601a      	str	r2, [r3, #0]
}
 800d5b4:	bf00      	nop
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bc80      	pop	{r7}
 800d5ba:	4770      	bx	lr
 800d5bc:	e000e010 	.word	0xe000e010
 800d5c0:	e000e018 	.word	0xe000e018
 800d5c4:	20000018 	.word	0x20000018
 800d5c8:	10624dd3 	.word	0x10624dd3
 800d5cc:	e000e014 	.word	0xe000e014

0800d5d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b085      	sub	sp, #20
 800d5d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d5d6:	f3ef 8305 	mrs	r3, IPSR
 800d5da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2b0f      	cmp	r3, #15
 800d5e0:	d914      	bls.n	800d60c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d5e2:	4a16      	ldr	r2, [pc, #88]	; (800d63c <vPortValidateInterruptPriority+0x6c>)
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d5ec:	4b14      	ldr	r3, [pc, #80]	; (800d640 <vPortValidateInterruptPriority+0x70>)
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	7afa      	ldrb	r2, [r7, #11]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d20a      	bcs.n	800d60c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fa:	f383 8811 	msr	BASEPRI, r3
 800d5fe:	f3bf 8f6f 	isb	sy
 800d602:	f3bf 8f4f 	dsb	sy
 800d606:	607b      	str	r3, [r7, #4]
}
 800d608:	bf00      	nop
 800d60a:	e7fe      	b.n	800d60a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d60c:	4b0d      	ldr	r3, [pc, #52]	; (800d644 <vPortValidateInterruptPriority+0x74>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d614:	4b0c      	ldr	r3, [pc, #48]	; (800d648 <vPortValidateInterruptPriority+0x78>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d90a      	bls.n	800d632 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d620:	f383 8811 	msr	BASEPRI, r3
 800d624:	f3bf 8f6f 	isb	sy
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	603b      	str	r3, [r7, #0]
}
 800d62e:	bf00      	nop
 800d630:	e7fe      	b.n	800d630 <vPortValidateInterruptPriority+0x60>
	}
 800d632:	bf00      	nop
 800d634:	3714      	adds	r7, #20
 800d636:	46bd      	mov	sp, r7
 800d638:	bc80      	pop	{r7}
 800d63a:	4770      	bx	lr
 800d63c:	e000e3f0 	.word	0xe000e3f0
 800d640:	20000c48 	.word	0x20000c48
 800d644:	e000ed0c 	.word	0xe000ed0c
 800d648:	20000c4c 	.word	0x20000c4c

0800d64c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b08a      	sub	sp, #40	; 0x28
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d654:	2300      	movs	r3, #0
 800d656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d658:	f7ff f800 	bl	800c65c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d65c:	4b58      	ldr	r3, [pc, #352]	; (800d7c0 <pvPortMalloc+0x174>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d101      	bne.n	800d668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d664:	f000 f910 	bl	800d888 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d668:	4b56      	ldr	r3, [pc, #344]	; (800d7c4 <pvPortMalloc+0x178>)
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	4013      	ands	r3, r2
 800d670:	2b00      	cmp	r3, #0
 800d672:	f040 808e 	bne.w	800d792 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d01d      	beq.n	800d6b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d67c:	2208      	movs	r2, #8
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	4413      	add	r3, r2
 800d682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f003 0307 	and.w	r3, r3, #7
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d014      	beq.n	800d6b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f023 0307 	bic.w	r3, r3, #7
 800d694:	3308      	adds	r3, #8
 800d696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f003 0307 	and.w	r3, r3, #7
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00a      	beq.n	800d6b8 <pvPortMalloc+0x6c>
	__asm volatile
 800d6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a6:	f383 8811 	msr	BASEPRI, r3
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	617b      	str	r3, [r7, #20]
}
 800d6b4:	bf00      	nop
 800d6b6:	e7fe      	b.n	800d6b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d069      	beq.n	800d792 <pvPortMalloc+0x146>
 800d6be:	4b42      	ldr	r3, [pc, #264]	; (800d7c8 <pvPortMalloc+0x17c>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d864      	bhi.n	800d792 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d6c8:	4b40      	ldr	r3, [pc, #256]	; (800d7cc <pvPortMalloc+0x180>)
 800d6ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d6cc:	4b3f      	ldr	r3, [pc, #252]	; (800d7cc <pvPortMalloc+0x180>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6d2:	e004      	b.n	800d6de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d903      	bls.n	800d6f0 <pvPortMalloc+0xa4>
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d1f1      	bne.n	800d6d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d6f0:	4b33      	ldr	r3, [pc, #204]	; (800d7c0 <pvPortMalloc+0x174>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d04b      	beq.n	800d792 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d6fa:	6a3b      	ldr	r3, [r7, #32]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2208      	movs	r2, #8
 800d700:	4413      	add	r3, r2
 800d702:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	6a3b      	ldr	r3, [r7, #32]
 800d70a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70e:	685a      	ldr	r2, [r3, #4]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	1ad2      	subs	r2, r2, r3
 800d714:	2308      	movs	r3, #8
 800d716:	005b      	lsls	r3, r3, #1
 800d718:	429a      	cmp	r2, r3
 800d71a:	d91f      	bls.n	800d75c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d71c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4413      	add	r3, r2
 800d722:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d724:	69bb      	ldr	r3, [r7, #24]
 800d726:	f003 0307 	and.w	r3, r3, #7
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00a      	beq.n	800d744 <pvPortMalloc+0xf8>
	__asm volatile
 800d72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d732:	f383 8811 	msr	BASEPRI, r3
 800d736:	f3bf 8f6f 	isb	sy
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	613b      	str	r3, [r7, #16]
}
 800d740:	bf00      	nop
 800d742:	e7fe      	b.n	800d742 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d746:	685a      	ldr	r2, [r3, #4]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	1ad2      	subs	r2, r2, r3
 800d74c:	69bb      	ldr	r3, [r7, #24]
 800d74e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d756:	69b8      	ldr	r0, [r7, #24]
 800d758:	f000 f8f8 	bl	800d94c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d75c:	4b1a      	ldr	r3, [pc, #104]	; (800d7c8 <pvPortMalloc+0x17c>)
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	1ad3      	subs	r3, r2, r3
 800d766:	4a18      	ldr	r2, [pc, #96]	; (800d7c8 <pvPortMalloc+0x17c>)
 800d768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d76a:	4b17      	ldr	r3, [pc, #92]	; (800d7c8 <pvPortMalloc+0x17c>)
 800d76c:	681a      	ldr	r2, [r3, #0]
 800d76e:	4b18      	ldr	r3, [pc, #96]	; (800d7d0 <pvPortMalloc+0x184>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	429a      	cmp	r2, r3
 800d774:	d203      	bcs.n	800d77e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d776:	4b14      	ldr	r3, [pc, #80]	; (800d7c8 <pvPortMalloc+0x17c>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a15      	ldr	r2, [pc, #84]	; (800d7d0 <pvPortMalloc+0x184>)
 800d77c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d780:	685a      	ldr	r2, [r3, #4]
 800d782:	4b10      	ldr	r3, [pc, #64]	; (800d7c4 <pvPortMalloc+0x178>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	431a      	orrs	r2, r3
 800d788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78e:	2200      	movs	r2, #0
 800d790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d792:	f7fe ff71 	bl	800c678 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d796:	69fb      	ldr	r3, [r7, #28]
 800d798:	f003 0307 	and.w	r3, r3, #7
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d00a      	beq.n	800d7b6 <pvPortMalloc+0x16a>
	__asm volatile
 800d7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a4:	f383 8811 	msr	BASEPRI, r3
 800d7a8:	f3bf 8f6f 	isb	sy
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	60fb      	str	r3, [r7, #12]
}
 800d7b2:	bf00      	nop
 800d7b4:	e7fe      	b.n	800d7b4 <pvPortMalloc+0x168>
	return pvReturn;
 800d7b6:	69fb      	ldr	r3, [r7, #28]
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3728      	adds	r7, #40	; 0x28
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	20003f20 	.word	0x20003f20
 800d7c4:	20003f2c 	.word	0x20003f2c
 800d7c8:	20003f24 	.word	0x20003f24
 800d7cc:	20003f18 	.word	0x20003f18
 800d7d0:	20003f28 	.word	0x20003f28

0800d7d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b086      	sub	sp, #24
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d048      	beq.n	800d878 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d7e6:	2308      	movs	r3, #8
 800d7e8:	425b      	negs	r3, r3
 800d7ea:	697a      	ldr	r2, [r7, #20]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	685a      	ldr	r2, [r3, #4]
 800d7f8:	4b21      	ldr	r3, [pc, #132]	; (800d880 <vPortFree+0xac>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4013      	ands	r3, r2
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d10a      	bne.n	800d818 <vPortFree+0x44>
	__asm volatile
 800d802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d806:	f383 8811 	msr	BASEPRI, r3
 800d80a:	f3bf 8f6f 	isb	sy
 800d80e:	f3bf 8f4f 	dsb	sy
 800d812:	60fb      	str	r3, [r7, #12]
}
 800d814:	bf00      	nop
 800d816:	e7fe      	b.n	800d816 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00a      	beq.n	800d836 <vPortFree+0x62>
	__asm volatile
 800d820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d824:	f383 8811 	msr	BASEPRI, r3
 800d828:	f3bf 8f6f 	isb	sy
 800d82c:	f3bf 8f4f 	dsb	sy
 800d830:	60bb      	str	r3, [r7, #8]
}
 800d832:	bf00      	nop
 800d834:	e7fe      	b.n	800d834 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	685a      	ldr	r2, [r3, #4]
 800d83a:	4b11      	ldr	r3, [pc, #68]	; (800d880 <vPortFree+0xac>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4013      	ands	r3, r2
 800d840:	2b00      	cmp	r3, #0
 800d842:	d019      	beq.n	800d878 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d115      	bne.n	800d878 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	685a      	ldr	r2, [r3, #4]
 800d850:	4b0b      	ldr	r3, [pc, #44]	; (800d880 <vPortFree+0xac>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	43db      	mvns	r3, r3
 800d856:	401a      	ands	r2, r3
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d85c:	f7fe fefe 	bl	800c65c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	685a      	ldr	r2, [r3, #4]
 800d864:	4b07      	ldr	r3, [pc, #28]	; (800d884 <vPortFree+0xb0>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4413      	add	r3, r2
 800d86a:	4a06      	ldr	r2, [pc, #24]	; (800d884 <vPortFree+0xb0>)
 800d86c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d86e:	6938      	ldr	r0, [r7, #16]
 800d870:	f000 f86c 	bl	800d94c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d874:	f7fe ff00 	bl	800c678 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d878:	bf00      	nop
 800d87a:	3718      	adds	r7, #24
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	20003f2c 	.word	0x20003f2c
 800d884:	20003f24 	.word	0x20003f24

0800d888 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d888:	b480      	push	{r7}
 800d88a:	b085      	sub	sp, #20
 800d88c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d88e:	f243 23c8 	movw	r3, #13000	; 0x32c8
 800d892:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d894:	4b27      	ldr	r3, [pc, #156]	; (800d934 <prvHeapInit+0xac>)
 800d896:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f003 0307 	and.w	r3, r3, #7
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00c      	beq.n	800d8bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	3307      	adds	r3, #7
 800d8a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f023 0307 	bic.w	r3, r3, #7
 800d8ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	1ad3      	subs	r3, r2, r3
 800d8b6:	4a1f      	ldr	r2, [pc, #124]	; (800d934 <prvHeapInit+0xac>)
 800d8b8:	4413      	add	r3, r2
 800d8ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d8c0:	4a1d      	ldr	r2, [pc, #116]	; (800d938 <prvHeapInit+0xb0>)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d8c6:	4b1c      	ldr	r3, [pc, #112]	; (800d938 <prvHeapInit+0xb0>)
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	68ba      	ldr	r2, [r7, #8]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d8d4:	2208      	movs	r2, #8
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	1a9b      	subs	r3, r3, r2
 800d8da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f023 0307 	bic.w	r3, r3, #7
 800d8e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	4a15      	ldr	r2, [pc, #84]	; (800d93c <prvHeapInit+0xb4>)
 800d8e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d8ea:	4b14      	ldr	r3, [pc, #80]	; (800d93c <prvHeapInit+0xb4>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d8f2:	4b12      	ldr	r3, [pc, #72]	; (800d93c <prvHeapInit+0xb4>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	68fa      	ldr	r2, [r7, #12]
 800d902:	1ad2      	subs	r2, r2, r3
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d908:	4b0c      	ldr	r3, [pc, #48]	; (800d93c <prvHeapInit+0xb4>)
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	4a0a      	ldr	r2, [pc, #40]	; (800d940 <prvHeapInit+0xb8>)
 800d916:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	4a09      	ldr	r2, [pc, #36]	; (800d944 <prvHeapInit+0xbc>)
 800d91e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d920:	4b09      	ldr	r3, [pc, #36]	; (800d948 <prvHeapInit+0xc0>)
 800d922:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d926:	601a      	str	r2, [r3, #0]
}
 800d928:	bf00      	nop
 800d92a:	3714      	adds	r7, #20
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bc80      	pop	{r7}
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	20000c50 	.word	0x20000c50
 800d938:	20003f18 	.word	0x20003f18
 800d93c:	20003f20 	.word	0x20003f20
 800d940:	20003f28 	.word	0x20003f28
 800d944:	20003f24 	.word	0x20003f24
 800d948:	20003f2c 	.word	0x20003f2c

0800d94c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d94c:	b480      	push	{r7}
 800d94e:	b085      	sub	sp, #20
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d954:	4b27      	ldr	r3, [pc, #156]	; (800d9f4 <prvInsertBlockIntoFreeList+0xa8>)
 800d956:	60fb      	str	r3, [r7, #12]
 800d958:	e002      	b.n	800d960 <prvInsertBlockIntoFreeList+0x14>
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	60fb      	str	r3, [r7, #12]
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	687a      	ldr	r2, [r7, #4]
 800d966:	429a      	cmp	r2, r3
 800d968:	d8f7      	bhi.n	800d95a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	68ba      	ldr	r2, [r7, #8]
 800d974:	4413      	add	r3, r2
 800d976:	687a      	ldr	r2, [r7, #4]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d108      	bne.n	800d98e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	685a      	ldr	r2, [r3, #4]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	441a      	add	r2, r3
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	68ba      	ldr	r2, [r7, #8]
 800d998:	441a      	add	r2, r3
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d118      	bne.n	800d9d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	4b14      	ldr	r3, [pc, #80]	; (800d9f8 <prvInsertBlockIntoFreeList+0xac>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d00d      	beq.n	800d9ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	685a      	ldr	r2, [r3, #4]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	441a      	add	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	601a      	str	r2, [r3, #0]
 800d9c8:	e008      	b.n	800d9dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d9ca:	4b0b      	ldr	r3, [pc, #44]	; (800d9f8 <prvInsertBlockIntoFreeList+0xac>)
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	601a      	str	r2, [r3, #0]
 800d9d2:	e003      	b.n	800d9dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d002      	beq.n	800d9ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9ea:	bf00      	nop
 800d9ec:	3714      	adds	r7, #20
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bc80      	pop	{r7}
 800d9f2:	4770      	bx	lr
 800d9f4:	20003f18 	.word	0x20003f18
 800d9f8:	20003f20 	.word	0x20003f20

0800d9fc <atoi>:
 800d9fc:	220a      	movs	r2, #10
 800d9fe:	2100      	movs	r1, #0
 800da00:	f000 b9ec 	b.w	800dddc <strtol>

0800da04 <__errno>:
 800da04:	4b01      	ldr	r3, [pc, #4]	; (800da0c <__errno+0x8>)
 800da06:	6818      	ldr	r0, [r3, #0]
 800da08:	4770      	bx	lr
 800da0a:	bf00      	nop
 800da0c:	20000048 	.word	0x20000048

0800da10 <__libc_init_array>:
 800da10:	b570      	push	{r4, r5, r6, lr}
 800da12:	2600      	movs	r6, #0
 800da14:	4d0c      	ldr	r5, [pc, #48]	; (800da48 <__libc_init_array+0x38>)
 800da16:	4c0d      	ldr	r4, [pc, #52]	; (800da4c <__libc_init_array+0x3c>)
 800da18:	1b64      	subs	r4, r4, r5
 800da1a:	10a4      	asrs	r4, r4, #2
 800da1c:	42a6      	cmp	r6, r4
 800da1e:	d109      	bne.n	800da34 <__libc_init_array+0x24>
 800da20:	f000 fd8c 	bl	800e53c <_init>
 800da24:	2600      	movs	r6, #0
 800da26:	4d0a      	ldr	r5, [pc, #40]	; (800da50 <__libc_init_array+0x40>)
 800da28:	4c0a      	ldr	r4, [pc, #40]	; (800da54 <__libc_init_array+0x44>)
 800da2a:	1b64      	subs	r4, r4, r5
 800da2c:	10a4      	asrs	r4, r4, #2
 800da2e:	42a6      	cmp	r6, r4
 800da30:	d105      	bne.n	800da3e <__libc_init_array+0x2e>
 800da32:	bd70      	pop	{r4, r5, r6, pc}
 800da34:	f855 3b04 	ldr.w	r3, [r5], #4
 800da38:	4798      	blx	r3
 800da3a:	3601      	adds	r6, #1
 800da3c:	e7ee      	b.n	800da1c <__libc_init_array+0xc>
 800da3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800da42:	4798      	blx	r3
 800da44:	3601      	adds	r6, #1
 800da46:	e7f2      	b.n	800da2e <__libc_init_array+0x1e>
 800da48:	0800ea98 	.word	0x0800ea98
 800da4c:	0800ea98 	.word	0x0800ea98
 800da50:	0800ea98 	.word	0x0800ea98
 800da54:	0800ea9c 	.word	0x0800ea9c

0800da58 <__retarget_lock_acquire_recursive>:
 800da58:	4770      	bx	lr

0800da5a <__retarget_lock_release_recursive>:
 800da5a:	4770      	bx	lr

0800da5c <memcpy>:
 800da5c:	440a      	add	r2, r1
 800da5e:	4291      	cmp	r1, r2
 800da60:	f100 33ff 	add.w	r3, r0, #4294967295
 800da64:	d100      	bne.n	800da68 <memcpy+0xc>
 800da66:	4770      	bx	lr
 800da68:	b510      	push	{r4, lr}
 800da6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da6e:	4291      	cmp	r1, r2
 800da70:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da74:	d1f9      	bne.n	800da6a <memcpy+0xe>
 800da76:	bd10      	pop	{r4, pc}

0800da78 <memset>:
 800da78:	4603      	mov	r3, r0
 800da7a:	4402      	add	r2, r0
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d100      	bne.n	800da82 <memset+0xa>
 800da80:	4770      	bx	lr
 800da82:	f803 1b01 	strb.w	r1, [r3], #1
 800da86:	e7f9      	b.n	800da7c <memset+0x4>

0800da88 <sbrk_aligned>:
 800da88:	b570      	push	{r4, r5, r6, lr}
 800da8a:	4e0e      	ldr	r6, [pc, #56]	; (800dac4 <sbrk_aligned+0x3c>)
 800da8c:	460c      	mov	r4, r1
 800da8e:	6831      	ldr	r1, [r6, #0]
 800da90:	4605      	mov	r5, r0
 800da92:	b911      	cbnz	r1, 800da9a <sbrk_aligned+0x12>
 800da94:	f000 f8f6 	bl	800dc84 <_sbrk_r>
 800da98:	6030      	str	r0, [r6, #0]
 800da9a:	4621      	mov	r1, r4
 800da9c:	4628      	mov	r0, r5
 800da9e:	f000 f8f1 	bl	800dc84 <_sbrk_r>
 800daa2:	1c43      	adds	r3, r0, #1
 800daa4:	d00a      	beq.n	800dabc <sbrk_aligned+0x34>
 800daa6:	1cc4      	adds	r4, r0, #3
 800daa8:	f024 0403 	bic.w	r4, r4, #3
 800daac:	42a0      	cmp	r0, r4
 800daae:	d007      	beq.n	800dac0 <sbrk_aligned+0x38>
 800dab0:	1a21      	subs	r1, r4, r0
 800dab2:	4628      	mov	r0, r5
 800dab4:	f000 f8e6 	bl	800dc84 <_sbrk_r>
 800dab8:	3001      	adds	r0, #1
 800daba:	d101      	bne.n	800dac0 <sbrk_aligned+0x38>
 800dabc:	f04f 34ff 	mov.w	r4, #4294967295
 800dac0:	4620      	mov	r0, r4
 800dac2:	bd70      	pop	{r4, r5, r6, pc}
 800dac4:	20003f38 	.word	0x20003f38

0800dac8 <_malloc_r>:
 800dac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dacc:	1ccd      	adds	r5, r1, #3
 800dace:	f025 0503 	bic.w	r5, r5, #3
 800dad2:	3508      	adds	r5, #8
 800dad4:	2d0c      	cmp	r5, #12
 800dad6:	bf38      	it	cc
 800dad8:	250c      	movcc	r5, #12
 800dada:	2d00      	cmp	r5, #0
 800dadc:	4607      	mov	r7, r0
 800dade:	db01      	blt.n	800dae4 <_malloc_r+0x1c>
 800dae0:	42a9      	cmp	r1, r5
 800dae2:	d905      	bls.n	800daf0 <_malloc_r+0x28>
 800dae4:	230c      	movs	r3, #12
 800dae6:	2600      	movs	r6, #0
 800dae8:	603b      	str	r3, [r7, #0]
 800daea:	4630      	mov	r0, r6
 800daec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daf0:	4e2e      	ldr	r6, [pc, #184]	; (800dbac <_malloc_r+0xe4>)
 800daf2:	f000 f97d 	bl	800ddf0 <__malloc_lock>
 800daf6:	6833      	ldr	r3, [r6, #0]
 800daf8:	461c      	mov	r4, r3
 800dafa:	bb34      	cbnz	r4, 800db4a <_malloc_r+0x82>
 800dafc:	4629      	mov	r1, r5
 800dafe:	4638      	mov	r0, r7
 800db00:	f7ff ffc2 	bl	800da88 <sbrk_aligned>
 800db04:	1c43      	adds	r3, r0, #1
 800db06:	4604      	mov	r4, r0
 800db08:	d14d      	bne.n	800dba6 <_malloc_r+0xde>
 800db0a:	6834      	ldr	r4, [r6, #0]
 800db0c:	4626      	mov	r6, r4
 800db0e:	2e00      	cmp	r6, #0
 800db10:	d140      	bne.n	800db94 <_malloc_r+0xcc>
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	4631      	mov	r1, r6
 800db16:	4638      	mov	r0, r7
 800db18:	eb04 0803 	add.w	r8, r4, r3
 800db1c:	f000 f8b2 	bl	800dc84 <_sbrk_r>
 800db20:	4580      	cmp	r8, r0
 800db22:	d13a      	bne.n	800db9a <_malloc_r+0xd2>
 800db24:	6821      	ldr	r1, [r4, #0]
 800db26:	3503      	adds	r5, #3
 800db28:	1a6d      	subs	r5, r5, r1
 800db2a:	f025 0503 	bic.w	r5, r5, #3
 800db2e:	3508      	adds	r5, #8
 800db30:	2d0c      	cmp	r5, #12
 800db32:	bf38      	it	cc
 800db34:	250c      	movcc	r5, #12
 800db36:	4638      	mov	r0, r7
 800db38:	4629      	mov	r1, r5
 800db3a:	f7ff ffa5 	bl	800da88 <sbrk_aligned>
 800db3e:	3001      	adds	r0, #1
 800db40:	d02b      	beq.n	800db9a <_malloc_r+0xd2>
 800db42:	6823      	ldr	r3, [r4, #0]
 800db44:	442b      	add	r3, r5
 800db46:	6023      	str	r3, [r4, #0]
 800db48:	e00e      	b.n	800db68 <_malloc_r+0xa0>
 800db4a:	6822      	ldr	r2, [r4, #0]
 800db4c:	1b52      	subs	r2, r2, r5
 800db4e:	d41e      	bmi.n	800db8e <_malloc_r+0xc6>
 800db50:	2a0b      	cmp	r2, #11
 800db52:	d916      	bls.n	800db82 <_malloc_r+0xba>
 800db54:	1961      	adds	r1, r4, r5
 800db56:	42a3      	cmp	r3, r4
 800db58:	6025      	str	r5, [r4, #0]
 800db5a:	bf18      	it	ne
 800db5c:	6059      	strne	r1, [r3, #4]
 800db5e:	6863      	ldr	r3, [r4, #4]
 800db60:	bf08      	it	eq
 800db62:	6031      	streq	r1, [r6, #0]
 800db64:	5162      	str	r2, [r4, r5]
 800db66:	604b      	str	r3, [r1, #4]
 800db68:	4638      	mov	r0, r7
 800db6a:	f104 060b 	add.w	r6, r4, #11
 800db6e:	f000 f945 	bl	800ddfc <__malloc_unlock>
 800db72:	f026 0607 	bic.w	r6, r6, #7
 800db76:	1d23      	adds	r3, r4, #4
 800db78:	1af2      	subs	r2, r6, r3
 800db7a:	d0b6      	beq.n	800daea <_malloc_r+0x22>
 800db7c:	1b9b      	subs	r3, r3, r6
 800db7e:	50a3      	str	r3, [r4, r2]
 800db80:	e7b3      	b.n	800daea <_malloc_r+0x22>
 800db82:	6862      	ldr	r2, [r4, #4]
 800db84:	42a3      	cmp	r3, r4
 800db86:	bf0c      	ite	eq
 800db88:	6032      	streq	r2, [r6, #0]
 800db8a:	605a      	strne	r2, [r3, #4]
 800db8c:	e7ec      	b.n	800db68 <_malloc_r+0xa0>
 800db8e:	4623      	mov	r3, r4
 800db90:	6864      	ldr	r4, [r4, #4]
 800db92:	e7b2      	b.n	800dafa <_malloc_r+0x32>
 800db94:	4634      	mov	r4, r6
 800db96:	6876      	ldr	r6, [r6, #4]
 800db98:	e7b9      	b.n	800db0e <_malloc_r+0x46>
 800db9a:	230c      	movs	r3, #12
 800db9c:	4638      	mov	r0, r7
 800db9e:	603b      	str	r3, [r7, #0]
 800dba0:	f000 f92c 	bl	800ddfc <__malloc_unlock>
 800dba4:	e7a1      	b.n	800daea <_malloc_r+0x22>
 800dba6:	6025      	str	r5, [r4, #0]
 800dba8:	e7de      	b.n	800db68 <_malloc_r+0xa0>
 800dbaa:	bf00      	nop
 800dbac:	20003f34 	.word	0x20003f34

0800dbb0 <cleanup_glue>:
 800dbb0:	b538      	push	{r3, r4, r5, lr}
 800dbb2:	460c      	mov	r4, r1
 800dbb4:	6809      	ldr	r1, [r1, #0]
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	b109      	cbz	r1, 800dbbe <cleanup_glue+0xe>
 800dbba:	f7ff fff9 	bl	800dbb0 <cleanup_glue>
 800dbbe:	4621      	mov	r1, r4
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbc6:	f000 b91f 	b.w	800de08 <_free_r>
	...

0800dbcc <_reclaim_reent>:
 800dbcc:	4b2c      	ldr	r3, [pc, #176]	; (800dc80 <_reclaim_reent+0xb4>)
 800dbce:	b570      	push	{r4, r5, r6, lr}
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4604      	mov	r4, r0
 800dbd4:	4283      	cmp	r3, r0
 800dbd6:	d051      	beq.n	800dc7c <_reclaim_reent+0xb0>
 800dbd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dbda:	b143      	cbz	r3, 800dbee <_reclaim_reent+0x22>
 800dbdc:	68db      	ldr	r3, [r3, #12]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d14a      	bne.n	800dc78 <_reclaim_reent+0xac>
 800dbe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbe4:	6819      	ldr	r1, [r3, #0]
 800dbe6:	b111      	cbz	r1, 800dbee <_reclaim_reent+0x22>
 800dbe8:	4620      	mov	r0, r4
 800dbea:	f000 f90d 	bl	800de08 <_free_r>
 800dbee:	6961      	ldr	r1, [r4, #20]
 800dbf0:	b111      	cbz	r1, 800dbf8 <_reclaim_reent+0x2c>
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f000 f908 	bl	800de08 <_free_r>
 800dbf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dbfa:	b111      	cbz	r1, 800dc02 <_reclaim_reent+0x36>
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f000 f903 	bl	800de08 <_free_r>
 800dc02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dc04:	b111      	cbz	r1, 800dc0c <_reclaim_reent+0x40>
 800dc06:	4620      	mov	r0, r4
 800dc08:	f000 f8fe 	bl	800de08 <_free_r>
 800dc0c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dc0e:	b111      	cbz	r1, 800dc16 <_reclaim_reent+0x4a>
 800dc10:	4620      	mov	r0, r4
 800dc12:	f000 f8f9 	bl	800de08 <_free_r>
 800dc16:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dc18:	b111      	cbz	r1, 800dc20 <_reclaim_reent+0x54>
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	f000 f8f4 	bl	800de08 <_free_r>
 800dc20:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dc22:	b111      	cbz	r1, 800dc2a <_reclaim_reent+0x5e>
 800dc24:	4620      	mov	r0, r4
 800dc26:	f000 f8ef 	bl	800de08 <_free_r>
 800dc2a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dc2c:	b111      	cbz	r1, 800dc34 <_reclaim_reent+0x68>
 800dc2e:	4620      	mov	r0, r4
 800dc30:	f000 f8ea 	bl	800de08 <_free_r>
 800dc34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc36:	b111      	cbz	r1, 800dc3e <_reclaim_reent+0x72>
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f000 f8e5 	bl	800de08 <_free_r>
 800dc3e:	69a3      	ldr	r3, [r4, #24]
 800dc40:	b1e3      	cbz	r3, 800dc7c <_reclaim_reent+0xb0>
 800dc42:	4620      	mov	r0, r4
 800dc44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dc46:	4798      	blx	r3
 800dc48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dc4a:	b1b9      	cbz	r1, 800dc7c <_reclaim_reent+0xb0>
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc52:	f7ff bfad 	b.w	800dbb0 <cleanup_glue>
 800dc56:	5949      	ldr	r1, [r1, r5]
 800dc58:	b941      	cbnz	r1, 800dc6c <_reclaim_reent+0xa0>
 800dc5a:	3504      	adds	r5, #4
 800dc5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc5e:	2d80      	cmp	r5, #128	; 0x80
 800dc60:	68d9      	ldr	r1, [r3, #12]
 800dc62:	d1f8      	bne.n	800dc56 <_reclaim_reent+0x8a>
 800dc64:	4620      	mov	r0, r4
 800dc66:	f000 f8cf 	bl	800de08 <_free_r>
 800dc6a:	e7ba      	b.n	800dbe2 <_reclaim_reent+0x16>
 800dc6c:	680e      	ldr	r6, [r1, #0]
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f000 f8ca 	bl	800de08 <_free_r>
 800dc74:	4631      	mov	r1, r6
 800dc76:	e7ef      	b.n	800dc58 <_reclaim_reent+0x8c>
 800dc78:	2500      	movs	r5, #0
 800dc7a:	e7ef      	b.n	800dc5c <_reclaim_reent+0x90>
 800dc7c:	bd70      	pop	{r4, r5, r6, pc}
 800dc7e:	bf00      	nop
 800dc80:	20000048 	.word	0x20000048

0800dc84 <_sbrk_r>:
 800dc84:	b538      	push	{r3, r4, r5, lr}
 800dc86:	2300      	movs	r3, #0
 800dc88:	4d05      	ldr	r5, [pc, #20]	; (800dca0 <_sbrk_r+0x1c>)
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	4608      	mov	r0, r1
 800dc8e:	602b      	str	r3, [r5, #0]
 800dc90:	f7f5 f810 	bl	8002cb4 <_sbrk>
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	d102      	bne.n	800dc9e <_sbrk_r+0x1a>
 800dc98:	682b      	ldr	r3, [r5, #0]
 800dc9a:	b103      	cbz	r3, 800dc9e <_sbrk_r+0x1a>
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	bd38      	pop	{r3, r4, r5, pc}
 800dca0:	20003f3c 	.word	0x20003f3c

0800dca4 <siprintf>:
 800dca4:	b40e      	push	{r1, r2, r3}
 800dca6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dcaa:	b500      	push	{lr}
 800dcac:	b09c      	sub	sp, #112	; 0x70
 800dcae:	ab1d      	add	r3, sp, #116	; 0x74
 800dcb0:	9002      	str	r0, [sp, #8]
 800dcb2:	9006      	str	r0, [sp, #24]
 800dcb4:	9107      	str	r1, [sp, #28]
 800dcb6:	9104      	str	r1, [sp, #16]
 800dcb8:	4808      	ldr	r0, [pc, #32]	; (800dcdc <siprintf+0x38>)
 800dcba:	4909      	ldr	r1, [pc, #36]	; (800dce0 <siprintf+0x3c>)
 800dcbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcc0:	9105      	str	r1, [sp, #20]
 800dcc2:	6800      	ldr	r0, [r0, #0]
 800dcc4:	a902      	add	r1, sp, #8
 800dcc6:	9301      	str	r3, [sp, #4]
 800dcc8:	f000 f942 	bl	800df50 <_svfiprintf_r>
 800dccc:	2200      	movs	r2, #0
 800dcce:	9b02      	ldr	r3, [sp, #8]
 800dcd0:	701a      	strb	r2, [r3, #0]
 800dcd2:	b01c      	add	sp, #112	; 0x70
 800dcd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcd8:	b003      	add	sp, #12
 800dcda:	4770      	bx	lr
 800dcdc:	20000048 	.word	0x20000048
 800dce0:	ffff0208 	.word	0xffff0208

0800dce4 <_strtol_l.constprop.0>:
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcea:	4680      	mov	r8, r0
 800dcec:	d001      	beq.n	800dcf2 <_strtol_l.constprop.0+0xe>
 800dcee:	2b24      	cmp	r3, #36	; 0x24
 800dcf0:	d906      	bls.n	800dd00 <_strtol_l.constprop.0+0x1c>
 800dcf2:	f7ff fe87 	bl	800da04 <__errno>
 800dcf6:	2316      	movs	r3, #22
 800dcf8:	6003      	str	r3, [r0, #0]
 800dcfa:	2000      	movs	r0, #0
 800dcfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd00:	460d      	mov	r5, r1
 800dd02:	4f35      	ldr	r7, [pc, #212]	; (800ddd8 <_strtol_l.constprop.0+0xf4>)
 800dd04:	4628      	mov	r0, r5
 800dd06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd0a:	5de6      	ldrb	r6, [r4, r7]
 800dd0c:	f016 0608 	ands.w	r6, r6, #8
 800dd10:	d1f8      	bne.n	800dd04 <_strtol_l.constprop.0+0x20>
 800dd12:	2c2d      	cmp	r4, #45	; 0x2d
 800dd14:	d12f      	bne.n	800dd76 <_strtol_l.constprop.0+0x92>
 800dd16:	2601      	movs	r6, #1
 800dd18:	782c      	ldrb	r4, [r5, #0]
 800dd1a:	1c85      	adds	r5, r0, #2
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d057      	beq.n	800ddd0 <_strtol_l.constprop.0+0xec>
 800dd20:	2b10      	cmp	r3, #16
 800dd22:	d109      	bne.n	800dd38 <_strtol_l.constprop.0+0x54>
 800dd24:	2c30      	cmp	r4, #48	; 0x30
 800dd26:	d107      	bne.n	800dd38 <_strtol_l.constprop.0+0x54>
 800dd28:	7828      	ldrb	r0, [r5, #0]
 800dd2a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dd2e:	2858      	cmp	r0, #88	; 0x58
 800dd30:	d149      	bne.n	800ddc6 <_strtol_l.constprop.0+0xe2>
 800dd32:	2310      	movs	r3, #16
 800dd34:	786c      	ldrb	r4, [r5, #1]
 800dd36:	3502      	adds	r5, #2
 800dd38:	2700      	movs	r7, #0
 800dd3a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800dd3e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800dd42:	fbbe f9f3 	udiv	r9, lr, r3
 800dd46:	4638      	mov	r0, r7
 800dd48:	fb03 ea19 	mls	sl, r3, r9, lr
 800dd4c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dd50:	f1bc 0f09 	cmp.w	ip, #9
 800dd54:	d814      	bhi.n	800dd80 <_strtol_l.constprop.0+0x9c>
 800dd56:	4664      	mov	r4, ip
 800dd58:	42a3      	cmp	r3, r4
 800dd5a:	dd22      	ble.n	800dda2 <_strtol_l.constprop.0+0xbe>
 800dd5c:	2f00      	cmp	r7, #0
 800dd5e:	db1d      	blt.n	800dd9c <_strtol_l.constprop.0+0xb8>
 800dd60:	4581      	cmp	r9, r0
 800dd62:	d31b      	bcc.n	800dd9c <_strtol_l.constprop.0+0xb8>
 800dd64:	d101      	bne.n	800dd6a <_strtol_l.constprop.0+0x86>
 800dd66:	45a2      	cmp	sl, r4
 800dd68:	db18      	blt.n	800dd9c <_strtol_l.constprop.0+0xb8>
 800dd6a:	2701      	movs	r7, #1
 800dd6c:	fb00 4003 	mla	r0, r0, r3, r4
 800dd70:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd74:	e7ea      	b.n	800dd4c <_strtol_l.constprop.0+0x68>
 800dd76:	2c2b      	cmp	r4, #43	; 0x2b
 800dd78:	bf04      	itt	eq
 800dd7a:	782c      	ldrbeq	r4, [r5, #0]
 800dd7c:	1c85      	addeq	r5, r0, #2
 800dd7e:	e7cd      	b.n	800dd1c <_strtol_l.constprop.0+0x38>
 800dd80:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dd84:	f1bc 0f19 	cmp.w	ip, #25
 800dd88:	d801      	bhi.n	800dd8e <_strtol_l.constprop.0+0xaa>
 800dd8a:	3c37      	subs	r4, #55	; 0x37
 800dd8c:	e7e4      	b.n	800dd58 <_strtol_l.constprop.0+0x74>
 800dd8e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dd92:	f1bc 0f19 	cmp.w	ip, #25
 800dd96:	d804      	bhi.n	800dda2 <_strtol_l.constprop.0+0xbe>
 800dd98:	3c57      	subs	r4, #87	; 0x57
 800dd9a:	e7dd      	b.n	800dd58 <_strtol_l.constprop.0+0x74>
 800dd9c:	f04f 37ff 	mov.w	r7, #4294967295
 800dda0:	e7e6      	b.n	800dd70 <_strtol_l.constprop.0+0x8c>
 800dda2:	2f00      	cmp	r7, #0
 800dda4:	da07      	bge.n	800ddb6 <_strtol_l.constprop.0+0xd2>
 800dda6:	2322      	movs	r3, #34	; 0x22
 800dda8:	4670      	mov	r0, lr
 800ddaa:	f8c8 3000 	str.w	r3, [r8]
 800ddae:	2a00      	cmp	r2, #0
 800ddb0:	d0a4      	beq.n	800dcfc <_strtol_l.constprop.0+0x18>
 800ddb2:	1e69      	subs	r1, r5, #1
 800ddb4:	e005      	b.n	800ddc2 <_strtol_l.constprop.0+0xde>
 800ddb6:	b106      	cbz	r6, 800ddba <_strtol_l.constprop.0+0xd6>
 800ddb8:	4240      	negs	r0, r0
 800ddba:	2a00      	cmp	r2, #0
 800ddbc:	d09e      	beq.n	800dcfc <_strtol_l.constprop.0+0x18>
 800ddbe:	2f00      	cmp	r7, #0
 800ddc0:	d1f7      	bne.n	800ddb2 <_strtol_l.constprop.0+0xce>
 800ddc2:	6011      	str	r1, [r2, #0]
 800ddc4:	e79a      	b.n	800dcfc <_strtol_l.constprop.0+0x18>
 800ddc6:	2430      	movs	r4, #48	; 0x30
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d1b5      	bne.n	800dd38 <_strtol_l.constprop.0+0x54>
 800ddcc:	2308      	movs	r3, #8
 800ddce:	e7b3      	b.n	800dd38 <_strtol_l.constprop.0+0x54>
 800ddd0:	2c30      	cmp	r4, #48	; 0x30
 800ddd2:	d0a9      	beq.n	800dd28 <_strtol_l.constprop.0+0x44>
 800ddd4:	230a      	movs	r3, #10
 800ddd6:	e7af      	b.n	800dd38 <_strtol_l.constprop.0+0x54>
 800ddd8:	0800e965 	.word	0x0800e965

0800dddc <strtol>:
 800dddc:	4613      	mov	r3, r2
 800ddde:	460a      	mov	r2, r1
 800dde0:	4601      	mov	r1, r0
 800dde2:	4802      	ldr	r0, [pc, #8]	; (800ddec <strtol+0x10>)
 800dde4:	6800      	ldr	r0, [r0, #0]
 800dde6:	f7ff bf7d 	b.w	800dce4 <_strtol_l.constprop.0>
 800ddea:	bf00      	nop
 800ddec:	20000048 	.word	0x20000048

0800ddf0 <__malloc_lock>:
 800ddf0:	4801      	ldr	r0, [pc, #4]	; (800ddf8 <__malloc_lock+0x8>)
 800ddf2:	f7ff be31 	b.w	800da58 <__retarget_lock_acquire_recursive>
 800ddf6:	bf00      	nop
 800ddf8:	20003f30 	.word	0x20003f30

0800ddfc <__malloc_unlock>:
 800ddfc:	4801      	ldr	r0, [pc, #4]	; (800de04 <__malloc_unlock+0x8>)
 800ddfe:	f7ff be2c 	b.w	800da5a <__retarget_lock_release_recursive>
 800de02:	bf00      	nop
 800de04:	20003f30 	.word	0x20003f30

0800de08 <_free_r>:
 800de08:	b538      	push	{r3, r4, r5, lr}
 800de0a:	4605      	mov	r5, r0
 800de0c:	2900      	cmp	r1, #0
 800de0e:	d040      	beq.n	800de92 <_free_r+0x8a>
 800de10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de14:	1f0c      	subs	r4, r1, #4
 800de16:	2b00      	cmp	r3, #0
 800de18:	bfb8      	it	lt
 800de1a:	18e4      	addlt	r4, r4, r3
 800de1c:	f7ff ffe8 	bl	800ddf0 <__malloc_lock>
 800de20:	4a1c      	ldr	r2, [pc, #112]	; (800de94 <_free_r+0x8c>)
 800de22:	6813      	ldr	r3, [r2, #0]
 800de24:	b933      	cbnz	r3, 800de34 <_free_r+0x2c>
 800de26:	6063      	str	r3, [r4, #4]
 800de28:	6014      	str	r4, [r2, #0]
 800de2a:	4628      	mov	r0, r5
 800de2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de30:	f7ff bfe4 	b.w	800ddfc <__malloc_unlock>
 800de34:	42a3      	cmp	r3, r4
 800de36:	d908      	bls.n	800de4a <_free_r+0x42>
 800de38:	6820      	ldr	r0, [r4, #0]
 800de3a:	1821      	adds	r1, r4, r0
 800de3c:	428b      	cmp	r3, r1
 800de3e:	bf01      	itttt	eq
 800de40:	6819      	ldreq	r1, [r3, #0]
 800de42:	685b      	ldreq	r3, [r3, #4]
 800de44:	1809      	addeq	r1, r1, r0
 800de46:	6021      	streq	r1, [r4, #0]
 800de48:	e7ed      	b.n	800de26 <_free_r+0x1e>
 800de4a:	461a      	mov	r2, r3
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	b10b      	cbz	r3, 800de54 <_free_r+0x4c>
 800de50:	42a3      	cmp	r3, r4
 800de52:	d9fa      	bls.n	800de4a <_free_r+0x42>
 800de54:	6811      	ldr	r1, [r2, #0]
 800de56:	1850      	adds	r0, r2, r1
 800de58:	42a0      	cmp	r0, r4
 800de5a:	d10b      	bne.n	800de74 <_free_r+0x6c>
 800de5c:	6820      	ldr	r0, [r4, #0]
 800de5e:	4401      	add	r1, r0
 800de60:	1850      	adds	r0, r2, r1
 800de62:	4283      	cmp	r3, r0
 800de64:	6011      	str	r1, [r2, #0]
 800de66:	d1e0      	bne.n	800de2a <_free_r+0x22>
 800de68:	6818      	ldr	r0, [r3, #0]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	4401      	add	r1, r0
 800de6e:	6011      	str	r1, [r2, #0]
 800de70:	6053      	str	r3, [r2, #4]
 800de72:	e7da      	b.n	800de2a <_free_r+0x22>
 800de74:	d902      	bls.n	800de7c <_free_r+0x74>
 800de76:	230c      	movs	r3, #12
 800de78:	602b      	str	r3, [r5, #0]
 800de7a:	e7d6      	b.n	800de2a <_free_r+0x22>
 800de7c:	6820      	ldr	r0, [r4, #0]
 800de7e:	1821      	adds	r1, r4, r0
 800de80:	428b      	cmp	r3, r1
 800de82:	bf01      	itttt	eq
 800de84:	6819      	ldreq	r1, [r3, #0]
 800de86:	685b      	ldreq	r3, [r3, #4]
 800de88:	1809      	addeq	r1, r1, r0
 800de8a:	6021      	streq	r1, [r4, #0]
 800de8c:	6063      	str	r3, [r4, #4]
 800de8e:	6054      	str	r4, [r2, #4]
 800de90:	e7cb      	b.n	800de2a <_free_r+0x22>
 800de92:	bd38      	pop	{r3, r4, r5, pc}
 800de94:	20003f34 	.word	0x20003f34

0800de98 <__ssputs_r>:
 800de98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de9c:	688e      	ldr	r6, [r1, #8]
 800de9e:	4682      	mov	sl, r0
 800dea0:	429e      	cmp	r6, r3
 800dea2:	460c      	mov	r4, r1
 800dea4:	4690      	mov	r8, r2
 800dea6:	461f      	mov	r7, r3
 800dea8:	d838      	bhi.n	800df1c <__ssputs_r+0x84>
 800deaa:	898a      	ldrh	r2, [r1, #12]
 800deac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800deb0:	d032      	beq.n	800df18 <__ssputs_r+0x80>
 800deb2:	6825      	ldr	r5, [r4, #0]
 800deb4:	6909      	ldr	r1, [r1, #16]
 800deb6:	3301      	adds	r3, #1
 800deb8:	eba5 0901 	sub.w	r9, r5, r1
 800debc:	6965      	ldr	r5, [r4, #20]
 800debe:	444b      	add	r3, r9
 800dec0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dec4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dec8:	106d      	asrs	r5, r5, #1
 800deca:	429d      	cmp	r5, r3
 800decc:	bf38      	it	cc
 800dece:	461d      	movcc	r5, r3
 800ded0:	0553      	lsls	r3, r2, #21
 800ded2:	d531      	bpl.n	800df38 <__ssputs_r+0xa0>
 800ded4:	4629      	mov	r1, r5
 800ded6:	f7ff fdf7 	bl	800dac8 <_malloc_r>
 800deda:	4606      	mov	r6, r0
 800dedc:	b950      	cbnz	r0, 800def4 <__ssputs_r+0x5c>
 800dede:	230c      	movs	r3, #12
 800dee0:	f04f 30ff 	mov.w	r0, #4294967295
 800dee4:	f8ca 3000 	str.w	r3, [sl]
 800dee8:	89a3      	ldrh	r3, [r4, #12]
 800deea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800deee:	81a3      	strh	r3, [r4, #12]
 800def0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800def4:	464a      	mov	r2, r9
 800def6:	6921      	ldr	r1, [r4, #16]
 800def8:	f7ff fdb0 	bl	800da5c <memcpy>
 800defc:	89a3      	ldrh	r3, [r4, #12]
 800defe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df06:	81a3      	strh	r3, [r4, #12]
 800df08:	6126      	str	r6, [r4, #16]
 800df0a:	444e      	add	r6, r9
 800df0c:	6026      	str	r6, [r4, #0]
 800df0e:	463e      	mov	r6, r7
 800df10:	6165      	str	r5, [r4, #20]
 800df12:	eba5 0509 	sub.w	r5, r5, r9
 800df16:	60a5      	str	r5, [r4, #8]
 800df18:	42be      	cmp	r6, r7
 800df1a:	d900      	bls.n	800df1e <__ssputs_r+0x86>
 800df1c:	463e      	mov	r6, r7
 800df1e:	4632      	mov	r2, r6
 800df20:	4641      	mov	r1, r8
 800df22:	6820      	ldr	r0, [r4, #0]
 800df24:	f000 fab8 	bl	800e498 <memmove>
 800df28:	68a3      	ldr	r3, [r4, #8]
 800df2a:	2000      	movs	r0, #0
 800df2c:	1b9b      	subs	r3, r3, r6
 800df2e:	60a3      	str	r3, [r4, #8]
 800df30:	6823      	ldr	r3, [r4, #0]
 800df32:	4433      	add	r3, r6
 800df34:	6023      	str	r3, [r4, #0]
 800df36:	e7db      	b.n	800def0 <__ssputs_r+0x58>
 800df38:	462a      	mov	r2, r5
 800df3a:	f000 fac7 	bl	800e4cc <_realloc_r>
 800df3e:	4606      	mov	r6, r0
 800df40:	2800      	cmp	r0, #0
 800df42:	d1e1      	bne.n	800df08 <__ssputs_r+0x70>
 800df44:	4650      	mov	r0, sl
 800df46:	6921      	ldr	r1, [r4, #16]
 800df48:	f7ff ff5e 	bl	800de08 <_free_r>
 800df4c:	e7c7      	b.n	800dede <__ssputs_r+0x46>
	...

0800df50 <_svfiprintf_r>:
 800df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df54:	4698      	mov	r8, r3
 800df56:	898b      	ldrh	r3, [r1, #12]
 800df58:	4607      	mov	r7, r0
 800df5a:	061b      	lsls	r3, r3, #24
 800df5c:	460d      	mov	r5, r1
 800df5e:	4614      	mov	r4, r2
 800df60:	b09d      	sub	sp, #116	; 0x74
 800df62:	d50e      	bpl.n	800df82 <_svfiprintf_r+0x32>
 800df64:	690b      	ldr	r3, [r1, #16]
 800df66:	b963      	cbnz	r3, 800df82 <_svfiprintf_r+0x32>
 800df68:	2140      	movs	r1, #64	; 0x40
 800df6a:	f7ff fdad 	bl	800dac8 <_malloc_r>
 800df6e:	6028      	str	r0, [r5, #0]
 800df70:	6128      	str	r0, [r5, #16]
 800df72:	b920      	cbnz	r0, 800df7e <_svfiprintf_r+0x2e>
 800df74:	230c      	movs	r3, #12
 800df76:	603b      	str	r3, [r7, #0]
 800df78:	f04f 30ff 	mov.w	r0, #4294967295
 800df7c:	e0d1      	b.n	800e122 <_svfiprintf_r+0x1d2>
 800df7e:	2340      	movs	r3, #64	; 0x40
 800df80:	616b      	str	r3, [r5, #20]
 800df82:	2300      	movs	r3, #0
 800df84:	9309      	str	r3, [sp, #36]	; 0x24
 800df86:	2320      	movs	r3, #32
 800df88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df8c:	2330      	movs	r3, #48	; 0x30
 800df8e:	f04f 0901 	mov.w	r9, #1
 800df92:	f8cd 800c 	str.w	r8, [sp, #12]
 800df96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e13c <_svfiprintf_r+0x1ec>
 800df9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df9e:	4623      	mov	r3, r4
 800dfa0:	469a      	mov	sl, r3
 800dfa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfa6:	b10a      	cbz	r2, 800dfac <_svfiprintf_r+0x5c>
 800dfa8:	2a25      	cmp	r2, #37	; 0x25
 800dfaa:	d1f9      	bne.n	800dfa0 <_svfiprintf_r+0x50>
 800dfac:	ebba 0b04 	subs.w	fp, sl, r4
 800dfb0:	d00b      	beq.n	800dfca <_svfiprintf_r+0x7a>
 800dfb2:	465b      	mov	r3, fp
 800dfb4:	4622      	mov	r2, r4
 800dfb6:	4629      	mov	r1, r5
 800dfb8:	4638      	mov	r0, r7
 800dfba:	f7ff ff6d 	bl	800de98 <__ssputs_r>
 800dfbe:	3001      	adds	r0, #1
 800dfc0:	f000 80aa 	beq.w	800e118 <_svfiprintf_r+0x1c8>
 800dfc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfc6:	445a      	add	r2, fp
 800dfc8:	9209      	str	r2, [sp, #36]	; 0x24
 800dfca:	f89a 3000 	ldrb.w	r3, [sl]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f000 80a2 	beq.w	800e118 <_svfiprintf_r+0x1c8>
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	f04f 32ff 	mov.w	r2, #4294967295
 800dfda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfde:	f10a 0a01 	add.w	sl, sl, #1
 800dfe2:	9304      	str	r3, [sp, #16]
 800dfe4:	9307      	str	r3, [sp, #28]
 800dfe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfea:	931a      	str	r3, [sp, #104]	; 0x68
 800dfec:	4654      	mov	r4, sl
 800dfee:	2205      	movs	r2, #5
 800dff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dff4:	4851      	ldr	r0, [pc, #324]	; (800e13c <_svfiprintf_r+0x1ec>)
 800dff6:	f000 fa41 	bl	800e47c <memchr>
 800dffa:	9a04      	ldr	r2, [sp, #16]
 800dffc:	b9d8      	cbnz	r0, 800e036 <_svfiprintf_r+0xe6>
 800dffe:	06d0      	lsls	r0, r2, #27
 800e000:	bf44      	itt	mi
 800e002:	2320      	movmi	r3, #32
 800e004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e008:	0711      	lsls	r1, r2, #28
 800e00a:	bf44      	itt	mi
 800e00c:	232b      	movmi	r3, #43	; 0x2b
 800e00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e012:	f89a 3000 	ldrb.w	r3, [sl]
 800e016:	2b2a      	cmp	r3, #42	; 0x2a
 800e018:	d015      	beq.n	800e046 <_svfiprintf_r+0xf6>
 800e01a:	4654      	mov	r4, sl
 800e01c:	2000      	movs	r0, #0
 800e01e:	f04f 0c0a 	mov.w	ip, #10
 800e022:	9a07      	ldr	r2, [sp, #28]
 800e024:	4621      	mov	r1, r4
 800e026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e02a:	3b30      	subs	r3, #48	; 0x30
 800e02c:	2b09      	cmp	r3, #9
 800e02e:	d94e      	bls.n	800e0ce <_svfiprintf_r+0x17e>
 800e030:	b1b0      	cbz	r0, 800e060 <_svfiprintf_r+0x110>
 800e032:	9207      	str	r2, [sp, #28]
 800e034:	e014      	b.n	800e060 <_svfiprintf_r+0x110>
 800e036:	eba0 0308 	sub.w	r3, r0, r8
 800e03a:	fa09 f303 	lsl.w	r3, r9, r3
 800e03e:	4313      	orrs	r3, r2
 800e040:	46a2      	mov	sl, r4
 800e042:	9304      	str	r3, [sp, #16]
 800e044:	e7d2      	b.n	800dfec <_svfiprintf_r+0x9c>
 800e046:	9b03      	ldr	r3, [sp, #12]
 800e048:	1d19      	adds	r1, r3, #4
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	9103      	str	r1, [sp, #12]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	bfbb      	ittet	lt
 800e052:	425b      	neglt	r3, r3
 800e054:	f042 0202 	orrlt.w	r2, r2, #2
 800e058:	9307      	strge	r3, [sp, #28]
 800e05a:	9307      	strlt	r3, [sp, #28]
 800e05c:	bfb8      	it	lt
 800e05e:	9204      	strlt	r2, [sp, #16]
 800e060:	7823      	ldrb	r3, [r4, #0]
 800e062:	2b2e      	cmp	r3, #46	; 0x2e
 800e064:	d10c      	bne.n	800e080 <_svfiprintf_r+0x130>
 800e066:	7863      	ldrb	r3, [r4, #1]
 800e068:	2b2a      	cmp	r3, #42	; 0x2a
 800e06a:	d135      	bne.n	800e0d8 <_svfiprintf_r+0x188>
 800e06c:	9b03      	ldr	r3, [sp, #12]
 800e06e:	3402      	adds	r4, #2
 800e070:	1d1a      	adds	r2, r3, #4
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	9203      	str	r2, [sp, #12]
 800e076:	2b00      	cmp	r3, #0
 800e078:	bfb8      	it	lt
 800e07a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e07e:	9305      	str	r3, [sp, #20]
 800e080:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800e140 <_svfiprintf_r+0x1f0>
 800e084:	2203      	movs	r2, #3
 800e086:	4650      	mov	r0, sl
 800e088:	7821      	ldrb	r1, [r4, #0]
 800e08a:	f000 f9f7 	bl	800e47c <memchr>
 800e08e:	b140      	cbz	r0, 800e0a2 <_svfiprintf_r+0x152>
 800e090:	2340      	movs	r3, #64	; 0x40
 800e092:	eba0 000a 	sub.w	r0, r0, sl
 800e096:	fa03 f000 	lsl.w	r0, r3, r0
 800e09a:	9b04      	ldr	r3, [sp, #16]
 800e09c:	3401      	adds	r4, #1
 800e09e:	4303      	orrs	r3, r0
 800e0a0:	9304      	str	r3, [sp, #16]
 800e0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0a6:	2206      	movs	r2, #6
 800e0a8:	4826      	ldr	r0, [pc, #152]	; (800e144 <_svfiprintf_r+0x1f4>)
 800e0aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0ae:	f000 f9e5 	bl	800e47c <memchr>
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	d038      	beq.n	800e128 <_svfiprintf_r+0x1d8>
 800e0b6:	4b24      	ldr	r3, [pc, #144]	; (800e148 <_svfiprintf_r+0x1f8>)
 800e0b8:	bb1b      	cbnz	r3, 800e102 <_svfiprintf_r+0x1b2>
 800e0ba:	9b03      	ldr	r3, [sp, #12]
 800e0bc:	3307      	adds	r3, #7
 800e0be:	f023 0307 	bic.w	r3, r3, #7
 800e0c2:	3308      	adds	r3, #8
 800e0c4:	9303      	str	r3, [sp, #12]
 800e0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0c8:	4433      	add	r3, r6
 800e0ca:	9309      	str	r3, [sp, #36]	; 0x24
 800e0cc:	e767      	b.n	800df9e <_svfiprintf_r+0x4e>
 800e0ce:	460c      	mov	r4, r1
 800e0d0:	2001      	movs	r0, #1
 800e0d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0d6:	e7a5      	b.n	800e024 <_svfiprintf_r+0xd4>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	f04f 0c0a 	mov.w	ip, #10
 800e0de:	4619      	mov	r1, r3
 800e0e0:	3401      	adds	r4, #1
 800e0e2:	9305      	str	r3, [sp, #20]
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0ea:	3a30      	subs	r2, #48	; 0x30
 800e0ec:	2a09      	cmp	r2, #9
 800e0ee:	d903      	bls.n	800e0f8 <_svfiprintf_r+0x1a8>
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d0c5      	beq.n	800e080 <_svfiprintf_r+0x130>
 800e0f4:	9105      	str	r1, [sp, #20]
 800e0f6:	e7c3      	b.n	800e080 <_svfiprintf_r+0x130>
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e100:	e7f0      	b.n	800e0e4 <_svfiprintf_r+0x194>
 800e102:	ab03      	add	r3, sp, #12
 800e104:	9300      	str	r3, [sp, #0]
 800e106:	462a      	mov	r2, r5
 800e108:	4638      	mov	r0, r7
 800e10a:	4b10      	ldr	r3, [pc, #64]	; (800e14c <_svfiprintf_r+0x1fc>)
 800e10c:	a904      	add	r1, sp, #16
 800e10e:	f3af 8000 	nop.w
 800e112:	1c42      	adds	r2, r0, #1
 800e114:	4606      	mov	r6, r0
 800e116:	d1d6      	bne.n	800e0c6 <_svfiprintf_r+0x176>
 800e118:	89ab      	ldrh	r3, [r5, #12]
 800e11a:	065b      	lsls	r3, r3, #25
 800e11c:	f53f af2c 	bmi.w	800df78 <_svfiprintf_r+0x28>
 800e120:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e122:	b01d      	add	sp, #116	; 0x74
 800e124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e128:	ab03      	add	r3, sp, #12
 800e12a:	9300      	str	r3, [sp, #0]
 800e12c:	462a      	mov	r2, r5
 800e12e:	4638      	mov	r0, r7
 800e130:	4b06      	ldr	r3, [pc, #24]	; (800e14c <_svfiprintf_r+0x1fc>)
 800e132:	a904      	add	r1, sp, #16
 800e134:	f000 f87c 	bl	800e230 <_printf_i>
 800e138:	e7eb      	b.n	800e112 <_svfiprintf_r+0x1c2>
 800e13a:	bf00      	nop
 800e13c:	0800ea65 	.word	0x0800ea65
 800e140:	0800ea6b 	.word	0x0800ea6b
 800e144:	0800ea6f 	.word	0x0800ea6f
 800e148:	00000000 	.word	0x00000000
 800e14c:	0800de99 	.word	0x0800de99

0800e150 <_printf_common>:
 800e150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e154:	4616      	mov	r6, r2
 800e156:	4699      	mov	r9, r3
 800e158:	688a      	ldr	r2, [r1, #8]
 800e15a:	690b      	ldr	r3, [r1, #16]
 800e15c:	4607      	mov	r7, r0
 800e15e:	4293      	cmp	r3, r2
 800e160:	bfb8      	it	lt
 800e162:	4613      	movlt	r3, r2
 800e164:	6033      	str	r3, [r6, #0]
 800e166:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e16a:	460c      	mov	r4, r1
 800e16c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e170:	b10a      	cbz	r2, 800e176 <_printf_common+0x26>
 800e172:	3301      	adds	r3, #1
 800e174:	6033      	str	r3, [r6, #0]
 800e176:	6823      	ldr	r3, [r4, #0]
 800e178:	0699      	lsls	r1, r3, #26
 800e17a:	bf42      	ittt	mi
 800e17c:	6833      	ldrmi	r3, [r6, #0]
 800e17e:	3302      	addmi	r3, #2
 800e180:	6033      	strmi	r3, [r6, #0]
 800e182:	6825      	ldr	r5, [r4, #0]
 800e184:	f015 0506 	ands.w	r5, r5, #6
 800e188:	d106      	bne.n	800e198 <_printf_common+0x48>
 800e18a:	f104 0a19 	add.w	sl, r4, #25
 800e18e:	68e3      	ldr	r3, [r4, #12]
 800e190:	6832      	ldr	r2, [r6, #0]
 800e192:	1a9b      	subs	r3, r3, r2
 800e194:	42ab      	cmp	r3, r5
 800e196:	dc28      	bgt.n	800e1ea <_printf_common+0x9a>
 800e198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e19c:	1e13      	subs	r3, r2, #0
 800e19e:	6822      	ldr	r2, [r4, #0]
 800e1a0:	bf18      	it	ne
 800e1a2:	2301      	movne	r3, #1
 800e1a4:	0692      	lsls	r2, r2, #26
 800e1a6:	d42d      	bmi.n	800e204 <_printf_common+0xb4>
 800e1a8:	4649      	mov	r1, r9
 800e1aa:	4638      	mov	r0, r7
 800e1ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e1b0:	47c0      	blx	r8
 800e1b2:	3001      	adds	r0, #1
 800e1b4:	d020      	beq.n	800e1f8 <_printf_common+0xa8>
 800e1b6:	6823      	ldr	r3, [r4, #0]
 800e1b8:	68e5      	ldr	r5, [r4, #12]
 800e1ba:	f003 0306 	and.w	r3, r3, #6
 800e1be:	2b04      	cmp	r3, #4
 800e1c0:	bf18      	it	ne
 800e1c2:	2500      	movne	r5, #0
 800e1c4:	6832      	ldr	r2, [r6, #0]
 800e1c6:	f04f 0600 	mov.w	r6, #0
 800e1ca:	68a3      	ldr	r3, [r4, #8]
 800e1cc:	bf08      	it	eq
 800e1ce:	1aad      	subeq	r5, r5, r2
 800e1d0:	6922      	ldr	r2, [r4, #16]
 800e1d2:	bf08      	it	eq
 800e1d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	bfc4      	itt	gt
 800e1dc:	1a9b      	subgt	r3, r3, r2
 800e1de:	18ed      	addgt	r5, r5, r3
 800e1e0:	341a      	adds	r4, #26
 800e1e2:	42b5      	cmp	r5, r6
 800e1e4:	d11a      	bne.n	800e21c <_printf_common+0xcc>
 800e1e6:	2000      	movs	r0, #0
 800e1e8:	e008      	b.n	800e1fc <_printf_common+0xac>
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	4652      	mov	r2, sl
 800e1ee:	4649      	mov	r1, r9
 800e1f0:	4638      	mov	r0, r7
 800e1f2:	47c0      	blx	r8
 800e1f4:	3001      	adds	r0, #1
 800e1f6:	d103      	bne.n	800e200 <_printf_common+0xb0>
 800e1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e200:	3501      	adds	r5, #1
 800e202:	e7c4      	b.n	800e18e <_printf_common+0x3e>
 800e204:	2030      	movs	r0, #48	; 0x30
 800e206:	18e1      	adds	r1, r4, r3
 800e208:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e20c:	1c5a      	adds	r2, r3, #1
 800e20e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e212:	4422      	add	r2, r4
 800e214:	3302      	adds	r3, #2
 800e216:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e21a:	e7c5      	b.n	800e1a8 <_printf_common+0x58>
 800e21c:	2301      	movs	r3, #1
 800e21e:	4622      	mov	r2, r4
 800e220:	4649      	mov	r1, r9
 800e222:	4638      	mov	r0, r7
 800e224:	47c0      	blx	r8
 800e226:	3001      	adds	r0, #1
 800e228:	d0e6      	beq.n	800e1f8 <_printf_common+0xa8>
 800e22a:	3601      	adds	r6, #1
 800e22c:	e7d9      	b.n	800e1e2 <_printf_common+0x92>
	...

0800e230 <_printf_i>:
 800e230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e234:	7e0f      	ldrb	r7, [r1, #24]
 800e236:	4691      	mov	r9, r2
 800e238:	2f78      	cmp	r7, #120	; 0x78
 800e23a:	4680      	mov	r8, r0
 800e23c:	460c      	mov	r4, r1
 800e23e:	469a      	mov	sl, r3
 800e240:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e242:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e246:	d807      	bhi.n	800e258 <_printf_i+0x28>
 800e248:	2f62      	cmp	r7, #98	; 0x62
 800e24a:	d80a      	bhi.n	800e262 <_printf_i+0x32>
 800e24c:	2f00      	cmp	r7, #0
 800e24e:	f000 80d9 	beq.w	800e404 <_printf_i+0x1d4>
 800e252:	2f58      	cmp	r7, #88	; 0x58
 800e254:	f000 80a4 	beq.w	800e3a0 <_printf_i+0x170>
 800e258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e25c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e260:	e03a      	b.n	800e2d8 <_printf_i+0xa8>
 800e262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e266:	2b15      	cmp	r3, #21
 800e268:	d8f6      	bhi.n	800e258 <_printf_i+0x28>
 800e26a:	a101      	add	r1, pc, #4	; (adr r1, 800e270 <_printf_i+0x40>)
 800e26c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e270:	0800e2c9 	.word	0x0800e2c9
 800e274:	0800e2dd 	.word	0x0800e2dd
 800e278:	0800e259 	.word	0x0800e259
 800e27c:	0800e259 	.word	0x0800e259
 800e280:	0800e259 	.word	0x0800e259
 800e284:	0800e259 	.word	0x0800e259
 800e288:	0800e2dd 	.word	0x0800e2dd
 800e28c:	0800e259 	.word	0x0800e259
 800e290:	0800e259 	.word	0x0800e259
 800e294:	0800e259 	.word	0x0800e259
 800e298:	0800e259 	.word	0x0800e259
 800e29c:	0800e3eb 	.word	0x0800e3eb
 800e2a0:	0800e30d 	.word	0x0800e30d
 800e2a4:	0800e3cd 	.word	0x0800e3cd
 800e2a8:	0800e259 	.word	0x0800e259
 800e2ac:	0800e259 	.word	0x0800e259
 800e2b0:	0800e40d 	.word	0x0800e40d
 800e2b4:	0800e259 	.word	0x0800e259
 800e2b8:	0800e30d 	.word	0x0800e30d
 800e2bc:	0800e259 	.word	0x0800e259
 800e2c0:	0800e259 	.word	0x0800e259
 800e2c4:	0800e3d5 	.word	0x0800e3d5
 800e2c8:	682b      	ldr	r3, [r5, #0]
 800e2ca:	1d1a      	adds	r2, r3, #4
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	602a      	str	r2, [r5, #0]
 800e2d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e2d8:	2301      	movs	r3, #1
 800e2da:	e0a4      	b.n	800e426 <_printf_i+0x1f6>
 800e2dc:	6820      	ldr	r0, [r4, #0]
 800e2de:	6829      	ldr	r1, [r5, #0]
 800e2e0:	0606      	lsls	r6, r0, #24
 800e2e2:	f101 0304 	add.w	r3, r1, #4
 800e2e6:	d50a      	bpl.n	800e2fe <_printf_i+0xce>
 800e2e8:	680e      	ldr	r6, [r1, #0]
 800e2ea:	602b      	str	r3, [r5, #0]
 800e2ec:	2e00      	cmp	r6, #0
 800e2ee:	da03      	bge.n	800e2f8 <_printf_i+0xc8>
 800e2f0:	232d      	movs	r3, #45	; 0x2d
 800e2f2:	4276      	negs	r6, r6
 800e2f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2f8:	230a      	movs	r3, #10
 800e2fa:	485e      	ldr	r0, [pc, #376]	; (800e474 <_printf_i+0x244>)
 800e2fc:	e019      	b.n	800e332 <_printf_i+0x102>
 800e2fe:	680e      	ldr	r6, [r1, #0]
 800e300:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e304:	602b      	str	r3, [r5, #0]
 800e306:	bf18      	it	ne
 800e308:	b236      	sxthne	r6, r6
 800e30a:	e7ef      	b.n	800e2ec <_printf_i+0xbc>
 800e30c:	682b      	ldr	r3, [r5, #0]
 800e30e:	6820      	ldr	r0, [r4, #0]
 800e310:	1d19      	adds	r1, r3, #4
 800e312:	6029      	str	r1, [r5, #0]
 800e314:	0601      	lsls	r1, r0, #24
 800e316:	d501      	bpl.n	800e31c <_printf_i+0xec>
 800e318:	681e      	ldr	r6, [r3, #0]
 800e31a:	e002      	b.n	800e322 <_printf_i+0xf2>
 800e31c:	0646      	lsls	r6, r0, #25
 800e31e:	d5fb      	bpl.n	800e318 <_printf_i+0xe8>
 800e320:	881e      	ldrh	r6, [r3, #0]
 800e322:	2f6f      	cmp	r7, #111	; 0x6f
 800e324:	bf0c      	ite	eq
 800e326:	2308      	moveq	r3, #8
 800e328:	230a      	movne	r3, #10
 800e32a:	4852      	ldr	r0, [pc, #328]	; (800e474 <_printf_i+0x244>)
 800e32c:	2100      	movs	r1, #0
 800e32e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e332:	6865      	ldr	r5, [r4, #4]
 800e334:	2d00      	cmp	r5, #0
 800e336:	bfa8      	it	ge
 800e338:	6821      	ldrge	r1, [r4, #0]
 800e33a:	60a5      	str	r5, [r4, #8]
 800e33c:	bfa4      	itt	ge
 800e33e:	f021 0104 	bicge.w	r1, r1, #4
 800e342:	6021      	strge	r1, [r4, #0]
 800e344:	b90e      	cbnz	r6, 800e34a <_printf_i+0x11a>
 800e346:	2d00      	cmp	r5, #0
 800e348:	d04d      	beq.n	800e3e6 <_printf_i+0x1b6>
 800e34a:	4615      	mov	r5, r2
 800e34c:	fbb6 f1f3 	udiv	r1, r6, r3
 800e350:	fb03 6711 	mls	r7, r3, r1, r6
 800e354:	5dc7      	ldrb	r7, [r0, r7]
 800e356:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e35a:	4637      	mov	r7, r6
 800e35c:	42bb      	cmp	r3, r7
 800e35e:	460e      	mov	r6, r1
 800e360:	d9f4      	bls.n	800e34c <_printf_i+0x11c>
 800e362:	2b08      	cmp	r3, #8
 800e364:	d10b      	bne.n	800e37e <_printf_i+0x14e>
 800e366:	6823      	ldr	r3, [r4, #0]
 800e368:	07de      	lsls	r6, r3, #31
 800e36a:	d508      	bpl.n	800e37e <_printf_i+0x14e>
 800e36c:	6923      	ldr	r3, [r4, #16]
 800e36e:	6861      	ldr	r1, [r4, #4]
 800e370:	4299      	cmp	r1, r3
 800e372:	bfde      	ittt	le
 800e374:	2330      	movle	r3, #48	; 0x30
 800e376:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e37a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e37e:	1b52      	subs	r2, r2, r5
 800e380:	6122      	str	r2, [r4, #16]
 800e382:	464b      	mov	r3, r9
 800e384:	4621      	mov	r1, r4
 800e386:	4640      	mov	r0, r8
 800e388:	f8cd a000 	str.w	sl, [sp]
 800e38c:	aa03      	add	r2, sp, #12
 800e38e:	f7ff fedf 	bl	800e150 <_printf_common>
 800e392:	3001      	adds	r0, #1
 800e394:	d14c      	bne.n	800e430 <_printf_i+0x200>
 800e396:	f04f 30ff 	mov.w	r0, #4294967295
 800e39a:	b004      	add	sp, #16
 800e39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3a0:	4834      	ldr	r0, [pc, #208]	; (800e474 <_printf_i+0x244>)
 800e3a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e3a6:	6829      	ldr	r1, [r5, #0]
 800e3a8:	6823      	ldr	r3, [r4, #0]
 800e3aa:	f851 6b04 	ldr.w	r6, [r1], #4
 800e3ae:	6029      	str	r1, [r5, #0]
 800e3b0:	061d      	lsls	r5, r3, #24
 800e3b2:	d514      	bpl.n	800e3de <_printf_i+0x1ae>
 800e3b4:	07df      	lsls	r7, r3, #31
 800e3b6:	bf44      	itt	mi
 800e3b8:	f043 0320 	orrmi.w	r3, r3, #32
 800e3bc:	6023      	strmi	r3, [r4, #0]
 800e3be:	b91e      	cbnz	r6, 800e3c8 <_printf_i+0x198>
 800e3c0:	6823      	ldr	r3, [r4, #0]
 800e3c2:	f023 0320 	bic.w	r3, r3, #32
 800e3c6:	6023      	str	r3, [r4, #0]
 800e3c8:	2310      	movs	r3, #16
 800e3ca:	e7af      	b.n	800e32c <_printf_i+0xfc>
 800e3cc:	6823      	ldr	r3, [r4, #0]
 800e3ce:	f043 0320 	orr.w	r3, r3, #32
 800e3d2:	6023      	str	r3, [r4, #0]
 800e3d4:	2378      	movs	r3, #120	; 0x78
 800e3d6:	4828      	ldr	r0, [pc, #160]	; (800e478 <_printf_i+0x248>)
 800e3d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e3dc:	e7e3      	b.n	800e3a6 <_printf_i+0x176>
 800e3de:	0659      	lsls	r1, r3, #25
 800e3e0:	bf48      	it	mi
 800e3e2:	b2b6      	uxthmi	r6, r6
 800e3e4:	e7e6      	b.n	800e3b4 <_printf_i+0x184>
 800e3e6:	4615      	mov	r5, r2
 800e3e8:	e7bb      	b.n	800e362 <_printf_i+0x132>
 800e3ea:	682b      	ldr	r3, [r5, #0]
 800e3ec:	6826      	ldr	r6, [r4, #0]
 800e3ee:	1d18      	adds	r0, r3, #4
 800e3f0:	6961      	ldr	r1, [r4, #20]
 800e3f2:	6028      	str	r0, [r5, #0]
 800e3f4:	0635      	lsls	r5, r6, #24
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	d501      	bpl.n	800e3fe <_printf_i+0x1ce>
 800e3fa:	6019      	str	r1, [r3, #0]
 800e3fc:	e002      	b.n	800e404 <_printf_i+0x1d4>
 800e3fe:	0670      	lsls	r0, r6, #25
 800e400:	d5fb      	bpl.n	800e3fa <_printf_i+0x1ca>
 800e402:	8019      	strh	r1, [r3, #0]
 800e404:	2300      	movs	r3, #0
 800e406:	4615      	mov	r5, r2
 800e408:	6123      	str	r3, [r4, #16]
 800e40a:	e7ba      	b.n	800e382 <_printf_i+0x152>
 800e40c:	682b      	ldr	r3, [r5, #0]
 800e40e:	2100      	movs	r1, #0
 800e410:	1d1a      	adds	r2, r3, #4
 800e412:	602a      	str	r2, [r5, #0]
 800e414:	681d      	ldr	r5, [r3, #0]
 800e416:	6862      	ldr	r2, [r4, #4]
 800e418:	4628      	mov	r0, r5
 800e41a:	f000 f82f 	bl	800e47c <memchr>
 800e41e:	b108      	cbz	r0, 800e424 <_printf_i+0x1f4>
 800e420:	1b40      	subs	r0, r0, r5
 800e422:	6060      	str	r0, [r4, #4]
 800e424:	6863      	ldr	r3, [r4, #4]
 800e426:	6123      	str	r3, [r4, #16]
 800e428:	2300      	movs	r3, #0
 800e42a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e42e:	e7a8      	b.n	800e382 <_printf_i+0x152>
 800e430:	462a      	mov	r2, r5
 800e432:	4649      	mov	r1, r9
 800e434:	4640      	mov	r0, r8
 800e436:	6923      	ldr	r3, [r4, #16]
 800e438:	47d0      	blx	sl
 800e43a:	3001      	adds	r0, #1
 800e43c:	d0ab      	beq.n	800e396 <_printf_i+0x166>
 800e43e:	6823      	ldr	r3, [r4, #0]
 800e440:	079b      	lsls	r3, r3, #30
 800e442:	d413      	bmi.n	800e46c <_printf_i+0x23c>
 800e444:	68e0      	ldr	r0, [r4, #12]
 800e446:	9b03      	ldr	r3, [sp, #12]
 800e448:	4298      	cmp	r0, r3
 800e44a:	bfb8      	it	lt
 800e44c:	4618      	movlt	r0, r3
 800e44e:	e7a4      	b.n	800e39a <_printf_i+0x16a>
 800e450:	2301      	movs	r3, #1
 800e452:	4632      	mov	r2, r6
 800e454:	4649      	mov	r1, r9
 800e456:	4640      	mov	r0, r8
 800e458:	47d0      	blx	sl
 800e45a:	3001      	adds	r0, #1
 800e45c:	d09b      	beq.n	800e396 <_printf_i+0x166>
 800e45e:	3501      	adds	r5, #1
 800e460:	68e3      	ldr	r3, [r4, #12]
 800e462:	9903      	ldr	r1, [sp, #12]
 800e464:	1a5b      	subs	r3, r3, r1
 800e466:	42ab      	cmp	r3, r5
 800e468:	dcf2      	bgt.n	800e450 <_printf_i+0x220>
 800e46a:	e7eb      	b.n	800e444 <_printf_i+0x214>
 800e46c:	2500      	movs	r5, #0
 800e46e:	f104 0619 	add.w	r6, r4, #25
 800e472:	e7f5      	b.n	800e460 <_printf_i+0x230>
 800e474:	0800ea76 	.word	0x0800ea76
 800e478:	0800ea87 	.word	0x0800ea87

0800e47c <memchr>:
 800e47c:	4603      	mov	r3, r0
 800e47e:	b510      	push	{r4, lr}
 800e480:	b2c9      	uxtb	r1, r1
 800e482:	4402      	add	r2, r0
 800e484:	4293      	cmp	r3, r2
 800e486:	4618      	mov	r0, r3
 800e488:	d101      	bne.n	800e48e <memchr+0x12>
 800e48a:	2000      	movs	r0, #0
 800e48c:	e003      	b.n	800e496 <memchr+0x1a>
 800e48e:	7804      	ldrb	r4, [r0, #0]
 800e490:	3301      	adds	r3, #1
 800e492:	428c      	cmp	r4, r1
 800e494:	d1f6      	bne.n	800e484 <memchr+0x8>
 800e496:	bd10      	pop	{r4, pc}

0800e498 <memmove>:
 800e498:	4288      	cmp	r0, r1
 800e49a:	b510      	push	{r4, lr}
 800e49c:	eb01 0402 	add.w	r4, r1, r2
 800e4a0:	d902      	bls.n	800e4a8 <memmove+0x10>
 800e4a2:	4284      	cmp	r4, r0
 800e4a4:	4623      	mov	r3, r4
 800e4a6:	d807      	bhi.n	800e4b8 <memmove+0x20>
 800e4a8:	1e43      	subs	r3, r0, #1
 800e4aa:	42a1      	cmp	r1, r4
 800e4ac:	d008      	beq.n	800e4c0 <memmove+0x28>
 800e4ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4b6:	e7f8      	b.n	800e4aa <memmove+0x12>
 800e4b8:	4601      	mov	r1, r0
 800e4ba:	4402      	add	r2, r0
 800e4bc:	428a      	cmp	r2, r1
 800e4be:	d100      	bne.n	800e4c2 <memmove+0x2a>
 800e4c0:	bd10      	pop	{r4, pc}
 800e4c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4ca:	e7f7      	b.n	800e4bc <memmove+0x24>

0800e4cc <_realloc_r>:
 800e4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d0:	4680      	mov	r8, r0
 800e4d2:	4614      	mov	r4, r2
 800e4d4:	460e      	mov	r6, r1
 800e4d6:	b921      	cbnz	r1, 800e4e2 <_realloc_r+0x16>
 800e4d8:	4611      	mov	r1, r2
 800e4da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4de:	f7ff baf3 	b.w	800dac8 <_malloc_r>
 800e4e2:	b92a      	cbnz	r2, 800e4f0 <_realloc_r+0x24>
 800e4e4:	f7ff fc90 	bl	800de08 <_free_r>
 800e4e8:	4625      	mov	r5, r4
 800e4ea:	4628      	mov	r0, r5
 800e4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4f0:	f000 f81b 	bl	800e52a <_malloc_usable_size_r>
 800e4f4:	4284      	cmp	r4, r0
 800e4f6:	4607      	mov	r7, r0
 800e4f8:	d802      	bhi.n	800e500 <_realloc_r+0x34>
 800e4fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e4fe:	d812      	bhi.n	800e526 <_realloc_r+0x5a>
 800e500:	4621      	mov	r1, r4
 800e502:	4640      	mov	r0, r8
 800e504:	f7ff fae0 	bl	800dac8 <_malloc_r>
 800e508:	4605      	mov	r5, r0
 800e50a:	2800      	cmp	r0, #0
 800e50c:	d0ed      	beq.n	800e4ea <_realloc_r+0x1e>
 800e50e:	42bc      	cmp	r4, r7
 800e510:	4622      	mov	r2, r4
 800e512:	4631      	mov	r1, r6
 800e514:	bf28      	it	cs
 800e516:	463a      	movcs	r2, r7
 800e518:	f7ff faa0 	bl	800da5c <memcpy>
 800e51c:	4631      	mov	r1, r6
 800e51e:	4640      	mov	r0, r8
 800e520:	f7ff fc72 	bl	800de08 <_free_r>
 800e524:	e7e1      	b.n	800e4ea <_realloc_r+0x1e>
 800e526:	4635      	mov	r5, r6
 800e528:	e7df      	b.n	800e4ea <_realloc_r+0x1e>

0800e52a <_malloc_usable_size_r>:
 800e52a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e52e:	1f18      	subs	r0, r3, #4
 800e530:	2b00      	cmp	r3, #0
 800e532:	bfbc      	itt	lt
 800e534:	580b      	ldrlt	r3, [r1, r0]
 800e536:	18c0      	addlt	r0, r0, r3
 800e538:	4770      	bx	lr
	...

0800e53c <_init>:
 800e53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e53e:	bf00      	nop
 800e540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e542:	bc08      	pop	{r3}
 800e544:	469e      	mov	lr, r3
 800e546:	4770      	bx	lr

0800e548 <_fini>:
 800e548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e54a:	bf00      	nop
 800e54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e54e:	bc08      	pop	{r3}
 800e550:	469e      	mov	lr, r3
 800e552:	4770      	bx	lr
