
ADC_DHT_SD_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af5c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  0800b06c  0800b06c  0001b06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4f0  0800b4f0  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b4f0  0800b4f0  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b4f0  0800b4f0  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4f0  0800b4f0  0001b4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4f4  0800b4f4  0001b4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800b4f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016c4  2000009c  0800b594  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001760  0800b594  00021760  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c459  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004719  00000000  00000000  0003c51e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  00040c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a20  00000000  00000000  00042830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e26  00000000  00000000  00044250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd4d  00000000  00000000  0004b076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085786  00000000  00000000  0006adc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0549  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007840  00000000  00000000  000f059c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000009c 	.word	0x2000009c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b054 	.word	0x0800b054

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a0 	.word	0x200000a0
 800014c:	0800b054 	.word	0x0800b054

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000168:	6878      	ldr	r0, [r7, #4]
 800016a:	f7ff fff1 	bl	8000150 <strlen>
 800016e:	4603      	mov	r3, r0
 8000170:	b29a      	uxth	r2, r3
 8000172:	f04f 33ff 	mov.w	r3, #4294967295
 8000176:	6879      	ldr	r1, [r7, #4]
 8000178:	4803      	ldr	r0, [pc, #12]	; (8000188 <Send_Uart+0x28>)
 800017a:	f004 fd18 	bl	8004bae <HAL_UART_Transmit>
}
 800017e:	bf00      	nop
 8000180:	3708      	adds	r7, #8
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	200008f8 	.word	0x200008f8

0800018c <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000194:	2201      	movs	r2, #1
 8000196:	6879      	ldr	r1, [r7, #4]
 8000198:	480a      	ldr	r0, [pc, #40]	; (80001c4 <Mount_SD+0x38>)
 800019a:	f006 fe6d 	bl	8006e78 <f_mount>
 800019e:	4603      	mov	r3, r0
 80001a0:	461a      	mov	r2, r3
 80001a2:	4b09      	ldr	r3, [pc, #36]	; (80001c8 <Mount_SD+0x3c>)
 80001a4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) HD44780_PrintStr("NO SD");
 80001a6:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <Mount_SD+0x3c>)
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d003      	beq.n	80001b6 <Mount_SD+0x2a>
 80001ae:	4807      	ldr	r0, [pc, #28]	; (80001cc <Mount_SD+0x40>)
 80001b0:	f001 f839 	bl	8001226 <HD44780_PrintStr>
	else HD44780_PrintStr("Iniciando");
}
 80001b4:	e002      	b.n	80001bc <Mount_SD+0x30>
	else HD44780_PrintStr("Iniciando");
 80001b6:	4806      	ldr	r0, [pc, #24]	; (80001d0 <Mount_SD+0x44>)
 80001b8:	f001 f835 	bl	8001226 <HD44780_PrintStr>
}
 80001bc:	bf00      	nop
 80001be:	3708      	adds	r7, #8
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	200000b8 	.word	0x200000b8
 80001c8:	20000530 	.word	0x20000530
 80001cc:	0800b06c 	.word	0x0800b06c
 80001d0:	0800b074 	.word	0x0800b074

080001d4 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80001dc:	2201      	movs	r2, #1
 80001de:	6879      	ldr	r1, [r7, #4]
 80001e0:	2000      	movs	r0, #0
 80001e2:	f006 fe49 	bl	8006e78 <f_mount>
 80001e6:	4603      	mov	r3, r0
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <Unmount_SD+0x24>)
 80001ec:	701a      	strb	r2, [r3, #0]
	/*if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");*/
}
 80001ee:	bf00      	nop
 80001f0:	3708      	adds	r7, #8
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000530 	.word	0x20000530

080001fc <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8000206:	4933      	ldr	r1, [pc, #204]	; (80002d4 <Write_File+0xd8>)
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f007 fdc7 	bl	8007d9c <f_stat>
 800020e:	4603      	mov	r3, r0
 8000210:	461a      	mov	r2, r3
 8000212:	4b31      	ldr	r3, [pc, #196]	; (80002d8 <Write_File+0xdc>)
 8000214:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000216:	4b30      	ldr	r3, [pc, #192]	; (80002d8 <Write_File+0xdc>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d010      	beq.n	8000240 <Write_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 800021e:	2064      	movs	r0, #100	; 0x64
 8000220:	f00a f894 	bl	800a34c <pvPortMalloc>
 8000224:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "Error en SD");
 8000226:	492d      	ldr	r1, [pc, #180]	; (80002dc <Write_File+0xe0>)
 8000228:	68f8      	ldr	r0, [r7, #12]
 800022a:	f00a faa7 	bl	800a77c <siprintf>
		HD44780_PrintStr(buf);
 800022e:	68f8      	ldr	r0, [r7, #12]
 8000230:	f000 fff9 	bl	8001226 <HD44780_PrintStr>
	    vPortFree(buf);
 8000234:	68f8      	ldr	r0, [r7, #12]
 8000236:	f00a f94d 	bl	800a4d4 <vPortFree>
	    return fresult;
 800023a:	4b27      	ldr	r3, [pc, #156]	; (80002d8 <Write_File+0xdc>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	e045      	b.n	80002cc <Write_File+0xd0>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_EXISTING | FA_WRITE);
 8000240:	2202      	movs	r2, #2
 8000242:	6879      	ldr	r1, [r7, #4]
 8000244:	4826      	ldr	r0, [pc, #152]	; (80002e0 <Write_File+0xe4>)
 8000246:	f006 fe7f 	bl	8006f48 <f_open>
 800024a:	4603      	mov	r3, r0
 800024c:	461a      	mov	r2, r3
 800024e:	4b22      	ldr	r3, [pc, #136]	; (80002d8 <Write_File+0xdc>)
 8000250:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000252:	4b21      	ldr	r3, [pc, #132]	; (80002d8 <Write_File+0xdc>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d010      	beq.n	800027c <Write_File+0x80>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800025a:	2064      	movs	r0, #100	; 0x64
 800025c:	f00a f876 	bl	800a34c <pvPortMalloc>
 8000260:	6138      	str	r0, [r7, #16]
			sprintf (buf, "Error en SD");
 8000262:	491e      	ldr	r1, [pc, #120]	; (80002dc <Write_File+0xe0>)
 8000264:	6938      	ldr	r0, [r7, #16]
 8000266:	f00a fa89 	bl	800a77c <siprintf>
			HD44780_PrintStr(buf);
 800026a:	6938      	ldr	r0, [r7, #16]
 800026c:	f000 ffdb 	bl	8001226 <HD44780_PrintStr>
	        vPortFree(buf);
 8000270:	6938      	ldr	r0, [r7, #16]
 8000272:	f00a f92f 	bl	800a4d4 <vPortFree>
	        return fresult;
 8000276:	4b18      	ldr	r3, [pc, #96]	; (80002d8 <Write_File+0xdc>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	e027      	b.n	80002cc <Write_File+0xd0>
	    }

	    else
	    {
	    	fresult = f_write(&fil, data, strlen(data), &bw);
 800027c:	6838      	ldr	r0, [r7, #0]
 800027e:	f7ff ff67 	bl	8000150 <strlen>
 8000282:	4602      	mov	r2, r0
 8000284:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <Write_File+0xe8>)
 8000286:	6839      	ldr	r1, [r7, #0]
 8000288:	4815      	ldr	r0, [pc, #84]	; (80002e0 <Write_File+0xe4>)
 800028a:	f007 fa97 	bl	80077bc <f_write>
 800028e:	4603      	mov	r3, r0
 8000290:	461a      	mov	r2, r3
 8000292:	4b11      	ldr	r3, [pc, #68]	; (80002d8 <Write_File+0xdc>)
 8000294:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000296:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <Write_File+0xdc>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d00d      	beq.n	80002ba <Write_File+0xbe>
	    	{
	    		char *buf = pvPortMalloc(100*sizeof(char));
 800029e:	2064      	movs	r0, #100	; 0x64
 80002a0:	f00a f854 	bl	800a34c <pvPortMalloc>
 80002a4:	6178      	str	r0, [r7, #20]
	    		sprintf (buf, "Error en SD");
 80002a6:	490d      	ldr	r1, [pc, #52]	; (80002dc <Write_File+0xe0>)
 80002a8:	6978      	ldr	r0, [r7, #20]
 80002aa:	f00a fa67 	bl	800a77c <siprintf>
	    		HD44780_PrintStr(buf);
 80002ae:	6978      	ldr	r0, [r7, #20]
 80002b0:	f000 ffb9 	bl	8001226 <HD44780_PrintStr>
	    		vPortFree(buf);
 80002b4:	6978      	ldr	r0, [r7, #20]
 80002b6:	f00a f90d 	bl	800a4d4 <vPortFree>
	    	}

	    	/* Close file */
	    	fresult = f_close(&fil);
 80002ba:	4809      	ldr	r0, [pc, #36]	; (80002e0 <Write_File+0xe4>)
 80002bc:	f007 fd3e 	bl	8007d3c <f_close>
 80002c0:	4603      	mov	r3, r0
 80002c2:	461a      	mov	r2, r3
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <Write_File+0xdc>)
 80002c6:	701a      	strb	r2, [r3, #0]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n", name);
	    		Send_Uart(buf);
	    		vPortFree(buf);
	    	}*/
	    }
	    return fresult;
 80002c8:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <Write_File+0xdc>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
	}
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3718      	adds	r7, #24
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000518 	.word	0x20000518
 80002d8:	20000530 	.word	0x20000530
 80002dc:	0800b0b4 	.word	0x0800b0b4
 80002e0:	200002ec 	.word	0x200002ec
 80002e4:	20000538 	.word	0x20000538

080002e8 <Read_File>:

FRESULT Read_File (char *name,char *lectura)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80002f2:	4939      	ldr	r1, [pc, #228]	; (80003d8 <Read_File+0xf0>)
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f007 fd51 	bl	8007d9c <f_stat>
 80002fa:	4603      	mov	r3, r0
 80002fc:	461a      	mov	r2, r3
 80002fe:	4b37      	ldr	r3, [pc, #220]	; (80003dc <Read_File+0xf4>)
 8000300:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000302:	4b36      	ldr	r3, [pc, #216]	; (80003dc <Read_File+0xf4>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d010      	beq.n	800032c <Read_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 800030a:	2064      	movs	r0, #100	; 0x64
 800030c:	f00a f81e 	bl	800a34c <pvPortMalloc>
 8000310:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "Error en SD");
 8000312:	4933      	ldr	r1, [pc, #204]	; (80003e0 <Read_File+0xf8>)
 8000314:	68b8      	ldr	r0, [r7, #8]
 8000316:	f00a fa31 	bl	800a77c <siprintf>
		HD44780_PrintStr(buf);
 800031a:	68b8      	ldr	r0, [r7, #8]
 800031c:	f000 ff83 	bl	8001226 <HD44780_PrintStr>
		vPortFree(buf);
 8000320:	68b8      	ldr	r0, [r7, #8]
 8000322:	f00a f8d7 	bl	800a4d4 <vPortFree>
	    return fresult;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <Read_File+0xf4>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	e051      	b.n	80003d0 <Read_File+0xe8>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&fil, name, FA_READ);
 800032c:	2201      	movs	r2, #1
 800032e:	6879      	ldr	r1, [r7, #4]
 8000330:	482c      	ldr	r0, [pc, #176]	; (80003e4 <Read_File+0xfc>)
 8000332:	f006 fe09 	bl	8006f48 <f_open>
 8000336:	4603      	mov	r3, r0
 8000338:	461a      	mov	r2, r3
 800033a:	4b28      	ldr	r3, [pc, #160]	; (80003dc <Read_File+0xf4>)
 800033c:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 800033e:	4b27      	ldr	r3, [pc, #156]	; (80003dc <Read_File+0xf4>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d010      	beq.n	8000368 <Read_File+0x80>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8000346:	2064      	movs	r0, #100	; 0x64
 8000348:	f00a f800 	bl	800a34c <pvPortMalloc>
 800034c:	60f8      	str	r0, [r7, #12]
			sprintf (buf, "Error en SD");
 800034e:	4924      	ldr	r1, [pc, #144]	; (80003e0 <Read_File+0xf8>)
 8000350:	68f8      	ldr	r0, [r7, #12]
 8000352:	f00a fa13 	bl	800a77c <siprintf>
			HD44780_PrintStr(buf);
 8000356:	68f8      	ldr	r0, [r7, #12]
 8000358:	f000 ff65 	bl	8001226 <HD44780_PrintStr>
		    vPortFree(buf);
 800035c:	68f8      	ldr	r0, [r7, #12]
 800035e:	f00a f8b9 	bl	800a4d4 <vPortFree>
		    return fresult;
 8000362:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <Read_File+0xf4>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	e033      	b.n	80003d0 <Read_File+0xe8>
		}

		/* Read data from the file
		* see the function details for the arguments */

		char *buffer = pvPortMalloc(sizeof(f_size(&fil)));
 8000368:	2004      	movs	r0, #4
 800036a:	f009 ffef 	bl	800a34c <pvPortMalloc>
 800036e:	6178      	str	r0, [r7, #20]
		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 8000370:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <Read_File+0xfc>)
 8000372:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000376:	4b1c      	ldr	r3, [pc, #112]	; (80003e8 <Read_File+0x100>)
 8000378:	6979      	ldr	r1, [r7, #20]
 800037a:	481a      	ldr	r0, [pc, #104]	; (80003e4 <Read_File+0xfc>)
 800037c:	f007 f869 	bl	8007452 <f_read>
 8000380:	4603      	mov	r3, r0
 8000382:	461a      	mov	r2, r3
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <Read_File+0xf4>)
 8000386:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <Read_File+0xf4>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d011      	beq.n	80003b4 <Read_File+0xcc>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8000390:	2064      	movs	r0, #100	; 0x64
 8000392:	f009 ffdb 	bl	800a34c <pvPortMalloc>
 8000396:	6138      	str	r0, [r7, #16]
			vPortFree(buffer);
 8000398:	6978      	ldr	r0, [r7, #20]
 800039a:	f00a f89b 	bl	800a4d4 <vPortFree>
			sprintf (buf, "Error en SD");
 800039e:	4910      	ldr	r1, [pc, #64]	; (80003e0 <Read_File+0xf8>)
 80003a0:	6938      	ldr	r0, [r7, #16]
 80003a2:	f00a f9eb 	bl	800a77c <siprintf>
			HD44780_PrintStr(buf);
 80003a6:	6938      	ldr	r0, [r7, #16]
 80003a8:	f000 ff3d 	bl	8001226 <HD44780_PrintStr>
		  	vPortFree(buf);
 80003ac:	6938      	ldr	r0, [r7, #16]
 80003ae:	f00a f891 	bl	800a4d4 <vPortFree>
 80003b2:	e00b      	b.n	80003cc <Read_File+0xe4>
		}

		else
		{
			//Send_Uart(buffer);
			lectura = buffer;
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	603b      	str	r3, [r7, #0]

			vPortFree(buffer);
 80003b8:	6978      	ldr	r0, [r7, #20]
 80003ba:	f00a f88b 	bl	800a4d4 <vPortFree>

			/* Close file */
			fresult = f_close(&fil);
 80003be:	4809      	ldr	r0, [pc, #36]	; (80003e4 <Read_File+0xfc>)
 80003c0:	f007 fcbc 	bl	8007d3c <f_close>
 80003c4:	4603      	mov	r3, r0
 80003c6:	461a      	mov	r2, r3
 80003c8:	4b04      	ldr	r3, [pc, #16]	; (80003dc <Read_File+0xf4>)
 80003ca:	701a      	strb	r2, [r3, #0]
				sprintf (buf, "File *%s* CLOSED successfully\n", name);
				Send_Uart(buf);
				vPortFree(buf);
			}*/
		}
	    return fresult;
 80003cc:	4b03      	ldr	r3, [pc, #12]	; (80003dc <Read_File+0xf4>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
	}
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000518 	.word	0x20000518
 80003dc:	20000530 	.word	0x20000530
 80003e0:	0800b0b4 	.word	0x0800b0b4
 80003e4:	200002ec 	.word	0x200002ec
 80003e8:	20000534 	.word	0x20000534

080003ec <Create_File>:

FRESULT Create_File (char *name)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 80003f4:	4940      	ldr	r1, [pc, #256]	; (80004f8 <Create_File+0x10c>)
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f007 fcd0 	bl	8007d9c <f_stat>
 80003fc:	4603      	mov	r3, r0
 80003fe:	461a      	mov	r2, r3
 8000400:	4b3e      	ldr	r3, [pc, #248]	; (80004fc <Create_File+0x110>)
 8000402:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000404:	4b3d      	ldr	r3, [pc, #244]	; (80004fc <Create_File+0x110>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 800040c:	2064      	movs	r0, #100	; 0x64
 800040e:	f009 ff9d 	bl	800a34c <pvPortMalloc>
 8000412:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	493a      	ldr	r1, [pc, #232]	; (8000500 <Create_File+0x114>)
 8000418:	68f8      	ldr	r0, [r7, #12]
 800041a:	f00a f9af 	bl	800a77c <siprintf>
		Send_Uart(buf);
 800041e:	68f8      	ldr	r0, [r7, #12]
 8000420:	f7ff fe9e 	bl	8000160 <Send_Uart>
		vPortFree(buf);
 8000424:	68f8      	ldr	r0, [r7, #12]
 8000426:	f00a f855 	bl	800a4d4 <vPortFree>
	    return fresult;
 800042a:	4b34      	ldr	r3, [pc, #208]	; (80004fc <Create_File+0x110>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	e05f      	b.n	80004f0 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000430:	220b      	movs	r2, #11
 8000432:	6879      	ldr	r1, [r7, #4]
 8000434:	4833      	ldr	r0, [pc, #204]	; (8000504 <Create_File+0x118>)
 8000436:	f006 fd87 	bl	8006f48 <f_open>
 800043a:	4603      	mov	r3, r0
 800043c:	461a      	mov	r2, r3
 800043e:	4b2f      	ldr	r3, [pc, #188]	; (80004fc <Create_File+0x110>)
 8000440:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000442:	4b2e      	ldr	r3, [pc, #184]	; (80004fc <Create_File+0x110>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d014      	beq.n	8000474 <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800044a:	2064      	movs	r0, #100	; 0x64
 800044c:	f009 ff7e 	bl	800a34c <pvPortMalloc>
 8000450:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000452:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <Create_File+0x110>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	461a      	mov	r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	492b      	ldr	r1, [pc, #172]	; (8000508 <Create_File+0x11c>)
 800045c:	6938      	ldr	r0, [r7, #16]
 800045e:	f00a f98d 	bl	800a77c <siprintf>
			Send_Uart(buf);
 8000462:	6938      	ldr	r0, [r7, #16]
 8000464:	f7ff fe7c 	bl	8000160 <Send_Uart>
			vPortFree(buf);
 8000468:	6938      	ldr	r0, [r7, #16]
 800046a:	f00a f833 	bl	800a4d4 <vPortFree>
		    return fresult;
 800046e:	4b23      	ldr	r3, [pc, #140]	; (80004fc <Create_File+0x110>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	e03d      	b.n	80004f0 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8000474:	2064      	movs	r0, #100	; 0x64
 8000476:	f009 ff69 	bl	800a34c <pvPortMalloc>
 800047a:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	4923      	ldr	r1, [pc, #140]	; (800050c <Create_File+0x120>)
 8000480:	69f8      	ldr	r0, [r7, #28]
 8000482:	f00a f97b 	bl	800a77c <siprintf>
			Send_Uart(buf);
 8000486:	69f8      	ldr	r0, [r7, #28]
 8000488:	f7ff fe6a 	bl	8000160 <Send_Uart>
			vPortFree(buf);
 800048c:	69f8      	ldr	r0, [r7, #28]
 800048e:	f00a f821 	bl	800a4d4 <vPortFree>
		}

		fresult = f_close(&fil);
 8000492:	481c      	ldr	r0, [pc, #112]	; (8000504 <Create_File+0x118>)
 8000494:	f007 fc52 	bl	8007d3c <f_close>
 8000498:	4603      	mov	r3, r0
 800049a:	461a      	mov	r2, r3
 800049c:	4b17      	ldr	r3, [pc, #92]	; (80004fc <Create_File+0x110>)
 800049e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80004a0:	4b16      	ldr	r3, [pc, #88]	; (80004fc <Create_File+0x110>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d012      	beq.n	80004ce <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80004a8:	2064      	movs	r0, #100	; 0x64
 80004aa:	f009 ff4f 	bl	800a34c <pvPortMalloc>
 80004ae:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <Create_File+0x110>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	461a      	mov	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4915      	ldr	r1, [pc, #84]	; (8000510 <Create_File+0x124>)
 80004ba:	6978      	ldr	r0, [r7, #20]
 80004bc:	f00a f95e 	bl	800a77c <siprintf>
			Send_Uart(buf);
 80004c0:	6978      	ldr	r0, [r7, #20]
 80004c2:	f7ff fe4d 	bl	8000160 <Send_Uart>
			vPortFree(buf);
 80004c6:	6978      	ldr	r0, [r7, #20]
 80004c8:	f00a f804 	bl	800a4d4 <vPortFree>
 80004cc:	e00e      	b.n	80004ec <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80004ce:	2064      	movs	r0, #100	; 0x64
 80004d0:	f009 ff3c 	bl	800a34c <pvPortMalloc>
 80004d4:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	490e      	ldr	r1, [pc, #56]	; (8000514 <Create_File+0x128>)
 80004da:	69b8      	ldr	r0, [r7, #24]
 80004dc:	f00a f94e 	bl	800a77c <siprintf>
			Send_Uart(buf);
 80004e0:	69b8      	ldr	r0, [r7, #24]
 80004e2:	f7ff fe3d 	bl	8000160 <Send_Uart>
			vPortFree(buf);
 80004e6:	69b8      	ldr	r0, [r7, #24]
 80004e8:	f009 fff4 	bl	800a4d4 <vPortFree>
		}
	}
    return fresult;
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <Create_File+0x110>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3720      	adds	r7, #32
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000518 	.word	0x20000518
 80004fc:	20000530 	.word	0x20000530
 8000500:	0800b0c0 	.word	0x0800b0c0
 8000504:	200002ec 	.word	0x200002ec
 8000508:	0800b0f8 	.word	0x0800b0f8
 800050c:	0800b120 	.word	0x0800b120
 8000510:	0800b160 	.word	0x0800b160
 8000514:	0800b184 	.word	0x0800b184

08000518 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8000522:	4953      	ldr	r1, [pc, #332]	; (8000670 <Update_File+0x158>)
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f007 fc39 	bl	8007d9c <f_stat>
 800052a:	4603      	mov	r3, r0
 800052c:	461a      	mov	r2, r3
 800052e:	4b51      	ldr	r3, [pc, #324]	; (8000674 <Update_File+0x15c>)
 8000530:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000532:	4b50      	ldr	r3, [pc, #320]	; (8000674 <Update_File+0x15c>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d011      	beq.n	800055e <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 800053a:	2064      	movs	r0, #100	; 0x64
 800053c:	f009 ff06 	bl	800a34c <pvPortMalloc>
 8000540:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	494c      	ldr	r1, [pc, #304]	; (8000678 <Update_File+0x160>)
 8000546:	68b8      	ldr	r0, [r7, #8]
 8000548:	f00a f918 	bl	800a77c <siprintf>
		Send_Uart (buf);
 800054c:	68b8      	ldr	r0, [r7, #8]
 800054e:	f7ff fe07 	bl	8000160 <Send_Uart>
		vPortFree(buf);
 8000552:	68b8      	ldr	r0, [r7, #8]
 8000554:	f009 ffbe 	bl	800a4d4 <vPortFree>
	    return fresult;
 8000558:	4b46      	ldr	r3, [pc, #280]	; (8000674 <Update_File+0x15c>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	e083      	b.n	8000666 <Update_File+0x14e>
	}

	else
	{
		 /* Open file with write access */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 800055e:	2232      	movs	r2, #50	; 0x32
 8000560:	6879      	ldr	r1, [r7, #4]
 8000562:	4846      	ldr	r0, [pc, #280]	; (800067c <Update_File+0x164>)
 8000564:	f006 fcf0 	bl	8006f48 <f_open>
 8000568:	4603      	mov	r3, r0
 800056a:	461a      	mov	r2, r3
 800056c:	4b41      	ldr	r3, [pc, #260]	; (8000674 <Update_File+0x15c>)
 800056e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000570:	4b40      	ldr	r3, [pc, #256]	; (8000674 <Update_File+0x15c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d014      	beq.n	80005a2 <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8000578:	2064      	movs	r0, #100	; 0x64
 800057a:	f009 fee7 	bl	800a34c <pvPortMalloc>
 800057e:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000580:	4b3c      	ldr	r3, [pc, #240]	; (8000674 <Update_File+0x15c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	493d      	ldr	r1, [pc, #244]	; (8000680 <Update_File+0x168>)
 800058a:	68f8      	ldr	r0, [r7, #12]
 800058c:	f00a f8f6 	bl	800a77c <siprintf>
	    	Send_Uart(buf);
 8000590:	68f8      	ldr	r0, [r7, #12]
 8000592:	f7ff fde5 	bl	8000160 <Send_Uart>
	        vPortFree(buf);
 8000596:	68f8      	ldr	r0, [r7, #12]
 8000598:	f009 ff9c 	bl	800a4d4 <vPortFree>
	        return fresult;
 800059c:	4b35      	ldr	r3, [pc, #212]	; (8000674 <Update_File+0x15c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	e061      	b.n	8000666 <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80005a2:	6838      	ldr	r0, [r7, #0]
 80005a4:	f7ff fdd4 	bl	8000150 <strlen>
 80005a8:	4602      	mov	r2, r0
 80005aa:	4b36      	ldr	r3, [pc, #216]	; (8000684 <Update_File+0x16c>)
 80005ac:	6839      	ldr	r1, [r7, #0]
 80005ae:	4833      	ldr	r0, [pc, #204]	; (800067c <Update_File+0x164>)
 80005b0:	f007 f904 	bl	80077bc <f_write>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b2e      	ldr	r3, [pc, #184]	; (8000674 <Update_File+0x15c>)
 80005ba:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <Update_File+0x15c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d012      	beq.n	80005ea <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80005c4:	2064      	movs	r0, #100	; 0x64
 80005c6:	f009 fec1 	bl	800a34c <pvPortMalloc>
 80005ca:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <Update_File+0x15c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	492c      	ldr	r1, [pc, #176]	; (8000688 <Update_File+0x170>)
 80005d6:	69b8      	ldr	r0, [r7, #24]
 80005d8:	f00a f8d0 	bl	800a77c <siprintf>
	    	Send_Uart(buf);
 80005dc:	69b8      	ldr	r0, [r7, #24]
 80005de:	f7ff fdbf 	bl	8000160 <Send_Uart>
	    	vPortFree(buf);
 80005e2:	69b8      	ldr	r0, [r7, #24]
 80005e4:	f009 ff76 	bl	800a4d4 <vPortFree>
 80005e8:	e00e      	b.n	8000608 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80005ea:	2064      	movs	r0, #100	; 0x64
 80005ec:	f009 feae 	bl	800a34c <pvPortMalloc>
 80005f0:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4925      	ldr	r1, [pc, #148]	; (800068c <Update_File+0x174>)
 80005f6:	69f8      	ldr	r0, [r7, #28]
 80005f8:	f00a f8c0 	bl	800a77c <siprintf>
	    	Send_Uart(buf);
 80005fc:	69f8      	ldr	r0, [r7, #28]
 80005fe:	f7ff fdaf 	bl	8000160 <Send_Uart>
	    	vPortFree(buf);
 8000602:	69f8      	ldr	r0, [r7, #28]
 8000604:	f009 ff66 	bl	800a4d4 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8000608:	481c      	ldr	r0, [pc, #112]	; (800067c <Update_File+0x164>)
 800060a:	f007 fb97 	bl	8007d3c <f_close>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <Update_File+0x15c>)
 8000614:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <Update_File+0x15c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d012      	beq.n	8000644 <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800061e:	2064      	movs	r0, #100	; 0x64
 8000620:	f009 fe94 	bl	800a34c <pvPortMalloc>
 8000624:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <Update_File+0x15c>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4918      	ldr	r1, [pc, #96]	; (8000690 <Update_File+0x178>)
 8000630:	6938      	ldr	r0, [r7, #16]
 8000632:	f00a f8a3 	bl	800a77c <siprintf>
	    	Send_Uart(buf);
 8000636:	6938      	ldr	r0, [r7, #16]
 8000638:	f7ff fd92 	bl	8000160 <Send_Uart>
	    	vPortFree(buf);
 800063c:	6938      	ldr	r0, [r7, #16]
 800063e:	f009 ff49 	bl	800a4d4 <vPortFree>
 8000642:	e00e      	b.n	8000662 <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8000644:	2064      	movs	r0, #100	; 0x64
 8000646:	f009 fe81 	bl	800a34c <pvPortMalloc>
 800064a:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	4911      	ldr	r1, [pc, #68]	; (8000694 <Update_File+0x17c>)
 8000650:	6978      	ldr	r0, [r7, #20]
 8000652:	f00a f893 	bl	800a77c <siprintf>
	    	Send_Uart(buf);
 8000656:	6978      	ldr	r0, [r7, #20]
 8000658:	f7ff fd82 	bl	8000160 <Send_Uart>
	    	vPortFree(buf);
 800065c:	6978      	ldr	r0, [r7, #20]
 800065e:	f009 ff39 	bl	800a4d4 <vPortFree>
	     }
	}
    return fresult;
 8000662:	4b04      	ldr	r3, [pc, #16]	; (8000674 <Update_File+0x15c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3720      	adds	r7, #32
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000518 	.word	0x20000518
 8000674:	20000530 	.word	0x20000530
 8000678:	0800b1a4 	.word	0x0800b1a4
 800067c:	200002ec 	.word	0x200002ec
 8000680:	0800b1c4 	.word	0x0800b1c4
 8000684:	20000538 	.word	0x20000538
 8000688:	0800b1ec 	.word	0x0800b1ec
 800068c:	0800b214 	.word	0x0800b214
 8000690:	0800b230 	.word	0x0800b230
 8000694:	0800b184 	.word	0x0800b184

08000698 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	2101      	movs	r1, #1
 80006a0:	4802      	ldr	r0, [pc, #8]	; (80006ac <SELECT+0x14>)
 80006a2:	f002 f999 	bl	80029d8 <HAL_GPIO_WritePin>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40010c00 	.word	0x40010c00

080006b0 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2101      	movs	r1, #1
 80006b8:	4802      	ldr	r0, [pc, #8]	; (80006c4 <DESELECT+0x14>)
 80006ba:	f002 f98d 	bl	80029d8 <HAL_GPIO_WritePin>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40010c00 	.word	0x40010c00

080006c8 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80006d2:	bf00      	nop
 80006d4:	4808      	ldr	r0, [pc, #32]	; (80006f8 <SPI_TxByte+0x30>)
 80006d6:	f003 fdfc 	bl	80042d2 <HAL_SPI_GetState>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d1f9      	bne.n	80006d4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80006e0:	1df9      	adds	r1, r7, #7
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	2201      	movs	r2, #1
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <SPI_TxByte+0x30>)
 80006ea:	f003 fb1c 	bl	8003d26 <HAL_SPI_Transmit>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000820 	.word	0x20000820

080006fc <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000702:	23ff      	movs	r3, #255	; 0xff
 8000704:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800070a:	bf00      	nop
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <SPI_RxByte+0x38>)
 800070e:	f003 fde0 	bl	80042d2 <HAL_SPI_GetState>
 8000712:	4603      	mov	r3, r0
 8000714:	2b01      	cmp	r3, #1
 8000716:	d1f9      	bne.n	800070c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000718:	1dba      	adds	r2, r7, #6
 800071a:	1df9      	adds	r1, r7, #7
 800071c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	4803      	ldr	r0, [pc, #12]	; (8000734 <SPI_RxByte+0x38>)
 8000726:	f003 fc32 	bl	8003f8e <HAL_SPI_TransmitReceive>
  
  return data;
 800072a:	79bb      	ldrb	r3, [r7, #6]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000820 	.word	0x20000820

08000738 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000740:	f7ff ffdc 	bl	80006fc <SPI_RxByte>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	701a      	strb	r2, [r3, #0]
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <SD_ReadyWait+0x34>)
 800075c:	2232      	movs	r2, #50	; 0x32
 800075e:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000760:	f7ff ffcc 	bl	80006fc <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000764:	f7ff ffca 	bl	80006fc <SPI_RxByte>
 8000768:	4603      	mov	r3, r0
 800076a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2bff      	cmp	r3, #255	; 0xff
 8000770:	d004      	beq.n	800077c <SD_ReadyWait+0x28>
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <SD_ReadyWait+0x34>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f3      	bne.n	8000764 <SD_ReadyWait+0x10>
  
  return res;
 800077c:	79fb      	ldrb	r3, [r7, #7]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000986 	.word	0x20000986

0800078c <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000792:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000796:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000798:	f7ff ff8a 	bl	80006b0 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	e005      	b.n	80007ae <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80007a2:	20ff      	movs	r0, #255	; 0xff
 80007a4:	f7ff ff90 	bl	80006c8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	3301      	adds	r3, #1
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	2b09      	cmp	r3, #9
 80007b2:	ddf6      	ble.n	80007a2 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80007b4:	f7ff ff70 	bl	8000698 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80007b8:	2340      	movs	r3, #64	; 0x40
 80007ba:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80007cc:	2395      	movs	r3, #149	; 0x95
 80007ce:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	e009      	b.n	80007ea <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80007d6:	1d3a      	adds	r2, r7, #4
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff72 	bl	80006c8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3301      	adds	r3, #1
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	2b05      	cmp	r3, #5
 80007ee:	ddf2      	ble.n	80007d6 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80007f0:	e002      	b.n	80007f8 <SD_PowerOn+0x6c>
  {
    Count--;
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80007f8:	f7ff ff80 	bl	80006fc <SPI_RxByte>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d002      	beq.n	8000808 <SD_PowerOn+0x7c>
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1f4      	bne.n	80007f2 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000808:	f7ff ff52 	bl	80006b0 <DESELECT>
  SPI_TxByte(0XFF);
 800080c:	20ff      	movs	r0, #255	; 0xff
 800080e:	f7ff ff5b 	bl	80006c8 <SPI_TxByte>
  
  PowerFlag = 1;
 8000812:	4b03      	ldr	r3, [pc, #12]	; (8000820 <SD_PowerOn+0x94>)
 8000814:	2201      	movs	r2, #1
 8000816:	701a      	strb	r2, [r3, #0]
}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000053d 	.word	0x2000053d

08000824 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <SD_PowerOff+0x14>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	2000053d 	.word	0x2000053d

0800083c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000840:	4b02      	ldr	r3, [pc, #8]	; (800084c <SD_CheckPower+0x10>)
 8000842:	781b      	ldrb	r3, [r3, #0]
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	2000053d 	.word	0x2000053d

08000850 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <SD_RxDataBlock+0x68>)
 800085c:	220a      	movs	r2, #10
 800085e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000860:	f7ff ff4c 	bl	80006fc <SPI_RxByte>
 8000864:	4603      	mov	r3, r0
 8000866:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	2bff      	cmp	r3, #255	; 0xff
 800086c:	d104      	bne.n	8000878 <SD_RxDataBlock+0x28>
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <SD_RxDataBlock+0x68>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1f3      	bne.n	8000860 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	2bfe      	cmp	r3, #254	; 0xfe
 800087c:	d001      	beq.n	8000882 <SD_RxDataBlock+0x32>
    return FALSE;
 800087e:	2300      	movs	r3, #0
 8000880:	e016      	b.n	80008b0 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	1c5a      	adds	r2, r3, #1
 8000886:	607a      	str	r2, [r7, #4]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff55 	bl	8000738 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	1c5a      	adds	r2, r3, #1
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff4f 	bl	8000738 <SPI_RxBytePtr>
  } while(btr -= 2);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	3b02      	subs	r3, #2
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d1ed      	bne.n	8000882 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80008a6:	f7ff ff29 	bl	80006fc <SPI_RxByte>
  SPI_RxByte();
 80008aa:	f7ff ff27 	bl	80006fc <SPI_RxByte>
  
  return TRUE;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000985 	.word	0x20000985

080008bc <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80008cc:	f7ff ff42 	bl	8000754 <SD_ReadyWait>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2bff      	cmp	r3, #255	; 0xff
 80008d4:	d001      	beq.n	80008da <SD_TxDataBlock+0x1e>
    return FALSE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e040      	b.n	800095c <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fef3 	bl	80006c8 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	2bfd      	cmp	r3, #253	; 0xfd
 80008e6:	d031      	beq.n	800094c <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	607a      	str	r2, [r7, #4]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fee7 	bl	80006c8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	1c5a      	adds	r2, r3, #1
 80008fe:	607a      	str	r2, [r7, #4]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fee0 	bl	80006c8 <SPI_TxByte>
    } while (--wc);
 8000908:	7bbb      	ldrb	r3, [r7, #14]
 800090a:	3b01      	subs	r3, #1
 800090c:	73bb      	strb	r3, [r7, #14]
 800090e:	7bbb      	ldrb	r3, [r7, #14]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1eb      	bne.n	80008ec <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8000914:	f7ff fef2 	bl	80006fc <SPI_RxByte>
    SPI_RxByte();
 8000918:	f7ff fef0 	bl	80006fc <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 800091c:	e00b      	b.n	8000936 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800091e:	f7ff feed 	bl	80006fc <SPI_RxByte>
 8000922:	4603      	mov	r3, r0
 8000924:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	f003 031f 	and.w	r3, r3, #31
 800092c:	2b05      	cmp	r3, #5
 800092e:	d006      	beq.n	800093e <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8000930:	7b7b      	ldrb	r3, [r7, #13]
 8000932:	3301      	adds	r3, #1
 8000934:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8000936:	7b7b      	ldrb	r3, [r7, #13]
 8000938:	2b40      	cmp	r3, #64	; 0x40
 800093a:	d9f0      	bls.n	800091e <SD_TxDataBlock+0x62>
 800093c:	e000      	b.n	8000940 <SD_TxDataBlock+0x84>
        break;
 800093e:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000940:	bf00      	nop
 8000942:	f7ff fedb 	bl	80006fc <SPI_RxByte>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0fa      	beq.n	8000942 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	f003 031f 	and.w	r3, r3, #31
 8000952:	2b05      	cmp	r3, #5
 8000954:	d101      	bne.n	800095a <SD_TxDataBlock+0x9e>
    return TRUE;
 8000956:	2301      	movs	r3, #1
 8000958:	e000      	b.n	800095c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000970:	f7ff fef0 	bl	8000754 <SD_ReadyWait>
 8000974:	4603      	mov	r3, r0
 8000976:	2bff      	cmp	r3, #255	; 0xff
 8000978:	d001      	beq.n	800097e <SD_SendCmd+0x1a>
    return 0xFF;
 800097a:	23ff      	movs	r3, #255	; 0xff
 800097c:	e040      	b.n	8000a00 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fea1 	bl	80006c8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	0e1b      	lsrs	r3, r3, #24
 800098a:	b2db      	uxtb	r3, r3
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fe9b 	bl	80006c8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	0c1b      	lsrs	r3, r3, #16
 8000996:	b2db      	uxtb	r3, r3
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fe95 	bl	80006c8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fe8f 	bl	80006c8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fe8a 	bl	80006c8 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2b40      	cmp	r3, #64	; 0x40
 80009bc:	d101      	bne.n	80009c2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80009be:	2395      	movs	r3, #149	; 0x95
 80009c0:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b48      	cmp	r3, #72	; 0x48
 80009c6:	d101      	bne.n	80009cc <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80009c8:	2387      	movs	r3, #135	; 0x87
 80009ca:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fe7a 	bl	80006c8 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b4c      	cmp	r3, #76	; 0x4c
 80009d8:	d101      	bne.n	80009de <SD_SendCmd+0x7a>
    SPI_RxByte();
 80009da:	f7ff fe8f 	bl	80006fc <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80009de:	230a      	movs	r3, #10
 80009e0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80009e2:	f7ff fe8b 	bl	80006fc <SPI_RxByte>
 80009e6:	4603      	mov	r3, r0
 80009e8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80009ea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	da05      	bge.n	80009fe <SD_SendCmd+0x9a>
 80009f2:	7bbb      	ldrb	r3, [r7, #14]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	73bb      	strb	r3, [r7, #14]
 80009f8:	7bbb      	ldrb	r3, [r7, #14]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1f1      	bne.n	80009e2 <SD_SendCmd+0x7e>
  
  return res;
 80009fe:	7b7b      	ldrb	r3, [r7, #13]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e0d5      	b.n	8000bc8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000a1c:	4b6c      	ldr	r3, [pc, #432]	; (8000bd0 <SD_disk_initialize+0x1c8>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d003      	beq.n	8000a32 <SD_disk_initialize+0x2a>
    return Stat;        
 8000a2a:	4b69      	ldr	r3, [pc, #420]	; (8000bd0 <SD_disk_initialize+0x1c8>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	e0ca      	b.n	8000bc8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8000a32:	f7ff feab 	bl	800078c <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8000a36:	f7ff fe2f 	bl	8000698 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2040      	movs	r0, #64	; 0x40
 8000a42:	f7ff ff8f 	bl	8000964 <SD_SendCmd>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	f040 80a5 	bne.w	8000b98 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000a4e:	4b61      	ldr	r3, [pc, #388]	; (8000bd4 <SD_disk_initialize+0x1cc>)
 8000a50:	2264      	movs	r2, #100	; 0x64
 8000a52:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8000a54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000a58:	2048      	movs	r0, #72	; 0x48
 8000a5a:	f7ff ff83 	bl	8000964 <SD_SendCmd>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d158      	bne.n	8000b16 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	73fb      	strb	r3, [r7, #15]
 8000a68:	e00c      	b.n	8000a84 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000a6a:	7bfc      	ldrb	r4, [r7, #15]
 8000a6c:	f7ff fe46 	bl	80006fc <SPI_RxByte>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	f104 0310 	add.w	r3, r4, #16
 8000a78:	443b      	add	r3, r7
 8000a7a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	3301      	adds	r3, #1
 8000a82:	73fb      	strb	r3, [r7, #15]
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d9ef      	bls.n	8000a6a <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8000a8a:	7abb      	ldrb	r3, [r7, #10]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	f040 8083 	bne.w	8000b98 <SD_disk_initialize+0x190>
 8000a92:	7afb      	ldrb	r3, [r7, #11]
 8000a94:	2baa      	cmp	r3, #170	; 0xaa
 8000a96:	d17f      	bne.n	8000b98 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2077      	movs	r0, #119	; 0x77
 8000a9c:	f7ff ff62 	bl	8000964 <SD_SendCmd>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d807      	bhi.n	8000ab6 <SD_disk_initialize+0xae>
 8000aa6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000aaa:	2069      	movs	r0, #105	; 0x69
 8000aac:	f7ff ff5a 	bl	8000964 <SD_SendCmd>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d005      	beq.n	8000ac2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000ab6:	4b47      	ldr	r3, [pc, #284]	; (8000bd4 <SD_disk_initialize+0x1cc>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1eb      	bne.n	8000a98 <SD_disk_initialize+0x90>
 8000ac0:	e000      	b.n	8000ac4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000ac2:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8000ac4:	4b43      	ldr	r3, [pc, #268]	; (8000bd4 <SD_disk_initialize+0x1cc>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d064      	beq.n	8000b98 <SD_disk_initialize+0x190>
 8000ace:	2100      	movs	r1, #0
 8000ad0:	207a      	movs	r0, #122	; 0x7a
 8000ad2:	f7ff ff47 	bl	8000964 <SD_SendCmd>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d15d      	bne.n	8000b98 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]
 8000ae0:	e00c      	b.n	8000afc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000ae2:	7bfc      	ldrb	r4, [r7, #15]
 8000ae4:	f7ff fe0a 	bl	80006fc <SPI_RxByte>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	461a      	mov	r2, r3
 8000aec:	f104 0310 	add.w	r3, r4, #16
 8000af0:	443b      	add	r3, r7
 8000af2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	3301      	adds	r3, #1
 8000afa:	73fb      	strb	r3, [r7, #15]
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d9ef      	bls.n	8000ae2 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8000b02:	7a3b      	ldrb	r3, [r7, #8]
 8000b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SD_disk_initialize+0x108>
 8000b0c:	2306      	movs	r3, #6
 8000b0e:	e000      	b.n	8000b12 <SD_disk_initialize+0x10a>
 8000b10:	2302      	movs	r3, #2
 8000b12:	73bb      	strb	r3, [r7, #14]
 8000b14:	e040      	b.n	8000b98 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000b16:	2100      	movs	r1, #0
 8000b18:	2077      	movs	r0, #119	; 0x77
 8000b1a:	f7ff ff23 	bl	8000964 <SD_SendCmd>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d808      	bhi.n	8000b36 <SD_disk_initialize+0x12e>
 8000b24:	2100      	movs	r1, #0
 8000b26:	2069      	movs	r0, #105	; 0x69
 8000b28:	f7ff ff1c 	bl	8000964 <SD_SendCmd>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d801      	bhi.n	8000b36 <SD_disk_initialize+0x12e>
 8000b32:	2302      	movs	r3, #2
 8000b34:	e000      	b.n	8000b38 <SD_disk_initialize+0x130>
 8000b36:	2301      	movs	r3, #1
 8000b38:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8000b3a:	7bbb      	ldrb	r3, [r7, #14]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d10e      	bne.n	8000b5e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000b40:	2100      	movs	r1, #0
 8000b42:	2077      	movs	r0, #119	; 0x77
 8000b44:	f7ff ff0e 	bl	8000964 <SD_SendCmd>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d80e      	bhi.n	8000b6c <SD_disk_initialize+0x164>
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2069      	movs	r0, #105	; 0x69
 8000b52:	f7ff ff07 	bl	8000964 <SD_SendCmd>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d107      	bne.n	8000b6c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000b5c:	e00d      	b.n	8000b7a <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2041      	movs	r0, #65	; 0x41
 8000b62:	f7ff feff 	bl	8000964 <SD_SendCmd>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d005      	beq.n	8000b78 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <SD_disk_initialize+0x1cc>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1e1      	bne.n	8000b3a <SD_disk_initialize+0x132>
 8000b76:	e000      	b.n	8000b7a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000b78:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <SD_disk_initialize+0x1cc>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d007      	beq.n	8000b94 <SD_disk_initialize+0x18c>
 8000b84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b88:	2050      	movs	r0, #80	; 0x50
 8000b8a:	f7ff feeb 	bl	8000964 <SD_SendCmd>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8000b98:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <SD_disk_initialize+0x1d0>)
 8000b9a:	7bbb      	ldrb	r3, [r7, #14]
 8000b9c:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8000b9e:	f7ff fd87 	bl	80006b0 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000ba2:	f7ff fdab 	bl	80006fc <SPI_RxByte>
  
  if (type) 
 8000ba6:	7bbb      	ldrb	r3, [r7, #14]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d008      	beq.n	8000bbe <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <SD_disk_initialize+0x1c8>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	f023 0301 	bic.w	r3, r3, #1
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <SD_disk_initialize+0x1c8>)
 8000bba:	701a      	strb	r2, [r3, #0]
 8000bbc:	e001      	b.n	8000bc2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000bbe:	f7ff fe31 	bl	8000824 <SD_PowerOff>
  }
  
  return Stat;
 8000bc2:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <SD_disk_initialize+0x1c8>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd90      	pop	{r4, r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000985 	.word	0x20000985
 8000bd8:	2000053c 	.word	0x2000053c

08000bdc <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8000bec:	2301      	movs	r3, #1
 8000bee:	e002      	b.n	8000bf6 <SD_disk_status+0x1a>
  
  return Stat;
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <SD_disk_status+0x24>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	20000000 	.word	0x20000000

08000c04 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	4603      	mov	r3, r0
 8000c12:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d102      	bne.n	8000c20 <SD_disk_read+0x1c>
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d101      	bne.n	8000c24 <SD_disk_read+0x20>
    return RES_PARERR;
 8000c20:	2304      	movs	r3, #4
 8000c22:	e051      	b.n	8000cc8 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8000c24:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <SD_disk_read+0xcc>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000c32:	2303      	movs	r3, #3
 8000c34:	e048      	b.n	8000cc8 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8000c36:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <SD_disk_read+0xd0>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d102      	bne.n	8000c48 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	025b      	lsls	r3, r3, #9
 8000c46:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000c48:	f7ff fd26 	bl	8000698 <SELECT>
  
  if (count == 1) 
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d111      	bne.n	8000c76 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	2051      	movs	r0, #81	; 0x51
 8000c56:	f7ff fe85 	bl	8000964 <SD_SendCmd>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d129      	bne.n	8000cb4 <SD_disk_read+0xb0>
 8000c60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c64:	68b8      	ldr	r0, [r7, #8]
 8000c66:	f7ff fdf3 	bl	8000850 <SD_RxDataBlock>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d021      	beq.n	8000cb4 <SD_disk_read+0xb0>
      count = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	e01e      	b.n	8000cb4 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2052      	movs	r0, #82	; 0x52
 8000c7a:	f7ff fe73 	bl	8000964 <SD_SendCmd>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d117      	bne.n	8000cb4 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000c84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c88:	68b8      	ldr	r0, [r7, #8]
 8000c8a:	f7ff fde1 	bl	8000850 <SD_RxDataBlock>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d00a      	beq.n	8000caa <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c9a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1ed      	bne.n	8000c84 <SD_disk_read+0x80>
 8000ca8:	e000      	b.n	8000cac <SD_disk_read+0xa8>
          break;
 8000caa:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8000cac:	2100      	movs	r1, #0
 8000cae:	204c      	movs	r0, #76	; 0x4c
 8000cb0:	f7ff fe58 	bl	8000964 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8000cb4:	f7ff fcfc 	bl	80006b0 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000cb8:	f7ff fd20 	bl	80006fc <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	bf14      	ite	ne
 8000cc2:	2301      	movne	r3, #1
 8000cc4:	2300      	moveq	r3, #0
 8000cc6:	b2db      	uxtb	r3, r3
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	2000053c 	.word	0x2000053c

08000cd8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d102      	bne.n	8000cf4 <SD_disk_write+0x1c>
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d101      	bne.n	8000cf8 <SD_disk_write+0x20>
    return RES_PARERR;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	e06b      	b.n	8000dd0 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8000cf8:	4b37      	ldr	r3, [pc, #220]	; (8000dd8 <SD_disk_write+0x100>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e062      	b.n	8000dd0 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8000d0a:	4b33      	ldr	r3, [pc, #204]	; (8000dd8 <SD_disk_write+0x100>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SD_disk_write+0x44>
    return RES_WRPRT;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	e059      	b.n	8000dd0 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <SD_disk_write+0x104>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	025b      	lsls	r3, r3, #9
 8000d2c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000d2e:	f7ff fcb3 	bl	8000698 <SELECT>
  
  if (count == 1) 
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d110      	bne.n	8000d5a <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	2058      	movs	r0, #88	; 0x58
 8000d3c:	f7ff fe12 	bl	8000964 <SD_SendCmd>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d13a      	bne.n	8000dbc <SD_disk_write+0xe4>
 8000d46:	21fe      	movs	r1, #254	; 0xfe
 8000d48:	68b8      	ldr	r0, [r7, #8]
 8000d4a:	f7ff fdb7 	bl	80008bc <SD_TxDataBlock>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d033      	beq.n	8000dbc <SD_disk_write+0xe4>
      count = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	e030      	b.n	8000dbc <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <SD_disk_write+0x104>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d007      	beq.n	8000d76 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000d66:	2100      	movs	r1, #0
 8000d68:	2077      	movs	r0, #119	; 0x77
 8000d6a:	f7ff fdfb 	bl	8000964 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000d6e:	6839      	ldr	r1, [r7, #0]
 8000d70:	2057      	movs	r0, #87	; 0x57
 8000d72:	f7ff fdf7 	bl	8000964 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	2059      	movs	r0, #89	; 0x59
 8000d7a:	f7ff fdf3 	bl	8000964 <SD_SendCmd>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d11b      	bne.n	8000dbc <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000d84:	21fc      	movs	r1, #252	; 0xfc
 8000d86:	68b8      	ldr	r0, [r7, #8]
 8000d88:	f7ff fd98 	bl	80008bc <SD_TxDataBlock>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d00a      	beq.n	8000da8 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d98:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1ee      	bne.n	8000d84 <SD_disk_write+0xac>
 8000da6:	e000      	b.n	8000daa <SD_disk_write+0xd2>
          break;
 8000da8:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8000daa:	21fd      	movs	r1, #253	; 0xfd
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff fd85 	bl	80008bc <SD_TxDataBlock>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <SD_disk_write+0xe4>
      {        
        count = 1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8000dbc:	f7ff fc78 	bl	80006b0 <DESELECT>
  SPI_RxByte();
 8000dc0:	f7ff fc9c 	bl	80006fc <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	bf14      	ite	ne
 8000dca:	2301      	movne	r3, #1
 8000dcc:	2300      	moveq	r3, #0
 8000dce:	b2db      	uxtb	r3, r3
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	2000053c 	.word	0x2000053c

08000de0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b08b      	sub	sp, #44	; 0x2c
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	603a      	str	r2, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	460b      	mov	r3, r1
 8000dee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	e11b      	b.n	8001036 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	2b05      	cmp	r3, #5
 8000e08:	d129      	bne.n	8000e5e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d017      	beq.n	8000e42 <SD_disk_ioctl+0x62>
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	dc1f      	bgt.n	8000e56 <SD_disk_ioctl+0x76>
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d002      	beq.n	8000e20 <SD_disk_ioctl+0x40>
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d00b      	beq.n	8000e36 <SD_disk_ioctl+0x56>
 8000e1e:	e01a      	b.n	8000e56 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000e20:	f7ff fd0c 	bl	800083c <SD_CheckPower>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000e2a:	f7ff fcfb 	bl	8000824 <SD_PowerOff>
      res = RES_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e34:	e0fd      	b.n	8001032 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000e36:	f7ff fca9 	bl	800078c <SD_PowerOn>
      res = RES_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e40:	e0f7      	b.n	8001032 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000e42:	6a3b      	ldr	r3, [r7, #32]
 8000e44:	1c5c      	adds	r4, r3, #1
 8000e46:	f7ff fcf9 	bl	800083c <SD_CheckPower>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e54:	e0ed      	b.n	8001032 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000e56:	2304      	movs	r3, #4
 8000e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e5c:	e0e9      	b.n	8001032 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8000e5e:	4b78      	ldr	r3, [pc, #480]	; (8001040 <SD_disk_ioctl+0x260>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e0e2      	b.n	8001036 <SD_disk_ioctl+0x256>
    
    SELECT();
 8000e70:	f7ff fc12 	bl	8000698 <SELECT>
    
    switch (ctrl) 
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	2b0d      	cmp	r3, #13
 8000e78:	f200 80cc 	bhi.w	8001014 <SD_disk_ioctl+0x234>
 8000e7c:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <SD_disk_ioctl+0xa4>)
 8000e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e82:	bf00      	nop
 8000e84:	08000f7f 	.word	0x08000f7f
 8000e88:	08000ebd 	.word	0x08000ebd
 8000e8c:	08000f6f 	.word	0x08000f6f
 8000e90:	08001015 	.word	0x08001015
 8000e94:	08001015 	.word	0x08001015
 8000e98:	08001015 	.word	0x08001015
 8000e9c:	08001015 	.word	0x08001015
 8000ea0:	08001015 	.word	0x08001015
 8000ea4:	08001015 	.word	0x08001015
 8000ea8:	08001015 	.word	0x08001015
 8000eac:	08001015 	.word	0x08001015
 8000eb0:	08000f91 	.word	0x08000f91
 8000eb4:	08000fb5 	.word	0x08000fb5
 8000eb8:	08000fd9 	.word	0x08000fd9
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2049      	movs	r0, #73	; 0x49
 8000ec0:	f7ff fd50 	bl	8000964 <SD_SendCmd>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f040 80a8 	bne.w	800101c <SD_disk_ioctl+0x23c>
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fcbc 	bl	8000850 <SD_RxDataBlock>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 809e 	beq.w	800101c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8000ee0:	7b3b      	ldrb	r3, [r7, #12]
 8000ee2:	099b      	lsrs	r3, r3, #6
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d10e      	bne.n	8000f08 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000eea:	7d7b      	ldrb	r3, [r7, #21]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	7d3b      	ldrb	r3, [r7, #20]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	3301      	adds	r3, #1
 8000efc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000efe:	8bfb      	ldrh	r3, [r7, #30]
 8000f00:	029a      	lsls	r2, r3, #10
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	e02e      	b.n	8000f66 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000f08:	7c7b      	ldrb	r3, [r7, #17]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	7dbb      	ldrb	r3, [r7, #22]
 8000f12:	09db      	lsrs	r3, r3, #7
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	4413      	add	r3, r2
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	7d7b      	ldrb	r3, [r7, #21]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 0306 	and.w	r3, r3, #6
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4413      	add	r3, r2
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000f30:	7d3b      	ldrb	r3, [r7, #20]
 8000f32:	099b      	lsrs	r3, r3, #6
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	7cfb      	ldrb	r3, [r7, #19]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	4413      	add	r3, r2
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	7cbb      	ldrb	r3, [r7, #18]
 8000f46:	029b      	lsls	r3, r3, #10
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	4413      	add	r3, r2
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	3301      	adds	r3, #1
 8000f56:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000f58:	8bfa      	ldrh	r2, [r7, #30]
 8000f5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f5e:	3b09      	subs	r3, #9
 8000f60:	409a      	lsls	r2, r3
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000f6c:	e056      	b.n	800101c <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f74:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f7c:	e055      	b.n	800102a <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000f7e:	f7ff fbe9 	bl	8000754 <SD_ReadyWait>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2bff      	cmp	r3, #255	; 0xff
 8000f86:	d14b      	bne.n	8001020 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f8e:	e047      	b.n	8001020 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000f90:	2100      	movs	r1, #0
 8000f92:	2049      	movs	r0, #73	; 0x49
 8000f94:	f7ff fce6 	bl	8000964 <SD_SendCmd>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d142      	bne.n	8001024 <SD_disk_ioctl+0x244>
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	6a38      	ldr	r0, [r7, #32]
 8000fa2:	f7ff fc55 	bl	8000850 <SD_RxDataBlock>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d03b      	beq.n	8001024 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000fb2:	e037      	b.n	8001024 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	204a      	movs	r0, #74	; 0x4a
 8000fb8:	f7ff fcd4 	bl	8000964 <SD_SendCmd>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d132      	bne.n	8001028 <SD_disk_ioctl+0x248>
 8000fc2:	2110      	movs	r1, #16
 8000fc4:	6a38      	ldr	r0, [r7, #32]
 8000fc6:	f7ff fc43 	bl	8000850 <SD_RxDataBlock>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d02b      	beq.n	8001028 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000fd6:	e027      	b.n	8001028 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8000fd8:	2100      	movs	r1, #0
 8000fda:	207a      	movs	r0, #122	; 0x7a
 8000fdc:	f7ff fcc2 	bl	8000964 <SD_SendCmd>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d116      	bne.n	8001014 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000fec:	e00b      	b.n	8001006 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000fee:	6a3c      	ldr	r4, [r7, #32]
 8000ff0:	1c63      	adds	r3, r4, #1
 8000ff2:	623b      	str	r3, [r7, #32]
 8000ff4:	f7ff fb82 	bl	80006fc <SPI_RxByte>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ffc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001000:	3301      	adds	r3, #1
 8001002:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001006:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800100a:	2b03      	cmp	r3, #3
 800100c:	d9ef      	bls.n	8000fee <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001014:	2304      	movs	r3, #4
 8001016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800101a:	e006      	b.n	800102a <SD_disk_ioctl+0x24a>
      break;
 800101c:	bf00      	nop
 800101e:	e004      	b.n	800102a <SD_disk_ioctl+0x24a>
      break;
 8001020:	bf00      	nop
 8001022:	e002      	b.n	800102a <SD_disk_ioctl+0x24a>
      break;
 8001024:	bf00      	nop
 8001026:	e000      	b.n	800102a <SD_disk_ioctl+0x24a>
      break;
 8001028:	bf00      	nop
    }
    
    DESELECT();
 800102a:	f7ff fb41 	bl	80006b0 <DESELECT>
    SPI_RxByte();
 800102e:	f7ff fb65 	bl	80006fc <SPI_RxByte>
  }
  
  return res;
 8001032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001036:	4618      	mov	r0, r3
 8001038:	372c      	adds	r7, #44	; 0x2c
 800103a:	46bd      	mov	sp, r7
 800103c:	bd90      	pop	{r4, r7, pc}
 800103e:	bf00      	nop
 8001040:	20000000 	.word	0x20000000

08001044 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4a06      	ldr	r2, [pc, #24]	; (800106c <vApplicationGetIdleTaskMemory+0x28>)
 8001054:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	4a05      	ldr	r2, [pc, #20]	; (8001070 <vApplicationGetIdleTaskMemory+0x2c>)
 800105a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	20000540 	.word	0x20000540
 8001070:	20000594 	.word	0x20000594

08001074 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800107e:	4a38      	ldr	r2, [pc, #224]	; (8001160 <HD44780_Init+0xec>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001084:	4b37      	ldr	r3, [pc, #220]	; (8001164 <HD44780_Init+0xf0>)
 8001086:	2208      	movs	r2, #8
 8001088:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800108a:	4b37      	ldr	r3, [pc, #220]	; (8001168 <HD44780_Init+0xf4>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <HD44780_Init+0xec>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d907      	bls.n	80010a8 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001098:	4b33      	ldr	r3, [pc, #204]	; (8001168 <HD44780_Init+0xf4>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	f043 0308 	orr.w	r3, r3, #8
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b31      	ldr	r3, [pc, #196]	; (8001168 <HD44780_Init+0xf4>)
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	e006      	b.n	80010b6 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80010a8:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <HD44780_Init+0xf4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <HD44780_Init+0xf4>)
 80010b4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80010b6:	f000 f97d 	bl	80013b4 <DelayInit>
  HAL_Delay(50);
 80010ba:	2032      	movs	r0, #50	; 0x32
 80010bc:	f000 fffa 	bl	80020b4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <HD44780_Init+0xf0>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f93b 	bl	8001340 <ExpanderWrite>
  HAL_Delay(1000);
 80010ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ce:	f000 fff1 	bl	80020b4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80010d2:	2030      	movs	r0, #48	; 0x30
 80010d4:	f000 f923 	bl	800131e <Write4Bits>
  DelayUS(4500);
 80010d8:	f241 1094 	movw	r0, #4500	; 0x1194
 80010dc:	f000 f992 	bl	8001404 <DelayUS>

  Write4Bits(0x03 << 4);
 80010e0:	2030      	movs	r0, #48	; 0x30
 80010e2:	f000 f91c 	bl	800131e <Write4Bits>
  DelayUS(4500);
 80010e6:	f241 1094 	movw	r0, #4500	; 0x1194
 80010ea:	f000 f98b 	bl	8001404 <DelayUS>

  Write4Bits(0x03 << 4);
 80010ee:	2030      	movs	r0, #48	; 0x30
 80010f0:	f000 f915 	bl	800131e <Write4Bits>
  DelayUS(4500);
 80010f4:	f241 1094 	movw	r0, #4500	; 0x1194
 80010f8:	f000 f984 	bl	8001404 <DelayUS>

  Write4Bits(0x02 << 4);
 80010fc:	2020      	movs	r0, #32
 80010fe:	f000 f90e 	bl	800131e <Write4Bits>
  DelayUS(100);
 8001102:	2064      	movs	r0, #100	; 0x64
 8001104:	f000 f97e 	bl	8001404 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HD44780_Init+0xf4>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	f043 0320 	orr.w	r3, r3, #32
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f8c6 	bl	80012a4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <HD44780_Init+0xf8>)
 800111a:	2204      	movs	r2, #4
 800111c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800111e:	f000 f843 	bl	80011a8 <HD44780_Display>
  HD44780_Clear();
 8001122:	f000 f82b 	bl	800117c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HD44780_Init+0xfc>)
 8001128:	2202      	movs	r2, #2
 800112a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <HD44780_Init+0xfc>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f8b4 	bl	80012a4 <SendCommand>
  DelayUS(4500);
 800113c:	f241 1094 	movw	r0, #4500	; 0x1194
 8001140:	f000 f960 	bl	8001404 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001144:	490b      	ldr	r1, [pc, #44]	; (8001174 <HD44780_Init+0x100>)
 8001146:	2000      	movs	r0, #0
 8001148:	f000 f844 	bl	80011d4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 800114c:	490a      	ldr	r1, [pc, #40]	; (8001178 <HD44780_Init+0x104>)
 800114e:	2001      	movs	r0, #1
 8001150:	f000 f840 	bl	80011d4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001154:	f000 f81d 	bl	8001192 <HD44780_Home>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000797 	.word	0x20000797
 8001164:	20000798 	.word	0x20000798
 8001168:	20000794 	.word	0x20000794
 800116c:	20000795 	.word	0x20000795
 8001170:	20000796 	.word	0x20000796
 8001174:	20000004 	.word	0x20000004
 8001178:	2000000c 	.word	0x2000000c

0800117c <HD44780_Clear>:

void HD44780_Clear()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001180:	2001      	movs	r0, #1
 8001182:	f000 f88f 	bl	80012a4 <SendCommand>
  DelayUS(2000);
 8001186:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800118a:	f000 f93b 	bl	8001404 <DelayUS>
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}

08001192 <HD44780_Home>:

void HD44780_Home()
{
 8001192:	b580      	push	{r7, lr}
 8001194:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001196:	2002      	movs	r0, #2
 8001198:	f000 f884 	bl	80012a4 <SendCommand>
  DelayUS(2000);
 800119c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011a0:	f000 f930 	bl	8001404 <DelayUS>
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HD44780_Display+0x28>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HD44780_Display+0x28>)
 80011b8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HD44780_Display+0x28>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	f043 0308 	orr.w	r3, r3, #8
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f86d 	bl	80012a4 <SendCommand>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000795 	.word	0x20000795

080011d4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f854 	bl	80012a4 <SendCommand>
  for (int i=0; i<8; i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e009      	b.n	8001216 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f858 	bl	80012c0 <SendChar>
  for (int i=0; i<8; i++)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3301      	adds	r3, #1
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2b07      	cmp	r3, #7
 800121a:	ddf2      	ble.n	8001202 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800122e:	e006      	b.n	800123e <HD44780_PrintStr+0x18>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f841 	bl	80012c0 <SendChar>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f4      	bne.n	8001230 <HD44780_PrintStr+0xa>
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HD44780_SetBacklight>:

void HD44780_SetBacklight(uint8_t new_val)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if(new_val) HD44780_Backlight();
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <HD44780_SetBacklight+0x16>
 8001260:	f000 f814 	bl	800128c <HD44780_Backlight>
  else HD44780_NoBacklight();
}
 8001264:	e001      	b.n	800126a <HD44780_SetBacklight+0x1a>
  else HD44780_NoBacklight();
 8001266:	f000 f805 	bl	8001274 <HD44780_NoBacklight>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HD44780_NoBacklight>:

void HD44780_NoBacklight(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <HD44780_NoBacklight+0x14>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800127e:	2000      	movs	r0, #0
 8001280:	f000 f85e 	bl	8001340 <ExpanderWrite>
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000798 	.word	0x20000798

0800128c <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HD44780_Backlight+0x14>)
 8001292:	2208      	movs	r2, #8
 8001294:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8001296:	2000      	movs	r0, #0
 8001298:	f000 f852 	bl	8001340 <ExpanderWrite>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000798 	.word	0x20000798

080012a4 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f812 	bl	80012dc <Send>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <SendChar>:

static void SendChar(uint8_t ch)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2101      	movs	r1, #1
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f804 	bl	80012dc <Send>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	460a      	mov	r2, r1
 80012e6:	71fb      	strb	r3, [r7, #7]
 80012e8:	4613      	mov	r3, r2
 80012ea:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f023 030f 	bic.w	r3, r3, #15
 80012f2:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	4313      	orrs	r3, r2
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f80b 	bl	800131e <Write4Bits>
  Write4Bits((lownib)|mode);
 8001308:	7bba      	ldrb	r2, [r7, #14]
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	4313      	orrs	r3, r2
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f804 	bl	800131e <Write4Bits>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f808 	bl	8001340 <ExpanderWrite>
  PulseEnable(value);
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f820 	bl	8001378 <PulseEnable>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af02      	add	r7, sp, #8
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <ExpanderWrite+0x30>)
 800134c:	781a      	ldrb	r2, [r3, #0]
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	4313      	orrs	r3, r2
 8001352:	b2db      	uxtb	r3, r3
 8001354:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001356:	f107 020f 	add.w	r2, r7, #15
 800135a:	230a      	movs	r3, #10
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2301      	movs	r3, #1
 8001360:	217e      	movs	r1, #126	; 0x7e
 8001362:	4804      	ldr	r0, [pc, #16]	; (8001374 <ExpanderWrite+0x34>)
 8001364:	f001 fc84 	bl	8002c70 <HAL_I2C_Master_Transmit>
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000798 	.word	0x20000798
 8001374:	200007cc 	.word	0x200007cc

08001378 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ffd8 	bl	8001340 <ExpanderWrite>
  DelayUS(20);
 8001390:	2014      	movs	r0, #20
 8001392:	f000 f837 	bl	8001404 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f023 0304 	bic.w	r3, r3, #4
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ffce 	bl	8001340 <ExpanderWrite>
  DelayUS(20);
 80013a4:	2014      	movs	r0, #20
 80013a6:	f000 f82d 	bl	8001404 <DelayUS>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <DelayInit>:

static void DelayInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <DelayInit+0x48>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <DelayInit+0x48>)
 80013be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013c2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <DelayInit+0x48>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <DelayInit+0x48>)
 80013ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ce:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <DelayInit+0x4c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <DelayInit+0x4c>)
 80013d6:	f023 0301 	bic.w	r3, r3, #1
 80013da:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <DelayInit+0x4c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <DelayInit+0x4c>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <DelayInit+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80013ee:	bf00      	nop
  __ASM volatile ("NOP");
 80013f0:	bf00      	nop
  __ASM volatile ("NOP");
 80013f2:	bf00      	nop
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	e000edf0 	.word	0xe000edf0
 8001400:	e0001000 	.word	0xe0001000

08001404 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800140c:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <DelayUS+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <DelayUS+0x44>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	0c9a      	lsrs	r2, r3, #18
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	fb02 f303 	mul.w	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <DelayUS+0x48>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <DelayUS+0x48>)
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	429a      	cmp	r2, r3
 8001436:	d8f6      	bhi.n	8001426 <DelayUS+0x22>
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	371c      	adds	r7, #28
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	20000014 	.word	0x20000014
 8001448:	431bde83 	.word	0x431bde83
 800144c:	e0001000 	.word	0xe0001000

08001450 <SDCARD_Task>:
uint8_t escribir = 0,error = 0,programado = 0;

xTaskHandle SDCARD_Task_Hnadler;

void SDCARD_Task (void *argument)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if(escribir)
 8001458:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <SDCARD_Task+0xb4>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d017      	beq.n	8001490 <SDCARD_Task+0x40>
		{
			char *buffer = pvPortMalloc(50*sizeof(char));
 8001460:	2032      	movs	r0, #50	; 0x32
 8001462:	f008 ff73 	bl	800a34c <pvPortMalloc>
 8001466:	6178      	str	r0, [r7, #20]
			sprintf (buffer, "Proceso OK - HORA");
 8001468:	4927      	ldr	r1, [pc, #156]	; (8001508 <SDCARD_Task+0xb8>)
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f009 f986 	bl	800a77c <siprintf>
			Mount_SD("");
 8001470:	4826      	ldr	r0, [pc, #152]	; (800150c <SDCARD_Task+0xbc>)
 8001472:	f7fe fe8b 	bl	800018c <Mount_SD>
			Update_File("Procesos.txt", buffer);
 8001476:	6979      	ldr	r1, [r7, #20]
 8001478:	4825      	ldr	r0, [pc, #148]	; (8001510 <SDCARD_Task+0xc0>)
 800147a:	f7ff f84d 	bl	8000518 <Update_File>
			vPortFree(buffer);
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f009 f828 	bl	800a4d4 <vPortFree>
			Unmount_SD("");
 8001484:	4821      	ldr	r0, [pc, #132]	; (800150c <SDCARD_Task+0xbc>)
 8001486:	f7fe fea5 	bl	80001d4 <Unmount_SD>
			escribir = 0;
 800148a:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <SDCARD_Task+0xb4>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
		}

		if(error)
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <SDCARD_Task+0xc4>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d014      	beq.n	80014c2 <SDCARD_Task+0x72>
		{
			char *buffer = pvPortMalloc(50*sizeof(char));
 8001498:	2032      	movs	r0, #50	; 0x32
 800149a:	f008 ff57 	bl	800a34c <pvPortMalloc>
 800149e:	6138      	str	r0, [r7, #16]
			sprintf (buffer, "111");  // Acá habría que escribirle la combinación que corresponda según qué esté fallando
 80014a0:	491d      	ldr	r1, [pc, #116]	; (8001518 <SDCARD_Task+0xc8>)
 80014a2:	6938      	ldr	r0, [r7, #16]
 80014a4:	f009 f96a 	bl	800a77c <siprintf>
			Mount_SD("");
 80014a8:	4818      	ldr	r0, [pc, #96]	; (800150c <SDCARD_Task+0xbc>)
 80014aa:	f7fe fe6f 	bl	800018c <Mount_SD>
			Write_File("Sensores.txt", buffer);
 80014ae:	6939      	ldr	r1, [r7, #16]
 80014b0:	481a      	ldr	r0, [pc, #104]	; (800151c <SDCARD_Task+0xcc>)
 80014b2:	f7fe fea3 	bl	80001fc <Write_File>
			vPortFree(buffer);
 80014b6:	6938      	ldr	r0, [r7, #16]
 80014b8:	f009 f80c 	bl	800a4d4 <vPortFree>
			Unmount_SD("");
 80014bc:	4813      	ldr	r0, [pc, #76]	; (800150c <SDCARD_Task+0xbc>)
 80014be:	f7fe fe89 	bl	80001d4 <Unmount_SD>
		}

		if(programado)
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <SDCARD_Task+0xd0>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d017      	beq.n	80014fa <SDCARD_Task+0xaa>
		{
			char *buffer = pvPortMalloc(50*sizeof(char));
 80014ca:	2032      	movs	r0, #50	; 0x32
 80014cc:	f008 ff3e 	bl	800a34c <pvPortMalloc>
 80014d0:	60f8      	str	r0, [r7, #12]
			sprintf (buffer, "1 HORA");
 80014d2:	4914      	ldr	r1, [pc, #80]	; (8001524 <SDCARD_Task+0xd4>)
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f009 f951 	bl	800a77c <siprintf>
			Mount_SD("");
 80014da:	480c      	ldr	r0, [pc, #48]	; (800150c <SDCARD_Task+0xbc>)
 80014dc:	f7fe fe56 	bl	800018c <Mount_SD>
			Update_File("Programado.txt", buffer);
 80014e0:	68f9      	ldr	r1, [r7, #12]
 80014e2:	4811      	ldr	r0, [pc, #68]	; (8001528 <SDCARD_Task+0xd8>)
 80014e4:	f7ff f818 	bl	8000518 <Update_File>
			vPortFree(buffer);
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f008 fff3 	bl	800a4d4 <vPortFree>
			Unmount_SD("");
 80014ee:	4807      	ldr	r0, [pc, #28]	; (800150c <SDCARD_Task+0xbc>)
 80014f0:	f7fe fe70 	bl	80001d4 <Unmount_SD>
			programado = 0;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <SDCARD_Task+0xd0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
		}

		vTaskDelay(1000);  // ?
 80014fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014fe:	f007 feb3 	bl	8009268 <vTaskDelay>
		if(escribir)
 8001502:	e7a9      	b.n	8001458 <SDCARD_Task+0x8>
 8001504:	2000093c 	.word	0x2000093c
 8001508:	0800b334 	.word	0x0800b334
 800150c:	0800b348 	.word	0x0800b348
 8001510:	0800b34c 	.word	0x0800b34c
 8001514:	2000093d 	.word	0x2000093d
 8001518:	0800b35c 	.word	0x0800b35c
 800151c:	0800b360 	.word	0x0800b360
 8001520:	2000093e 	.word	0x2000093e
 8001524:	0800b370 	.word	0x0800b370
 8001528:	0800b378 	.word	0x0800b378

0800152c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800152c:	b5b0      	push	{r4, r5, r7, lr}
 800152e:	b08c      	sub	sp, #48	; 0x30
 8001530:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001532:	f000 fd8d 	bl	8002050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001536:	f000 f877 	bl	8001628 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HD44780_Init(2);
 800153a:	2002      	movs	r0, #2
 800153c:	f7ff fd9a 	bl	8001074 <HD44780_Init>
  HD44780_SetBacklight(100);
 8001540:	2064      	movs	r0, #100	; 0x64
 8001542:	f7ff fe85 	bl	8001250 <HD44780_SetBacklight>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001546:	f000 fa37 	bl	80019b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800154a:	f000 f8c9 	bl	80016e0 <MX_ADC1_Init>
  MX_SPI1_Init();
 800154e:	f000 f933 	bl	80017b8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001552:	f000 f967 	bl	8001824 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001556:	f000 f9b7 	bl	80018c8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800155a:	f000 fa03 	bl	8001964 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800155e:	f003 fce3 	bl	8004f28 <MX_FATFS_Init>
  MX_I2C1_Init();
 8001562:	f000 f8fb 	bl	800175c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  estado_sensores = pvPortMalloc(5*sizeof(uint8_t));
 8001566:	2005      	movs	r0, #5
 8001568:	f008 fef0 	bl	800a34c <pvPortMalloc>
 800156c:	6278      	str	r0, [r7, #36]	; 0x24

  Mount_SD("");
 800156e:	4825      	ldr	r0, [pc, #148]	; (8001604 <main+0xd8>)
 8001570:	f7fe fe0c 	bl	800018c <Mount_SD>
  //Format_SD();
  Read_File("Sensores.txt",estado_sensores);
 8001574:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001576:	4824      	ldr	r0, [pc, #144]	; (8001608 <main+0xdc>)
 8001578:	f7fe feb6 	bl	80002e8 <Read_File>
  // LÓGICA DE CHEQUEO DE SENSORES
  if(estado_sensores[0]!=49) error_sensor1 = 1;
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b31      	cmp	r3, #49	; 0x31
 8001582:	d002      	beq.n	800158a <main+0x5e>
 8001584:	2301      	movs	r3, #1
 8001586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if(estado_sensores[1]!=49) error_sensor2 = 1;
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	3301      	adds	r3, #1
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b31      	cmp	r3, #49	; 0x31
 8001592:	d002      	beq.n	800159a <main+0x6e>
 8001594:	2301      	movs	r3, #1
 8001596:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  if(estado_sensores[2]!=49) error_anafe = 1;
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	3302      	adds	r3, #2
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b31      	cmp	r3, #49	; 0x31
 80015a2:	d002      	beq.n	80015aa <main+0x7e>
 80015a4:	2301      	movs	r3, #1
 80015a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  // En función a esto, arranca o no arranca la máquina de estados principal
  Create_File("Probando.txt");
 80015aa:	4818      	ldr	r0, [pc, #96]	; (800160c <main+0xe0>)
 80015ac:	f7fe ff1e 	bl	80003ec <Create_File>
  Write_File("Probando.txt","LECHE FRESCA");
 80015b0:	4917      	ldr	r1, [pc, #92]	; (8001610 <main+0xe4>)
 80015b2:	4816      	ldr	r0, [pc, #88]	; (800160c <main+0xe0>)
 80015b4:	f7fe fe22 	bl	80001fc <Write_File>
  Unmount_SD("");
 80015b8:	4812      	ldr	r0, [pc, #72]	; (8001604 <main+0xd8>)
 80015ba:	f7fe fe0b 	bl	80001d4 <Unmount_SD>

  vPortFree(estado_sensores);
 80015be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015c0:	f008 ff88 	bl	800a4d4 <vPortFree>

  xTaskCreate(SDCARD_Task, "SD", 128, NULL, 3, &SDCARD_Task_Hnadler);
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <main+0xe8>)
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	2303      	movs	r3, #3
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2300      	movs	r3, #0
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	4911      	ldr	r1, [pc, #68]	; (8001618 <main+0xec>)
 80015d2:	4812      	ldr	r0, [pc, #72]	; (800161c <main+0xf0>)
 80015d4:	f007 fd1a 	bl	800900c <xTaskCreate>

  vTaskStartScheduler();
 80015d8:	f007 fe7a 	bl	80092d0 <vTaskStartScheduler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <main+0xf4>)
 80015de:	1d3c      	adds	r4, r7, #4
 80015e0:	461d      	mov	r5, r3
 80015e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f006 fd0e 	bl	8008014 <osThreadCreate>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <main+0xf8>)
 80015fc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80015fe:	f006 fd02 	bl	8008006 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001602:	e7fe      	b.n	8001602 <main+0xd6>
 8001604:	0800b348 	.word	0x0800b348
 8001608:	0800b360 	.word	0x0800b360
 800160c:	0800b388 	.word	0x0800b388
 8001610:	0800b398 	.word	0x0800b398
 8001614:	20000940 	.word	0x20000940
 8001618:	0800b3a8 	.word	0x0800b3a8
 800161c:	08001451 	.word	0x08001451
 8001620:	0800b3ac 	.word	0x0800b3ac
 8001624:	20000938 	.word	0x20000938

08001628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b094      	sub	sp, #80	; 0x50
 800162c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001632:	2228      	movs	r2, #40	; 0x28
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f009 f898 	bl	800a76c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001658:	2301      	movs	r3, #1
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800165c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001668:	2301      	movs	r3, #1
 800166a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166c:	2302      	movs	r3, #2
 800166e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8001676:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 800167a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001680:	4618      	mov	r0, r3
 8001682:	f001 fdef 	bl	8003264 <HAL_RCC_OscConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800168c:	f000 fa1a 	bl	8001ac4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001690:	230f      	movs	r3, #15
 8001692:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001694:	2302      	movs	r3, #2
 8001696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800169c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	2102      	movs	r1, #2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 f85b 	bl	8003768 <HAL_RCC_ClockConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016b8:	f000 fa04 	bl	8001ac4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016bc:	2302      	movs	r3, #2
 80016be:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80016c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016c4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4618      	mov	r0, r3
 80016ca:	f002 fa15 	bl	8003af8 <HAL_RCCEx_PeriphCLKConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80016d4:	f000 f9f6 	bl	8001ac4 <Error_Handler>
  }
}
 80016d8:	bf00      	nop
 80016da:	3750      	adds	r7, #80	; 0x50
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <MX_ADC1_Init+0x74>)
 80016f2:	4a19      	ldr	r2, [pc, #100]	; (8001758 <MX_ADC1_Init+0x78>)
 80016f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <MX_ADC1_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <MX_ADC1_Init+0x74>)
 80016fe:	2204      	movs	r2, #4
 8001700:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_ADC1_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <MX_ADC1_Init+0x74>)
 800170a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800170e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <MX_ADC1_Init+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_ADC1_Init+0x74>)
 8001718:	2201      	movs	r2, #1
 800171a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800171c:	480d      	ldr	r0, [pc, #52]	; (8001754 <MX_ADC1_Init+0x74>)
 800171e:	f000 fced 	bl	80020fc <HAL_ADC_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001728:	f000 f9cc 	bl	8001ac4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800172c:	2301      	movs	r3, #1
 800172e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001730:	2301      	movs	r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_ADC1_Init+0x74>)
 800173e:	f000 fdb5 	bl	80022ac <HAL_ADC_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001748:	f000 f9bc 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2000079c 	.word	0x2000079c
 8001758:	40012400 	.word	0x40012400

0800175c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <MX_I2C1_Init+0x50>)
 8001762:	4a13      	ldr	r2, [pc, #76]	; (80017b0 <MX_I2C1_Init+0x54>)
 8001764:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_I2C1_Init+0x50>)
 8001768:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <MX_I2C1_Init+0x58>)
 800176a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_I2C1_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_I2C1_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_I2C1_Init+0x50>)
 800177a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800177e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <MX_I2C1_Init+0x50>)
 8001782:	2200      	movs	r2, #0
 8001784:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_I2C1_Init+0x50>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <MX_I2C1_Init+0x50>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_I2C1_Init+0x50>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <MX_I2C1_Init+0x50>)
 800179a:	f001 f935 	bl	8002a08 <HAL_I2C_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017a4:	f000 f98e 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200007cc 	.word	0x200007cc
 80017b0:	40005400 	.word	0x40005400
 80017b4:	000186a0 	.word	0x000186a0

080017b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_SPI1_Init+0x64>)
 80017be:	4a18      	ldr	r2, [pc, #96]	; (8001820 <MX_SPI1_Init+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <MX_SPI1_Init+0x64>)
 80017c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_SPI1_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <MX_SPI1_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_SPI1_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_SPI1_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_SPI1_Init+0x64>)
 80017e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_SPI1_Init+0x64>)
 80017ec:	2220      	movs	r2, #32
 80017ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <MX_SPI1_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_SPI1_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <MX_SPI1_Init+0x64>)
 80017fe:	2200      	movs	r2, #0
 8001800:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_SPI1_Init+0x64>)
 8001804:	220a      	movs	r2, #10
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <MX_SPI1_Init+0x64>)
 800180a:	f002 fa2b 	bl	8003c64 <HAL_SPI_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001814:	f000 f956 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000820 	.word	0x20000820
 8001820:	40013000 	.word	0x40013000

08001824 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001838:	463b      	mov	r3, r7
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <MX_TIM1_Init+0x9c>)
 8001842:	4a20      	ldr	r2, [pc, #128]	; (80018c4 <MX_TIM1_Init+0xa0>)
 8001844:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60000-1;
 8001846:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <MX_TIM1_Init+0x9c>)
 8001848:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800184c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MX_TIM1_Init+0x9c>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_TIM1_Init+0x9c>)
 8001856:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800185a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_TIM1_Init+0x9c>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_TIM1_Init+0x9c>)
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_TIM1_Init+0x9c>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800186e:	4814      	ldr	r0, [pc, #80]	; (80018c0 <MX_TIM1_Init+0x9c>)
 8001870:	f002 fdc4 	bl	80043fc <HAL_TIM_Base_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800187a:	f000 f923 	bl	8001ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001882:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	4619      	mov	r1, r3
 800188a:	480d      	ldr	r0, [pc, #52]	; (80018c0 <MX_TIM1_Init+0x9c>)
 800188c:	f002 ff0c 	bl	80046a8 <HAL_TIM_ConfigClockSource>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001896:	f000 f915 	bl	8001ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800189a:	2320      	movs	r3, #32
 800189c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018a2:	463b      	mov	r3, r7
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <MX_TIM1_Init+0x9c>)
 80018a8:	f003 f8de 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80018b2:	f000 f907 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000878 	.word	0x20000878
 80018c4:	40012c00 	.word	0x40012c00

080018c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	463b      	mov	r3, r7
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018e4:	4b1d      	ldr	r3, [pc, #116]	; (800195c <MX_TIM3_Init+0x94>)
 80018e6:	4a1e      	ldr	r2, [pc, #120]	; (8001960 <MX_TIM3_Init+0x98>)
 80018e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <MX_TIM3_Init+0x94>)
 80018ec:	223b      	movs	r2, #59	; 0x3b
 80018ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <MX_TIM3_Init+0x94>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <MX_TIM3_Init+0x94>)
 80018f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80018fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <MX_TIM3_Init+0x94>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001904:	4b15      	ldr	r3, [pc, #84]	; (800195c <MX_TIM3_Init+0x94>)
 8001906:	2200      	movs	r2, #0
 8001908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800190a:	4814      	ldr	r0, [pc, #80]	; (800195c <MX_TIM3_Init+0x94>)
 800190c:	f002 fd76 	bl	80043fc <HAL_TIM_Base_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001916:	f000 f8d5 	bl	8001ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001920:	f107 0308 	add.w	r3, r7, #8
 8001924:	4619      	mov	r1, r3
 8001926:	480d      	ldr	r0, [pc, #52]	; (800195c <MX_TIM3_Init+0x94>)
 8001928:	f002 febe 	bl	80046a8 <HAL_TIM_ConfigClockSource>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001932:	f000 f8c7 	bl	8001ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800193e:	463b      	mov	r3, r7
 8001940:	4619      	mov	r1, r3
 8001942:	4806      	ldr	r0, [pc, #24]	; (800195c <MX_TIM3_Init+0x94>)
 8001944:	f003 f890 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800194e:	f000 f8b9 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200008b8 	.word	0x200008b8
 8001960:	40000400 	.word	0x40000400

08001964 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <MX_USART1_UART_Init+0x50>)
 800196c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_USART1_UART_Init+0x4c>)
 800199c:	f003 f8ba 	bl	8004b14 <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019a6:	f000 f88d 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200008f8 	.word	0x200008f8
 80019b4:	40013800 	.word	0x40013800

080019b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019cc:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <MX_GPIO_Init+0xa4>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a22      	ldr	r2, [pc, #136]	; (8001a5c <MX_GPIO_Init+0xa4>)
 80019d2:	f043 0320 	orr.w	r3, r3, #32
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <MX_GPIO_Init+0xa4>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <MX_GPIO_Init+0xa4>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <MX_GPIO_Init+0xa4>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_GPIO_Init+0xa4>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <MX_GPIO_Init+0xa4>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a16      	ldr	r2, [pc, #88]	; (8001a5c <MX_GPIO_Init+0xa4>)
 8001a02:	f043 0308 	orr.w	r3, r3, #8
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <MX_GPIO_Init+0xa4>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2101      	movs	r1, #1
 8001a18:	4811      	ldr	r0, [pc, #68]	; (8001a60 <MX_GPIO_Init+0xa8>)
 8001a1a:	f000 ffdd 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 0310 	add.w	r3, r7, #16
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <MX_GPIO_Init+0xac>)
 8001a32:	f000 fe4d 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a36:	2301      	movs	r3, #1
 8001a38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a46:	f107 0310 	add.w	r3, r7, #16
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4804      	ldr	r0, [pc, #16]	; (8001a60 <MX_GPIO_Init+0xa8>)
 8001a4e:	f000 fe3f 	bl	80026d0 <HAL_GPIO_Init>

}
 8001a52:	bf00      	nop
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010c00 	.word	0x40010c00
 8001a64:	40010800 	.word	0x40010800

08001a68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f006 fb1b 	bl	80080ac <osDelay>
 8001a76:	e7fb      	b.n	8001a70 <StartDefaultTask+0x8>

08001a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d10c      	bne.n	8001aa4 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		// release the semaphore here
		 /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
		 it will get set to pdTRUE inside the interrupt safe API function if a
		 context switch is required. */
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
		 xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR()
		 then calling portEND_SWITCHING_ISR() will request a context switch. If
		 xHigherPriorityTaskWoken is still pdFALSE then calling
		 portEND_SWITCHING_ISR() will have no effect */

		portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d007      	beq.n	8001aa4 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	f3bf 8f4f 	dsb	sy
 8001aa0:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aac:	d101      	bne.n	8001ab2 <HAL_TIM_PeriodElapsedCallback+0x3a>
    HAL_IncTick();
 8001aae:	f000 fae5 	bl	800207c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40012c00 	.word	0x40012c00
 8001ac0:	e000ed04 	.word	0xe000ed04

08001ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_MspInit+0x68>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <HAL_MspInit+0x68>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6193      	str	r3, [r2, #24]
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_MspInit+0x68>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_MspInit+0x68>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	4a11      	ldr	r2, [pc, #68]	; (8001b38 <HAL_MspInit+0x68>)
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af8:	61d3      	str	r3, [r2, #28]
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_MspInit+0x68>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	210f      	movs	r1, #15
 8001b0a:	f06f 0001 	mvn.w	r0, #1
 8001b0e:	f000 fdb4 	bl	800267a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_MspInit+0x6c>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_MspInit+0x6c>)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010000 	.word	0x40010000

08001b40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a14      	ldr	r2, [pc, #80]	; (8001bac <HAL_ADC_MspInit+0x6c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d121      	bne.n	8001ba4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_ADC_MspInit+0x70>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <HAL_ADC_MspInit+0x70>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_ADC_MspInit+0x70>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b78:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_ADC_MspInit+0x70>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <HAL_ADC_MspInit+0x70>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	6193      	str	r3, [r2, #24]
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <HAL_ADC_MspInit+0x70>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b90:	2302      	movs	r3, #2
 8001b92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b94:	2303      	movs	r3, #3
 8001b96:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <HAL_ADC_MspInit+0x74>)
 8001ba0:	f000 fd96 	bl	80026d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ba4:	bf00      	nop
 8001ba6:	3720      	adds	r7, #32
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40012400 	.word	0x40012400
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40010800 	.word	0x40010800

08001bb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a15      	ldr	r2, [pc, #84]	; (8001c28 <HAL_I2C_MspInit+0x70>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d123      	bne.n	8001c20 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <HAL_I2C_MspInit+0x74>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <HAL_I2C_MspInit+0x74>)
 8001bde:	f043 0308 	orr.w	r3, r3, #8
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_I2C_MspInit+0x74>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bf0:	23c0      	movs	r3, #192	; 0xc0
 8001bf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf4:	2312      	movs	r3, #18
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	4619      	mov	r1, r3
 8001c02:	480b      	ldr	r0, [pc, #44]	; (8001c30 <HAL_I2C_MspInit+0x78>)
 8001c04:	f000 fd64 	bl	80026d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_I2C_MspInit+0x74>)
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_I2C_MspInit+0x74>)
 8001c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c12:	61d3      	str	r3, [r2, #28]
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_I2C_MspInit+0x74>)
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c20:	bf00      	nop
 8001c22:	3720      	adds	r7, #32
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40005400 	.word	0x40005400
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010c00 	.word	0x40010c00

08001c34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1b      	ldr	r2, [pc, #108]	; (8001cbc <HAL_SPI_MspInit+0x88>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d12f      	bne.n	8001cb4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <HAL_SPI_MspInit+0x8c>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_SPI_MspInit+0x8c>)
 8001c5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_SPI_MspInit+0x8c>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <HAL_SPI_MspInit+0x8c>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <HAL_SPI_MspInit+0x8c>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_SPI_MspInit+0x8c>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c84:	23a0      	movs	r3, #160	; 0xa0
 8001c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	4619      	mov	r1, r3
 8001c96:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <HAL_SPI_MspInit+0x90>)
 8001c98:	f000 fd1a 	bl	80026d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c9c:	2340      	movs	r3, #64	; 0x40
 8001c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	4619      	mov	r1, r3
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <HAL_SPI_MspInit+0x90>)
 8001cb0:	f000 fd0e 	bl	80026d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cb4:	bf00      	nop
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40013000 	.word	0x40013000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40010800 	.word	0x40010800

08001cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a16      	ldr	r2, [pc, #88]	; (8001d30 <HAL_TIM_Base_MspInit+0x68>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d114      	bne.n	8001d04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <HAL_TIM_Base_MspInit+0x6c>)
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	4a15      	ldr	r2, [pc, #84]	; (8001d34 <HAL_TIM_Base_MspInit+0x6c>)
 8001ce0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ce4:	6193      	str	r3, [r2, #24]
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <HAL_TIM_Base_MspInit+0x6c>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2105      	movs	r1, #5
 8001cf6:	2019      	movs	r0, #25
 8001cf8:	f000 fcbf 	bl	800267a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001cfc:	2019      	movs	r0, #25
 8001cfe:	f000 fcd8 	bl	80026b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d02:	e010      	b.n	8001d26 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <HAL_TIM_Base_MspInit+0x70>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d10b      	bne.n	8001d26 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_TIM_Base_MspInit+0x6c>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_TIM_Base_MspInit+0x6c>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	61d3      	str	r3, [r2, #28]
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_TIM_Base_MspInit+0x6c>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40012c00 	.word	0x40012c00
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40000400 	.word	0x40000400

08001d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1c      	ldr	r2, [pc, #112]	; (8001dc8 <HAL_UART_MspInit+0x8c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d131      	bne.n	8001dc0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_UART_MspInit+0x90>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a1a      	ldr	r2, [pc, #104]	; (8001dcc <HAL_UART_MspInit+0x90>)
 8001d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_UART_MspInit+0x90>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d74:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_UART_MspInit+0x90>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <HAL_UART_MspInit+0x90>)
 8001d7a:	f043 0304 	orr.w	r3, r3, #4
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_UART_MspInit+0x90>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d96:	2303      	movs	r3, #3
 8001d98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480b      	ldr	r0, [pc, #44]	; (8001dd0 <HAL_UART_MspInit+0x94>)
 8001da2:	f000 fc95 	bl	80026d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001daa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	4619      	mov	r1, r3
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <HAL_UART_MspInit+0x94>)
 8001dbc:	f000 fc88 	bl	80026d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001dc0:	bf00      	nop
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40013800 	.word	0x40013800
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010800 	.word	0x40010800

08001dd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08c      	sub	sp, #48	; 0x30
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	201c      	movs	r0, #28
 8001dea:	f000 fc46 	bl	800267a <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dee:	201c      	movs	r0, #28
 8001df0:	f000 fc5f 	bl	80026b2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001df4:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_InitTick+0xa4>)
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_InitTick+0xa4>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	61d3      	str	r3, [r2, #28]
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_InitTick+0xa4>)
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e0c:	f107 0210 	add.w	r2, r7, #16
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 fe20 	bl	8003a5c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e1c:	f001 fdf6 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8001e20:	4603      	mov	r3, r0
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e28:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <HAL_InitTick+0xa8>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	0c9b      	lsrs	r3, r3, #18
 8001e30:	3b01      	subs	r3, #1
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_InitTick+0xac>)
 8001e36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_InitTick+0xac>)
 8001e3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e42:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001e44:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <HAL_InitTick+0xac>)
 8001e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e48:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <HAL_InitTick+0xac>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_InitTick+0xac>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001e56:	480a      	ldr	r0, [pc, #40]	; (8001e80 <HAL_InitTick+0xac>)
 8001e58:	f002 fad0 	bl	80043fc <HAL_TIM_Base_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d104      	bne.n	8001e6c <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001e62:	4807      	ldr	r0, [pc, #28]	; (8001e80 <HAL_InitTick+0xac>)
 8001e64:	f002 faf5 	bl	8004452 <HAL_TIM_Base_Start_IT>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	e000      	b.n	8001e6e <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3730      	adds	r7, #48	; 0x30
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	431bde83 	.word	0x431bde83
 8001e80:	20000944 	.word	0x20000944

08001e84 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <SDTimer_Handler+0x3c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d006      	beq.n	8001ea0 <SDTimer_Handler+0x1c>
    Timer1--;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <SDTimer_Handler+0x3c>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <SDTimer_Handler+0x3c>)
 8001e9e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <SDTimer_Handler+0x40>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <SDTimer_Handler+0x34>
    Timer2--;
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <SDTimer_Handler+0x40>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <SDTimer_Handler+0x40>)
 8001eb6:	701a      	strb	r2, [r3, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	20000985 	.word	0x20000985
 8001ec4:	20000986 	.word	0x20000986

08001ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <HardFault_Handler+0x4>

08001eda <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <MemManage_Handler+0x4>

08001ee0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <BusFault_Handler+0x4>

08001ee6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <UsageFault_Handler+0x4>

08001eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <TIM1_UP_IRQHandler+0x10>)
 8001efe:	f002 facb 	bl	8004498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000878 	.word	0x20000878

08001f0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	FatFsCnt++;
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <TIM2_IRQHandler+0x30>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	3301      	adds	r3, #1
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <TIM2_IRQHandler+0x30>)
 8001f1c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <TIM2_IRQHandler+0x30>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b09      	cmp	r3, #9
 8001f26:	d904      	bls.n	8001f32 <TIM2_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <TIM2_IRQHandler+0x30>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8001f2e:	f7ff ffa9 	bl	8001e84 <SDTimer_Handler>
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f32:	4803      	ldr	r0, [pc, #12]	; (8001f40 <TIM2_IRQHandler+0x34>)
 8001f34:	f002 fab0 	bl	8004498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000984 	.word	0x20000984
 8001f40:	20000944 	.word	0x20000944

08001f44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <_sbrk+0x50>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <_sbrk+0x16>
		heap_end = &end;
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <_sbrk+0x50>)
 8001f56:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <_sbrk+0x54>)
 8001f58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <_sbrk+0x50>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <_sbrk+0x50>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4413      	add	r3, r2
 8001f68:	466a      	mov	r2, sp
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d907      	bls.n	8001f7e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f6e:	f008 fbc5 	bl	800a6fc <__errno>
 8001f72:	4603      	mov	r3, r0
 8001f74:	220c      	movs	r2, #12
 8001f76:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7c:	e006      	b.n	8001f8c <_sbrk+0x48>
	}

	heap_end += incr;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <_sbrk+0x50>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	4a03      	ldr	r2, [pc, #12]	; (8001f94 <_sbrk+0x50>)
 8001f88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000988 	.word	0x20000988
 8001f98:	20001760 	.word	0x20001760

08001f9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <SystemInit+0x5c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <SystemInit+0x5c>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <SystemInit+0x5c>)
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4911      	ldr	r1, [pc, #68]	; (8001ff8 <SystemInit+0x5c>)
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <SystemInit+0x60>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <SystemInit+0x5c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0e      	ldr	r2, [pc, #56]	; (8001ff8 <SystemInit+0x5c>)
 8001fbe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <SystemInit+0x5c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <SystemInit+0x5c>)
 8001fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <SystemInit+0x5c>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <SystemInit+0x5c>)
 8001fda:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001fde:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <SystemInit+0x5c>)
 8001fe2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001fe6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <SystemInit+0x64>)
 8001fea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fee:	609a      	str	r2, [r3, #8]
#endif 
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	f8ff0000 	.word	0xf8ff0000
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002004:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002006:	e003      	b.n	8002010 <LoopCopyDataInit>

08002008 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800200a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800200c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800200e:	3104      	adds	r1, #4

08002010 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002010:	480a      	ldr	r0, [pc, #40]	; (800203c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002014:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002016:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002018:	d3f6      	bcc.n	8002008 <CopyDataInit>
  ldr r2, =_sbss
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800201c:	e002      	b.n	8002024 <LoopFillZerobss>

0800201e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002020:	f842 3b04 	str.w	r3, [r2], #4

08002024 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002026:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002028:	d3f9      	bcc.n	800201e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800202a:	f7ff ffb7 	bl	8001f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800202e:	f008 fb6b 	bl	800a708 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002032:	f7ff fa7b 	bl	800152c <main>
  bx lr
 8002036:	4770      	bx	lr
  ldr r3, =_sidata
 8002038:	0800b4f8 	.word	0x0800b4f8
  ldr r0, =_sdata
 800203c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002040:	2000009c 	.word	0x2000009c
  ldr r2, =_sbss
 8002044:	2000009c 	.word	0x2000009c
  ldr r3, = _ebss
 8002048:	20001760 	.word	0x20001760

0800204c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800204c:	e7fe      	b.n	800204c <ADC1_2_IRQHandler>
	...

08002050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_Init+0x28>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a07      	ldr	r2, [pc, #28]	; (8002078 <HAL_Init+0x28>)
 800205a:	f043 0310 	orr.w	r3, r3, #16
 800205e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002060:	2003      	movs	r0, #3
 8002062:	f000 faff 	bl	8002664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff feb4 	bl	8001dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800206c:	f7ff fd30 	bl	8001ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40022000 	.word	0x40022000

0800207c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_IncTick+0x1c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_IncTick+0x20>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4413      	add	r3, r2
 800208c:	4a03      	ldr	r2, [pc, #12]	; (800209c <HAL_IncTick+0x20>)
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	2000001c 	.word	0x2000001c
 800209c:	2000098c 	.word	0x2000098c

080020a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b02      	ldr	r3, [pc, #8]	; (80020b0 <HAL_GetTick+0x10>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	2000098c 	.word	0x2000098c

080020b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff fff0 	bl	80020a0 <HAL_GetTick>
 80020c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d005      	beq.n	80020da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_Delay+0x44>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4413      	add	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020da:	bf00      	nop
 80020dc:	f7ff ffe0 	bl	80020a0 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d8f7      	bhi.n	80020dc <HAL_Delay+0x28>
  {
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000001c 	.word	0x2000001c

080020fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e0be      	b.n	800229c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fd00 	bl	8001b40 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f9ab 	bl	800249c <ADC_ConversionStop_Disable>
 8002146:	4603      	mov	r3, r0
 8002148:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 8099 	bne.w	800228a <HAL_ADC_Init+0x18e>
 8002158:	7dfb      	ldrb	r3, [r7, #23]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 8095 	bne.w	800228a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002168:	f023 0302 	bic.w	r3, r3, #2
 800216c:	f043 0202 	orr.w	r2, r3, #2
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800217c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7b1b      	ldrb	r3, [r3, #12]
 8002182:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002184:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	4313      	orrs	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002194:	d003      	beq.n	800219e <HAL_ADC_Init+0xa2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d102      	bne.n	80021a4 <HAL_ADC_Init+0xa8>
 800219e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021a2:	e000      	b.n	80021a6 <HAL_ADC_Init+0xaa>
 80021a4:	2300      	movs	r3, #0
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7d1b      	ldrb	r3, [r3, #20]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d119      	bne.n	80021e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7b1b      	ldrb	r3, [r3, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d109      	bne.n	80021d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	035a      	lsls	r2, r3, #13
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	e00b      	b.n	80021e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	f043 0220 	orr.w	r2, r3, #32
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	f043 0201 	orr.w	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <HAL_ADC_Init+0x1a8>)
 8002204:	4013      	ands	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	430b      	orrs	r3, r1
 800220e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002218:	d003      	beq.n	8002222 <HAL_ADC_Init+0x126>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d104      	bne.n	800222c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	3b01      	subs	r3, #1
 8002228:	051b      	lsls	r3, r3, #20
 800222a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	430a      	orrs	r2, r1
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <HAL_ADC_Init+0x1ac>)
 8002248:	4013      	ands	r3, r2
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	429a      	cmp	r2, r3
 800224e:	d10b      	bne.n	8002268 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002266:	e018      	b.n	800229a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	f023 0312 	bic.w	r3, r3, #18
 8002270:	f043 0210 	orr.w	r2, r3, #16
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	f043 0201 	orr.w	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002288:	e007      	b.n	800229a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	f043 0210 	orr.w	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800229a:	7dfb      	ldrb	r3, [r7, #23]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	ffe1f7fd 	.word	0xffe1f7fd
 80022a8:	ff1f0efe 	.word	0xff1f0efe

080022ac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x20>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e0dc      	b.n	8002486 <HAL_ADC_ConfigChannel+0x1da>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b06      	cmp	r3, #6
 80022da:	d81c      	bhi.n	8002316 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	3b05      	subs	r3, #5
 80022ee:	221f      	movs	r2, #31
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	4019      	ands	r1, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	3b05      	subs	r3, #5
 8002308:	fa00 f203 	lsl.w	r2, r0, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	635a      	str	r2, [r3, #52]	; 0x34
 8002314:	e03c      	b.n	8002390 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b0c      	cmp	r3, #12
 800231c:	d81c      	bhi.n	8002358 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	3b23      	subs	r3, #35	; 0x23
 8002330:	221f      	movs	r2, #31
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	4019      	ands	r1, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	3b23      	subs	r3, #35	; 0x23
 800234a:	fa00 f203 	lsl.w	r2, r0, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	631a      	str	r2, [r3, #48]	; 0x30
 8002356:	e01b      	b.n	8002390 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	3b41      	subs	r3, #65	; 0x41
 800236a:	221f      	movs	r2, #31
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	4019      	ands	r1, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	3b41      	subs	r3, #65	; 0x41
 8002384:	fa00 f203 	lsl.w	r2, r0, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b09      	cmp	r3, #9
 8002396:	d91c      	bls.n	80023d2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68d9      	ldr	r1, [r3, #12]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	3b1e      	subs	r3, #30
 80023aa:	2207      	movs	r2, #7
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	4019      	ands	r1, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6898      	ldr	r0, [r3, #8]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	3b1e      	subs	r3, #30
 80023c4:	fa00 f203 	lsl.w	r2, r0, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	60da      	str	r2, [r3, #12]
 80023d0:	e019      	b.n	8002406 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6919      	ldr	r1, [r3, #16]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	2207      	movs	r2, #7
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	4019      	ands	r1, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6898      	ldr	r0, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	fa00 f203 	lsl.w	r2, r0, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b10      	cmp	r3, #16
 800240c:	d003      	beq.n	8002416 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002412:	2b11      	cmp	r3, #17
 8002414:	d132      	bne.n	800247c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <HAL_ADC_ConfigChannel+0x1e4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d125      	bne.n	800246c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d126      	bne.n	800247c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800243c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b10      	cmp	r3, #16
 8002444:	d11a      	bne.n	800247c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <HAL_ADC_ConfigChannel+0x1e8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a13      	ldr	r2, [pc, #76]	; (8002498 <HAL_ADC_ConfigChannel+0x1ec>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	0c9a      	lsrs	r2, r3, #18
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800245c:	e002      	b.n	8002464 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	3b01      	subs	r3, #1
 8002462:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f9      	bne.n	800245e <HAL_ADC_ConfigChannel+0x1b2>
 800246a:	e007      	b.n	800247c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	f043 0220 	orr.w	r2, r3, #32
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002484:	7bfb      	ldrb	r3, [r7, #15]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	40012400 	.word	0x40012400
 8002494:	20000014 	.word	0x20000014
 8002498:	431bde83 	.word	0x431bde83

0800249c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d127      	bne.n	8002506 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0201 	bic.w	r2, r2, #1
 80024c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024c6:	f7ff fdeb 	bl	80020a0 <HAL_GetTick>
 80024ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024cc:	e014      	b.n	80024f8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024ce:	f7ff fde7 	bl	80020a0 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d90d      	bls.n	80024f8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	f043 0210 	orr.w	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e007      	b.n	8002508 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d0e3      	beq.n	80024ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800252c:	4013      	ands	r3, r2
 800252e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800253c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002542:	4a04      	ldr	r2, [pc, #16]	; (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	60d3      	str	r3, [r2, #12]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <__NVIC_GetPriorityGrouping+0x18>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	f003 0307 	and.w	r3, r3, #7
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	2b00      	cmp	r3, #0
 8002584:	db0b      	blt.n	800259e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	4906      	ldr	r1, [pc, #24]	; (80025a8 <__NVIC_EnableIRQ+0x34>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	2001      	movs	r0, #1
 8002596:	fa00 f202 	lsl.w	r2, r0, r2
 800259a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	e000e100 	.word	0xe000e100

080025ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	6039      	str	r1, [r7, #0]
 80025b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	db0a      	blt.n	80025d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	490c      	ldr	r1, [pc, #48]	; (80025f8 <__NVIC_SetPriority+0x4c>)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	0112      	lsls	r2, r2, #4
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	440b      	add	r3, r1
 80025d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d4:	e00a      	b.n	80025ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4908      	ldr	r1, [pc, #32]	; (80025fc <__NVIC_SetPriority+0x50>)
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	3b04      	subs	r3, #4
 80025e4:	0112      	lsls	r2, r2, #4
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	440b      	add	r3, r1
 80025ea:	761a      	strb	r2, [r3, #24]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000e100 	.word	0xe000e100
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f1c3 0307 	rsb	r3, r3, #7
 800261a:	2b04      	cmp	r3, #4
 800261c:	bf28      	it	cs
 800261e:	2304      	movcs	r3, #4
 8002620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3304      	adds	r3, #4
 8002626:	2b06      	cmp	r3, #6
 8002628:	d902      	bls.n	8002630 <NVIC_EncodePriority+0x30>
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3b03      	subs	r3, #3
 800262e:	e000      	b.n	8002632 <NVIC_EncodePriority+0x32>
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	f04f 32ff 	mov.w	r2, #4294967295
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43da      	mvns	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	401a      	ands	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002648:	f04f 31ff 	mov.w	r1, #4294967295
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	43d9      	mvns	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	4313      	orrs	r3, r2
         );
}
 800265a:	4618      	mov	r0, r3
 800265c:	3724      	adds	r7, #36	; 0x24
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ff4f 	bl	8002510 <__NVIC_SetPriorityGrouping>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800267a:	b580      	push	{r7, lr}
 800267c:	b086      	sub	sp, #24
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800268c:	f7ff ff64 	bl	8002558 <__NVIC_GetPriorityGrouping>
 8002690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	6978      	ldr	r0, [r7, #20]
 8002698:	f7ff ffb2 	bl	8002600 <NVIC_EncodePriority>
 800269c:	4602      	mov	r2, r0
 800269e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff81 	bl	80025ac <__NVIC_SetPriority>
}
 80026aa:	bf00      	nop
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff57 	bl	8002574 <__NVIC_EnableIRQ>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b08b      	sub	sp, #44	; 0x2c
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e2:	e169      	b.n	80029b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026e4:	2201      	movs	r2, #1
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	f040 8158 	bne.w	80029b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4a9a      	ldr	r2, [pc, #616]	; (8002970 <HAL_GPIO_Init+0x2a0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d05e      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
 800270c:	4a98      	ldr	r2, [pc, #608]	; (8002970 <HAL_GPIO_Init+0x2a0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d875      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 8002712:	4a98      	ldr	r2, [pc, #608]	; (8002974 <HAL_GPIO_Init+0x2a4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d058      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
 8002718:	4a96      	ldr	r2, [pc, #600]	; (8002974 <HAL_GPIO_Init+0x2a4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d86f      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 800271e:	4a96      	ldr	r2, [pc, #600]	; (8002978 <HAL_GPIO_Init+0x2a8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d052      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
 8002724:	4a94      	ldr	r2, [pc, #592]	; (8002978 <HAL_GPIO_Init+0x2a8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d869      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 800272a:	4a94      	ldr	r2, [pc, #592]	; (800297c <HAL_GPIO_Init+0x2ac>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d04c      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
 8002730:	4a92      	ldr	r2, [pc, #584]	; (800297c <HAL_GPIO_Init+0x2ac>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d863      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 8002736:	4a92      	ldr	r2, [pc, #584]	; (8002980 <HAL_GPIO_Init+0x2b0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d046      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
 800273c:	4a90      	ldr	r2, [pc, #576]	; (8002980 <HAL_GPIO_Init+0x2b0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d85d      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 8002742:	2b12      	cmp	r3, #18
 8002744:	d82a      	bhi.n	800279c <HAL_GPIO_Init+0xcc>
 8002746:	2b12      	cmp	r3, #18
 8002748:	d859      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 800274a:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <HAL_GPIO_Init+0x80>)
 800274c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002750:	080027cb 	.word	0x080027cb
 8002754:	080027a5 	.word	0x080027a5
 8002758:	080027b7 	.word	0x080027b7
 800275c:	080027f9 	.word	0x080027f9
 8002760:	080027ff 	.word	0x080027ff
 8002764:	080027ff 	.word	0x080027ff
 8002768:	080027ff 	.word	0x080027ff
 800276c:	080027ff 	.word	0x080027ff
 8002770:	080027ff 	.word	0x080027ff
 8002774:	080027ff 	.word	0x080027ff
 8002778:	080027ff 	.word	0x080027ff
 800277c:	080027ff 	.word	0x080027ff
 8002780:	080027ff 	.word	0x080027ff
 8002784:	080027ff 	.word	0x080027ff
 8002788:	080027ff 	.word	0x080027ff
 800278c:	080027ff 	.word	0x080027ff
 8002790:	080027ff 	.word	0x080027ff
 8002794:	080027ad 	.word	0x080027ad
 8002798:	080027c1 	.word	0x080027c1
 800279c:	4a79      	ldr	r2, [pc, #484]	; (8002984 <HAL_GPIO_Init+0x2b4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d013      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027a2:	e02c      	b.n	80027fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	623b      	str	r3, [r7, #32]
          break;
 80027aa:	e029      	b.n	8002800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	3304      	adds	r3, #4
 80027b2:	623b      	str	r3, [r7, #32]
          break;
 80027b4:	e024      	b.n	8002800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	3308      	adds	r3, #8
 80027bc:	623b      	str	r3, [r7, #32]
          break;
 80027be:	e01f      	b.n	8002800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	330c      	adds	r3, #12
 80027c6:	623b      	str	r3, [r7, #32]
          break;
 80027c8:	e01a      	b.n	8002800 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027d2:	2304      	movs	r3, #4
 80027d4:	623b      	str	r3, [r7, #32]
          break;
 80027d6:	e013      	b.n	8002800 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027e0:	2308      	movs	r3, #8
 80027e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	611a      	str	r2, [r3, #16]
          break;
 80027ea:	e009      	b.n	8002800 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027ec:	2308      	movs	r3, #8
 80027ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	615a      	str	r2, [r3, #20]
          break;
 80027f6:	e003      	b.n	8002800 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027f8:	2300      	movs	r3, #0
 80027fa:	623b      	str	r3, [r7, #32]
          break;
 80027fc:	e000      	b.n	8002800 <HAL_GPIO_Init+0x130>
          break;
 80027fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2bff      	cmp	r3, #255	; 0xff
 8002804:	d801      	bhi.n	800280a <HAL_GPIO_Init+0x13a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	e001      	b.n	800280e <HAL_GPIO_Init+0x13e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3304      	adds	r3, #4
 800280e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2bff      	cmp	r3, #255	; 0xff
 8002814:	d802      	bhi.n	800281c <HAL_GPIO_Init+0x14c>
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	e002      	b.n	8002822 <HAL_GPIO_Init+0x152>
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	3b08      	subs	r3, #8
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	210f      	movs	r1, #15
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	401a      	ands	r2, r3
 8002834:	6a39      	ldr	r1, [r7, #32]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	431a      	orrs	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80b1 	beq.w	80029b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002850:	4b4d      	ldr	r3, [pc, #308]	; (8002988 <HAL_GPIO_Init+0x2b8>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	4a4c      	ldr	r2, [pc, #304]	; (8002988 <HAL_GPIO_Init+0x2b8>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6193      	str	r3, [r2, #24]
 800285c:	4b4a      	ldr	r3, [pc, #296]	; (8002988 <HAL_GPIO_Init+0x2b8>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002868:	4a48      	ldr	r2, [pc, #288]	; (800298c <HAL_GPIO_Init+0x2bc>)
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	3302      	adds	r3, #2
 8002870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002874:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	220f      	movs	r2, #15
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4013      	ands	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a40      	ldr	r2, [pc, #256]	; (8002990 <HAL_GPIO_Init+0x2c0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d013      	beq.n	80028bc <HAL_GPIO_Init+0x1ec>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a3f      	ldr	r2, [pc, #252]	; (8002994 <HAL_GPIO_Init+0x2c4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00d      	beq.n	80028b8 <HAL_GPIO_Init+0x1e8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a3e      	ldr	r2, [pc, #248]	; (8002998 <HAL_GPIO_Init+0x2c8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d007      	beq.n	80028b4 <HAL_GPIO_Init+0x1e4>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a3d      	ldr	r2, [pc, #244]	; (800299c <HAL_GPIO_Init+0x2cc>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d101      	bne.n	80028b0 <HAL_GPIO_Init+0x1e0>
 80028ac:	2303      	movs	r3, #3
 80028ae:	e006      	b.n	80028be <HAL_GPIO_Init+0x1ee>
 80028b0:	2304      	movs	r3, #4
 80028b2:	e004      	b.n	80028be <HAL_GPIO_Init+0x1ee>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e002      	b.n	80028be <HAL_GPIO_Init+0x1ee>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_GPIO_Init+0x1ee>
 80028bc:	2300      	movs	r3, #0
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	f002 0203 	and.w	r2, r2, #3
 80028c4:	0092      	lsls	r2, r2, #2
 80028c6:	4093      	lsls	r3, r2
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028ce:	492f      	ldr	r1, [pc, #188]	; (800298c <HAL_GPIO_Init+0x2bc>)
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	3302      	adds	r3, #2
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d006      	beq.n	80028f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028e8:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	492c      	ldr	r1, [pc, #176]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	600b      	str	r3, [r1, #0]
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028f6:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	4928      	ldr	r1, [pc, #160]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002900:	4013      	ands	r3, r2
 8002902:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d006      	beq.n	800291e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002910:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4922      	ldr	r1, [pc, #136]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
 800291c:	e006      	b.n	800292c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800291e:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	43db      	mvns	r3, r3
 8002926:	491e      	ldr	r1, [pc, #120]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002928:	4013      	ands	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d006      	beq.n	8002946 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	4918      	ldr	r1, [pc, #96]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	608b      	str	r3, [r1, #8]
 8002944:	e006      	b.n	8002954 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002946:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	43db      	mvns	r3, r3
 800294e:	4914      	ldr	r1, [pc, #80]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002950:	4013      	ands	r3, r2
 8002952:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d021      	beq.n	80029a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	490e      	ldr	r1, [pc, #56]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	60cb      	str	r3, [r1, #12]
 800296c:	e021      	b.n	80029b2 <HAL_GPIO_Init+0x2e2>
 800296e:	bf00      	nop
 8002970:	10320000 	.word	0x10320000
 8002974:	10310000 	.word	0x10310000
 8002978:	10220000 	.word	0x10220000
 800297c:	10210000 	.word	0x10210000
 8002980:	10120000 	.word	0x10120000
 8002984:	10110000 	.word	0x10110000
 8002988:	40021000 	.word	0x40021000
 800298c:	40010000 	.word	0x40010000
 8002990:	40010800 	.word	0x40010800
 8002994:	40010c00 	.word	0x40010c00
 8002998:	40011000 	.word	0x40011000
 800299c:	40011400 	.word	0x40011400
 80029a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_GPIO_Init+0x304>)
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	4909      	ldr	r1, [pc, #36]	; (80029d4 <HAL_GPIO_Init+0x304>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	3301      	adds	r3, #1
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	fa22 f303 	lsr.w	r3, r2, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f47f ae8e 	bne.w	80026e4 <HAL_GPIO_Init+0x14>
  }
}
 80029c8:	bf00      	nop
 80029ca:	bf00      	nop
 80029cc:	372c      	adds	r7, #44	; 0x2c
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	40010400 	.word	0x40010400

080029d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	807b      	strh	r3, [r7, #2]
 80029e4:	4613      	mov	r3, r2
 80029e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029e8:	787b      	ldrb	r3, [r7, #1]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ee:	887a      	ldrh	r2, [r7, #2]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029f4:	e003      	b.n	80029fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029f6:	887b      	ldrh	r3, [r7, #2]
 80029f8:	041a      	lsls	r2, r3, #16
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	611a      	str	r2, [r3, #16]
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e11b      	b.n	8002c52 <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff f8c2 	bl	8001bb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2224      	movs	r2, #36	; 0x24
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a4c:	f000 ffde 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8002a50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4a81      	ldr	r2, [pc, #516]	; (8002c5c <HAL_I2C_Init+0x254>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d807      	bhi.n	8002a6c <HAL_I2C_Init+0x64>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4a80      	ldr	r2, [pc, #512]	; (8002c60 <HAL_I2C_Init+0x258>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	bf94      	ite	ls
 8002a64:	2301      	movls	r3, #1
 8002a66:	2300      	movhi	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	e006      	b.n	8002a7a <HAL_I2C_Init+0x72>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4a7d      	ldr	r2, [pc, #500]	; (8002c64 <HAL_I2C_Init+0x25c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	bf94      	ite	ls
 8002a74:	2301      	movls	r3, #1
 8002a76:	2300      	movhi	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e0e7      	b.n	8002c52 <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a78      	ldr	r2, [pc, #480]	; (8002c68 <HAL_I2C_Init+0x260>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	0c9b      	lsrs	r3, r3, #18
 8002a8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4a6a      	ldr	r2, [pc, #424]	; (8002c5c <HAL_I2C_Init+0x254>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d802      	bhi.n	8002abc <HAL_I2C_Init+0xb4>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	e009      	b.n	8002ad0 <HAL_I2C_Init+0xc8>
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	4a69      	ldr	r2, [pc, #420]	; (8002c6c <HAL_I2C_Init+0x264>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	3301      	adds	r3, #1
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ae2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	495c      	ldr	r1, [pc, #368]	; (8002c5c <HAL_I2C_Init+0x254>)
 8002aec:	428b      	cmp	r3, r1
 8002aee:	d819      	bhi.n	8002b24 <HAL_I2C_Init+0x11c>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1e59      	subs	r1, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002afe:	1c59      	adds	r1, r3, #1
 8002b00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b04:	400b      	ands	r3, r1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_I2C_Init+0x118>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1e59      	subs	r1, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1e:	e051      	b.n	8002bc4 <HAL_I2C_Init+0x1bc>
 8002b20:	2304      	movs	r3, #4
 8002b22:	e04f      	b.n	8002bc4 <HAL_I2C_Init+0x1bc>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d111      	bne.n	8002b50 <HAL_I2C_Init+0x148>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1e58      	subs	r0, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	440b      	add	r3, r1
 8002b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	e012      	b.n	8002b76 <HAL_I2C_Init+0x16e>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1e58      	subs	r0, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6859      	ldr	r1, [r3, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	0099      	lsls	r1, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b66:	3301      	adds	r3, #1
 8002b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Init+0x176>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e022      	b.n	8002bc4 <HAL_I2C_Init+0x1bc>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10e      	bne.n	8002ba4 <HAL_I2C_Init+0x19c>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1e58      	subs	r0, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6859      	ldr	r1, [r3, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	440b      	add	r3, r1
 8002b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba2:	e00f      	b.n	8002bc4 <HAL_I2C_Init+0x1bc>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1e58      	subs	r0, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	0099      	lsls	r1, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	6809      	ldr	r1, [r1, #0]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69da      	ldr	r2, [r3, #28]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6911      	ldr	r1, [r2, #16]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68d2      	ldr	r2, [r2, #12]
 8002bfe:	4311      	orrs	r1, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	430b      	orrs	r3, r1
 8002c06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	000186a0 	.word	0x000186a0
 8002c60:	001e847f 	.word	0x001e847f
 8002c64:	003d08ff 	.word	0x003d08ff
 8002c68:	431bde83 	.word	0x431bde83
 8002c6c:	10624dd3 	.word	0x10624dd3

08002c70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	817b      	strh	r3, [r7, #10]
 8002c80:	4613      	mov	r3, r2
 8002c82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c84:	f7ff fa0c 	bl	80020a0 <HAL_GetTick>
 8002c88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	f040 80e0 	bne.w	8002e58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	2319      	movs	r3, #25
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4970      	ldr	r1, [pc, #448]	; (8002e64 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f958 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e0d3      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_I2C_Master_Transmit+0x50>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e0cc      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d007      	beq.n	8002ce6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cf4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2221      	movs	r2, #33	; 0x21
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2210      	movs	r2, #16
 8002d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	893a      	ldrh	r2, [r7, #8]
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a50      	ldr	r2, [pc, #320]	; (8002e68 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d28:	8979      	ldrh	r1, [r7, #10]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	6a3a      	ldr	r2, [r7, #32]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f89c 	bl	8002e6c <I2C_MasterRequestWrite>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e08d      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d54:	e066      	b.n	8002e24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	6a39      	ldr	r1, [r7, #32]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f9d2 	bl	8003104 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00d      	beq.n	8002d82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d107      	bne.n	8002d7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e06b      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d11b      	bne.n	8002df8 <HAL_I2C_Master_Transmit+0x188>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d017      	beq.n	8002df8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	781a      	ldrb	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	6a39      	ldr	r1, [r7, #32]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f9c2 	bl	8003186 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00d      	beq.n	8002e24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d107      	bne.n	8002e20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e01a      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d194      	bne.n	8002d56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	e000      	b.n	8002e5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e58:	2302      	movs	r3, #2
  }
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	00100002 	.word	0x00100002
 8002e68:	ffff0000 	.word	0xffff0000

08002e6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d006      	beq.n	8002e96 <I2C_MasterRequestWrite+0x2a>
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d003      	beq.n	8002e96 <I2C_MasterRequestWrite+0x2a>
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e94:	d108      	bne.n	8002ea8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	e00b      	b.n	8002ec0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	2b12      	cmp	r3, #18
 8002eae:	d107      	bne.n	8002ec0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ebe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f843 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e035      	b.n	8002f48 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ee4:	d108      	bne.n	8002ef8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ee6:	897b      	ldrh	r3, [r7, #10]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ef4:	611a      	str	r2, [r3, #16]
 8002ef6:	e01b      	b.n	8002f30 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ef8:	897b      	ldrh	r3, [r7, #10]
 8002efa:	11db      	asrs	r3, r3, #7
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f003 0306 	and.w	r3, r3, #6
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f063 030f 	orn	r3, r3, #15
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	490e      	ldr	r1, [pc, #56]	; (8002f50 <I2C_MasterRequestWrite+0xe4>)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f875 	bl	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e010      	b.n	8002f48 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f26:	897b      	ldrh	r3, [r7, #10]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4907      	ldr	r1, [pc, #28]	; (8002f54 <I2C_MasterRequestWrite+0xe8>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f865 	bl	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	00010008 	.word	0x00010008
 8002f54:	00010002 	.word	0x00010002

08002f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f68:	e025      	b.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d021      	beq.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7ff f895 	bl	80020a0 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d116      	bne.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f043 0220 	orr.w	r2, r3, #32
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e023      	b.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d10d      	bne.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf0c      	ite	eq
 8002fd2:	2301      	moveq	r3, #1
 8002fd4:	2300      	movne	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	e00c      	b.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d0b6      	beq.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003014:	e051      	b.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003024:	d123      	bne.n	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003034:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800303e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f043 0204 	orr.w	r2, r3, #4
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e046      	b.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d021      	beq.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7ff f813 	bl	80020a0 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d116      	bne.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f043 0220 	orr.w	r2, r3, #32
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e020      	b.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d10c      	bne.n	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e00b      	b.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	43da      	mvns	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4013      	ands	r3, r2
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d18d      	bne.n	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003110:	e02d      	b.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f878 	bl	8003208 <I2C_IsAcknowledgeFailed>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e02d      	b.n	800317e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003128:	d021      	beq.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312a:	f7fe ffb9 	bl	80020a0 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	429a      	cmp	r2, r3
 8003138:	d302      	bcc.n	8003140 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d116      	bne.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f043 0220 	orr.w	r2, r3, #32
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e007      	b.n	800317e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003178:	2b80      	cmp	r3, #128	; 0x80
 800317a:	d1ca      	bne.n	8003112 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003192:	e02d      	b.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f837 	bl	8003208 <I2C_IsAcknowledgeFailed>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e02d      	b.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d021      	beq.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ac:	f7fe ff78 	bl	80020a0 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d302      	bcc.n	80031c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d116      	bne.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	f043 0220 	orr.w	r2, r3, #32
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e007      	b.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d1ca      	bne.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321e:	d11b      	bne.n	8003258 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003228:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	f043 0204 	orr.w	r2, r3, #4
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e272      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8087 	beq.w	8003392 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003284:	4b92      	ldr	r3, [pc, #584]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b04      	cmp	r3, #4
 800328e:	d00c      	beq.n	80032aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003290:	4b8f      	ldr	r3, [pc, #572]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b08      	cmp	r3, #8
 800329a:	d112      	bne.n	80032c2 <HAL_RCC_OscConfig+0x5e>
 800329c:	4b8c      	ldr	r3, [pc, #560]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a8:	d10b      	bne.n	80032c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032aa:	4b89      	ldr	r3, [pc, #548]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d06c      	beq.n	8003390 <HAL_RCC_OscConfig+0x12c>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d168      	bne.n	8003390 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e24c      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x76>
 80032cc:	4b80      	ldr	r3, [pc, #512]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a7f      	ldr	r2, [pc, #508]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80032d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	e02e      	b.n	8003338 <HAL_RCC_OscConfig+0xd4>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0x98>
 80032e2:	4b7b      	ldr	r3, [pc, #492]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a7a      	ldr	r2, [pc, #488]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	4b78      	ldr	r3, [pc, #480]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a77      	ldr	r2, [pc, #476]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e01d      	b.n	8003338 <HAL_RCC_OscConfig+0xd4>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003304:	d10c      	bne.n	8003320 <HAL_RCC_OscConfig+0xbc>
 8003306:	4b72      	ldr	r3, [pc, #456]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a71      	ldr	r2, [pc, #452]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 800330c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b6f      	ldr	r3, [pc, #444]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a6e      	ldr	r2, [pc, #440]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e00b      	b.n	8003338 <HAL_RCC_OscConfig+0xd4>
 8003320:	4b6b      	ldr	r3, [pc, #428]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a6a      	ldr	r2, [pc, #424]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	4b68      	ldr	r3, [pc, #416]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a67      	ldr	r2, [pc, #412]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003336:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d013      	beq.n	8003368 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fe feae 	bl	80020a0 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003348:	f7fe feaa 	bl	80020a0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	; 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e200      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	4b5d      	ldr	r3, [pc, #372]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0xe4>
 8003366:	e014      	b.n	8003392 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe fe9a 	bl	80020a0 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003370:	f7fe fe96 	bl	80020a0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e1ec      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x10c>
 800338e:	e000      	b.n	8003392 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d063      	beq.n	8003466 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800339e:	4b4c      	ldr	r3, [pc, #304]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033aa:	4b49      	ldr	r3, [pc, #292]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d11c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x18c>
 80033b6:	4b46      	ldr	r3, [pc, #280]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d116      	bne.n	80033f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	4b43      	ldr	r3, [pc, #268]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_RCC_OscConfig+0x176>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d001      	beq.n	80033da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e1c0      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033da:	4b3d      	ldr	r3, [pc, #244]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4939      	ldr	r1, [pc, #228]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ee:	e03a      	b.n	8003466 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d020      	beq.n	800343a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f8:	4b36      	ldr	r3, [pc, #216]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fe fe4f 	bl	80020a0 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003406:	f7fe fe4b 	bl	80020a0 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e1a1      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003424:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4927      	ldr	r1, [pc, #156]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]
 8003438:	e015      	b.n	8003466 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343a:	4b26      	ldr	r3, [pc, #152]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fe fe2e 	bl	80020a0 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003448:	f7fe fe2a 	bl	80020a0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e180      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345a:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d03a      	beq.n	80034e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d019      	beq.n	80034ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347a:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800347c:	2201      	movs	r2, #1
 800347e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003480:	f7fe fe0e 	bl	80020a0 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003488:	f7fe fe0a 	bl	80020a0 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e160      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <HAL_RCC_OscConfig+0x26c>)
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034a6:	2001      	movs	r0, #1
 80034a8:	f000 fb08 	bl	8003abc <RCC_Delay>
 80034ac:	e01c      	b.n	80034e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ae:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b4:	f7fe fdf4 	bl	80020a0 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ba:	e00f      	b.n	80034dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034bc:	f7fe fdf0 	bl	80020a0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d908      	bls.n	80034dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e146      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000
 80034d4:	42420000 	.word	0x42420000
 80034d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034dc:	4b92      	ldr	r3, [pc, #584]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e9      	bne.n	80034bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80a6 	beq.w	8003642 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f6:	2300      	movs	r3, #0
 80034f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fa:	4b8b      	ldr	r3, [pc, #556]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10d      	bne.n	8003522 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003506:	4b88      	ldr	r3, [pc, #544]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	4a87      	ldr	r2, [pc, #540]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003510:	61d3      	str	r3, [r2, #28]
 8003512:	4b85      	ldr	r3, [pc, #532]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351e:	2301      	movs	r3, #1
 8003520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003522:	4b82      	ldr	r3, [pc, #520]	; (800372c <HAL_RCC_OscConfig+0x4c8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d118      	bne.n	8003560 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352e:	4b7f      	ldr	r3, [pc, #508]	; (800372c <HAL_RCC_OscConfig+0x4c8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a7e      	ldr	r2, [pc, #504]	; (800372c <HAL_RCC_OscConfig+0x4c8>)
 8003534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353a:	f7fe fdb1 	bl	80020a0 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003542:	f7fe fdad 	bl	80020a0 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b64      	cmp	r3, #100	; 0x64
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e103      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	4b75      	ldr	r3, [pc, #468]	; (800372c <HAL_RCC_OscConfig+0x4c8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d106      	bne.n	8003576 <HAL_RCC_OscConfig+0x312>
 8003568:	4b6f      	ldr	r3, [pc, #444]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	4a6e      	ldr	r2, [pc, #440]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6213      	str	r3, [r2, #32]
 8003574:	e02d      	b.n	80035d2 <HAL_RCC_OscConfig+0x36e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0x334>
 800357e:	4b6a      	ldr	r3, [pc, #424]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	4a69      	ldr	r2, [pc, #420]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	f023 0301 	bic.w	r3, r3, #1
 8003588:	6213      	str	r3, [r2, #32]
 800358a:	4b67      	ldr	r3, [pc, #412]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	4a66      	ldr	r2, [pc, #408]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 8003590:	f023 0304 	bic.w	r3, r3, #4
 8003594:	6213      	str	r3, [r2, #32]
 8003596:	e01c      	b.n	80035d2 <HAL_RCC_OscConfig+0x36e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b05      	cmp	r3, #5
 800359e:	d10c      	bne.n	80035ba <HAL_RCC_OscConfig+0x356>
 80035a0:	4b61      	ldr	r3, [pc, #388]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	4a60      	ldr	r2, [pc, #384]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	f043 0304 	orr.w	r3, r3, #4
 80035aa:	6213      	str	r3, [r2, #32]
 80035ac:	4b5e      	ldr	r3, [pc, #376]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	4a5d      	ldr	r2, [pc, #372]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6213      	str	r3, [r2, #32]
 80035b8:	e00b      	b.n	80035d2 <HAL_RCC_OscConfig+0x36e>
 80035ba:	4b5b      	ldr	r3, [pc, #364]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4a5a      	ldr	r2, [pc, #360]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	6213      	str	r3, [r2, #32]
 80035c6:	4b58      	ldr	r3, [pc, #352]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4a57      	ldr	r2, [pc, #348]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	f023 0304 	bic.w	r3, r3, #4
 80035d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d015      	beq.n	8003606 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035da:	f7fe fd61 	bl	80020a0 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e0:	e00a      	b.n	80035f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e2:	f7fe fd5d 	bl	80020a0 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e0b1      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f8:	4b4b      	ldr	r3, [pc, #300]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ee      	beq.n	80035e2 <HAL_RCC_OscConfig+0x37e>
 8003604:	e014      	b.n	8003630 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003606:	f7fe fd4b 	bl	80020a0 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360c:	e00a      	b.n	8003624 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fe fd47 	bl	80020a0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	f241 3288 	movw	r2, #5000	; 0x1388
 800361c:	4293      	cmp	r3, r2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e09b      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003624:	4b40      	ldr	r3, [pc, #256]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ee      	bne.n	800360e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d105      	bne.n	8003642 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003636:	4b3c      	ldr	r3, [pc, #240]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	4a3b      	ldr	r2, [pc, #236]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003640:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8087 	beq.w	800375a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800364c:	4b36      	ldr	r3, [pc, #216]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b08      	cmp	r3, #8
 8003656:	d061      	beq.n	800371c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d146      	bne.n	80036ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003660:	4b33      	ldr	r3, [pc, #204]	; (8003730 <HAL_RCC_OscConfig+0x4cc>)
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe fd1b 	bl	80020a0 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366e:	f7fe fd17 	bl	80020a0 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e06d      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003680:	4b29      	ldr	r3, [pc, #164]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f0      	bne.n	800366e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003694:	d108      	bne.n	80036a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003696:	4b24      	ldr	r3, [pc, #144]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	4921      	ldr	r1, [pc, #132]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036a8:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a19      	ldr	r1, [r3, #32]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	430b      	orrs	r3, r1
 80036ba:	491b      	ldr	r1, [pc, #108]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c0:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <HAL_RCC_OscConfig+0x4cc>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c6:	f7fe fceb 	bl	80020a0 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ce:	f7fe fce7 	bl	80020a0 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e03d      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x46a>
 80036ec:	e035      	b.n	800375a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <HAL_RCC_OscConfig+0x4cc>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7fe fcd4 	bl	80020a0 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fc:	f7fe fcd0 	bl	80020a0 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e026      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800370e:	4b06      	ldr	r3, [pc, #24]	; (8003728 <HAL_RCC_OscConfig+0x4c4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0x498>
 800371a:	e01e      	b.n	800375a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d107      	bne.n	8003734 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e019      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>
 8003728:	40021000 	.word	0x40021000
 800372c:	40007000 	.word	0x40007000
 8003730:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_RCC_OscConfig+0x500>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	429a      	cmp	r2, r3
 8003746:	d106      	bne.n	8003756 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d001      	beq.n	800375a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000

08003768 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0d0      	b.n	800391e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800377c:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d910      	bls.n	80037ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378a:	4b67      	ldr	r3, [pc, #412]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 0207 	bic.w	r2, r3, #7
 8003792:	4965      	ldr	r1, [pc, #404]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	4313      	orrs	r3, r2
 8003798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800379a:	4b63      	ldr	r3, [pc, #396]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0b8      	b.n	800391e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d020      	beq.n	80037fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c4:	4b59      	ldr	r3, [pc, #356]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4a58      	ldr	r2, [pc, #352]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80037ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037dc:	4b53      	ldr	r3, [pc, #332]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	4a52      	ldr	r2, [pc, #328]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80037e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e8:	4b50      	ldr	r3, [pc, #320]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	494d      	ldr	r1, [pc, #308]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d040      	beq.n	8003888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d107      	bne.n	800381e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380e:	4b47      	ldr	r3, [pc, #284]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d115      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e07f      	b.n	800391e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d107      	bne.n	8003836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003826:	4b41      	ldr	r3, [pc, #260]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d109      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e073      	b.n	800391e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003836:	4b3d      	ldr	r3, [pc, #244]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e06b      	b.n	800391e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003846:	4b39      	ldr	r3, [pc, #228]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f023 0203 	bic.w	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4936      	ldr	r1, [pc, #216]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	4313      	orrs	r3, r2
 8003856:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003858:	f7fe fc22 	bl	80020a0 <HAL_GetTick>
 800385c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385e:	e00a      	b.n	8003876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003860:	f7fe fc1e 	bl	80020a0 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e053      	b.n	800391e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003876:	4b2d      	ldr	r3, [pc, #180]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 020c 	and.w	r2, r3, #12
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	429a      	cmp	r2, r3
 8003886:	d1eb      	bne.n	8003860 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003888:	4b27      	ldr	r3, [pc, #156]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d210      	bcs.n	80038b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b24      	ldr	r3, [pc, #144]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 0207 	bic.w	r2, r3, #7
 800389e:	4922      	ldr	r1, [pc, #136]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b20      	ldr	r3, [pc, #128]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e032      	b.n	800391e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c4:	4b19      	ldr	r3, [pc, #100]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4916      	ldr	r1, [pc, #88]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038e2:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	490e      	ldr	r1, [pc, #56]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038f6:	f000 f821 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80038fa:	4602      	mov	r2, r0
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	091b      	lsrs	r3, r3, #4
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	490a      	ldr	r1, [pc, #40]	; (8003930 <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	5ccb      	ldrb	r3, [r1, r3]
 800390a:	fa22 f303 	lsr.w	r3, r2, r3
 800390e:	4a09      	ldr	r2, [pc, #36]	; (8003934 <HAL_RCC_ClockConfig+0x1cc>)
 8003910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <HAL_RCC_ClockConfig+0x1d0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe fa5c 	bl	8001dd4 <HAL_InitTick>

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40022000 	.word	0x40022000
 800392c:	40021000 	.word	0x40021000
 8003930:	0800b424 	.word	0x0800b424
 8003934:	20000014 	.word	0x20000014
 8003938:	20000018 	.word	0x20000018

0800393c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800393c:	b490      	push	{r4, r7}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003942:	4b29      	ldr	r3, [pc, #164]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003944:	1d3c      	adds	r4, r7, #4
 8003946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800394c:	f240 2301 	movw	r3, #513	; 0x201
 8003950:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	2300      	movs	r3, #0
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003966:	4b21      	ldr	r3, [pc, #132]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b04      	cmp	r3, #4
 8003974:	d002      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x40>
 8003976:	2b08      	cmp	r3, #8
 8003978:	d003      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x46>
 800397a:	e02b      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800397c:	4b1c      	ldr	r3, [pc, #112]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800397e:	623b      	str	r3, [r7, #32]
      break;
 8003980:	e02b      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	0c9b      	lsrs	r3, r3, #18
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	3328      	adds	r3, #40	; 0x28
 800398c:	443b      	add	r3, r7
 800398e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003992:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d012      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	0c5b      	lsrs	r3, r3, #17
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	3328      	adds	r3, #40	; 0x28
 80039aa:	443b      	add	r3, r7
 80039ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	4a0e      	ldr	r2, [pc, #56]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039b6:	fb03 f202 	mul.w	r2, r3, r2
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
 80039c2:	e004      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c8:	fb02 f303 	mul.w	r3, r2, r3
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	623b      	str	r3, [r7, #32]
      break;
 80039d2:	e002      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039d6:	623b      	str	r3, [r7, #32]
      break;
 80039d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039da:	6a3b      	ldr	r3, [r7, #32]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3728      	adds	r7, #40	; 0x28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc90      	pop	{r4, r7}
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	0800b3c8 	.word	0x0800b3c8
 80039ec:	40021000 	.word	0x40021000
 80039f0:	007a1200 	.word	0x007a1200
 80039f4:	003d0900 	.word	0x003d0900

080039f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039fc:	4b02      	ldr	r3, [pc, #8]	; (8003a08 <HAL_RCC_GetHCLKFreq+0x10>)
 80039fe:	681b      	ldr	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	20000014 	.word	0x20000014

08003a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a10:	f7ff fff2 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	4903      	ldr	r1, [pc, #12]	; (8003a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	0800b434 	.word	0x0800b434

08003a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a38:	f7ff ffde 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	0adb      	lsrs	r3, r3, #11
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4903      	ldr	r1, [pc, #12]	; (8003a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a4a:	5ccb      	ldrb	r3, [r1, r3]
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40021000 	.word	0x40021000
 8003a58:	0800b434 	.word	0x0800b434

08003a5c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	220f      	movs	r2, #15
 8003a6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a6c:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <HAL_RCC_GetClockConfig+0x58>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 0203 	and.w	r2, r3, #3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a78:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <HAL_RCC_GetClockConfig+0x58>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_RCC_GetClockConfig+0x58>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a90:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <HAL_RCC_GetClockConfig+0x58>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	08db      	lsrs	r3, r3, #3
 8003a96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0207 	and.w	r2, r3, #7
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40022000 	.word	0x40022000

08003abc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <RCC_Delay+0x34>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <RCC_Delay+0x38>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	0a5b      	lsrs	r3, r3, #9
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	fb02 f303 	mul.w	r3, r2, r3
 8003ad6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ad8:	bf00      	nop
  }
  while (Delay --);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1e5a      	subs	r2, r3, #1
 8003ade:	60fa      	str	r2, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f9      	bne.n	8003ad8 <RCC_Delay+0x1c>
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	20000014 	.word	0x20000014
 8003af4:	10624dd3 	.word	0x10624dd3

08003af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d07d      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003b14:	2300      	movs	r3, #0
 8003b16:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b18:	4b4f      	ldr	r3, [pc, #316]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10d      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b24:	4b4c      	ldr	r3, [pc, #304]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	4a4b      	ldr	r2, [pc, #300]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	61d3      	str	r3, [r2, #28]
 8003b30:	4b49      	ldr	r3, [pc, #292]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b40:	4b46      	ldr	r3, [pc, #280]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d118      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b4c:	4b43      	ldr	r3, [pc, #268]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a42      	ldr	r2, [pc, #264]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b58:	f7fe faa2 	bl	80020a0 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5e:	e008      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b60:	f7fe fa9e 	bl	80020a0 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	; 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e06d      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b72:	4b3a      	ldr	r3, [pc, #232]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b7e:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b86:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d02e      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d027      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b9c:	4b2e      	ldr	r3, [pc, #184]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ba6:	4b2e      	ldr	r3, [pc, #184]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bac:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bb2:	4a29      	ldr	r2, [pc, #164]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d014      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc2:	f7fe fa6d 	bl	80020a0 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc8:	e00a      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bca:	f7fe fa69 	bl	80020a0 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e036      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be0:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0ee      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bec:	4b1a      	ldr	r3, [pc, #104]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4917      	ldr	r1, [pc, #92]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d105      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c04:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c1c:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	490b      	ldr	r1, [pc, #44]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c3a:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	4904      	ldr	r1, [pc, #16]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40007000 	.word	0x40007000
 8003c60:	42420440 	.word	0x42420440

08003c64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e053      	b.n	8003d1e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d106      	bne.n	8003c96 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7fd ffcf 	bl	8001c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2202      	movs	r2, #2
 8003c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	ea42 0103 	orr.w	r1, r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	0c1a      	lsrs	r2, r3, #16
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f002 0204 	and.w	r2, r2, #4
 8003cfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b088      	sub	sp, #32
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	4613      	mov	r3, r2
 8003d34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_SPI_Transmit+0x22>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e11e      	b.n	8003f86 <HAL_SPI_Transmit+0x260>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d50:	f7fe f9a6 	bl	80020a0 <HAL_GetTick>
 8003d54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d002      	beq.n	8003d6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d66:	2302      	movs	r3, #2
 8003d68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d6a:	e103      	b.n	8003f74 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_SPI_Transmit+0x52>
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d7c:	e0fa      	b.n	8003f74 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2203      	movs	r2, #3
 8003d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	88fa      	ldrh	r2, [r7, #6]
 8003d96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	88fa      	ldrh	r2, [r7, #6]
 8003d9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc4:	d107      	bne.n	8003dd6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	d007      	beq.n	8003df4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfc:	d14b      	bne.n	8003e96 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_SPI_Transmit+0xe6>
 8003e06:	8afb      	ldrh	r3, [r7, #22]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d13e      	bne.n	8003e8a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	881a      	ldrh	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	1c9a      	adds	r2, r3, #2
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e30:	e02b      	b.n	8003e8a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d112      	bne.n	8003e66 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	881a      	ldrh	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	1c9a      	adds	r2, r3, #2
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e64:	e011      	b.n	8003e8a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e66:	f7fe f91b 	bl	80020a0 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d803      	bhi.n	8003e7e <HAL_SPI_Transmit+0x158>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d102      	bne.n	8003e84 <HAL_SPI_Transmit+0x15e>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d102      	bne.n	8003e8a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e88:	e074      	b.n	8003f74 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ce      	bne.n	8003e32 <HAL_SPI_Transmit+0x10c>
 8003e94:	e04c      	b.n	8003f30 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_SPI_Transmit+0x17e>
 8003e9e:	8afb      	ldrh	r3, [r7, #22]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d140      	bne.n	8003f26 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	7812      	ldrb	r2, [r2, #0]
 8003eb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003eca:	e02c      	b.n	8003f26 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d113      	bne.n	8003f02 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	7812      	ldrb	r2, [r2, #0]
 8003ee6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f00:	e011      	b.n	8003f26 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f02:	f7fe f8cd 	bl	80020a0 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d803      	bhi.n	8003f1a <HAL_SPI_Transmit+0x1f4>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d102      	bne.n	8003f20 <HAL_SPI_Transmit+0x1fa>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f24:	e026      	b.n	8003f74 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1cd      	bne.n	8003ecc <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	6839      	ldr	r1, [r7, #0]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fa43 	bl	80043c0 <SPI_EndRxTxTransaction>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e000      	b.n	8003f74 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003f72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b08c      	sub	sp, #48	; 0x30
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	607a      	str	r2, [r7, #4]
 8003f9a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_SPI_TransmitReceive+0x26>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e18a      	b.n	80042ca <HAL_SPI_TransmitReceive+0x33c>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fbc:	f7fe f870 	bl	80020a0 <HAL_GetTick>
 8003fc0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fd2:	887b      	ldrh	r3, [r7, #2]
 8003fd4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d00f      	beq.n	8003ffe <HAL_SPI_TransmitReceive+0x70>
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe4:	d107      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d103      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x68>
 8003fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d003      	beq.n	8003ffe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ffc:	e15b      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x82>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x82>
 800400a:	887b      	ldrh	r3, [r7, #2]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d103      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004016:	e14e      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b04      	cmp	r3, #4
 8004022:	d003      	beq.n	800402c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2205      	movs	r2, #5
 8004028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	887a      	ldrh	r2, [r7, #2]
 800403c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	887a      	ldrh	r2, [r7, #2]
 8004042:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	887a      	ldrh	r2, [r7, #2]
 800404e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	887a      	ldrh	r2, [r7, #2]
 8004054:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d007      	beq.n	8004080 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800407e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004088:	d178      	bne.n	800417c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_SPI_TransmitReceive+0x10a>
 8004092:	8b7b      	ldrh	r3, [r7, #26]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d166      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	881a      	ldrh	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	1c9a      	adds	r2, r3, #2
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040bc:	e053      	b.n	8004166 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d11b      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x176>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d016      	beq.n	8004104 <HAL_SPI_TransmitReceive+0x176>
 80040d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d113      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	881a      	ldrh	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	1c9a      	adds	r2, r3, #2
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b01      	cmp	r3, #1
 8004110:	d119      	bne.n	8004146 <HAL_SPI_TransmitReceive+0x1b8>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004116:	b29b      	uxth	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d014      	beq.n	8004146 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	b292      	uxth	r2, r2
 8004128:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	1c9a      	adds	r2, r3, #2
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004142:	2301      	movs	r3, #1
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004146:	f7fd ffab 	bl	80020a0 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004152:	429a      	cmp	r2, r3
 8004154:	d807      	bhi.n	8004166 <HAL_SPI_TransmitReceive+0x1d8>
 8004156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d003      	beq.n	8004166 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004164:	e0a7      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1a6      	bne.n	80040be <HAL_SPI_TransmitReceive+0x130>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1a1      	bne.n	80040be <HAL_SPI_TransmitReceive+0x130>
 800417a:	e07c      	b.n	8004276 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_SPI_TransmitReceive+0x1fc>
 8004184:	8b7b      	ldrh	r3, [r7, #26]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d16b      	bne.n	8004262 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	330c      	adds	r3, #12
 8004194:	7812      	ldrb	r2, [r2, #0]
 8004196:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b0:	e057      	b.n	8004262 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d11c      	bne.n	80041fa <HAL_SPI_TransmitReceive+0x26c>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d017      	beq.n	80041fa <HAL_SPI_TransmitReceive+0x26c>
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d114      	bne.n	80041fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	330c      	adds	r3, #12
 80041da:	7812      	ldrb	r2, [r2, #0]
 80041dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d119      	bne.n	800423c <HAL_SPI_TransmitReceive+0x2ae>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d014      	beq.n	800423c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004238:	2301      	movs	r3, #1
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800423c:	f7fd ff30 	bl	80020a0 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004248:	429a      	cmp	r2, r3
 800424a:	d803      	bhi.n	8004254 <HAL_SPI_TransmitReceive+0x2c6>
 800424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d102      	bne.n	800425a <HAL_SPI_TransmitReceive+0x2cc>
 8004254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004256:	2b00      	cmp	r3, #0
 8004258:	d103      	bne.n	8004262 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004260:	e029      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1a2      	bne.n	80041b2 <HAL_SPI_TransmitReceive+0x224>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d19d      	bne.n	80041b2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004278:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f8a0 	bl	80043c0 <SPI_EndRxTxTransaction>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d006      	beq.n	8004294 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004292:	e010      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10b      	bne.n	80042b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	e000      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80042b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3730      	adds	r7, #48	; 0x30
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042e0:	b2db      	uxtb	r3, r3
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042fc:	e04c      	b.n	8004398 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004304:	d048      	beq.n	8004398 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004306:	f7fd fecb 	bl	80020a0 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d902      	bls.n	800431c <SPI_WaitFlagStateUntilTimeout+0x30>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d13d      	bne.n	8004398 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800432a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004334:	d111      	bne.n	800435a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800433e:	d004      	beq.n	800434a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004348:	d107      	bne.n	800435a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004358:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004362:	d10f      	bne.n	8004384 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004382:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e00f      	b.n	80043b8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4013      	ands	r3, r2
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	bf0c      	ite	eq
 80043a8:	2301      	moveq	r3, #1
 80043aa:	2300      	movne	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	461a      	mov	r2, r3
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d1a3      	bne.n	80042fe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2200      	movs	r2, #0
 80043d4:	2180      	movs	r1, #128	; 0x80
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f7ff ff88 	bl	80042ec <SPI_WaitFlagStateUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d007      	beq.n	80043f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e6:	f043 0220 	orr.w	r2, r3, #32
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e000      	b.n	80043f4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e01d      	b.n	800444a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fd fc50 	bl	8001cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	4619      	mov	r1, r3
 800443a:	4610      	mov	r0, r2
 800443c:	f000 fa1c 	bl	8004878 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f042 0201 	orr.w	r2, r2, #1
 8004468:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b06      	cmp	r3, #6
 800447a:	d007      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d122      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d11b      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0202 	mvn.w	r2, #2
 80044c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f9b1 	bl	8004842 <HAL_TIM_IC_CaptureCallback>
 80044e0:	e005      	b.n	80044ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f9a4 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f9b3 	bl	8004854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d122      	bne.n	8004548 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b04      	cmp	r3, #4
 800450e:	d11b      	bne.n	8004548 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0204 	mvn.w	r2, #4
 8004518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2202      	movs	r2, #2
 800451e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f987 	bl	8004842 <HAL_TIM_IC_CaptureCallback>
 8004534:	e005      	b.n	8004542 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f97a 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f989 	bl	8004854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b08      	cmp	r3, #8
 8004554:	d122      	bne.n	800459c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b08      	cmp	r3, #8
 8004562:	d11b      	bne.n	800459c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0208 	mvn.w	r2, #8
 800456c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2204      	movs	r2, #4
 8004572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f95d 	bl	8004842 <HAL_TIM_IC_CaptureCallback>
 8004588:	e005      	b.n	8004596 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f950 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f95f 	bl	8004854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b10      	cmp	r3, #16
 80045a8:	d122      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b10      	cmp	r3, #16
 80045b6:	d11b      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0210 	mvn.w	r2, #16
 80045c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2208      	movs	r2, #8
 80045c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f933 	bl	8004842 <HAL_TIM_IC_CaptureCallback>
 80045dc:	e005      	b.n	80045ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f926 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f935 	bl	8004854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d10e      	bne.n	800461c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d107      	bne.n	800461c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0201 	mvn.w	r2, #1
 8004614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fd fa2e 	bl	8001a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004626:	2b80      	cmp	r3, #128	; 0x80
 8004628:	d10e      	bne.n	8004648 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004634:	2b80      	cmp	r3, #128	; 0x80
 8004636:	d107      	bne.n	8004648 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fa5d 	bl	8004b02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004652:	2b40      	cmp	r3, #64	; 0x40
 8004654:	d10e      	bne.n	8004674 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d107      	bne.n	8004674 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800466c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8f9 	bl	8004866 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b20      	cmp	r3, #32
 8004680:	d10e      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b20      	cmp	r3, #32
 800468e:	d107      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0220 	mvn.w	r2, #32
 8004698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fa28 	bl	8004af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_TIM_ConfigClockSource+0x18>
 80046bc:	2302      	movs	r3, #2
 80046be:	e0b3      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x180>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f8:	d03e      	beq.n	8004778 <HAL_TIM_ConfigClockSource+0xd0>
 80046fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046fe:	f200 8087 	bhi.w	8004810 <HAL_TIM_ConfigClockSource+0x168>
 8004702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004706:	f000 8085 	beq.w	8004814 <HAL_TIM_ConfigClockSource+0x16c>
 800470a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470e:	d87f      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x168>
 8004710:	2b70      	cmp	r3, #112	; 0x70
 8004712:	d01a      	beq.n	800474a <HAL_TIM_ConfigClockSource+0xa2>
 8004714:	2b70      	cmp	r3, #112	; 0x70
 8004716:	d87b      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x168>
 8004718:	2b60      	cmp	r3, #96	; 0x60
 800471a:	d050      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x116>
 800471c:	2b60      	cmp	r3, #96	; 0x60
 800471e:	d877      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x168>
 8004720:	2b50      	cmp	r3, #80	; 0x50
 8004722:	d03c      	beq.n	800479e <HAL_TIM_ConfigClockSource+0xf6>
 8004724:	2b50      	cmp	r3, #80	; 0x50
 8004726:	d873      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x168>
 8004728:	2b40      	cmp	r3, #64	; 0x40
 800472a:	d058      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x136>
 800472c:	2b40      	cmp	r3, #64	; 0x40
 800472e:	d86f      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x168>
 8004730:	2b30      	cmp	r3, #48	; 0x30
 8004732:	d064      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x156>
 8004734:	2b30      	cmp	r3, #48	; 0x30
 8004736:	d86b      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x168>
 8004738:	2b20      	cmp	r3, #32
 800473a:	d060      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x156>
 800473c:	2b20      	cmp	r3, #32
 800473e:	d867      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x168>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d05c      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x156>
 8004744:	2b10      	cmp	r3, #16
 8004746:	d05a      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004748:	e062      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6899      	ldr	r1, [r3, #8]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f000 f966 	bl	8004a2a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800476c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	609a      	str	r2, [r3, #8]
      break;
 8004776:	e04e      	b.n	8004816 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	6899      	ldr	r1, [r3, #8]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f000 f94f 	bl	8004a2a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800479a:	609a      	str	r2, [r3, #8]
      break;
 800479c:	e03b      	b.n	8004816 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	461a      	mov	r2, r3
 80047ac:	f000 f8c6 	bl	800493c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2150      	movs	r1, #80	; 0x50
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f91d 	bl	80049f6 <TIM_ITRx_SetConfig>
      break;
 80047bc:	e02b      	b.n	8004816 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6859      	ldr	r1, [r3, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	461a      	mov	r2, r3
 80047cc:	f000 f8e4 	bl	8004998 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2160      	movs	r1, #96	; 0x60
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f90d 	bl	80049f6 <TIM_ITRx_SetConfig>
      break;
 80047dc:	e01b      	b.n	8004816 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6859      	ldr	r1, [r3, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	461a      	mov	r2, r3
 80047ec:	f000 f8a6 	bl	800493c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2140      	movs	r1, #64	; 0x40
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f8fd 	bl	80049f6 <TIM_ITRx_SetConfig>
      break;
 80047fc:	e00b      	b.n	8004816 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f000 f8f4 	bl	80049f6 <TIM_ITRx_SetConfig>
      break;
 800480e:	e002      	b.n	8004816 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004810:	bf00      	nop
 8004812:	e000      	b.n	8004816 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004814:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr

08004842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr

08004854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr

08004866 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a29      	ldr	r2, [pc, #164]	; (8004930 <TIM_Base_SetConfig+0xb8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00b      	beq.n	80048a8 <TIM_Base_SetConfig+0x30>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004896:	d007      	beq.n	80048a8 <TIM_Base_SetConfig+0x30>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a26      	ldr	r2, [pc, #152]	; (8004934 <TIM_Base_SetConfig+0xbc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d003      	beq.n	80048a8 <TIM_Base_SetConfig+0x30>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a25      	ldr	r2, [pc, #148]	; (8004938 <TIM_Base_SetConfig+0xc0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d108      	bne.n	80048ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a1c      	ldr	r2, [pc, #112]	; (8004930 <TIM_Base_SetConfig+0xb8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00b      	beq.n	80048da <TIM_Base_SetConfig+0x62>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c8:	d007      	beq.n	80048da <TIM_Base_SetConfig+0x62>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a19      	ldr	r2, [pc, #100]	; (8004934 <TIM_Base_SetConfig+0xbc>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d003      	beq.n	80048da <TIM_Base_SetConfig+0x62>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a18      	ldr	r2, [pc, #96]	; (8004938 <TIM_Base_SetConfig+0xc0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d108      	bne.n	80048ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a07      	ldr	r2, [pc, #28]	; (8004930 <TIM_Base_SetConfig+0xb8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d103      	bne.n	8004920 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	615a      	str	r2, [r3, #20]
}
 8004926:	bf00      	nop
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr
 8004930:	40012c00 	.word	0x40012c00
 8004934:	40000400 	.word	0x40000400
 8004938:	40000800 	.word	0x40000800

0800493c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	f023 0201 	bic.w	r2, r3, #1
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f023 030a 	bic.w	r3, r3, #10
 8004978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr

08004998 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f023 0210 	bic.w	r2, r3, #16
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	031b      	lsls	r3, r3, #12
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	621a      	str	r2, [r3, #32]
}
 80049ec:	bf00      	nop
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr

080049f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f043 0307 	orr.w	r3, r3, #7
 8004a18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	609a      	str	r2, [r3, #8]
}
 8004a20:	bf00      	nop
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bc80      	pop	{r7}
 8004a28:	4770      	bx	lr

08004a2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b087      	sub	sp, #28
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
 8004a36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	021a      	lsls	r2, r3, #8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	609a      	str	r2, [r3, #8]
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e032      	b.n	8004ae6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ab8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr

08004b02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr

08004b14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e03f      	b.n	8004ba6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fd f8fe 	bl	8001d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2224      	movs	r2, #36	; 0x24
 8004b44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f90b 	bl	8004d74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695a      	ldr	r2, [r3, #20]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b088      	sub	sp, #32
 8004bb2:	af02      	add	r7, sp, #8
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	603b      	str	r3, [r7, #0]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	f040 8083 	bne.w	8004cd6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_UART_Transmit+0x2e>
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e07b      	b.n	8004cd8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_UART_Transmit+0x40>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e074      	b.n	8004cd8 <HAL_UART_Transmit+0x12a>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2221      	movs	r2, #33	; 0x21
 8004c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004c04:	f7fd fa4c 	bl	80020a0 <HAL_GetTick>
 8004c08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	88fa      	ldrh	r2, [r7, #6]
 8004c0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	88fa      	ldrh	r2, [r7, #6]
 8004c14:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c16:	e042      	b.n	8004c9e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2e:	d122      	bne.n	8004c76 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2200      	movs	r2, #0
 8004c38:	2180      	movs	r1, #128	; 0x80
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f850 	bl	8004ce0 <UART_WaitOnFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e046      	b.n	8004cd8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c5c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d103      	bne.n	8004c6e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	3302      	adds	r3, #2
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	e017      	b.n	8004c9e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	3301      	adds	r3, #1
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	e013      	b.n	8004c9e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2180      	movs	r1, #128	; 0x80
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f82d 	bl	8004ce0 <UART_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e023      	b.n	8004cd8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	60ba      	str	r2, [r7, #8]
 8004c96:	781a      	ldrb	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1b7      	bne.n	8004c18 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2140      	movs	r1, #64	; 0x40
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f814 	bl	8004ce0 <UART_WaitOnFlagUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e00a      	b.n	8004cd8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	e000      	b.n	8004cd8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004cd6:	2302      	movs	r3, #2
  }
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	4613      	mov	r3, r2
 8004cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf0:	e02c      	b.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d028      	beq.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d00:	f7fd f9ce 	bl	80020a0 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d21d      	bcs.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d1e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e00f      	b.n	8004d6c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4013      	ands	r3, r2
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	bf0c      	ite	eq
 8004d5c:	2301      	moveq	r3, #1
 8004d5e:	2300      	movne	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	461a      	mov	r2, r3
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d0c3      	beq.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004dae:	f023 030c 	bic.w	r3, r3, #12
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	68f9      	ldr	r1, [r7, #12]
 8004db8:	430b      	orrs	r3, r1
 8004dba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a52      	ldr	r2, [pc, #328]	; (8004f20 <UART_SetConfig+0x1ac>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d14e      	bne.n	8004e7a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ddc:	f7fe fe2a 	bl	8003a34 <HAL_RCC_GetPCLK2Freq>
 8004de0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	4613      	mov	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	009a      	lsls	r2, r3, #2
 8004dec:	441a      	add	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	4a4a      	ldr	r2, [pc, #296]	; (8004f24 <UART_SetConfig+0x1b0>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	0119      	lsls	r1, r3, #4
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	009a      	lsls	r2, r3, #2
 8004e0c:	441a      	add	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e18:	4b42      	ldr	r3, [pc, #264]	; (8004f24 <UART_SetConfig+0x1b0>)
 8004e1a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	2064      	movs	r0, #100	; 0x64
 8004e22:	fb00 f303 	mul.w	r3, r0, r3
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	3332      	adds	r3, #50	; 0x32
 8004e2c:	4a3d      	ldr	r2, [pc, #244]	; (8004f24 <UART_SetConfig+0x1b0>)
 8004e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e38:	4419      	add	r1, r3
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	009a      	lsls	r2, r3, #2
 8004e44:	441a      	add	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e50:	4b34      	ldr	r3, [pc, #208]	; (8004f24 <UART_SetConfig+0x1b0>)
 8004e52:	fba3 0302 	umull	r0, r3, r3, r2
 8004e56:	095b      	lsrs	r3, r3, #5
 8004e58:	2064      	movs	r0, #100	; 0x64
 8004e5a:	fb00 f303 	mul.w	r3, r0, r3
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	3332      	adds	r3, #50	; 0x32
 8004e64:	4a2f      	ldr	r2, [pc, #188]	; (8004f24 <UART_SetConfig+0x1b0>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	f003 020f 	and.w	r2, r3, #15
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	440a      	add	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004e78:	e04d      	b.n	8004f16 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e7a:	f7fe fdc7 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8004e7e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	009a      	lsls	r2, r3, #2
 8004e8a:	441a      	add	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e96:	4a23      	ldr	r2, [pc, #140]	; (8004f24 <UART_SetConfig+0x1b0>)
 8004e98:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	0119      	lsls	r1, r3, #4
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009a      	lsls	r2, r3, #2
 8004eaa:	441a      	add	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eb6:	4b1b      	ldr	r3, [pc, #108]	; (8004f24 <UART_SetConfig+0x1b0>)
 8004eb8:	fba3 0302 	umull	r0, r3, r3, r2
 8004ebc:	095b      	lsrs	r3, r3, #5
 8004ebe:	2064      	movs	r0, #100	; 0x64
 8004ec0:	fb00 f303 	mul.w	r3, r0, r3
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	3332      	adds	r3, #50	; 0x32
 8004eca:	4a16      	ldr	r2, [pc, #88]	; (8004f24 <UART_SetConfig+0x1b0>)
 8004ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ed6:	4419      	add	r1, r3
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009a      	lsls	r2, r3, #2
 8004ee2:	441a      	add	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eee:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <UART_SetConfig+0x1b0>)
 8004ef0:	fba3 0302 	umull	r0, r3, r3, r2
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	2064      	movs	r0, #100	; 0x64
 8004ef8:	fb00 f303 	mul.w	r3, r0, r3
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	3332      	adds	r3, #50	; 0x32
 8004f02:	4a08      	ldr	r2, [pc, #32]	; (8004f24 <UART_SetConfig+0x1b0>)
 8004f04:	fba2 2303 	umull	r2, r3, r2, r3
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	f003 020f 	and.w	r2, r3, #15
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	440a      	add	r2, r1
 8004f14:	609a      	str	r2, [r3, #8]
}
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40013800 	.word	0x40013800
 8004f24:	51eb851f 	.word	0x51eb851f

08004f28 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004f2c:	4904      	ldr	r1, [pc, #16]	; (8004f40 <MX_FATFS_Init+0x18>)
 8004f2e:	4805      	ldr	r0, [pc, #20]	; (8004f44 <MX_FATFS_Init+0x1c>)
 8004f30:	f002 ffe6 	bl	8007f00 <FATFS_LinkDriver>
 8004f34:	4603      	mov	r3, r0
 8004f36:	461a      	mov	r2, r3
 8004f38:	4b03      	ldr	r3, [pc, #12]	; (8004f48 <MX_FATFS_Init+0x20>)
 8004f3a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8004f3c:	bf00      	nop
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	20000994 	.word	0x20000994
 8004f44:	20000020 	.word	0x20000020
 8004f48:	20000990 	.word	0x20000990

08004f4c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004f50:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	4603      	mov	r3, r0
 8004f62:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return SD_disk_initialize (pdrv);
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fb fd4e 	bl	8000a08 <SD_disk_initialize>
 8004f6c:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
     return SD_disk_status(pdrv);
 8004f80:	79fb      	ldrb	r3, [r7, #7]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fb fe2a 	bl	8000bdc <SD_disk_status>
 8004f88:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 8004fa2:	7bf8      	ldrb	r0, [r7, #15]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	f7fb fe2b 	bl	8000c04 <SD_disk_read>
 8004fae:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 8004fc8:	7bf8      	ldrb	r0, [r7, #15]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	f7fb fe82 	bl	8000cd8 <SD_disk_write>
 8004fd4:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	603a      	str	r2, [r7, #0]
 8004fe8:	71fb      	strb	r3, [r7, #7]
 8004fea:	460b      	mov	r3, r1
 8004fec:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8004fee:	79b9      	ldrb	r1, [r7, #6]
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fb fef3 	bl	8000de0 <SD_disk_ioctl>
 8004ffa:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	4a08      	ldr	r2, [pc, #32]	; (8005034 <disk_status+0x30>)
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	79fa      	ldrb	r2, [r7, #7]
 800501c:	4905      	ldr	r1, [pc, #20]	; (8005034 <disk_status+0x30>)
 800501e:	440a      	add	r2, r1
 8005020:	7a12      	ldrb	r2, [r2, #8]
 8005022:	4610      	mov	r0, r2
 8005024:	4798      	blx	r3
 8005026:	4603      	mov	r3, r0
 8005028:	73fb      	strb	r3, [r7, #15]
  return stat;
 800502a:	7bfb      	ldrb	r3, [r7, #15]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	200009b8 	.word	0x200009b8

08005038 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	4a0d      	ldr	r2, [pc, #52]	; (8005080 <disk_initialize+0x48>)
 800504a:	5cd3      	ldrb	r3, [r2, r3]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d111      	bne.n	8005074 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	4a0b      	ldr	r2, [pc, #44]	; (8005080 <disk_initialize+0x48>)
 8005054:	2101      	movs	r1, #1
 8005056:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	4a09      	ldr	r2, [pc, #36]	; (8005080 <disk_initialize+0x48>)
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	79fa      	ldrb	r2, [r7, #7]
 8005066:	4906      	ldr	r1, [pc, #24]	; (8005080 <disk_initialize+0x48>)
 8005068:	440a      	add	r2, r1
 800506a:	7a12      	ldrb	r2, [r2, #8]
 800506c:	4610      	mov	r0, r2
 800506e:	4798      	blx	r3
 8005070:	4603      	mov	r3, r0
 8005072:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005074:	7bfb      	ldrb	r3, [r7, #15]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	200009b8 	.word	0x200009b8

08005084 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005084:	b590      	push	{r4, r7, lr}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	4603      	mov	r3, r0
 8005092:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	4a0a      	ldr	r2, [pc, #40]	; (80050c0 <disk_read+0x3c>)
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	689c      	ldr	r4, [r3, #8]
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	4a07      	ldr	r2, [pc, #28]	; (80050c0 <disk_read+0x3c>)
 80050a4:	4413      	add	r3, r2
 80050a6:	7a18      	ldrb	r0, [r3, #8]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	47a0      	blx	r4
 80050b0:	4603      	mov	r3, r0
 80050b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd90      	pop	{r4, r7, pc}
 80050be:	bf00      	nop
 80050c0:	200009b8 	.word	0x200009b8

080050c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	4603      	mov	r3, r0
 80050d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	4a0a      	ldr	r2, [pc, #40]	; (8005100 <disk_write+0x3c>)
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	68dc      	ldr	r4, [r3, #12]
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	4a07      	ldr	r2, [pc, #28]	; (8005100 <disk_write+0x3c>)
 80050e4:	4413      	add	r3, r2
 80050e6:	7a18      	ldrb	r0, [r3, #8]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	47a0      	blx	r4
 80050f0:	4603      	mov	r3, r0
 80050f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd90      	pop	{r4, r7, pc}
 80050fe:	bf00      	nop
 8005100:	200009b8 	.word	0x200009b8

08005104 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	603a      	str	r2, [r7, #0]
 800510e:	71fb      	strb	r3, [r7, #7]
 8005110:	460b      	mov	r3, r1
 8005112:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	4a09      	ldr	r2, [pc, #36]	; (800513c <disk_ioctl+0x38>)
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	79fa      	ldrb	r2, [r7, #7]
 8005122:	4906      	ldr	r1, [pc, #24]	; (800513c <disk_ioctl+0x38>)
 8005124:	440a      	add	r2, r1
 8005126:	7a10      	ldrb	r0, [r2, #8]
 8005128:	79b9      	ldrb	r1, [r7, #6]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	4798      	blx	r3
 800512e:	4603      	mov	r3, r0
 8005130:	73fb      	strb	r3, [r7, #15]
  return res;
 8005132:	7bfb      	ldrb	r3, [r7, #15]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	200009b8 	.word	0x200009b8

08005140 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005154:	e007      	b.n	8005166 <mem_cpy+0x26>
		*d++ = *s++;
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	1c53      	adds	r3, r2, #1
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	1c59      	adds	r1, r3, #1
 8005160:	6179      	str	r1, [r7, #20]
 8005162:	7812      	ldrb	r2, [r2, #0]
 8005164:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	1e5a      	subs	r2, r3, #1
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1f2      	bne.n	8005156 <mem_cpy+0x16>
}
 8005170:	bf00      	nop
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr

0800517c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800518c:	e005      	b.n	800519a <mem_set+0x1e>
		*d++ = (BYTE)val;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	617a      	str	r2, [r7, #20]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	1e5a      	subs	r2, r3, #1
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1f4      	bne.n	800518e <mem_set+0x12>
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr

080051b0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80051b0:	b480      	push	{r7}
 80051b2:	b089      	sub	sp, #36	; 0x24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	61fb      	str	r3, [r7, #28]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80051c8:	bf00      	nop
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	1e5a      	subs	r2, r3, #1
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00d      	beq.n	80051f0 <mem_cmp+0x40>
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	61fa      	str	r2, [r7, #28]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	4619      	mov	r1, r3
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	61ba      	str	r2, [r7, #24]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	1acb      	subs	r3, r1, r3
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0ec      	beq.n	80051ca <mem_cmp+0x1a>
	return r;
 80051f0:	697b      	ldr	r3, [r7, #20]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3724      	adds	r7, #36	; 0x24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc80      	pop	{r7}
 80051fa:	4770      	bx	lr

080051fc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005206:	e002      	b.n	800520e <chk_chr+0x12>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3301      	adds	r3, #1
 800520c:	607b      	str	r3, [r7, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <chk_chr+0x26>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	4293      	cmp	r3, r2
 8005220:	d1f2      	bne.n	8005208 <chk_chr+0xc>
	return *str;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	781b      	ldrb	r3, [r3, #0]
}
 8005226:	4618      	mov	r0, r3
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800523e:	4618      	mov	r0, r3
 8005240:	f002 fe99 	bl	8007f76 <ff_req_grant>
 8005244:	4603      	mov	r3, r0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	460b      	mov	r3, r1
 8005258:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d011      	beq.n	8005284 <unlock_fs+0x36>
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	2b0c      	cmp	r3, #12
 8005264:	d00e      	beq.n	8005284 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 8005266:	78fb      	ldrb	r3, [r7, #3]
 8005268:	2b0b      	cmp	r3, #11
 800526a:	d00b      	beq.n	8005284 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800526c:	78fb      	ldrb	r3, [r7, #3]
 800526e:	2b09      	cmp	r3, #9
 8005270:	d008      	beq.n	8005284 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	2b0f      	cmp	r3, #15
 8005276:	d005      	beq.n	8005284 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800527e:	4618      	mov	r0, r3
 8005280:	f002 fe8e 	bl	8007fa0 <ff_rel_grant>
	}
}
 8005284:	bf00      	nop
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005296:	2300      	movs	r3, #0
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	e038      	b.n	8005312 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80052a0:	492f      	ldr	r1, [pc, #188]	; (8005360 <chk_lock+0xd4>)
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4613      	mov	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d029      	beq.n	8005308 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80052b4:	492a      	ldr	r1, [pc, #168]	; (8005360 <chk_lock+0xd4>)
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4613      	mov	r3, r2
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	4413      	add	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d11e      	bne.n	800530c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80052ce:	4924      	ldr	r1, [pc, #144]	; (8005360 <chk_lock+0xd4>)
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4613      	mov	r3, r2
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	3304      	adds	r3, #4
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d110      	bne.n	800530c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80052ea:	491d      	ldr	r1, [pc, #116]	; (8005360 <chk_lock+0xd4>)
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4613      	mov	r3, r2
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	440b      	add	r3, r1
 80052f8:	3308      	adds	r3, #8
 80052fa:	881a      	ldrh	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8005302:	429a      	cmp	r2, r3
 8005304:	d102      	bne.n	800530c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8005306:	e007      	b.n	8005318 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8005308:	2301      	movs	r3, #1
 800530a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3301      	adds	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d9c3      	bls.n	80052a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d109      	bne.n	8005332 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <chk_lock+0x9e>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d101      	bne.n	800532e <chk_lock+0xa2>
 800532a:	2300      	movs	r3, #0
 800532c:	e013      	b.n	8005356 <chk_lock+0xca>
 800532e:	2312      	movs	r3, #18
 8005330:	e011      	b.n	8005356 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10b      	bne.n	8005350 <chk_lock+0xc4>
 8005338:	4909      	ldr	r1, [pc, #36]	; (8005360 <chk_lock+0xd4>)
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4613      	mov	r3, r2
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	330a      	adds	r3, #10
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534e:	d101      	bne.n	8005354 <chk_lock+0xc8>
 8005350:	2310      	movs	r3, #16
 8005352:	e000      	b.n	8005356 <chk_lock+0xca>
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr
 8005360:	200009a0 	.word	0x200009a0

08005364 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800536a:	2300      	movs	r3, #0
 800536c:	607b      	str	r3, [r7, #4]
 800536e:	e002      	b.n	8005376 <enq_lock+0x12>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3301      	adds	r3, #1
 8005374:	607b      	str	r3, [r7, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d809      	bhi.n	8005390 <enq_lock+0x2c>
 800537c:	490a      	ldr	r1, [pc, #40]	; (80053a8 <enq_lock+0x44>)
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1ef      	bne.n	8005370 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b02      	cmp	r3, #2
 8005394:	bf14      	ite	ne
 8005396:	2301      	movne	r3, #1
 8005398:	2300      	moveq	r3, #0
 800539a:	b2db      	uxtb	r3, r3
}
 800539c:	4618      	mov	r0, r3
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	200009a0 	.word	0x200009a0

080053ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	e02b      	b.n	8005414 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80053bc:	4955      	ldr	r1, [pc, #340]	; (8005514 <inc_lock+0x168>)
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4613      	mov	r3, r2
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d11b      	bne.n	800540e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80053d6:	494f      	ldr	r1, [pc, #316]	; (8005514 <inc_lock+0x168>)
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4613      	mov	r3, r2
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	440b      	add	r3, r1
 80053e4:	3304      	adds	r3, #4
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d10d      	bne.n	800540e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80053f2:	4948      	ldr	r1, [pc, #288]	; (8005514 <inc_lock+0x168>)
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4613      	mov	r3, r2
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	440b      	add	r3, r1
 8005400:	3308      	adds	r3, #8
 8005402:	881a      	ldrh	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800540a:	429a      	cmp	r2, r3
 800540c:	d006      	beq.n	800541c <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3301      	adds	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d9d0      	bls.n	80053bc <inc_lock+0x10>
 800541a:	e000      	b.n	800541e <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800541c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b02      	cmp	r3, #2
 8005422:	d145      	bne.n	80054b0 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	e002      	b.n	8005430 <inc_lock+0x84>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3301      	adds	r3, #1
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d809      	bhi.n	800544a <inc_lock+0x9e>
 8005436:	4937      	ldr	r1, [pc, #220]	; (8005514 <inc_lock+0x168>)
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4613      	mov	r3, r2
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	440b      	add	r3, r1
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1ef      	bne.n	800542a <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d101      	bne.n	8005454 <inc_lock+0xa8>
 8005450:	2300      	movs	r3, #0
 8005452:	e05a      	b.n	800550a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800545a:	482e      	ldr	r0, [pc, #184]	; (8005514 <inc_lock+0x168>)
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4613      	mov	r3, r2
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4403      	add	r3, r0
 8005468:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8005470:	4828      	ldr	r0, [pc, #160]	; (8005514 <inc_lock+0x168>)
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4613      	mov	r3, r2
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4403      	add	r3, r0
 800547e:	3304      	adds	r3, #4
 8005480:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8005488:	4922      	ldr	r1, [pc, #136]	; (8005514 <inc_lock+0x168>)
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4613      	mov	r3, r2
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	3308      	adds	r3, #8
 8005498:	4602      	mov	r2, r0
 800549a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800549c:	491d      	ldr	r1, [pc, #116]	; (8005514 <inc_lock+0x168>)
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4613      	mov	r3, r2
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	4413      	add	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	330a      	adds	r3, #10
 80054ac:	2200      	movs	r2, #0
 80054ae:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00c      	beq.n	80054d0 <inc_lock+0x124>
 80054b6:	4917      	ldr	r1, [pc, #92]	; (8005514 <inc_lock+0x168>)
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4613      	mov	r3, r2
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	440b      	add	r3, r1
 80054c4:	330a      	adds	r3, #10
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <inc_lock+0x124>
 80054cc:	2300      	movs	r3, #0
 80054ce:	e01c      	b.n	800550a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10b      	bne.n	80054ee <inc_lock+0x142>
 80054d6:	490f      	ldr	r1, [pc, #60]	; (8005514 <inc_lock+0x168>)
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4613      	mov	r3, r2
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	4413      	add	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	440b      	add	r3, r1
 80054e4:	330a      	adds	r3, #10
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	3301      	adds	r3, #1
 80054ea:	b299      	uxth	r1, r3
 80054ec:	e001      	b.n	80054f2 <inc_lock+0x146>
 80054ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054f2:	4808      	ldr	r0, [pc, #32]	; (8005514 <inc_lock+0x168>)
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4613      	mov	r3, r2
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4403      	add	r3, r0
 8005500:	330a      	adds	r3, #10
 8005502:	460a      	mov	r2, r1
 8005504:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3301      	adds	r3, #1
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr
 8005514:	200009a0 	.word	0x200009a0

08005518 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3b01      	subs	r3, #1
 8005524:	607b      	str	r3, [r7, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d82e      	bhi.n	800558a <dec_lock+0x72>
		n = Files[i].ctr;
 800552c:	491b      	ldr	r1, [pc, #108]	; (800559c <dec_lock+0x84>)
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	4613      	mov	r3, r2
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	330a      	adds	r3, #10
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005540:	89fb      	ldrh	r3, [r7, #14]
 8005542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005546:	d101      	bne.n	800554c <dec_lock+0x34>
 8005548:	2300      	movs	r3, #0
 800554a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800554c:	89fb      	ldrh	r3, [r7, #14]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <dec_lock+0x40>
 8005552:	89fb      	ldrh	r3, [r7, #14]
 8005554:	3b01      	subs	r3, #1
 8005556:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005558:	4910      	ldr	r1, [pc, #64]	; (800559c <dec_lock+0x84>)
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	4613      	mov	r3, r2
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	330a      	adds	r3, #10
 8005568:	89fa      	ldrh	r2, [r7, #14]
 800556a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800556c:	89fb      	ldrh	r3, [r7, #14]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d108      	bne.n	8005584 <dec_lock+0x6c>
 8005572:	490a      	ldr	r1, [pc, #40]	; (800559c <dec_lock+0x84>)
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	4613      	mov	r3, r2
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	737b      	strb	r3, [r7, #13]
 8005588:	e001      	b.n	800558e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800558a:	2302      	movs	r3, #2
 800558c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800558e:	7b7b      	ldrb	r3, [r7, #13]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	200009a0 	.word	0x200009a0

080055a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	e016      	b.n	80055dc <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80055ae:	4910      	ldr	r1, [pc, #64]	; (80055f0 <clear_lock+0x50>)
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4613      	mov	r3, r2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	440b      	add	r3, r1
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d108      	bne.n	80055d6 <clear_lock+0x36>
 80055c4:	490a      	ldr	r1, [pc, #40]	; (80055f0 <clear_lock+0x50>)
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4613      	mov	r3, r2
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3301      	adds	r3, #1
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d9e5      	bls.n	80055ae <clear_lock+0xe>
	}
}
 80055e2:	bf00      	nop
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bc80      	pop	{r7}
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	200009a0 	.word	0x200009a0

080055f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005606:	2b00      	cmp	r3, #0
 8005608:	d038      	beq.n	800567c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8005610:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	2301      	movs	r3, #1
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	f7ff fd51 	bl	80050c4 <disk_write>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005628:	2301      	movs	r3, #1
 800562a:	73fb      	strb	r3, [r7, #15]
 800562c:	e026      	b.n	800567c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	1ad2      	subs	r2, r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005646:	429a      	cmp	r2, r3
 8005648:	d218      	bcs.n	800567c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	e010      	b.n	8005676 <sync_window+0x82>
					wsect += fs->fsize;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4413      	add	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	2301      	movs	r3, #1
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	f7ff fd2a 	bl	80050c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	3b01      	subs	r3, #1
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d8eb      	bhi.n	8005654 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800567c:	7bfb      	ldrb	r3, [r7, #15]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d01b      	beq.n	80056d8 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff ffa7 	bl	80055f4 <sync_window>
 80056a6:	4603      	mov	r3, r0
 80056a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d113      	bne.n	80056d8 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	2301      	movs	r3, #1
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	f7ff fce2 	bl	8005084 <disk_read>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80056c6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ca:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff ff82 	bl	80055f4 <sync_window>
 80056f0:	4603      	mov	r3, r0
 80056f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f040 809b 	bne.w	8005832 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005702:	2b03      	cmp	r3, #3
 8005704:	f040 8088 	bne.w	8005818 <sync_fs+0x136>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800570e:	2b01      	cmp	r3, #1
 8005710:	f040 8082 	bne.w	8005818 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800571a:	2100      	movs	r1, #0
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff fd2d 	bl	800517c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2255      	movs	r2, #85	; 0x55
 8005726:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	22aa      	movs	r2, #170	; 0xaa
 800572e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2252      	movs	r2, #82	; 0x52
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2252      	movs	r2, #82	; 0x52
 800573c:	705a      	strb	r2, [r3, #1]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2261      	movs	r2, #97	; 0x61
 8005742:	709a      	strb	r2, [r3, #2]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2241      	movs	r2, #65	; 0x41
 8005748:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2272      	movs	r2, #114	; 0x72
 800574e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2272      	movs	r2, #114	; 0x72
 8005756:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2241      	movs	r2, #65	; 0x41
 800575e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2261      	movs	r2, #97	; 0x61
 8005766:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005770:	b2da      	uxtb	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800577e:	b29b      	uxth	r3, r3
 8005780:	0a1b      	lsrs	r3, r3, #8
 8005782:	b29b      	uxth	r3, r3
 8005784:	b2da      	uxtb	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005792:	0c1b      	lsrs	r3, r3, #16
 8005794:	b2da      	uxtb	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80057a2:	0e1b      	lsrs	r3, r3, #24
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	0a1b      	lsrs	r3, r3, #8
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80057d4:	0c1b      	lsrs	r3, r3, #16
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80057e4:	0e1b      	lsrs	r3, r3, #24
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800580a:	2301      	movs	r3, #1
 800580c:	f7ff fc5a 	bl	80050c4 <disk_write>
			fs->fsi_flag = 0;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800581e:	2200      	movs	r2, #0
 8005820:	2100      	movs	r1, #0
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff fc6e 	bl	8005104 <disk_ioctl>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800582e:	2301      	movs	r3, #1
 8005830:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005832:	7bfb      	ldrb	r3, [r7, #15]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	3b02      	subs	r3, #2
 800584a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005852:	3b02      	subs	r3, #2
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d301      	bcc.n	800585e <clust2sect+0x22>
 800585a:	2300      	movs	r3, #0
 800585c:	e00a      	b.n	8005874 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005864:	461a      	mov	r2, r3
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	fb03 f202 	mul.w	r2, r3, r2
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005872:	4413      	add	r3, r2
}
 8005874:	4618      	mov	r0, r3
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr

0800587e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b086      	sub	sp, #24
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d905      	bls.n	800589a <get_fat+0x1c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d302      	bcc.n	80058a0 <get_fat+0x22>
		val = 1;	/* Internal error */
 800589a:	2301      	movs	r3, #1
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	e0a3      	b.n	80059e8 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80058a0:	f04f 33ff 	mov.w	r3, #4294967295
 80058a4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d068      	beq.n	8005982 <get_fat+0x104>
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	f300 808f 	bgt.w	80059d4 <get_fat+0x156>
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d002      	beq.n	80058c0 <get_fat+0x42>
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d040      	beq.n	8005940 <get_fat+0xc2>
 80058be:	e089      	b.n	80059d4 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	085b      	lsrs	r3, r3, #1
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	0a5b      	lsrs	r3, r3, #9
 80058d8:	4413      	add	r3, r2
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff fed2 	bl	8005686 <move_window>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d178      	bne.n	80059da <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	60fa      	str	r2, [r7, #12]
 80058ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	5cd3      	ldrb	r3, [r2, r3]
 80058f6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	0a5b      	lsrs	r3, r3, #9
 8005902:	4413      	add	r3, r2
 8005904:	4619      	mov	r1, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff febd 	bl	8005686 <move_window>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d165      	bne.n	80059de <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	5cd3      	ldrb	r3, [r2, r3]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	461a      	mov	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4313      	orrs	r3, r2
 8005924:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <get_fat+0xb8>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	091b      	lsrs	r3, r3, #4
 8005934:	e002      	b.n	800593c <get_fat+0xbe>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800593c:	617b      	str	r3, [r7, #20]
			break;
 800593e:	e053      	b.n	80059e8 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	0a1b      	lsrs	r3, r3, #8
 800594a:	4413      	add	r3, r2
 800594c:	4619      	mov	r1, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7ff fe99 	bl	8005686 <move_window>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d143      	bne.n	80059e2 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	4413      	add	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	3301      	adds	r3, #1
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	b21a      	sxth	r2, r3
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	b21b      	sxth	r3, r3
 8005978:	4313      	orrs	r3, r2
 800597a:	b21b      	sxth	r3, r3
 800597c:	b29b      	uxth	r3, r3
 800597e:	617b      	str	r3, [r7, #20]
			break;
 8005980:	e032      	b.n	80059e8 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	09db      	lsrs	r3, r3, #7
 800598c:	4413      	add	r3, r2
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff fe78 	bl	8005686 <move_window>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d124      	bne.n	80059e6 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	4413      	add	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	3303      	adds	r3, #3
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	061a      	lsls	r2, r3, #24
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	3302      	adds	r3, #2
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	041b      	lsls	r3, r3, #16
 80059ba:	4313      	orrs	r3, r2
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	3201      	adds	r2, #1
 80059c0:	7812      	ldrb	r2, [r2, #0]
 80059c2:	0212      	lsls	r2, r2, #8
 80059c4:	4313      	orrs	r3, r2
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	7812      	ldrb	r2, [r2, #0]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059d0:	617b      	str	r3, [r7, #20]
			break;
 80059d2:	e009      	b.n	80059e8 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 80059d4:	2301      	movs	r3, #1
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	e006      	b.n	80059e8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059da:	bf00      	nop
 80059dc:	e004      	b.n	80059e8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059de:	bf00      	nop
 80059e0:	e002      	b.n	80059e8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80059e2:	bf00      	nop
 80059e4:	e000      	b.n	80059e8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80059e6:	bf00      	nop
		}
	}

	return val;
 80059e8:	697b      	ldr	r3, [r7, #20]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b088      	sub	sp, #32
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d905      	bls.n	8005a10 <put_fat+0x1e>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d302      	bcc.n	8005a16 <put_fat+0x24>
		res = FR_INT_ERR;
 8005a10:	2302      	movs	r3, #2
 8005a12:	77fb      	strb	r3, [r7, #31]
 8005a14:	e0f6      	b.n	8005c04 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	f000 809e 	beq.w	8005b5e <put_fat+0x16c>
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	f300 80e4 	bgt.w	8005bf0 <put_fat+0x1fe>
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d002      	beq.n	8005a32 <put_fat+0x40>
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d06f      	beq.n	8005b10 <put_fat+0x11e>
 8005a30:	e0de      	b.n	8005bf0 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	085b      	lsrs	r3, r3, #1
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	0a5b      	lsrs	r3, r3, #9
 8005a4a:	4413      	add	r3, r2
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f7ff fe19 	bl	8005686 <move_window>
 8005a54:	4603      	mov	r3, r0
 8005a56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a58:	7ffb      	ldrb	r3, [r7, #31]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f040 80cb 	bne.w	8005bf6 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	617a      	str	r2, [r7, #20]
 8005a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00d      	beq.n	8005a96 <put_fat+0xa4>
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	b25b      	sxtb	r3, r3
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	b25a      	sxtb	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	b25b      	sxtb	r3, r3
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	b25b      	sxtb	r3, r3
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	e001      	b.n	8005a9a <put_fat+0xa8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	0a5b      	lsrs	r3, r3, #9
 8005ab0:	4413      	add	r3, r2
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f7ff fde6 	bl	8005686 <move_window>
 8005aba:	4603      	mov	r3, r0
 8005abc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005abe:	7ffb      	ldrb	r3, [r7, #31]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f040 809a 	bne.w	8005bfa <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <put_fat+0xf2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	091b      	lsrs	r3, r3, #4
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	e00e      	b.n	8005b02 <put_fat+0x110>
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	b25b      	sxtb	r3, r3
 8005aea:	f023 030f 	bic.w	r3, r3, #15
 8005aee:	b25a      	sxtb	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	0a1b      	lsrs	r3, r3, #8
 8005af4:	b25b      	sxtb	r3, r3
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	b25b      	sxtb	r3, r3
 8005afc:	4313      	orrs	r3, r2
 8005afe:	b25b      	sxtb	r3, r3
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005b0e:	e079      	b.n	8005c04 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	0a1b      	lsrs	r3, r3, #8
 8005b1a:	4413      	add	r3, r2
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f7ff fdb1 	bl	8005686 <move_window>
 8005b24:	4603      	mov	r3, r0
 8005b26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b28:	7ffb      	ldrb	r3, [r7, #31]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d167      	bne.n	8005bfe <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4413      	add	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	0a1b      	lsrs	r3, r3, #8
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005b5c:	e052      	b.n	8005c04 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	09db      	lsrs	r3, r3, #7
 8005b68:	4413      	add	r3, r2
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7ff fd8a 	bl	8005686 <move_window>
 8005b72:	4603      	mov	r3, r0
 8005b74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b76:	7ffb      	ldrb	r3, [r7, #31]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d142      	bne.n	8005c02 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	3303      	adds	r3, #3
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	061a      	lsls	r2, r3, #24
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	3302      	adds	r3, #2
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	041b      	lsls	r3, r3, #16
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	3201      	adds	r2, #1
 8005ba0:	7812      	ldrb	r2, [r2, #0]
 8005ba2:	0212      	lsls	r2, r2, #8
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	7812      	ldrb	r2, [r2, #0]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	0a1b      	lsrs	r3, r3, #8
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	0c1a      	lsrs	r2, r3, #16
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	3302      	adds	r3, #2
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	0e1a      	lsrs	r2, r3, #24
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	3303      	adds	r3, #3
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005bee:	e009      	b.n	8005c04 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e006      	b.n	8005c04 <put_fat+0x212>
			if (res != FR_OK) break;
 8005bf6:	bf00      	nop
 8005bf8:	e004      	b.n	8005c04 <put_fat+0x212>
			if (res != FR_OK) break;
 8005bfa:	bf00      	nop
 8005bfc:	e002      	b.n	8005c04 <put_fat+0x212>
			if (res != FR_OK) break;
 8005bfe:	bf00      	nop
 8005c00:	e000      	b.n	8005c04 <put_fat+0x212>
			if (res != FR_OK) break;
 8005c02:	bf00      	nop
		}
	}

	return res;
 8005c04:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3720      	adds	r7, #32
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d905      	bls.n	8005c2a <remove_chain+0x1c>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d302      	bcc.n	8005c30 <remove_chain+0x22>
		res = FR_INT_ERR;
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	73fb      	strb	r3, [r7, #15]
 8005c2e:	e043      	b.n	8005cb8 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005c34:	e036      	b.n	8005ca4 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff fe20 	bl	800587e <get_fat>
 8005c3e:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d035      	beq.n	8005cb2 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d102      	bne.n	8005c52 <remove_chain+0x44>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	73fb      	strb	r3, [r7, #15]
 8005c50:	e032      	b.n	8005cb8 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c58:	d102      	bne.n	8005c60 <remove_chain+0x52>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	73fb      	strb	r3, [r7, #15]
 8005c5e:	e02b      	b.n	8005cb8 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005c60:	2200      	movs	r2, #0
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff fec4 	bl	80059f2 <put_fat>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d120      	bne.n	8005cb6 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d00f      	beq.n	8005ca0 <remove_chain+0x92>
				fs->free_clust++;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005c94:	f043 0301 	orr.w	r3, r3, #1
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d3c2      	bcc.n	8005c36 <remove_chain+0x28>
 8005cb0:	e002      	b.n	8005cb8 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8005cb2:	bf00      	nop
 8005cb4:	e000      	b.n	8005cb8 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8005cb6:	bf00      	nop
		}
	}

	return res;
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b086      	sub	sp, #24
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10f      	bne.n	8005cf2 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005cd8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <create_chain+0x2a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d31c      	bcc.n	8005d26 <create_chain+0x64>
 8005cec:	2301      	movs	r3, #1
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	e019      	b.n	8005d26 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005cf2:	6839      	ldr	r1, [r7, #0]
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff fdc2 	bl	800587e <get_fat>
 8005cfa:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d801      	bhi.n	8005d06 <create_chain+0x44>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e076      	b.n	8005df4 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0c:	d101      	bne.n	8005d12 <create_chain+0x50>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	e070      	b.n	8005df4 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d201      	bcs.n	8005d22 <create_chain+0x60>
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	e068      	b.n	8005df4 <create_chain+0x132>
		scl = clst;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d307      	bcc.n	8005d4c <create_chain+0x8a>
			ncl = 2;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d901      	bls.n	8005d4c <create_chain+0x8a>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	e053      	b.n	8005df4 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005d4c:	6979      	ldr	r1, [r7, #20]
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7ff fd95 	bl	800587e <get_fat>
 8005d54:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00e      	beq.n	8005d7a <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d62:	d002      	beq.n	8005d6a <create_chain+0xa8>
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <create_chain+0xac>
			return cs;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	e042      	b.n	8005df4 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d1d9      	bne.n	8005d2a <create_chain+0x68>
 8005d76:	2300      	movs	r3, #0
 8005d78:	e03c      	b.n	8005df4 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8005d7a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005d7c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005d80:	6979      	ldr	r1, [r7, #20]
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7ff fe35 	bl	80059f2 <put_fat>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <create_chain+0xe4>
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d006      	beq.n	8005da6 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff fe28 	bl	80059f2 <put_fat>
 8005da2:	4603      	mov	r3, r0
 8005da4:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d11a      	bne.n	8005de2 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbe:	d018      	beq.n	8005df2 <create_chain+0x130>
			fs->free_clust--;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005dc6:	1e5a      	subs	r2, r3, #1
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005dd4:	f043 0301 	orr.w	r3, r3, #1
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8005de0:	e007      	b.n	8005df2 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d102      	bne.n	8005dee <create_chain+0x12c>
 8005de8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dec:	e000      	b.n	8005df0 <create_chain+0x12e>
 8005dee:	2301      	movs	r3, #1
 8005df0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005df2:	697b      	ldr	r3, [r7, #20]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	0a5b      	lsrs	r3, r3, #9
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005e1a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005e1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e22:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1d1a      	adds	r2, r3, #4
 8005e28:	613a      	str	r2, [r7, #16]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <clmt_clust+0x3c>
 8005e34:	2300      	movs	r3, #0
 8005e36:	e010      	b.n	8005e5a <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d307      	bcc.n	8005e50 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e4e:	e7e9      	b.n	8005e24 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8005e50:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	4413      	add	r3, r2
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bc80      	pop	{r7}
 8005e62:	4770      	bx	lr

08005e64 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005e7e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d007      	beq.n	8005e96 <dir_sdi+0x32>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e8c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d301      	bcc.n	8005e9a <dir_sdi+0x36>
		return FR_INT_ERR;
 8005e96:	2302      	movs	r3, #2
 8005e98:	e074      	b.n	8005f84 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10c      	bne.n	8005eba <dir_sdi+0x56>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ea6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d105      	bne.n	8005eba <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005eb4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005eb8:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d111      	bne.n	8005ee4 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ec6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005eca:	461a      	mov	r2, r3
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d301      	bcc.n	8005ed6 <dir_sdi+0x72>
			return FR_INT_ERR;
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	e056      	b.n	8005f84 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005edc:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005ee0:	613b      	str	r3, [r7, #16]
 8005ee2:	e032      	b.n	8005f4a <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005eea:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005ef2:	e01e      	b.n	8005f32 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005efa:	6979      	ldr	r1, [r7, #20]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff fcbe 	bl	800587e <get_fat>
 8005f02:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0a:	d101      	bne.n	8005f10 <dir_sdi+0xac>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e039      	b.n	8005f84 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d907      	bls.n	8005f26 <dir_sdi+0xc2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f1c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d301      	bcc.n	8005f2a <dir_sdi+0xc6>
				return FR_INT_ERR;
 8005f26:	2302      	movs	r3, #2
 8005f28:	e02c      	b.n	8005f84 <dir_sdi+0x120>
			idx -= ic;
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d2dc      	bcs.n	8005ef4 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f40:	6979      	ldr	r1, [r7, #20]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff fc7a 	bl	800583c <clust2sect>
 8005f48:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <dir_sdi+0xf8>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e013      	b.n	8005f84 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	091a      	lsrs	r2, r3, #4
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	441a      	add	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f70:	461a      	mov	r2, r3
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	f003 030f 	and.w	r3, r3, #15
 8005f78:	015b      	lsls	r3, r3, #5
 8005f7a:	441a      	add	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005f8c:	b590      	push	{r4, r7, lr}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <dir_next+0x26>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <dir_next+0x2a>
		return FR_NO_FILE;
 8005fb2:	2304      	movs	r3, #4
 8005fb4:	e0dd      	b.n	8006172 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f003 030f 	and.w	r3, r3, #15
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f040 80c6 	bne.w	800614e <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10b      	bne.n	8005ff2 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005fe0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	f0c0 80b0 	bcc.w	800614e <dir_next+0x1c2>
				return FR_NO_FILE;
 8005fee:	2304      	movs	r3, #4
 8005ff0:	e0bf      	b.n	8006172 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	091b      	lsrs	r3, r3, #4
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005ffc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006000:	3a01      	subs	r2, #1
 8006002:	4013      	ands	r3, r2
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 80a2 	bne.w	800614e <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006016:	4619      	mov	r1, r3
 8006018:	4610      	mov	r0, r2
 800601a:	f7ff fc30 	bl	800587e <get_fat>
 800601e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d801      	bhi.n	800602a <dir_next+0x9e>
 8006026:	2302      	movs	r3, #2
 8006028:	e0a3      	b.n	8006172 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006030:	d101      	bne.n	8006036 <dir_next+0xaa>
 8006032:	2301      	movs	r3, #1
 8006034:	e09d      	b.n	8006172 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800603c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	429a      	cmp	r2, r3
 8006044:	d374      	bcc.n	8006130 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <dir_next+0xc4>
 800604c:	2304      	movs	r3, #4
 800604e:	e090      	b.n	8006172 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f7ff fe2f 	bl	8005cc2 <create_chain>
 8006064:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <dir_next+0xe4>
 800606c:	2307      	movs	r3, #7
 800606e:	e080      	b.n	8006172 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <dir_next+0xee>
 8006076:	2302      	movs	r3, #2
 8006078:	e07b      	b.n	8006172 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006080:	d101      	bne.n	8006086 <dir_next+0xfa>
 8006082:	2301      	movs	r3, #1
 8006084:	e075      	b.n	8006172 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fab1 	bl	80055f4 <sync_window>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <dir_next+0x110>
 8006098:	2301      	movs	r3, #1
 800609a:	e06a      	b.n	8006172 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80060a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060a6:	2100      	movs	r1, #0
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff f867 	bl	800517c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80060ba:	6979      	ldr	r1, [r7, #20]
 80060bc:	4610      	mov	r0, r2
 80060be:	f7ff fbbd 	bl	800583c <clust2sect>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80060c8:	2300      	movs	r3, #0
 80060ca:	613b      	str	r3, [r7, #16]
 80060cc:	e01b      	b.n	8006106 <dir_next+0x17a>
						dp->fs->wflag = 1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff fa87 	bl	80055f4 <sync_window>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <dir_next+0x164>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e040      	b.n	8006172 <dir_next+0x1e6>
						dp->fs->winsect++;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80060f6:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80060fa:	3201      	adds	r2, #1
 80060fc:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	3301      	adds	r3, #1
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800610c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006110:	461a      	mov	r2, r3
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4293      	cmp	r3, r2
 8006116:	d3da      	bcc.n	80060ce <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800611e:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	1a8a      	subs	r2, r1, r2
 800612c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800613e:	6979      	ldr	r1, [r7, #20]
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff fb7b 	bl	800583c <clust2sect>
 8006146:	4602      	mov	r2, r0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	b29a      	uxth	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800615e:	461a      	mov	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	015b      	lsls	r3, r3, #5
 8006168:	441a      	add	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	bd90      	pop	{r4, r7, pc}

0800617a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006184:	2100      	movs	r1, #0
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff fe6c 	bl	8005e64 <dir_sdi>
 800618c:	4603      	mov	r3, r0
 800618e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d131      	bne.n	80061fa <dir_alloc+0x80>
		n = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061a6:	4619      	mov	r1, r3
 80061a8:	4610      	mov	r0, r2
 80061aa:	f7ff fa6c 	bl	8005686 <move_window>
 80061ae:	4603      	mov	r3, r0
 80061b0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d11f      	bne.n	80061f8 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2be5      	cmp	r3, #229	; 0xe5
 80061c2:	d005      	beq.n	80061d0 <dir_alloc+0x56>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d107      	bne.n	80061e0 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	3301      	adds	r3, #1
 80061d4:	60bb      	str	r3, [r7, #8]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d102      	bne.n	80061e4 <dir_alloc+0x6a>
 80061de:	e00c      	b.n	80061fa <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80061e0:	2300      	movs	r3, #0
 80061e2:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80061e4:	2101      	movs	r1, #1
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff fed0 	bl	8005f8c <dir_next>
 80061ec:	4603      	mov	r3, r0
 80061ee:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0d1      	beq.n	800619a <dir_alloc+0x20>
 80061f6:	e000      	b.n	80061fa <dir_alloc+0x80>
			if (res != FR_OK) break;
 80061f8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d101      	bne.n	8006204 <dir_alloc+0x8a>
 8006200:	2307      	movs	r3, #7
 8006202:	73fb      	strb	r3, [r7, #15]
	return res;
 8006204:	7bfb      	ldrb	r3, [r7, #15]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800620e:	b480      	push	{r7}
 8006210:	b085      	sub	sp, #20
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	331b      	adds	r3, #27
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	021b      	lsls	r3, r3, #8
 8006220:	b21a      	sxth	r2, r3
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	331a      	adds	r3, #26
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	b21b      	sxth	r3, r3
 800622a:	4313      	orrs	r3, r2
 800622c:	b21b      	sxth	r3, r3
 800622e:	b29b      	uxth	r3, r3
 8006230:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006238:	2b03      	cmp	r3, #3
 800623a:	d10f      	bne.n	800625c <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	3315      	adds	r3, #21
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	b21a      	sxth	r2, r3
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	3314      	adds	r3, #20
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	b21b      	sxth	r3, r3
 800624e:	4313      	orrs	r3, r2
 8006250:	b21b      	sxth	r3, r3
 8006252:	b29b      	uxth	r3, r3
 8006254:	041b      	lsls	r3, r3, #16
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]

	return cl;
 800625c:	68fb      	ldr	r3, [r7, #12]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	bc80      	pop	{r7}
 8006266:	4770      	bx	lr

08006268 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	331a      	adds	r3, #26
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	b29b      	uxth	r3, r3
 8006280:	0a1b      	lsrs	r3, r3, #8
 8006282:	b29a      	uxth	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	331b      	adds	r3, #27
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	0c1a      	lsrs	r2, r3, #16
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3314      	adds	r3, #20
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	701a      	strb	r2, [r3, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	0c1b      	lsrs	r3, r3, #16
 800629c:	b29b      	uxth	r3, r3
 800629e:	0a1b      	lsrs	r3, r3, #8
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3315      	adds	r3, #21
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]
}
 80062aa:	bf00      	nop
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bc80      	pop	{r7}
 80062b2:	4770      	bx	lr

080062b4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80062bc:	2100      	movs	r1, #0
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff fdd0 	bl	8005e64 <dir_sdi>
 80062c4:	4603      	mov	r3, r0
 80062c6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <dir_find+0x1e>
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
 80062d0:	e03b      	b.n	800634a <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80062de:	4619      	mov	r1, r3
 80062e0:	4610      	mov	r0, r2
 80062e2:	f7ff f9d0 	bl	8005686 <move_window>
 80062e6:	4603      	mov	r3, r0
 80062e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d128      	bne.n	8006342 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062f6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d102      	bne.n	800630a <dir_find+0x56>
 8006304:	2304      	movs	r3, #4
 8006306:	75fb      	strb	r3, [r7, #23]
 8006308:	e01e      	b.n	8006348 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	330b      	adds	r3, #11
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <dir_find+0x7a>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800631e:	220b      	movs	r2, #11
 8006320:	4619      	mov	r1, r3
 8006322:	6938      	ldr	r0, [r7, #16]
 8006324:	f7fe ff44 	bl	80051b0 <mem_cmp>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00b      	beq.n	8006346 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800632e:	2100      	movs	r1, #0
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff fe2b 	bl	8005f8c <dir_next>
 8006336:	4603      	mov	r3, r0
 8006338:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800633a:	7dfb      	ldrb	r3, [r7, #23]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0c8      	beq.n	80062d2 <dir_find+0x1e>
 8006340:	e002      	b.n	8006348 <dir_find+0x94>
		if (res != FR_OK) break;
 8006342:	bf00      	nop
 8006344:	e000      	b.n	8006348 <dir_find+0x94>
			break;
 8006346:	bf00      	nop

	return res;
 8006348:	7dfb      	ldrb	r3, [r7, #23]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800635a:	2101      	movs	r1, #1
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff ff0c 	bl	800617a <dir_alloc>
 8006362:	4603      	mov	r3, r0
 8006364:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d126      	bne.n	80063ba <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006378:	4619      	mov	r1, r3
 800637a:	4610      	mov	r0, r2
 800637c:	f7ff f983 	bl	8005686 <move_window>
 8006380:	4603      	mov	r3, r0
 8006382:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d117      	bne.n	80063ba <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006390:	2220      	movs	r2, #32
 8006392:	2100      	movs	r1, #0
 8006394:	4618      	mov	r0, r3
 8006396:	f7fe fef1 	bl	800517c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80063a6:	220b      	movs	r2, #11
 80063a8:	4619      	mov	r1, r3
 80063aa:	f7fe fec9 	bl	8005140 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	3309      	adds	r3, #9
 80063d2:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d05a      	beq.n	8006494 <get_fileinfo+0xd0>
		dir = dp->dir;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063e4:	60bb      	str	r3, [r7, #8]
		i = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 80063ea:	e01c      	b.n	8006426 <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	617a      	str	r2, [r7, #20]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	4413      	add	r3, r2
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	d100      	bne.n	8006402 <get_fileinfo+0x3e>
 8006400:	e011      	b.n	8006426 <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	2b05      	cmp	r3, #5
 8006406:	d101      	bne.n	800640c <get_fileinfo+0x48>
 8006408:	23e5      	movs	r3, #229	; 0xe5
 800640a:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2b09      	cmp	r3, #9
 8006410:	d104      	bne.n	800641c <get_fileinfo+0x58>
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	613a      	str	r2, [r7, #16]
 8006418:	222e      	movs	r2, #46	; 0x2e
 800641a:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	613a      	str	r2, [r7, #16]
 8006422:	7bfa      	ldrb	r2, [r7, #15]
 8006424:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b0a      	cmp	r3, #10
 800642a:	d9df      	bls.n	80063ec <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	7ada      	ldrb	r2, [r3, #11]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	331f      	adds	r3, #31
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	061a      	lsls	r2, r3, #24
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	331e      	adds	r3, #30
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	041b      	lsls	r3, r3, #16
 8006444:	4313      	orrs	r3, r2
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	321d      	adds	r2, #29
 800644a:	7812      	ldrb	r2, [r2, #0]
 800644c:	0212      	lsls	r2, r2, #8
 800644e:	4313      	orrs	r3, r2
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	321c      	adds	r2, #28
 8006454:	7812      	ldrb	r2, [r2, #0]
 8006456:	431a      	orrs	r2, r3
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	3319      	adds	r3, #25
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	b21a      	sxth	r2, r3
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	3318      	adds	r3, #24
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	b21b      	sxth	r3, r3
 800646e:	4313      	orrs	r3, r2
 8006470:	b21b      	sxth	r3, r3
 8006472:	b29a      	uxth	r2, r3
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	3317      	adds	r3, #23
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	021b      	lsls	r3, r3, #8
 8006480:	b21a      	sxth	r2, r3
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	3316      	adds	r3, #22
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	b21b      	sxth	r3, r3
 800648a:	4313      	orrs	r3, r2
 800648c:	b21b      	sxth	r3, r3
 800648e:	b29a      	uxth	r2, r3
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	2200      	movs	r2, #0
 8006498:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 800649a:	bf00      	nop
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	bc80      	pop	{r7}
 80064a2:	4770      	bx	lr

080064a4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	e002      	b.n	80064bc <create_name+0x18>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3301      	adds	r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b2f      	cmp	r3, #47	; 0x2f
 80064c2:	d0f8      	beq.n	80064b6 <create_name+0x12>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2b5c      	cmp	r3, #92	; 0x5c
 80064ca:	d0f4      	beq.n	80064b6 <create_name+0x12>
	sfn = dp->fn;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80064d2:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80064d4:	220b      	movs	r2, #11
 80064d6:	2120      	movs	r1, #32
 80064d8:	68b8      	ldr	r0, [r7, #8]
 80064da:	f7fe fe4f 	bl	800517c <mem_set>
	si = i = b = 0; ni = 8;
 80064de:	2300      	movs	r3, #0
 80064e0:	77fb      	strb	r3, [r7, #31]
 80064e2:	2300      	movs	r3, #0
 80064e4:	613b      	str	r3, [r7, #16]
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	2308      	movs	r3, #8
 80064ec:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	617a      	str	r2, [r7, #20]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80064fc:	7fbb      	ldrb	r3, [r7, #30]
 80064fe:	2b20      	cmp	r3, #32
 8006500:	d953      	bls.n	80065aa <create_name+0x106>
 8006502:	7fbb      	ldrb	r3, [r7, #30]
 8006504:	2b2f      	cmp	r3, #47	; 0x2f
 8006506:	d050      	beq.n	80065aa <create_name+0x106>
 8006508:	7fbb      	ldrb	r3, [r7, #30]
 800650a:	2b5c      	cmp	r3, #92	; 0x5c
 800650c:	d04d      	beq.n	80065aa <create_name+0x106>
		if (c == '.' || i >= ni) {
 800650e:	7fbb      	ldrb	r3, [r7, #30]
 8006510:	2b2e      	cmp	r3, #46	; 0x2e
 8006512:	d003      	beq.n	800651c <create_name+0x78>
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	429a      	cmp	r2, r3
 800651a:	d30f      	bcc.n	800653c <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	2b08      	cmp	r3, #8
 8006520:	d102      	bne.n	8006528 <create_name+0x84>
 8006522:	7fbb      	ldrb	r3, [r7, #30]
 8006524:	2b2e      	cmp	r3, #46	; 0x2e
 8006526:	d001      	beq.n	800652c <create_name+0x88>
 8006528:	2306      	movs	r3, #6
 800652a:	e073      	b.n	8006614 <create_name+0x170>
			i = 8; ni = 11;
 800652c:	2308      	movs	r3, #8
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	230b      	movs	r3, #11
 8006532:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8006534:	7ffb      	ldrb	r3, [r7, #31]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	77fb      	strb	r3, [r7, #31]
 800653a:	e035      	b.n	80065a8 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800653c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006540:	2b00      	cmp	r3, #0
 8006542:	da08      	bge.n	8006556 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8006544:	7ffb      	ldrb	r3, [r7, #31]
 8006546:	f043 0303 	orr.w	r3, r3, #3
 800654a:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800654c:	7fbb      	ldrb	r3, [r7, #30]
 800654e:	3b80      	subs	r3, #128	; 0x80
 8006550:	4a32      	ldr	r2, [pc, #200]	; (800661c <create_name+0x178>)
 8006552:	5cd3      	ldrb	r3, [r2, r3]
 8006554:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8006556:	7fbb      	ldrb	r3, [r7, #30]
 8006558:	4619      	mov	r1, r3
 800655a:	4831      	ldr	r0, [pc, #196]	; (8006620 <create_name+0x17c>)
 800655c:	f7fe fe4e 	bl	80051fc <chk_chr>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <create_name+0xc6>
				return FR_INVALID_NAME;
 8006566:	2306      	movs	r3, #6
 8006568:	e054      	b.n	8006614 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800656a:	7fbb      	ldrb	r3, [r7, #30]
 800656c:	2b40      	cmp	r3, #64	; 0x40
 800656e:	d907      	bls.n	8006580 <create_name+0xdc>
 8006570:	7fbb      	ldrb	r3, [r7, #30]
 8006572:	2b5a      	cmp	r3, #90	; 0x5a
 8006574:	d804      	bhi.n	8006580 <create_name+0xdc>
				b |= 2;
 8006576:	7ffb      	ldrb	r3, [r7, #31]
 8006578:	f043 0302 	orr.w	r3, r3, #2
 800657c:	77fb      	strb	r3, [r7, #31]
 800657e:	e00c      	b.n	800659a <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8006580:	7fbb      	ldrb	r3, [r7, #30]
 8006582:	2b60      	cmp	r3, #96	; 0x60
 8006584:	d909      	bls.n	800659a <create_name+0xf6>
 8006586:	7fbb      	ldrb	r3, [r7, #30]
 8006588:	2b7a      	cmp	r3, #122	; 0x7a
 800658a:	d806      	bhi.n	800659a <create_name+0xf6>
					b |= 1; c -= 0x20;
 800658c:	7ffb      	ldrb	r3, [r7, #31]
 800658e:	f043 0301 	orr.w	r3, r3, #1
 8006592:	77fb      	strb	r3, [r7, #31]
 8006594:	7fbb      	ldrb	r3, [r7, #30]
 8006596:	3b20      	subs	r3, #32
 8006598:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	613a      	str	r2, [r7, #16]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	4413      	add	r3, r2
 80065a4:	7fba      	ldrb	r2, [r7, #30]
 80065a6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80065a8:	e7a1      	b.n	80064ee <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	441a      	add	r2, r3
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80065b4:	7fbb      	ldrb	r3, [r7, #30]
 80065b6:	2b20      	cmp	r3, #32
 80065b8:	d801      	bhi.n	80065be <create_name+0x11a>
 80065ba:	2304      	movs	r3, #4
 80065bc:	e000      	b.n	80065c0 <create_name+0x11c>
 80065be:	2300      	movs	r3, #0
 80065c0:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <create_name+0x128>
 80065c8:	2306      	movs	r3, #6
 80065ca:	e023      	b.n	8006614 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2be5      	cmp	r3, #229	; 0xe5
 80065d2:	d102      	bne.n	80065da <create_name+0x136>
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2205      	movs	r2, #5
 80065d8:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d102      	bne.n	80065e6 <create_name+0x142>
 80065e0:	7ffb      	ldrb	r3, [r7, #31]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80065e6:	7ffb      	ldrb	r3, [r7, #31]
 80065e8:	f003 0303 	and.w	r3, r3, #3
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d103      	bne.n	80065f8 <create_name+0x154>
 80065f0:	7fbb      	ldrb	r3, [r7, #30]
 80065f2:	f043 0310 	orr.w	r3, r3, #16
 80065f6:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80065f8:	7ffb      	ldrb	r3, [r7, #31]
 80065fa:	f003 030c 	and.w	r3, r3, #12
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d103      	bne.n	800660a <create_name+0x166>
 8006602:	7fbb      	ldrb	r3, [r7, #30]
 8006604:	f043 0308 	orr.w	r3, r3, #8
 8006608:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	330b      	adds	r3, #11
 800660e:	7fba      	ldrb	r2, [r7, #30]
 8006610:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006612:	2300      	movs	r3, #0
#endif
}
 8006614:	4618      	mov	r0, r3
 8006616:	3720      	adds	r7, #32
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	0800b43c 	.word	0x0800b43c
 8006620:	0800b3d8 	.word	0x0800b3d8

08006624 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	2b2f      	cmp	r3, #47	; 0x2f
 8006634:	d003      	beq.n	800663e <follow_path+0x1a>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b5c      	cmp	r3, #92	; 0x5c
 800663c:	d102      	bne.n	8006644 <follow_path+0x20>
		path++;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	3301      	adds	r3, #1
 8006642:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b1f      	cmp	r3, #31
 8006652:	d80a      	bhi.n	800666a <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8006654:	2100      	movs	r1, #0
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff fc04 	bl	8005e64 <dir_sdi>
 800665c:	4603      	mov	r3, r0
 800665e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006668:	e045      	b.n	80066f6 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800666a:	463b      	mov	r3, r7
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7ff ff18 	bl	80064a4 <create_name>
 8006674:	4603      	mov	r3, r0
 8006676:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d136      	bne.n	80066ec <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff fe18 	bl	80062b4 <dir_find>
 8006684:	4603      	mov	r3, r0
 8006686:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800668e:	7adb      	ldrb	r3, [r3, #11]
 8006690:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00a      	beq.n	80066ae <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	2b04      	cmp	r3, #4
 800669c:	d128      	bne.n	80066f0 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d123      	bne.n	80066f0 <follow_path+0xcc>
 80066a8:	2305      	movs	r3, #5
 80066aa:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80066ac:	e020      	b.n	80066f0 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80066ae:	7bbb      	ldrb	r3, [r7, #14]
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d11d      	bne.n	80066f4 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066be:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	330b      	adds	r3, #11
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	f003 0310 	and.w	r3, r3, #16
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d102      	bne.n	80066d4 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80066ce:	2305      	movs	r3, #5
 80066d0:	73fb      	strb	r3, [r7, #15]
 80066d2:	e010      	b.n	80066f6 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff fd96 	bl	800620e <ld_clust>
 80066e2:	4602      	mov	r2, r0
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80066ea:	e7be      	b.n	800666a <follow_path+0x46>
			if (res != FR_OK) break;
 80066ec:	bf00      	nop
 80066ee:	e002      	b.n	80066f6 <follow_path+0xd2>
				break;
 80066f0:	bf00      	nop
 80066f2:	e000      	b.n	80066f6 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80066f4:	bf00      	nop
		}
	}

	return res;
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006708:	f04f 33ff 	mov.w	r3, #4294967295
 800670c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d031      	beq.n	800677a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	e002      	b.n	8006724 <get_ldnumber+0x24>
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	3301      	adds	r3, #1
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b20      	cmp	r3, #32
 800672a:	d903      	bls.n	8006734 <get_ldnumber+0x34>
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b3a      	cmp	r3, #58	; 0x3a
 8006732:	d1f4      	bne.n	800671e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b3a      	cmp	r3, #58	; 0x3a
 800673a:	d11c      	bne.n	8006776 <get_ldnumber+0x76>
			tp = *path;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	60fa      	str	r2, [r7, #12]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	3b30      	subs	r3, #48	; 0x30
 800674c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b09      	cmp	r3, #9
 8006752:	d80e      	bhi.n	8006772 <get_ldnumber+0x72>
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	429a      	cmp	r2, r3
 800675a:	d10a      	bne.n	8006772 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d107      	bne.n	8006772 <get_ldnumber+0x72>
					vol = (int)i;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	3301      	adds	r3, #1
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	e002      	b.n	800677c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006776:	2300      	movs	r3, #0
 8006778:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800677a:	693b      	ldr	r3, [r7, #16]
}
 800677c:	4618      	mov	r0, r3
 800677e:	371c      	adds	r7, #28
 8006780:	46bd      	mov	sp, r7
 8006782:	bc80      	pop	{r7}
 8006784:	4770      	bx	lr
	...

08006788 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f04f 32ff 	mov.w	r2, #4294967295
 80067a0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fe ff6d 	bl	8005686 <move_window>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <check_fs+0x2e>
		return 3;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e04a      	b.n	800684c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80067bc:	3301      	adds	r3, #1
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	b21a      	sxth	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80067ca:	b21b      	sxth	r3, r3
 80067cc:	4313      	orrs	r3, r2
 80067ce:	b21b      	sxth	r3, r3
 80067d0:	4a20      	ldr	r2, [pc, #128]	; (8006854 <check_fs+0xcc>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d001      	beq.n	80067da <check_fs+0x52>
		return 2;
 80067d6:	2302      	movs	r3, #2
 80067d8:	e038      	b.n	800684c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3336      	adds	r3, #54	; 0x36
 80067de:	3303      	adds	r3, #3
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	061a      	lsls	r2, r3, #24
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3336      	adds	r3, #54	; 0x36
 80067e8:	3302      	adds	r3, #2
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	041b      	lsls	r3, r3, #16
 80067ee:	4313      	orrs	r3, r2
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	3236      	adds	r2, #54	; 0x36
 80067f4:	3201      	adds	r2, #1
 80067f6:	7812      	ldrb	r2, [r2, #0]
 80067f8:	0212      	lsls	r2, r2, #8
 80067fa:	4313      	orrs	r3, r2
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006802:	4313      	orrs	r3, r2
 8006804:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006808:	4a13      	ldr	r2, [pc, #76]	; (8006858 <check_fs+0xd0>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d101      	bne.n	8006812 <check_fs+0x8a>
		return 0;
 800680e:	2300      	movs	r3, #0
 8006810:	e01c      	b.n	800684c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3352      	adds	r3, #82	; 0x52
 8006816:	3303      	adds	r3, #3
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	061a      	lsls	r2, r3, #24
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3352      	adds	r3, #82	; 0x52
 8006820:	3302      	adds	r3, #2
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	041b      	lsls	r3, r3, #16
 8006826:	4313      	orrs	r3, r2
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	3252      	adds	r2, #82	; 0x52
 800682c:	3201      	adds	r2, #1
 800682e:	7812      	ldrb	r2, [r2, #0]
 8006830:	0212      	lsls	r2, r2, #8
 8006832:	4313      	orrs	r3, r2
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800683a:	4313      	orrs	r3, r2
 800683c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006840:	4a05      	ldr	r2, [pc, #20]	; (8006858 <check_fs+0xd0>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d101      	bne.n	800684a <check_fs+0xc2>
		return 0;
 8006846:	2300      	movs	r3, #0
 8006848:	e000      	b.n	800684c <check_fs+0xc4>

	return 1;
 800684a:	2301      	movs	r3, #1
}
 800684c:	4618      	mov	r0, r3
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	ffffaa55 	.word	0xffffaa55
 8006858:	00544146 	.word	0x00544146

0800685c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b096      	sub	sp, #88	; 0x58
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	4613      	mov	r3, r2
 8006868:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006870:	68b8      	ldr	r0, [r7, #8]
 8006872:	f7ff ff45 	bl	8006700 <get_ldnumber>
 8006876:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687a:	2b00      	cmp	r3, #0
 800687c:	da01      	bge.n	8006882 <find_volume+0x26>
 800687e:	230b      	movs	r3, #11
 8006880:	e2b0      	b.n	8006de4 <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006882:	4aa1      	ldr	r2, [pc, #644]	; (8006b08 <find_volume+0x2ac>)
 8006884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800688a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <find_volume+0x3a>
 8006892:	230c      	movs	r3, #12
 8006894:	e2a6      	b.n	8006de4 <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 8006896:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006898:	f7fe fcca 	bl	8005230 <lock_fs>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <find_volume+0x4a>
 80068a2:	230f      	movs	r3, #15
 80068a4:	e29e      	b.n	8006de4 <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068aa:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d01b      	beq.n	80068ee <find_volume+0x92>
		stat = disk_status(fs->drv);
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fe fba1 	bl	8005004 <disk_status>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80068c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10c      	bne.n	80068ee <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d007      	beq.n	80068ea <find_volume+0x8e>
 80068da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 80068e6:	230a      	movs	r3, #10
 80068e8:	e27c      	b.n	8006de4 <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 80068ea:	2300      	movs	r3, #0
 80068ec:	e27a      	b.n	8006de4 <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80068f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006902:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe fb96 	bl	8005038 <disk_initialize>
 800690c:	4603      	mov	r3, r0
 800690e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006912:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800691e:	2303      	movs	r3, #3
 8006920:	e260      	b.n	8006de4 <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006922:	79fb      	ldrb	r3, [r7, #7]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d007      	beq.n	8006938 <find_volume+0xdc>
 8006928:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8006934:	230a      	movs	r3, #10
 8006936:	e255      	b.n	8006de4 <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800693c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800693e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006940:	f7ff ff22 	bl	8006788 <check_fs>
 8006944:	4603      	mov	r3, r0
 8006946:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800694a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800694e:	2b01      	cmp	r3, #1
 8006950:	d153      	bne.n	80069fa <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006952:	2300      	movs	r3, #0
 8006954:	643b      	str	r3, [r7, #64]	; 0x40
 8006956:	e028      	b.n	80069aa <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800695a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006962:	4413      	add	r3, r2
 8006964:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	3304      	adds	r3, #4
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d012      	beq.n	8006996 <find_volume+0x13a>
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	330b      	adds	r3, #11
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	061a      	lsls	r2, r3, #24
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	330a      	adds	r3, #10
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	041b      	lsls	r3, r3, #16
 8006980:	4313      	orrs	r3, r2
 8006982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006984:	3209      	adds	r2, #9
 8006986:	7812      	ldrb	r2, [r2, #0]
 8006988:	0212      	lsls	r2, r2, #8
 800698a:	4313      	orrs	r3, r2
 800698c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800698e:	3208      	adds	r2, #8
 8006990:	7812      	ldrb	r2, [r2, #0]
 8006992:	431a      	orrs	r2, r3
 8006994:	e000      	b.n	8006998 <find_volume+0x13c>
 8006996:	2200      	movs	r2, #0
 8006998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	3358      	adds	r3, #88	; 0x58
 800699e:	443b      	add	r3, r7
 80069a0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80069a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a6:	3301      	adds	r3, #1
 80069a8:	643b      	str	r3, [r7, #64]	; 0x40
 80069aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d9d3      	bls.n	8006958 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80069b0:	2300      	movs	r3, #0
 80069b2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80069b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d002      	beq.n	80069c0 <find_volume+0x164>
 80069ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069bc:	3b01      	subs	r3, #1
 80069be:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80069c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	3358      	adds	r3, #88	; 0x58
 80069c6:	443b      	add	r3, r7
 80069c8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80069cc:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80069ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d005      	beq.n	80069e0 <find_volume+0x184>
 80069d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069d8:	f7ff fed6 	bl	8006788 <check_fs>
 80069dc:	4603      	mov	r3, r0
 80069de:	e000      	b.n	80069e2 <find_volume+0x186>
 80069e0:	2302      	movs	r3, #2
 80069e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80069e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <find_volume+0x19e>
 80069ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f0:	3301      	adds	r3, #1
 80069f2:	643b      	str	r3, [r7, #64]	; 0x40
 80069f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d9e2      	bls.n	80069c0 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80069fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d101      	bne.n	8006a06 <find_volume+0x1aa>
 8006a02:	2301      	movs	r3, #1
 8006a04:	e1ee      	b.n	8006de4 <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006a06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <find_volume+0x1b6>
 8006a0e:	230d      	movs	r3, #13
 8006a10:	e1e8      	b.n	8006de4 <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	7b1b      	ldrb	r3, [r3, #12]
 8006a16:	021b      	lsls	r3, r3, #8
 8006a18:	b21a      	sxth	r2, r3
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1c:	7adb      	ldrb	r3, [r3, #11]
 8006a1e:	b21b      	sxth	r3, r3
 8006a20:	4313      	orrs	r3, r2
 8006a22:	b21b      	sxth	r3, r3
 8006a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a28:	d001      	beq.n	8006a2e <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 8006a2a:	230d      	movs	r3, #13
 8006a2c:	e1da      	b.n	8006de4 <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	7ddb      	ldrb	r3, [r3, #23]
 8006a32:	021b      	lsls	r3, r3, #8
 8006a34:	b21a      	sxth	r2, r3
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	7d9b      	ldrb	r3, [r3, #22]
 8006a3a:	b21b      	sxth	r3, r3
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	b21b      	sxth	r3, r3
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d112      	bne.n	8006a70 <find_volume+0x214>
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006a50:	061a      	lsls	r2, r3, #24
 8006a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a54:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006a58:	041b      	lsls	r3, r3, #16
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a5e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006a62:	0212      	lsls	r2, r2, #8
 8006a64:	4313      	orrs	r3, r2
 8006a66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a68:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a74:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	7c1a      	ldrb	r2, [r3, #16]
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a84:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d006      	beq.n	8006a9a <find_volume+0x23e>
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8e:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d001      	beq.n	8006a9a <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 8006a96:	230d      	movs	r3, #13
 8006a98:	e1a4      	b.n	8006de4 <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa4:	fb02 f303 	mul.w	r3, r2, r3
 8006aa8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	7b5a      	ldrb	r2, [r3, #13]
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <find_volume+0x278>
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006acc:	3b01      	subs	r3, #1
 8006ace:	4013      	ands	r3, r2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 8006ad4:	230d      	movs	r3, #13
 8006ad6:	e185      	b.n	8006de4 <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	7c9b      	ldrb	r3, [r3, #18]
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	b21a      	sxth	r2, r3
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	7c5b      	ldrb	r3, [r3, #17]
 8006ae4:	b21b      	sxth	r3, r3
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	b21b      	sxth	r3, r3
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aee:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006af8:	f003 030f 	and.w	r3, r3, #15
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d004      	beq.n	8006b0c <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 8006b02:	230d      	movs	r3, #13
 8006b04:	e16e      	b.n	8006de4 <find_volume+0x588>
 8006b06:	bf00      	nop
 8006b08:	20000998 	.word	0x20000998

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0e:	7d1b      	ldrb	r3, [r3, #20]
 8006b10:	021b      	lsls	r3, r3, #8
 8006b12:	b21a      	sxth	r2, r3
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	7cdb      	ldrb	r3, [r3, #19]
 8006b18:	b21b      	sxth	r3, r3
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	b21b      	sxth	r3, r3
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d112      	bne.n	8006b4e <find_volume+0x2f2>
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006b2e:	061a      	lsls	r2, r3, #24
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006b36:	041b      	lsls	r3, r3, #16
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b3c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006b40:	0212      	lsls	r2, r2, #8
 8006b42:	4313      	orrs	r3, r2
 8006b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b46:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	7bdb      	ldrb	r3, [r3, #15]
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	b21a      	sxth	r2, r3
 8006b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b58:	7b9b      	ldrb	r3, [r3, #14]
 8006b5a:	b21b      	sxth	r3, r3
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	b21b      	sxth	r3, r3
 8006b60:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006b62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <find_volume+0x310>
 8006b68:	230d      	movs	r3, #13
 8006b6a:	e13b      	b.n	8006de4 <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006b6c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b70:	4413      	add	r3, r2
 8006b72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b74:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8006b78:	0912      	lsrs	r2, r2, #4
 8006b7a:	b292      	uxth	r2, r2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d201      	bcs.n	8006b8c <find_volume+0x330>
 8006b88:	230d      	movs	r3, #13
 8006b8a:	e12b      	b.n	8006de4 <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b94:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006b98:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <find_volume+0x34c>
 8006ba4:	230d      	movs	r3, #13
 8006ba6:	e11d      	b.n	8006de4 <find_volume+0x588>
	fmt = FS_FAT12;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d902      	bls.n	8006bbe <find_volume+0x362>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d902      	bls.n	8006bce <find_volume+0x372>
 8006bc8:	2303      	movs	r3, #3
 8006bca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	1c9a      	adds	r2, r3, #2
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bdc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006be0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006be4:	441a      	add	r2, r3
 8006be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8006bec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	441a      	add	r2, r3
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 8006bf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d121      	bne.n	8006c44 <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c02:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <find_volume+0x3b2>
 8006c0a:	230d      	movs	r3, #13
 8006c0c:	e0ea      	b.n	8006de4 <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c14:	061a      	lsls	r2, r3, #24
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006c1c:	041b      	lsls	r3, r3, #16
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c22:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006c26:	0212      	lsls	r2, r2, #8
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c2c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006c30:	431a      	orrs	r2, r3
 8006c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c34:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	647b      	str	r3, [r7, #68]	; 0x44
 8006c42:	e025      	b.n	8006c90 <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c46:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <find_volume+0x3f6>
 8006c4e:	230d      	movs	r3, #13
 8006c50:	e0c8      	b.n	8006de4 <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c54:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8006c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c5a:	441a      	add	r2, r3
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006c62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d104      	bne.n	8006c74 <find_volume+0x418>
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	e00c      	b.n	8006c8e <find_volume+0x432>
 8006c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c76:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	4413      	add	r3, r2
 8006c80:	085a      	lsrs	r2, r3, #1
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006c8e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c92:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c98:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006c9c:	0a5b      	lsrs	r3, r3, #9
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d201      	bcs.n	8006ca6 <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 8006ca2:	230d      	movs	r3, #13
 8006ca4:	e09e      	b.n	8006de4 <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbe:	2280      	movs	r2, #128	; 0x80
 8006cc0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006cc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d177      	bne.n	8006dbc <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006cd2:	021b      	lsls	r3, r3, #8
 8006cd4:	b21a      	sxth	r2, r3
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006cdc:	b21b      	sxth	r3, r3
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	b21b      	sxth	r3, r3
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d16a      	bne.n	8006dbc <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ce8:	3301      	adds	r3, #1
 8006cea:	4619      	mov	r1, r3
 8006cec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006cee:	f7fe fcca 	bl	8005686 <move_window>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d161      	bne.n	8006dbc <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d02:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8006d06:	021b      	lsls	r3, r3, #8
 8006d08:	b21a      	sxth	r2, r3
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006d10:	b21b      	sxth	r3, r3
 8006d12:	4313      	orrs	r3, r2
 8006d14:	b21b      	sxth	r3, r3
 8006d16:	4a35      	ldr	r2, [pc, #212]	; (8006dec <find_volume+0x590>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d14f      	bne.n	8006dbc <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1e:	78db      	ldrb	r3, [r3, #3]
 8006d20:	061a      	lsls	r2, r3, #24
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	789b      	ldrb	r3, [r3, #2]
 8006d26:	041b      	lsls	r3, r3, #16
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d2c:	7852      	ldrb	r2, [r2, #1]
 8006d2e:	0212      	lsls	r2, r2, #8
 8006d30:	4313      	orrs	r3, r2
 8006d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d34:	7812      	ldrb	r2, [r2, #0]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	4a2d      	ldr	r2, [pc, #180]	; (8006df0 <find_volume+0x594>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d13e      	bne.n	8006dbc <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d40:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8006d44:	061a      	lsls	r2, r3, #24
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d48:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006d4c:	041b      	lsls	r3, r3, #16
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d52:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8006d56:	0212      	lsls	r2, r2, #8
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d5c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8006d60:	4313      	orrs	r3, r2
 8006d62:	4a24      	ldr	r2, [pc, #144]	; (8006df4 <find_volume+0x598>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d129      	bne.n	8006dbc <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006d6e:	061a      	lsls	r2, r3, #24
 8006d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d72:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8006d76:	041b      	lsls	r3, r3, #16
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d7c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8006d80:	0212      	lsls	r2, r2, #8
 8006d82:	4313      	orrs	r3, r2
 8006d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d86:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006d98:	061a      	lsls	r2, r3, #24
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9c:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8006da0:	041b      	lsls	r3, r3, #16
 8006da2:	4313      	orrs	r3, r2
 8006da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006da6:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006daa:	0212      	lsls	r2, r2, #8
 8006dac:	4313      	orrs	r3, r2
 8006dae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006db0:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8006db4:	431a      	orrs	r2, r3
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006dc2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <find_volume+0x59c>)
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	4b0a      	ldr	r3, [pc, #40]	; (8006df8 <find_volume+0x59c>)
 8006dd0:	801a      	strh	r2, [r3, #0]
 8006dd2:	4b09      	ldr	r3, [pc, #36]	; (8006df8 <find_volume+0x59c>)
 8006dd4:	881a      	ldrh	r2, [r3, #0]
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006ddc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006dde:	f7fe fbdf 	bl	80055a0 <clear_lock>
#endif

	return FR_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3758      	adds	r7, #88	; 0x58
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	ffffaa55 	.word	0xffffaa55
 8006df0:	41615252 	.word	0x41615252
 8006df4:	61417272 	.word	0x61417272
 8006df8:	2000099c 	.word	0x2000099c

08006dfc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d022      	beq.n	8006e54 <validate+0x58>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d01d      	beq.n	8006e54 <validate+0x58>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d016      	beq.n	8006e54 <validate+0x58>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e2c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d10c      	bne.n	8006e54 <validate+0x58>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e40:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fe f8dd 	bl	8005004 <disk_status>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8006e54:	2309      	movs	r3, #9
 8006e56:	e00b      	b.n	8006e70 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe f9e6 	bl	8005230 <lock_fs>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <validate+0x72>
 8006e6a:	230f      	movs	r3, #15
 8006e6c:	e000      	b.n	8006e70 <validate+0x74>

	return FR_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	4613      	mov	r3, r2
 8006e84:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006e8a:	f107 0310 	add.w	r3, r7, #16
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff fc36 	bl	8006700 <get_ldnumber>
 8006e94:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	da01      	bge.n	8006ea0 <f_mount+0x28>
 8006e9c:	230b      	movs	r3, #11
 8006e9e:	e04c      	b.n	8006f3a <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006ea0:	4a28      	ldr	r2, [pc, #160]	; (8006f44 <f_mount+0xcc>)
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ea8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d011      	beq.n	8006ed4 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 8006eb0:	69b8      	ldr	r0, [r7, #24]
 8006eb2:	f7fe fb75 	bl	80055a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f001 f84e 	bl	8007f5e <ff_del_syncobj>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <f_mount+0x54>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e036      	b.n	8006f3a <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d011      	beq.n	8006efe <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f001 f815 	bl	8007f1e <ff_cre_syncobj>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <f_mount+0x86>
 8006efa:	2302      	movs	r3, #2
 8006efc:	e01d      	b.n	8006f3a <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	4910      	ldr	r1, [pc, #64]	; (8006f44 <f_mount+0xcc>)
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d002      	beq.n	8006f14 <f_mount+0x9c>
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d001      	beq.n	8006f18 <f_mount+0xa0>
 8006f14:	2300      	movs	r3, #0
 8006f16:	e010      	b.n	8006f3a <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006f18:	f107 0108 	add.w	r1, r7, #8
 8006f1c:	f107 030c 	add.w	r3, r7, #12
 8006f20:	2200      	movs	r2, #0
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff fc9a 	bl	800685c <find_volume>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	7dfa      	ldrb	r2, [r7, #23]
 8006f30:	4611      	mov	r1, r2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fe f98b 	bl	800524e <unlock_fs>
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3720      	adds	r7, #32
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20000998 	.word	0x20000998

08006f48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f54:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006f58:	6018      	str	r0, [r3, #0]
 8006f5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f5e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8006f62:	6019      	str	r1, [r3, #0]
 8006f64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f68:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006f6c:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006f6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f72:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <f_open+0x38>
 8006f7c:	2309      	movs	r3, #9
 8006f7e:	e263      	b.n	8007448 <f_open+0x500>
	fp->fs = 0;			/* Clear file object */
 8006f80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f84:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006f90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f94:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006f98:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f9c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8006fa0:	7812      	ldrb	r2, [r2, #0]
 8006fa2:	f002 021f 	and.w	r2, r2, #31
 8006fa6:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006fa8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fac:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	f023 0301 	bic.w	r3, r3, #1
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	f107 0108 	add.w	r1, r7, #8
 8006fbc:	f107 0320 	add.w	r3, r7, #32
 8006fc0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff fc49 	bl	800685c <find_volume>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006fd0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f040 8229 	bne.w	800742c <f_open+0x4e4>
		INIT_BUF(dj);
 8006fda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fde:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006fe2:	f107 0214 	add.w	r2, r7, #20
 8006fe6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8006fea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fee:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	f107 0320 	add.w	r3, r7, #32
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7ff fb12 	bl	8006624 <follow_path>
 8007000:	4603      	mov	r3, r0
 8007002:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8007006:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800700a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800700e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007012:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007016:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800701a:	2b00      	cmp	r3, #0
 800701c:	d11d      	bne.n	800705a <f_open+0x112>
			if (!dir)	/* Default directory itself */
 800701e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007022:	2b00      	cmp	r3, #0
 8007024:	d103      	bne.n	800702e <f_open+0xe6>
				res = FR_INVALID_NAME;
 8007026:	2306      	movs	r3, #6
 8007028:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800702c:	e015      	b.n	800705a <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800702e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007032:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	f023 0301 	bic.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	bf14      	ite	ne
 8007040:	2301      	movne	r3, #1
 8007042:	2300      	moveq	r3, #0
 8007044:	b2db      	uxtb	r3, r3
 8007046:	461a      	mov	r2, r3
 8007048:	f107 0320 	add.w	r3, r7, #32
 800704c:	4611      	mov	r1, r2
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe f91c 	bl	800528c <chk_lock>
 8007054:	4603      	mov	r3, r0
 8007056:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800705a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800705e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	f003 031c 	and.w	r3, r3, #28
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 80e6 	beq.w	800723a <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 800706e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007072:	2b00      	cmp	r3, #0
 8007074:	d027      	beq.n	80070c6 <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007076:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800707a:	2b04      	cmp	r3, #4
 800707c:	d10e      	bne.n	800709c <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800707e:	f7fe f971 	bl	8005364 <enq_lock>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d006      	beq.n	8007096 <f_open+0x14e>
 8007088:	f107 0320 	add.w	r3, r7, #32
 800708c:	4618      	mov	r0, r3
 800708e:	f7ff f960 	bl	8006352 <dir_register>
 8007092:	4603      	mov	r3, r0
 8007094:	e000      	b.n	8007098 <f_open+0x150>
 8007096:	2312      	movs	r3, #18
 8007098:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800709c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070a0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80070a4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070a8:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80070ac:	7812      	ldrb	r2, [r2, #0]
 80070ae:	f042 0208 	orr.w	r2, r2, #8
 80070b2:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80070b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070b8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80070bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070c0:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80070c4:	e017      	b.n	80070f6 <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80070c6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80070ca:	330b      	adds	r3, #11
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	f003 0311 	and.w	r3, r3, #17
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <f_open+0x196>
					res = FR_DENIED;
 80070d6:	2307      	movs	r3, #7
 80070d8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80070dc:	e00b      	b.n	80070f6 <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80070de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070e2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <f_open+0x1ae>
						res = FR_EXIST;
 80070f0:	2308      	movs	r3, #8
 80070f2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80070f6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f040 80c1 	bne.w	8007282 <f_open+0x33a>
 8007100:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007104:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	f003 0308 	and.w	r3, r3, #8
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 80b7 	beq.w	8007282 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8007114:	f7fd ff1a 	bl	8004f4c <get_fattime>
 8007118:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800711c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007120:	330e      	adds	r3, #14
 8007122:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	701a      	strb	r2, [r3, #0]
 800712a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800712e:	b29b      	uxth	r3, r3
 8007130:	0a1b      	lsrs	r3, r3, #8
 8007132:	b29a      	uxth	r2, r3
 8007134:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007138:	330f      	adds	r3, #15
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	701a      	strb	r2, [r3, #0]
 800713e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007142:	0c1a      	lsrs	r2, r3, #16
 8007144:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007148:	3310      	adds	r3, #16
 800714a:	b2d2      	uxtb	r2, r2
 800714c:	701a      	strb	r2, [r3, #0]
 800714e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007152:	0e1a      	lsrs	r2, r3, #24
 8007154:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007158:	3311      	adds	r3, #17
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800715e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007162:	330b      	adds	r3, #11
 8007164:	2200      	movs	r2, #0
 8007166:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007168:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800716c:	331c      	adds	r3, #28
 800716e:	2200      	movs	r2, #0
 8007170:	701a      	strb	r2, [r3, #0]
 8007172:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007176:	331d      	adds	r3, #29
 8007178:	2200      	movs	r2, #0
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007180:	331e      	adds	r3, #30
 8007182:	2200      	movs	r2, #0
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800718a:	331f      	adds	r3, #31
 800718c:	2200      	movs	r2, #0
 800718e:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007190:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007194:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007198:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800719c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff f834 	bl	800620e <ld_clust>
 80071a6:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 80071aa:	2100      	movs	r1, #0
 80071ac:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80071b0:	f7ff f85a 	bl	8006268 <st_clust>
				dj.fs->wflag = 1;
 80071b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071b8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80071bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 80071c6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d059      	beq.n	8007282 <f_open+0x33a>
					dw = dj.fs->winsect;
 80071ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071d2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80071d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071da:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80071de:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 80071e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071e6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80071ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071ee:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fe fd0b 	bl	8005c0e <remove_chain>
 80071f8:	4603      	mov	r3, r0
 80071fa:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 80071fe:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007202:	2b00      	cmp	r3, #0
 8007204:	d13d      	bne.n	8007282 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007206:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800720a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800720e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007212:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8007216:	3a01      	subs	r2, #1
 8007218:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 800721c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007220:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007224:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007228:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe fa2a 	bl	8005686 <move_window>
 8007232:	4603      	mov	r3, r0
 8007234:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007238:	e023      	b.n	8007282 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800723a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800723e:	2b00      	cmp	r3, #0
 8007240:	d11f      	bne.n	8007282 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007242:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007246:	330b      	adds	r3, #11
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	f003 0310 	and.w	r3, r3, #16
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <f_open+0x312>
					res = FR_NO_FILE;
 8007252:	2304      	movs	r3, #4
 8007254:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007258:	e013      	b.n	8007282 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800725a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800725e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00a      	beq.n	8007282 <f_open+0x33a>
 800726c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007270:	330b      	adds	r3, #11
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <f_open+0x33a>
						res = FR_DENIED;
 800727c:	2307      	movs	r3, #7
 800727e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8007282:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007286:	2b00      	cmp	r3, #0
 8007288:	d153      	bne.n	8007332 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800728a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800728e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00b      	beq.n	80072b4 <f_open+0x36c>
				mode |= FA__WRITTEN;
 800729c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072a0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80072a4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80072a8:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80072ac:	7812      	ldrb	r2, [r2, #0]
 80072ae:	f042 0220 	orr.w	r2, r2, #32
 80072b2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80072b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072b8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80072bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80072c0:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80072c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072c8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 80072d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072d6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80072e0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80072e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072e8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	f023 0301 	bic.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bf14      	ite	ne
 80072f6:	2301      	movne	r3, #1
 80072f8:	2300      	moveq	r3, #0
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	461a      	mov	r2, r3
 80072fe:	f107 0320 	add.w	r3, r7, #32
 8007302:	4611      	mov	r1, r2
 8007304:	4618      	mov	r0, r3
 8007306:	f7fe f851 	bl	80053ac <inc_lock>
 800730a:	4602      	mov	r2, r0
 800730c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007310:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800731a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800731e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007328:	2b00      	cmp	r3, #0
 800732a:	d102      	bne.n	8007332 <f_open+0x3ea>
 800732c:	2302      	movs	r3, #2
 800732e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007332:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007336:	2b00      	cmp	r3, #0
 8007338:	d178      	bne.n	800742c <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 800733a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800733e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007348:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800734c:	7812      	ldrb	r2, [r2, #0]
 800734e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8007352:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007356:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007362:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007366:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800736a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800736e:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8007372:	4618      	mov	r0, r3
 8007374:	f7fe ff4b 	bl	800620e <ld_clust>
 8007378:	4602      	mov	r2, r0
 800737a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800737e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007388:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800738c:	331f      	adds	r3, #31
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	061a      	lsls	r2, r3, #24
 8007392:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007396:	331e      	adds	r3, #30
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	041b      	lsls	r3, r3, #16
 800739c:	4313      	orrs	r3, r2
 800739e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80073a2:	321d      	adds	r2, #29
 80073a4:	7812      	ldrb	r2, [r2, #0]
 80073a6:	0212      	lsls	r2, r2, #8
 80073a8:	4313      	orrs	r3, r2
 80073aa:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80073ae:	321c      	adds	r2, #28
 80073b0:	7812      	ldrb	r2, [r2, #0]
 80073b2:	431a      	orrs	r2, r3
 80073b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073b8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80073c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073c6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 80073d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073d6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2200      	movs	r2, #0
 80073de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80073e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073e6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80073f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073f6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80073fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80073fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007402:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800740c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007410:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800741a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800741e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007422:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800742c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007430:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007434:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007438:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 800743c:	4611      	mov	r1, r2
 800743e:	4618      	mov	r0, r3
 8007440:	f7fd ff05 	bl	800524e <unlock_fs>
 8007444:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8007448:	4618      	mov	r0, r3
 800744a:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b08c      	sub	sp, #48	; 0x30
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
 800745e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f7ff fcc6 	bl	8006dfc <validate>
 8007470:	4603      	mov	r3, r0
 8007472:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007474:	7ffb      	ldrb	r3, [r7, #31]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d009      	beq.n	800748e <f_read+0x3c>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007480:	7ffa      	ldrb	r2, [r7, #31]
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f7fd fee2 	bl	800524e <unlock_fs>
 800748a:	7ffb      	ldrb	r3, [r7, #31]
 800748c:	e192      	b.n	80077b4 <f_read+0x362>
	if (fp->err)								/* Check error */
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00d      	beq.n	80074b4 <f_read+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80074a4:	4619      	mov	r1, r3
 80074a6:	4610      	mov	r0, r2
 80074a8:	f7fd fed1 	bl	800524e <unlock_fs>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80074b2:	e17f      	b.n	80077b4 <f_read+0x362>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d108      	bne.n	80074d4 <f_read+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80074c8:	2107      	movs	r1, #7
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fd febf 	bl	800524e <unlock_fs>
 80074d0:	2307      	movs	r3, #7
 80074d2:	e16f      	b.n	80077b4 <f_read+0x362>
	remain = fp->fsize - fp->fptr;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	f240 8157 	bls.w	800779c <f_read+0x34a>
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80074f2:	e153      	b.n	800779c <f_read+0x34a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80074fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f040 811c 	bne.w	800773c <f_read+0x2ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800750a:	0a5b      	lsrs	r3, r3, #9
 800750c:	b2da      	uxtb	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007514:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007518:	3b01      	subs	r3, #1
 800751a:	b2db      	uxtb	r3, r3
 800751c:	4013      	ands	r3, r2
 800751e:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8007520:	7dfb      	ldrb	r3, [r7, #23]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d147      	bne.n	80075b6 <f_read+0x164>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800752c:	2b00      	cmp	r3, #0
 800752e:	d104      	bne.n	800753a <f_read+0xe8>
					clst = fp->sclust;			/* Follow from the origin */
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007538:	e018      	b.n	800756c <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007540:	2b00      	cmp	r3, #0
 8007542:	d008      	beq.n	8007556 <f_read+0x104>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800754a:	4619      	mov	r1, r3
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7fe fc55 	bl	8005dfc <clmt_clust>
 8007552:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007554:	e00a      	b.n	800756c <f_read+0x11a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007562:	4619      	mov	r1, r3
 8007564:	4610      	mov	r0, r2
 8007566:	f7fe f98a 	bl	800587e <get_fat>
 800756a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	2b01      	cmp	r3, #1
 8007570:	d80c      	bhi.n	800758c <f_read+0x13a>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2202      	movs	r2, #2
 8007576:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007580:	2102      	movs	r1, #2
 8007582:	4618      	mov	r0, r3
 8007584:	f7fd fe63 	bl	800524e <unlock_fs>
 8007588:	2302      	movs	r3, #2
 800758a:	e113      	b.n	80077b4 <f_read+0x362>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800758c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007592:	d10c      	bne.n	80075ae <f_read+0x15c>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80075a2:	2101      	movs	r1, #1
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fd fe52 	bl	800524e <unlock_fs>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e102      	b.n	80077b4 <f_read+0x362>
				fp->clust = clst;				/* Update current cluster */
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075c2:	4619      	mov	r1, r3
 80075c4:	4610      	mov	r0, r2
 80075c6:	f7fe f939 	bl	800583c <clust2sect>
 80075ca:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10c      	bne.n	80075ec <f_read+0x19a>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2202      	movs	r2, #2
 80075d6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80075e0:	2102      	movs	r1, #2
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fd fe33 	bl	800524e <unlock_fs>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e0e3      	b.n	80077b4 <f_read+0x362>
			sect += csect;
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	4413      	add	r3, r2
 80075f2:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	0a5b      	lsrs	r3, r3, #9
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d04d      	beq.n	800769c <f_read+0x24a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007600:	7dfa      	ldrb	r2, [r7, #23]
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	4413      	add	r3, r2
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800760c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007610:	4293      	cmp	r3, r2
 8007612:	d908      	bls.n	8007626 <f_read+0x1d4>
					cc = fp->fs->csize - csect;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800761a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800761e:	461a      	mov	r2, r3
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800762c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	6a39      	ldr	r1, [r7, #32]
 8007636:	f7fd fd25 	bl	8005084 <disk_read>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00c      	beq.n	800765a <f_read+0x208>
					ABORT(fp->fs, FR_DISK_ERR);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800764e:	2101      	movs	r1, #1
 8007650:	4618      	mov	r0, r3
 8007652:	f7fd fdfc 	bl	800524e <unlock_fs>
 8007656:	2301      	movs	r3, #1
 8007658:	e0ac      	b.n	80077b4 <f_read+0x362>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d015      	beq.n	8007694 <f_read+0x242>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007674:	429a      	cmp	r2, r3
 8007676:	d90d      	bls.n	8007694 <f_read+0x242>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	025b      	lsls	r3, r3, #9
 8007684:	6a3a      	ldr	r2, [r7, #32]
 8007686:	4413      	add	r3, r2
 8007688:	68f9      	ldr	r1, [r7, #12]
 800768a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800768e:	4618      	mov	r0, r3
 8007690:	f7fd fd56 	bl	8005140 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	025b      	lsls	r3, r3, #9
 8007698:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800769a:	e069      	b.n	8007770 <f_read+0x31e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d045      	beq.n	8007734 <f_read+0x2e2>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80076ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d024      	beq.n	8007700 <f_read+0x2ae>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076bc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80076c0:	68f9      	ldr	r1, [r7, #12]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80076c8:	2301      	movs	r3, #1
 80076ca:	f7fd fcfb 	bl	80050c4 <disk_write>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00c      	beq.n	80076ee <f_read+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076e2:	2101      	movs	r1, #1
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fd fdb2 	bl	800524e <unlock_fs>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e062      	b.n	80077b4 <f_read+0x362>
					fp->flag &= ~FA__DIRTY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80076f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007706:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800770a:	68f9      	ldr	r1, [r7, #12]
 800770c:	2301      	movs	r3, #1
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	f7fd fcb8 	bl	8005084 <disk_read>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00c      	beq.n	8007734 <f_read+0x2e2>
					ABORT(fp->fs, FR_DISK_ERR);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007728:	2101      	movs	r1, #1
 800772a:	4618      	mov	r0, r3
 800772c:	f7fd fd8f 	bl	800524e <unlock_fs>
 8007730:	2301      	movs	r3, #1
 8007732:	e03f      	b.n	80077b4 <f_read+0x362>
			}
#endif
			fp->dsect = sect;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007746:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800774a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800774c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	429a      	cmp	r2, r3
 8007752:	d901      	bls.n	8007758 <f_read+0x306>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800775e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	4413      	add	r3, r2
 8007766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007768:	4619      	mov	r1, r3
 800776a:	6a38      	ldr	r0, [r7, #32]
 800776c:	f7fd fce8 	bl	8005140 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007770:	6a3a      	ldr	r2, [r7, #32]
 8007772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007774:	4413      	add	r3, r2
 8007776:	623b      	str	r3, [r7, #32]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	441a      	add	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	441a      	add	r2, r3
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f47f aea8 	bne.w	80074f4 <f_read+0xa2>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077aa:	2100      	movs	r1, #0
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fd fd4e 	bl	800524e <unlock_fs>
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3730      	adds	r7, #48	; 0x30
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b08a      	sub	sp, #40	; 0x28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7ff fb11 	bl	8006dfc <validate>
 80077da:	4603      	mov	r3, r0
 80077dc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d009      	beq.n	80077f8 <f_write+0x3c>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077ea:	7dfa      	ldrb	r2, [r7, #23]
 80077ec:	4611      	mov	r1, r2
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fd fd2d 	bl	800524e <unlock_fs>
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
 80077f6:	e1d4      	b.n	8007ba2 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00d      	beq.n	800781e <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800780e:	4619      	mov	r1, r3
 8007810:	4610      	mov	r0, r2
 8007812:	f7fd fd1c 	bl	800524e <unlock_fs>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800781c:	e1c1      	b.n	8007ba2 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d108      	bne.n	800783e <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007832:	2107      	movs	r1, #7
 8007834:	4618      	mov	r0, r3
 8007836:	f7fd fd0a 	bl	800524e <unlock_fs>
 800783a:	2307      	movs	r3, #7
 800783c:	e1b1      	b.n	8007ba2 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	441a      	add	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800784e:	429a      	cmp	r2, r3
 8007850:	f080 8182 	bcs.w	8007b58 <f_write+0x39c>
 8007854:	2300      	movs	r3, #0
 8007856:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007858:	e17e      	b.n	8007b58 <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007864:	2b00      	cmp	r3, #0
 8007866:	f040 813e 	bne.w	8007ae6 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007870:	0a5b      	lsrs	r3, r3, #9
 8007872:	b2da      	uxtb	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800787a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800787e:	3b01      	subs	r3, #1
 8007880:	b2db      	uxtb	r3, r3
 8007882:	4013      	ands	r3, r2
 8007884:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8007886:	7dbb      	ldrb	r3, [r7, #22]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d15f      	bne.n	800794c <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10f      	bne.n	80078b6 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800789c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d121      	bne.n	80078e8 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80078aa:	2100      	movs	r1, #0
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fe fa08 	bl	8005cc2 <create_chain>
 80078b2:	6278      	str	r0, [r7, #36]	; 0x24
 80078b4:	e018      	b.n	80078e8 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d008      	beq.n	80078d2 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80078c6:	4619      	mov	r1, r3
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f7fe fa97 	bl	8005dfc <clmt_clust>
 80078ce:	6278      	str	r0, [r7, #36]	; 0x24
 80078d0:	e00a      	b.n	80078e8 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078de:	4619      	mov	r1, r3
 80078e0:	4610      	mov	r0, r2
 80078e2:	f7fe f9ee 	bl	8005cc2 <create_chain>
 80078e6:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 8139 	beq.w	8007b62 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d10c      	bne.n	8007910 <f_write+0x154>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2202      	movs	r2, #2
 80078fa:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007904:	2102      	movs	r1, #2
 8007906:	4618      	mov	r0, r3
 8007908:	f7fd fca1 	bl	800524e <unlock_fs>
 800790c:	2302      	movs	r3, #2
 800790e:	e148      	b.n	8007ba2 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007916:	d10c      	bne.n	8007932 <f_write+0x176>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007926:	2101      	movs	r1, #1
 8007928:	4618      	mov	r0, r3
 800792a:	f7fd fc90 	bl	800524e <unlock_fs>
 800792e:	2301      	movs	r3, #1
 8007930:	e137      	b.n	8007ba2 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007936:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007940:	2b00      	cmp	r3, #0
 8007942:	d103      	bne.n	800794c <f_write+0x190>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007948:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007956:	2b00      	cmp	r3, #0
 8007958:	d024      	beq.n	80079a4 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007960:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007964:	68f9      	ldr	r1, [r7, #12]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800796c:	2301      	movs	r3, #1
 800796e:	f7fd fba9 	bl	80050c4 <disk_write>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00c      	beq.n	8007992 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007986:	2101      	movs	r1, #1
 8007988:	4618      	mov	r0, r3
 800798a:	f7fd fc60 	bl	800524e <unlock_fs>
 800798e:	2301      	movs	r3, #1
 8007990:	e107      	b.n	8007ba2 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800799c:	b2da      	uxtb	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079b0:	4619      	mov	r1, r3
 80079b2:	4610      	mov	r0, r2
 80079b4:	f7fd ff42 	bl	800583c <clust2sect>
 80079b8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10c      	bne.n	80079da <f_write+0x21e>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079ce:	2102      	movs	r1, #2
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fd fc3c 	bl	800524e <unlock_fs>
 80079d6:	2302      	movs	r3, #2
 80079d8:	e0e3      	b.n	8007ba2 <f_write+0x3e6>
			sect += csect;
 80079da:	7dbb      	ldrb	r3, [r7, #22]
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4413      	add	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	0a5b      	lsrs	r3, r3, #9
 80079e6:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d04f      	beq.n	8007a8e <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80079ee:	7dba      	ldrb	r2, [r7, #22]
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	4413      	add	r3, r2
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80079fa:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d908      	bls.n	8007a14 <f_write+0x258>
					cc = fp->fs->csize - csect;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a08:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	7dbb      	ldrb	r3, [r7, #22]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a1a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	69b9      	ldr	r1, [r7, #24]
 8007a24:	f7fd fb4e 	bl	80050c4 <disk_write>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00c      	beq.n	8007a48 <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fd fc05 	bl	800524e <unlock_fs>
 8007a44:	2301      	movs	r3, #1
 8007a46:	e0ac      	b.n	8007ba2 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d916      	bls.n	8007a86 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	025b      	lsls	r3, r3, #9
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a6e:	4619      	mov	r1, r3
 8007a70:	f7fd fb66 	bl	8005140 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	025b      	lsls	r3, r3, #9
 8007a8a:	623b      	str	r3, [r7, #32]
				continue;
 8007a8c:	e04e      	b.n	8007b2c <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d021      	beq.n	8007ade <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d219      	bcs.n	8007ade <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ab0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007ab4:	68f9      	ldr	r1, [r7, #12]
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	f7fd fae3 	bl	8005084 <disk_read>
 8007abe:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00c      	beq.n	8007ade <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fd fbba 	bl	800524e <unlock_fs>
 8007ada:	2301      	movs	r3, #1
 8007adc:	e061      	b.n	8007ba2 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007af4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007af6:	6a3a      	ldr	r2, [r7, #32]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d901      	bls.n	8007b02 <f_write+0x346>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	6a3a      	ldr	r2, [r7, #32]
 8007b12:	69b9      	ldr	r1, [r7, #24]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fd fb13 	bl	8005140 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	4413      	add	r3, r2
 8007b32:	61bb      	str	r3, [r7, #24]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	441a      	add	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	441a      	add	r2, r3
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f47f ae7d 	bne.w	800785a <f_write+0x9e>
 8007b60:	e000      	b.n	8007b64 <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007b62:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d905      	bls.n	8007b80 <f_write+0x3c4>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007b86:	f043 0320 	orr.w	r3, r3, #32
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b98:	2100      	movs	r1, #0
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fd fb57 	bl	800524e <unlock_fs>
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3728      	adds	r7, #40	; 0x28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b086      	sub	sp, #24
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff f922 	bl	8006dfc <validate>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f040 80af 	bne.w	8007d22 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007bca:	f003 0320 	and.w	r3, r3, #32
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 80a7 	beq.w	8007d22 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d020      	beq.n	8007c24 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007be8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	f7fd fa65 	bl	80050c4 <disk_write>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d008      	beq.n	8007c12 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c06:	2101      	movs	r1, #1
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fd fb20 	bl	800524e <unlock_fs>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e090      	b.n	8007d34 <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007c30:	4619      	mov	r1, r3
 8007c32:	4610      	mov	r0, r2
 8007c34:	f7fd fd27 	bl	8005686 <move_window>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007c3c:	7dfb      	ldrb	r3, [r7, #23]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d16f      	bne.n	8007d22 <f_sync+0x178>
				dir = fp->dir_ptr;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007c48:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	330b      	adds	r3, #11
 8007c4e:	781a      	ldrb	r2, [r3, #0]
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	330b      	adds	r3, #11
 8007c54:	f042 0220 	orr.w	r2, r2, #32
 8007c58:	b2d2      	uxtb	r2, r2
 8007c5a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	331c      	adds	r3, #28
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	701a      	strb	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	0a1b      	lsrs	r3, r3, #8
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	331d      	adds	r3, #29
 8007c7a:	b2d2      	uxtb	r2, r2
 8007c7c:	701a      	strb	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007c84:	0c1a      	lsrs	r2, r3, #16
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	331e      	adds	r3, #30
 8007c8a:	b2d2      	uxtb	r2, r2
 8007c8c:	701a      	strb	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007c94:	0e1a      	lsrs	r2, r3, #24
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	331f      	adds	r3, #31
 8007c9a:	b2d2      	uxtb	r2, r2
 8007c9c:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6938      	ldr	r0, [r7, #16]
 8007ca8:	f7fe fade 	bl	8006268 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007cac:	f7fd f94e 	bl	8004f4c <get_fattime>
 8007cb0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	3316      	adds	r3, #22
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	b2d2      	uxtb	r2, r2
 8007cba:	701a      	strb	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	0a1b      	lsrs	r3, r3, #8
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	3317      	adds	r3, #23
 8007cc8:	b2d2      	uxtb	r2, r2
 8007cca:	701a      	strb	r2, [r3, #0]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	0c1a      	lsrs	r2, r3, #16
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	3318      	adds	r3, #24
 8007cd4:	b2d2      	uxtb	r2, r2
 8007cd6:	701a      	strb	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	0e1a      	lsrs	r2, r3, #24
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	3319      	adds	r3, #25
 8007ce0:	b2d2      	uxtb	r2, r2
 8007ce2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	3312      	adds	r3, #18
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	3313      	adds	r3, #19
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007cfa:	f023 0320 	bic.w	r3, r3, #32
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fd fce2 	bl	80056e2 <sync_fs>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d28:	7dfa      	ldrb	r2, [r7, #23]
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fd fa8e 	bl	800524e <unlock_fs>
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff ff30 	bl	8007baa <f_sync>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d11e      	bne.n	8007d92 <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff f851 	bl	8006dfc <validate>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d116      	bne.n	8007d92 <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d6a:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fd fbd0 	bl	8005518 <dec_lock>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d103      	bne.n	8007d8a <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	68b8      	ldr	r0, [r7, #8]
 8007d8e:	f7fd fa5e 	bl	800524e <unlock_fs>
#endif
		}
	}
	return res;
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8007da8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8007dac:	6018      	str	r0, [r3, #0]
 8007dae:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8007db2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8007db6:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 8007db8:	1d39      	adds	r1, r7, #4
 8007dba:	f107 0314 	add.w	r3, r7, #20
 8007dbe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fe fd49 	bl	800685c <find_volume>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	if (res == FR_OK) {
 8007dd0:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d136      	bne.n	8007e46 <f_stat+0xaa>
		INIT_BUF(dj);
 8007dd8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8007ddc:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8007de0:	f107 0208 	add.w	r2, r7, #8
 8007de4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8007de8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8007dec:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	f107 0314 	add.w	r3, r7, #20
 8007df6:	4611      	mov	r1, r2
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fe fc13 	bl	8006624 <follow_path>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		if (res == FR_OK) {				/* Follow completed */
 8007e04:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d11c      	bne.n	8007e46 <f_stat+0xaa>
			if (dj.dir) {		/* Found an object */
 8007e0c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8007e10:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8007e14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d011      	beq.n	8007e40 <f_stat+0xa4>
				if (fno) get_fileinfo(&dj, fno);
 8007e1c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8007e20:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00d      	beq.n	8007e46 <f_stat+0xaa>
 8007e2a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8007e2e:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8007e32:	f107 0214 	add.w	r2, r7, #20
 8007e36:	6819      	ldr	r1, [r3, #0]
 8007e38:	4610      	mov	r0, r2
 8007e3a:	f7fe fac3 	bl	80063c4 <get_fileinfo>
 8007e3e:	e002      	b.n	8007e46 <f_stat+0xaa>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 8007e40:	2306      	movs	r3, #6
 8007e42:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8007e46:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8007e4a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8007e4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e52:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 8007e56:	4611      	mov	r1, r2
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fd f9f8 	bl	800524e <unlock_fs>
 8007e5e:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b087      	sub	sp, #28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8007e82:	4b1e      	ldr	r3, [pc, #120]	; (8007efc <FATFS_LinkDriverEx+0x90>)
 8007e84:	7a5b      	ldrb	r3, [r3, #9]
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d831      	bhi.n	8007ef0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007e8c:	4b1b      	ldr	r3, [pc, #108]	; (8007efc <FATFS_LinkDriverEx+0x90>)
 8007e8e:	7a5b      	ldrb	r3, [r3, #9]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	461a      	mov	r2, r3
 8007e94:	4b19      	ldr	r3, [pc, #100]	; (8007efc <FATFS_LinkDriverEx+0x90>)
 8007e96:	2100      	movs	r1, #0
 8007e98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007e9a:	4b18      	ldr	r3, [pc, #96]	; (8007efc <FATFS_LinkDriverEx+0x90>)
 8007e9c:	7a5b      	ldrb	r3, [r3, #9]
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	4a16      	ldr	r2, [pc, #88]	; (8007efc <FATFS_LinkDriverEx+0x90>)
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007eaa:	4b14      	ldr	r3, [pc, #80]	; (8007efc <FATFS_LinkDriverEx+0x90>)
 8007eac:	7a5b      	ldrb	r3, [r3, #9]
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	4b12      	ldr	r3, [pc, #72]	; (8007efc <FATFS_LinkDriverEx+0x90>)
 8007eb4:	4413      	add	r3, r2
 8007eb6:	79fa      	ldrb	r2, [r7, #7]
 8007eb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007eba:	4b10      	ldr	r3, [pc, #64]	; (8007efc <FATFS_LinkDriverEx+0x90>)
 8007ebc:	7a5b      	ldrb	r3, [r3, #9]
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	b2d1      	uxtb	r1, r2
 8007ec4:	4a0d      	ldr	r2, [pc, #52]	; (8007efc <FATFS_LinkDriverEx+0x90>)
 8007ec6:	7251      	strb	r1, [r2, #9]
 8007ec8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007eca:	7dbb      	ldrb	r3, [r7, #22]
 8007ecc:	3330      	adds	r3, #48	; 0x30
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	223a      	movs	r2, #58	; 0x3a
 8007eda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	3302      	adds	r3, #2
 8007ee0:	222f      	movs	r2, #47	; 0x2f
 8007ee2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	3303      	adds	r3, #3
 8007ee8:	2200      	movs	r2, #0
 8007eea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bc80      	pop	{r7}
 8007efa:	4770      	bx	lr
 8007efc:	200009b8 	.word	0x200009b8

08007f00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7ff ffac 	bl	8007e6c <FATFS_LinkDriverEx>
 8007f14:	4603      	mov	r3, r0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b086      	sub	sp, #24
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	4603      	mov	r3, r0
 8007f26:	6039      	str	r1, [r7, #0]
 8007f28:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 8007f32:	f107 030c 	add.w	r3, r7, #12
 8007f36:	2101      	movs	r1, #1
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 f8cb 	bl	80080d4 <osSemaphoreCreate>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	bf14      	ite	ne
 8007f4c:	2301      	movne	r3, #1
 8007f4e:	2300      	moveq	r3, #0
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	617b      	str	r3, [r7, #20]
  
  return ret;
 8007f54:	697b      	ldr	r3, [r7, #20]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3718      	adds	r7, #24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b082      	sub	sp, #8
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f96a 	bl	8008240 <osSemaphoreDelete>
  return 1;
 8007f6c:	2301      	movs	r3, #1
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8007f82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f8d6 	bl	8008138 <osSemaphoreWait>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <ff_req_grant+0x20>
  {
    ret = 1;
 8007f92:	2301      	movs	r3, #1
 8007f94:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8007f96:	68fb      	ldr	r3, [r7, #12]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f913 	bl	80081d4 <osSemaphoreRelease>
}
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b085      	sub	sp, #20
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fc8:	2b84      	cmp	r3, #132	; 0x84
 8007fca:	d005      	beq.n	8007fd8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007fcc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	3303      	adds	r3, #3
 8007fd6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bc80      	pop	{r7}
 8007fe2:	4770      	bx	lr

08007fe4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fea:	f3ef 8305 	mrs	r3, IPSR
 8007fee:	607b      	str	r3, [r7, #4]
  return(result);
 8007ff0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	bf14      	ite	ne
 8007ff6:	2301      	movne	r3, #1
 8007ff8:	2300      	moveq	r3, #0
 8007ffa:	b2db      	uxtb	r3, r3
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	bc80      	pop	{r7}
 8008004:	4770      	bx	lr

08008006 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800800a:	f001 f961 	bl	80092d0 <vTaskStartScheduler>
  
  return osOK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	bd80      	pop	{r7, pc}

08008014 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008016:	b089      	sub	sp, #36	; 0x24
 8008018:	af04      	add	r7, sp, #16
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d020      	beq.n	8008068 <osThreadCreate+0x54>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d01c      	beq.n	8008068 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685c      	ldr	r4, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681d      	ldr	r5, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	691e      	ldr	r6, [r3, #16]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008040:	4618      	mov	r0, r3
 8008042:	f7ff ffb8 	bl	8007fb6 <makeFreeRtosPriority>
 8008046:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	695b      	ldr	r3, [r3, #20]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008050:	9202      	str	r2, [sp, #8]
 8008052:	9301      	str	r3, [sp, #4]
 8008054:	9100      	str	r1, [sp, #0]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	4632      	mov	r2, r6
 800805a:	4629      	mov	r1, r5
 800805c:	4620      	mov	r0, r4
 800805e:	f000 ff79 	bl	8008f54 <xTaskCreateStatic>
 8008062:	4603      	mov	r3, r0
 8008064:	60fb      	str	r3, [r7, #12]
 8008066:	e01c      	b.n	80080a2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685c      	ldr	r4, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008074:	b29e      	uxth	r6, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff ff9a 	bl	8007fb6 <makeFreeRtosPriority>
 8008082:	4602      	mov	r2, r0
 8008084:	f107 030c 	add.w	r3, r7, #12
 8008088:	9301      	str	r3, [sp, #4]
 800808a:	9200      	str	r2, [sp, #0]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	4632      	mov	r2, r6
 8008090:	4629      	mov	r1, r5
 8008092:	4620      	mov	r0, r4
 8008094:	f000 ffba 	bl	800900c <xTaskCreate>
 8008098:	4603      	mov	r3, r0
 800809a:	2b01      	cmp	r3, #1
 800809c:	d001      	beq.n	80080a2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800809e:	2300      	movs	r3, #0
 80080a0:	e000      	b.n	80080a4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80080a2:	68fb      	ldr	r3, [r7, #12]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080ac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <osDelay+0x16>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	e000      	b.n	80080c4 <osDelay+0x18>
 80080c2:	2301      	movs	r3, #1
 80080c4:	4618      	mov	r0, r3
 80080c6:	f001 f8cf 	bl	8009268 <vTaskDelay>
  
  return osOK;
 80080ca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af02      	add	r7, sp, #8
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00f      	beq.n	8008106 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d10a      	bne.n	8008102 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	2203      	movs	r2, #3
 80080f2:	9200      	str	r2, [sp, #0]
 80080f4:	2200      	movs	r2, #0
 80080f6:	2100      	movs	r1, #0
 80080f8:	2001      	movs	r0, #1
 80080fa:	f000 f9cb 	bl	8008494 <xQueueGenericCreateStatic>
 80080fe:	4603      	mov	r3, r0
 8008100:	e016      	b.n	8008130 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008102:	2300      	movs	r3, #0
 8008104:	e014      	b.n	8008130 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d110      	bne.n	800812e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800810c:	2203      	movs	r2, #3
 800810e:	2100      	movs	r1, #0
 8008110:	2001      	movs	r0, #1
 8008112:	f000 fa36 	bl	8008582 <xQueueGenericCreate>
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d005      	beq.n	800812a <osSemaphoreCreate+0x56>
 800811e:	2300      	movs	r3, #0
 8008120:	2200      	movs	r2, #0
 8008122:	2100      	movs	r1, #0
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 fa89 	bl	800863c <xQueueGenericSend>
      return sema;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	e000      	b.n	8008130 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800812e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008142:	2300      	movs	r3, #0
 8008144:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800814c:	2380      	movs	r3, #128	; 0x80
 800814e:	e03a      	b.n	80081c6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815a:	d103      	bne.n	8008164 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800815c:	f04f 33ff 	mov.w	r3, #4294967295
 8008160:	60fb      	str	r3, [r7, #12]
 8008162:	e009      	b.n	8008178 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d006      	beq.n	8008178 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d101      	bne.n	8008178 <osSemaphoreWait+0x40>
      ticks = 1;
 8008174:	2301      	movs	r3, #1
 8008176:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008178:	f7ff ff34 	bl	8007fe4 <inHandlerMode>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d017      	beq.n	80081b2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008182:	f107 0308 	add.w	r3, r7, #8
 8008186:	461a      	mov	r2, r3
 8008188:	2100      	movs	r1, #0
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fcee 	bl	8008b6c <xQueueReceiveFromISR>
 8008190:	4603      	mov	r3, r0
 8008192:	2b01      	cmp	r3, #1
 8008194:	d001      	beq.n	800819a <osSemaphoreWait+0x62>
      return osErrorOS;
 8008196:	23ff      	movs	r3, #255	; 0xff
 8008198:	e015      	b.n	80081c6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d011      	beq.n	80081c4 <osSemaphoreWait+0x8c>
 80081a0:	4b0b      	ldr	r3, [pc, #44]	; (80081d0 <osSemaphoreWait+0x98>)
 80081a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	e008      	b.n	80081c4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80081b2:	68f9      	ldr	r1, [r7, #12]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fbcd 	bl	8008954 <xQueueSemaphoreTake>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d001      	beq.n	80081c4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80081c0:	23ff      	movs	r3, #255	; 0xff
 80081c2:	e000      	b.n	80081c6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	e000ed04 	.word	0xe000ed04

080081d4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80081dc:	2300      	movs	r3, #0
 80081de:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80081e0:	2300      	movs	r3, #0
 80081e2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80081e4:	f7ff fefe 	bl	8007fe4 <inHandlerMode>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d016      	beq.n	800821c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80081ee:	f107 0308 	add.w	r3, r7, #8
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fb1f 	bl	8008838 <xQueueGiveFromISR>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d001      	beq.n	8008204 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008200:	23ff      	movs	r3, #255	; 0xff
 8008202:	e017      	b.n	8008234 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d013      	beq.n	8008232 <osSemaphoreRelease+0x5e>
 800820a:	4b0c      	ldr	r3, [pc, #48]	; (800823c <osSemaphoreRelease+0x68>)
 800820c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	e00a      	b.n	8008232 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800821c:	2300      	movs	r3, #0
 800821e:	2200      	movs	r2, #0
 8008220:	2100      	movs	r1, #0
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fa0a 	bl	800863c <xQueueGenericSend>
 8008228:	4603      	mov	r3, r0
 800822a:	2b01      	cmp	r3, #1
 800822c:	d001      	beq.n	8008232 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800822e:	23ff      	movs	r3, #255	; 0xff
 8008230:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008232:	68fb      	ldr	r3, [r7, #12]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	e000ed04 	.word	0xe000ed04

08008240 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008248:	f7ff fecc 	bl	8007fe4 <inHandlerMode>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008252:	2382      	movs	r3, #130	; 0x82
 8008254:	e003      	b.n	800825e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fd08 	bl	8008c6c <vQueueDelete>

  return osOK; 
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f103 0208 	add.w	r2, r3, #8
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f04f 32ff 	mov.w	r2, #4294967295
 800827e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f103 0208 	add.w	r2, r3, #8
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f103 0208 	add.w	r2, r3, #8
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800829a:	bf00      	nop
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	bc80      	pop	{r7}
 80082a2:	4770      	bx	lr

080082a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bc80      	pop	{r7}
 80082ba:	4770      	bx	lr

080082bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	689a      	ldr	r2, [r3, #8]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	601a      	str	r2, [r3, #0]
}
 80082f8:	bf00      	nop
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bc80      	pop	{r7}
 8008300:	4770      	bx	lr

08008302 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008302:	b480      	push	{r7}
 8008304:	b085      	sub	sp, #20
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008318:	d103      	bne.n	8008322 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	e00c      	b.n	800833c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	3308      	adds	r3, #8
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	e002      	b.n	8008330 <vListInsert+0x2e>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	429a      	cmp	r2, r3
 800833a:	d2f6      	bcs.n	800832a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	601a      	str	r2, [r3, #0]
}
 8008368:	bf00      	nop
 800836a:	3714      	adds	r7, #20
 800836c:	46bd      	mov	sp, r7
 800836e:	bc80      	pop	{r7}
 8008370:	4770      	bx	lr

08008372 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008372:	b480      	push	{r7}
 8008374:	b085      	sub	sp, #20
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	6892      	ldr	r2, [r2, #8]
 8008388:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	6852      	ldr	r2, [r2, #4]
 8008392:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	429a      	cmp	r2, r3
 800839c:	d103      	bne.n	80083a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	1e5a      	subs	r2, r3, #1
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	bc80      	pop	{r7}
 80083c2:	4770      	bx	lr

080083c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10a      	bne.n	80083ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80083ea:	bf00      	nop
 80083ec:	e7fe      	b.n	80083ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80083ee:	f001 fead 	bl	800a14c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fa:	68f9      	ldr	r1, [r7, #12]
 80083fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083fe:	fb01 f303 	mul.w	r3, r1, r3
 8008402:	441a      	add	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841e:	3b01      	subs	r3, #1
 8008420:	68f9      	ldr	r1, [r7, #12]
 8008422:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008424:	fb01 f303 	mul.w	r3, r1, r3
 8008428:	441a      	add	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	22ff      	movs	r2, #255	; 0xff
 8008432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	22ff      	movs	r2, #255	; 0xff
 800843a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d114      	bne.n	800846e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01a      	beq.n	8008482 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3310      	adds	r3, #16
 8008450:	4618      	mov	r0, r3
 8008452:	f001 f983 	bl	800975c <xTaskRemoveFromEventList>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d012      	beq.n	8008482 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800845c:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <xQueueGenericReset+0xcc>)
 800845e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	e009      	b.n	8008482 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3310      	adds	r3, #16
 8008472:	4618      	mov	r0, r3
 8008474:	f7ff fef7 	bl	8008266 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3324      	adds	r3, #36	; 0x24
 800847c:	4618      	mov	r0, r3
 800847e:	f7ff fef2 	bl	8008266 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008482:	f001 fe93 	bl	800a1ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008486:	2301      	movs	r3, #1
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	e000ed04 	.word	0xe000ed04

08008494 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08e      	sub	sp, #56	; 0x38
 8008498:	af02      	add	r7, sp, #8
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
 80084a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10a      	bne.n	80084be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084ba:	bf00      	nop
 80084bc:	e7fe      	b.n	80084bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10a      	bne.n	80084da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084d6:	bf00      	nop
 80084d8:	e7fe      	b.n	80084d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d002      	beq.n	80084e6 <xQueueGenericCreateStatic+0x52>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <xQueueGenericCreateStatic+0x56>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e000      	b.n	80084ec <xQueueGenericCreateStatic+0x58>
 80084ea:	2300      	movs	r3, #0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10a      	bne.n	8008506 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	623b      	str	r3, [r7, #32]
}
 8008502:	bf00      	nop
 8008504:	e7fe      	b.n	8008504 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d102      	bne.n	8008512 <xQueueGenericCreateStatic+0x7e>
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <xQueueGenericCreateStatic+0x82>
 8008512:	2301      	movs	r3, #1
 8008514:	e000      	b.n	8008518 <xQueueGenericCreateStatic+0x84>
 8008516:	2300      	movs	r3, #0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10a      	bne.n	8008532 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	61fb      	str	r3, [r7, #28]
}
 800852e:	bf00      	nop
 8008530:	e7fe      	b.n	8008530 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008532:	2348      	movs	r3, #72	; 0x48
 8008534:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2b48      	cmp	r3, #72	; 0x48
 800853a:	d00a      	beq.n	8008552 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	61bb      	str	r3, [r7, #24]
}
 800854e:	bf00      	nop
 8008550:	e7fe      	b.n	8008550 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00d      	beq.n	8008578 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008564:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	4613      	mov	r3, r2
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	68b9      	ldr	r1, [r7, #8]
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 f843 	bl	80085fe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800857a:	4618      	mov	r0, r3
 800857c:	3730      	adds	r7, #48	; 0x30
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008582:	b580      	push	{r7, lr}
 8008584:	b08a      	sub	sp, #40	; 0x28
 8008586:	af02      	add	r7, sp, #8
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	4613      	mov	r3, r2
 800858e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10a      	bne.n	80085ac <xQueueGenericCreate+0x2a>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	613b      	str	r3, [r7, #16]
}
 80085a8:	bf00      	nop
 80085aa:	e7fe      	b.n	80085aa <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d102      	bne.n	80085b8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	61fb      	str	r3, [r7, #28]
 80085b6:	e004      	b.n	80085c2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	fb02 f303 	mul.w	r3, r2, r3
 80085c0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	3348      	adds	r3, #72	; 0x48
 80085c6:	4618      	mov	r0, r3
 80085c8:	f001 fec0 	bl	800a34c <pvPortMalloc>
 80085cc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00f      	beq.n	80085f4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	3348      	adds	r3, #72	; 0x48
 80085d8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085e2:	79fa      	ldrb	r2, [r7, #7]
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	4613      	mov	r3, r2
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	68b9      	ldr	r1, [r7, #8]
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 f805 	bl	80085fe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80085f4:	69bb      	ldr	r3, [r7, #24]
	}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3720      	adds	r7, #32
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	60b9      	str	r1, [r7, #8]
 8008608:	607a      	str	r2, [r7, #4]
 800860a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d103      	bne.n	800861a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	601a      	str	r2, [r3, #0]
 8008618:	e002      	b.n	8008620 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800862c:	2101      	movs	r1, #1
 800862e:	69b8      	ldr	r0, [r7, #24]
 8008630:	f7ff fec8 	bl	80083c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008634:	bf00      	nop
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b08e      	sub	sp, #56	; 0x38
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
 8008648:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800864a:	2300      	movs	r3, #0
 800864c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10a      	bne.n	800866e <xQueueGenericSend+0x32>
	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800866a:	bf00      	nop
 800866c:	e7fe      	b.n	800866c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d103      	bne.n	800867c <xQueueGenericSend+0x40>
 8008674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <xQueueGenericSend+0x44>
 800867c:	2301      	movs	r3, #1
 800867e:	e000      	b.n	8008682 <xQueueGenericSend+0x46>
 8008680:	2300      	movs	r3, #0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10a      	bne.n	800869c <xQueueGenericSend+0x60>
	__asm volatile
 8008686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008698:	bf00      	nop
 800869a:	e7fe      	b.n	800869a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d103      	bne.n	80086aa <xQueueGenericSend+0x6e>
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d101      	bne.n	80086ae <xQueueGenericSend+0x72>
 80086aa:	2301      	movs	r3, #1
 80086ac:	e000      	b.n	80086b0 <xQueueGenericSend+0x74>
 80086ae:	2300      	movs	r3, #0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10a      	bne.n	80086ca <xQueueGenericSend+0x8e>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	623b      	str	r3, [r7, #32]
}
 80086c6:	bf00      	nop
 80086c8:	e7fe      	b.n	80086c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086ca:	f001 fa07 	bl	8009adc <xTaskGetSchedulerState>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d102      	bne.n	80086da <xQueueGenericSend+0x9e>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <xQueueGenericSend+0xa2>
 80086da:	2301      	movs	r3, #1
 80086dc:	e000      	b.n	80086e0 <xQueueGenericSend+0xa4>
 80086de:	2300      	movs	r3, #0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10a      	bne.n	80086fa <xQueueGenericSend+0xbe>
	__asm volatile
 80086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	61fb      	str	r3, [r7, #28]
}
 80086f6:	bf00      	nop
 80086f8:	e7fe      	b.n	80086f8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086fa:	f001 fd27 	bl	800a14c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008706:	429a      	cmp	r2, r3
 8008708:	d302      	bcc.n	8008710 <xQueueGenericSend+0xd4>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b02      	cmp	r3, #2
 800870e:	d129      	bne.n	8008764 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	68b9      	ldr	r1, [r7, #8]
 8008714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008716:	f000 fae3 	bl	8008ce0 <prvCopyDataToQueue>
 800871a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	2b00      	cmp	r3, #0
 8008722:	d010      	beq.n	8008746 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	3324      	adds	r3, #36	; 0x24
 8008728:	4618      	mov	r0, r3
 800872a:	f001 f817 	bl	800975c <xTaskRemoveFromEventList>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d013      	beq.n	800875c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008734:	4b3f      	ldr	r3, [pc, #252]	; (8008834 <xQueueGenericSend+0x1f8>)
 8008736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800873a:	601a      	str	r2, [r3, #0]
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	e00a      	b.n	800875c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008748:	2b00      	cmp	r3, #0
 800874a:	d007      	beq.n	800875c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800874c:	4b39      	ldr	r3, [pc, #228]	; (8008834 <xQueueGenericSend+0x1f8>)
 800874e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800875c:	f001 fd26 	bl	800a1ac <vPortExitCritical>
				return pdPASS;
 8008760:	2301      	movs	r3, #1
 8008762:	e063      	b.n	800882c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d103      	bne.n	8008772 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800876a:	f001 fd1f 	bl	800a1ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800876e:	2300      	movs	r3, #0
 8008770:	e05c      	b.n	800882c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008774:	2b00      	cmp	r3, #0
 8008776:	d106      	bne.n	8008786 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008778:	f107 0314 	add.w	r3, r7, #20
 800877c:	4618      	mov	r0, r3
 800877e:	f001 f84f 	bl	8009820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008782:	2301      	movs	r3, #1
 8008784:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008786:	f001 fd11 	bl	800a1ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800878a:	f000 fe01 	bl	8009390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800878e:	f001 fcdd 	bl	800a14c <vPortEnterCritical>
 8008792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008798:	b25b      	sxtb	r3, r3
 800879a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879e:	d103      	bne.n	80087a8 <xQueueGenericSend+0x16c>
 80087a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087ae:	b25b      	sxtb	r3, r3
 80087b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b4:	d103      	bne.n	80087be <xQueueGenericSend+0x182>
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087be:	f001 fcf5 	bl	800a1ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087c2:	1d3a      	adds	r2, r7, #4
 80087c4:	f107 0314 	add.w	r3, r7, #20
 80087c8:	4611      	mov	r1, r2
 80087ca:	4618      	mov	r0, r3
 80087cc:	f001 f83e 	bl	800984c <xTaskCheckForTimeOut>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d124      	bne.n	8008820 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087d8:	f000 fb7a 	bl	8008ed0 <prvIsQueueFull>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d018      	beq.n	8008814 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	3310      	adds	r3, #16
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	4611      	mov	r1, r2
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 ff92 	bl	8009714 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80087f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087f2:	f000 fb05 	bl	8008e00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80087f6:	f000 fdd9 	bl	80093ac <xTaskResumeAll>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f47f af7c 	bne.w	80086fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008802:	4b0c      	ldr	r3, [pc, #48]	; (8008834 <xQueueGenericSend+0x1f8>)
 8008804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	e772      	b.n	80086fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008816:	f000 faf3 	bl	8008e00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800881a:	f000 fdc7 	bl	80093ac <xTaskResumeAll>
 800881e:	e76c      	b.n	80086fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008822:	f000 faed 	bl	8008e00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008826:	f000 fdc1 	bl	80093ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800882a:	2300      	movs	r3, #0
		}
	}
}
 800882c:	4618      	mov	r0, r3
 800882e:	3738      	adds	r7, #56	; 0x38
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	e000ed04 	.word	0xe000ed04

08008838 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08e      	sub	sp, #56	; 0x38
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	623b      	str	r3, [r7, #32]
}
 800885e:	bf00      	nop
 8008860:	e7fe      	b.n	8008860 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00a      	beq.n	8008880 <xQueueGiveFromISR+0x48>
	__asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	61fb      	str	r3, [r7, #28]
}
 800887c:	bf00      	nop
 800887e:	e7fe      	b.n	800887e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d103      	bne.n	8008890 <xQueueGiveFromISR+0x58>
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <xQueueGiveFromISR+0x5c>
 8008890:	2301      	movs	r3, #1
 8008892:	e000      	b.n	8008896 <xQueueGiveFromISR+0x5e>
 8008894:	2300      	movs	r3, #0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10a      	bne.n	80088b0 <xQueueGiveFromISR+0x78>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	61bb      	str	r3, [r7, #24]
}
 80088ac:	bf00      	nop
 80088ae:	e7fe      	b.n	80088ae <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088b0:	f001 fd0e 	bl	800a2d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80088b4:	f3ef 8211 	mrs	r2, BASEPRI
 80088b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088bc:	f383 8811 	msr	BASEPRI, r3
 80088c0:	f3bf 8f6f 	isb	sy
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	617a      	str	r2, [r7, #20]
 80088ca:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80088cc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088dc:	429a      	cmp	r2, r3
 80088de:	d22b      	bcs.n	8008938 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80088f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fa:	d112      	bne.n	8008922 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008900:	2b00      	cmp	r3, #0
 8008902:	d016      	beq.n	8008932 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008906:	3324      	adds	r3, #36	; 0x24
 8008908:	4618      	mov	r0, r3
 800890a:	f000 ff27 	bl	800975c <xTaskRemoveFromEventList>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00e      	beq.n	8008932 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00b      	beq.n	8008932 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2201      	movs	r2, #1
 800891e:	601a      	str	r2, [r3, #0]
 8008920:	e007      	b.n	8008932 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008926:	3301      	adds	r3, #1
 8008928:	b2db      	uxtb	r3, r3
 800892a:	b25a      	sxtb	r2, r3
 800892c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008932:	2301      	movs	r3, #1
 8008934:	637b      	str	r3, [r7, #52]	; 0x34
 8008936:	e001      	b.n	800893c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008938:	2300      	movs	r3, #0
 800893a:	637b      	str	r3, [r7, #52]	; 0x34
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008946:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800894a:	4618      	mov	r0, r3
 800894c:	3738      	adds	r7, #56	; 0x38
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
	...

08008954 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b08e      	sub	sp, #56	; 0x38
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800895e:	2300      	movs	r3, #0
 8008960:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008966:	2300      	movs	r3, #0
 8008968:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800896a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10a      	bne.n	8008986 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	623b      	str	r3, [r7, #32]
}
 8008982:	bf00      	nop
 8008984:	e7fe      	b.n	8008984 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00a      	beq.n	80089a4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	61fb      	str	r3, [r7, #28]
}
 80089a0:	bf00      	nop
 80089a2:	e7fe      	b.n	80089a2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089a4:	f001 f89a 	bl	8009adc <xTaskGetSchedulerState>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d102      	bne.n	80089b4 <xQueueSemaphoreTake+0x60>
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <xQueueSemaphoreTake+0x64>
 80089b4:	2301      	movs	r3, #1
 80089b6:	e000      	b.n	80089ba <xQueueSemaphoreTake+0x66>
 80089b8:	2300      	movs	r3, #0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	61bb      	str	r3, [r7, #24]
}
 80089d0:	bf00      	nop
 80089d2:	e7fe      	b.n	80089d2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80089d4:	f001 fbba 	bl	800a14c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80089d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089dc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d024      	beq.n	8008a2e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	1e5a      	subs	r2, r3, #1
 80089e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d104      	bne.n	80089fe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80089f4:	f001 fa3c 	bl	8009e70 <pvTaskIncrementMutexHeldCount>
 80089f8:	4602      	mov	r2, r0
 80089fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fc:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00f      	beq.n	8008a26 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a08:	3310      	adds	r3, #16
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fea6 	bl	800975c <xTaskRemoveFromEventList>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d007      	beq.n	8008a26 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a16:	4b54      	ldr	r3, [pc, #336]	; (8008b68 <xQueueSemaphoreTake+0x214>)
 8008a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a26:	f001 fbc1 	bl	800a1ac <vPortExitCritical>
				return pdPASS;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e097      	b.n	8008b5e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d111      	bne.n	8008a58 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00a      	beq.n	8008a50 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3e:	f383 8811 	msr	BASEPRI, r3
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	617b      	str	r3, [r7, #20]
}
 8008a4c:	bf00      	nop
 8008a4e:	e7fe      	b.n	8008a4e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008a50:	f001 fbac 	bl	800a1ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a54:	2300      	movs	r3, #0
 8008a56:	e082      	b.n	8008b5e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d106      	bne.n	8008a6c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a5e:	f107 030c 	add.w	r3, r7, #12
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fedc 	bl	8009820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a6c:	f001 fb9e 	bl	800a1ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a70:	f000 fc8e 	bl	8009390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a74:	f001 fb6a 	bl	800a14c <vPortEnterCritical>
 8008a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a7e:	b25b      	sxtb	r3, r3
 8008a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a84:	d103      	bne.n	8008a8e <xQueueSemaphoreTake+0x13a>
 8008a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a94:	b25b      	sxtb	r3, r3
 8008a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9a:	d103      	bne.n	8008aa4 <xQueueSemaphoreTake+0x150>
 8008a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008aa4:	f001 fb82 	bl	800a1ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008aa8:	463a      	mov	r2, r7
 8008aaa:	f107 030c 	add.w	r3, r7, #12
 8008aae:	4611      	mov	r1, r2
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fecb 	bl	800984c <xTaskCheckForTimeOut>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d132      	bne.n	8008b22 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008abc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008abe:	f000 f9f1 	bl	8008ea4 <prvIsQueueEmpty>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d026      	beq.n	8008b16 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d109      	bne.n	8008ae4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008ad0:	f001 fb3c 	bl	800a14c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f001 f81d 	bl	8009b18 <xTaskPriorityInherit>
 8008ade:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008ae0:	f001 fb64 	bl	800a1ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae6:	3324      	adds	r3, #36	; 0x24
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	4611      	mov	r1, r2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 fe11 	bl	8009714 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008af2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008af4:	f000 f984 	bl	8008e00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008af8:	f000 fc58 	bl	80093ac <xTaskResumeAll>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f47f af68 	bne.w	80089d4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008b04:	4b18      	ldr	r3, [pc, #96]	; (8008b68 <xQueueSemaphoreTake+0x214>)
 8008b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	e75e      	b.n	80089d4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008b16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b18:	f000 f972 	bl	8008e00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b1c:	f000 fc46 	bl	80093ac <xTaskResumeAll>
 8008b20:	e758      	b.n	80089d4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008b22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b24:	f000 f96c 	bl	8008e00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b28:	f000 fc40 	bl	80093ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b2e:	f000 f9b9 	bl	8008ea4 <prvIsQueueEmpty>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f43f af4d 	beq.w	80089d4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00d      	beq.n	8008b5c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008b40:	f001 fb04 	bl	800a14c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008b44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b46:	f000 f8b4 	bl	8008cb2 <prvGetDisinheritPriorityAfterTimeout>
 8008b4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b52:	4618      	mov	r0, r3
 8008b54:	f001 f8ec 	bl	8009d30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008b58:	f001 fb28 	bl	800a1ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3738      	adds	r7, #56	; 0x38
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	e000ed04 	.word	0xe000ed04

08008b6c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b08e      	sub	sp, #56	; 0x38
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10a      	bne.n	8008b98 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	623b      	str	r3, [r7, #32]
}
 8008b94:	bf00      	nop
 8008b96:	e7fe      	b.n	8008b96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d103      	bne.n	8008ba6 <xQueueReceiveFromISR+0x3a>
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <xQueueReceiveFromISR+0x3e>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e000      	b.n	8008bac <xQueueReceiveFromISR+0x40>
 8008baa:	2300      	movs	r3, #0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10a      	bne.n	8008bc6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb4:	f383 8811 	msr	BASEPRI, r3
 8008bb8:	f3bf 8f6f 	isb	sy
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	61fb      	str	r3, [r7, #28]
}
 8008bc2:	bf00      	nop
 8008bc4:	e7fe      	b.n	8008bc4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bc6:	f001 fb83 	bl	800a2d0 <vPortValidateInterruptPriority>
	__asm volatile
 8008bca:	f3ef 8211 	mrs	r2, BASEPRI
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	61ba      	str	r2, [r7, #24]
 8008be0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008be2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008be4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d02f      	beq.n	8008c52 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008bfc:	68b9      	ldr	r1, [r7, #8]
 8008bfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c00:	f000 f8d8 	bl	8008db4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	1e5a      	subs	r2, r3, #1
 8008c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008c0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c14:	d112      	bne.n	8008c3c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d016      	beq.n	8008c4c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c20:	3310      	adds	r3, #16
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fd9a 	bl	800975c <xTaskRemoveFromEventList>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00e      	beq.n	8008c4c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	e007      	b.n	8008c4c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c40:	3301      	adds	r3, #1
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	b25a      	sxtb	r2, r3
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c50:	e001      	b.n	8008c56 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	637b      	str	r3, [r7, #52]	; 0x34
 8008c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	f383 8811 	msr	BASEPRI, r3
}
 8008c60:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3738      	adds	r7, #56	; 0x38
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10a      	bne.n	8008c94 <vQueueDelete+0x28>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	60bb      	str	r3, [r7, #8]
}
 8008c90:	bf00      	nop
 8008c92:	e7fe      	b.n	8008c92 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 f933 	bl	8008f00 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d102      	bne.n	8008caa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f001 fc15 	bl	800a4d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008caa:	bf00      	nop
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b085      	sub	sp, #20
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d006      	beq.n	8008cd0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f1c3 0307 	rsb	r3, r3, #7
 8008ccc:	60fb      	str	r3, [r7, #12]
 8008cce:	e001      	b.n	8008cd4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
	}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bc80      	pop	{r7}
 8008cde:	4770      	bx	lr

08008ce0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008cec:	2300      	movs	r3, #0
 8008cee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10d      	bne.n	8008d1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d14d      	bne.n	8008da2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 ff8a 	bl	8009c24 <xTaskPriorityDisinherit>
 8008d10:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	605a      	str	r2, [r3, #4]
 8008d18:	e043      	b.n	8008da2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d119      	bne.n	8008d54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6898      	ldr	r0, [r3, #8]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d28:	461a      	mov	r2, r3
 8008d2a:	68b9      	ldr	r1, [r7, #8]
 8008d2c:	f001 fd10 	bl	800a750 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	689a      	ldr	r2, [r3, #8]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d38:	441a      	add	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	689a      	ldr	r2, [r3, #8]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d32b      	bcc.n	8008da2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	609a      	str	r2, [r3, #8]
 8008d52:	e026      	b.n	8008da2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	68d8      	ldr	r0, [r3, #12]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	68b9      	ldr	r1, [r7, #8]
 8008d60:	f001 fcf6 	bl	800a750 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	68da      	ldr	r2, [r3, #12]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6c:	425b      	negs	r3, r3
 8008d6e:	441a      	add	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	68da      	ldr	r2, [r3, #12]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d207      	bcs.n	8008d90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	685a      	ldr	r2, [r3, #4]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d88:	425b      	negs	r3, r3
 8008d8a:	441a      	add	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d105      	bne.n	8008da2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	1c5a      	adds	r2, r3, #1
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008daa:	697b      	ldr	r3, [r7, #20]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d018      	beq.n	8008df8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68da      	ldr	r2, [r3, #12]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dce:	441a      	add	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68da      	ldr	r2, [r3, #12]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d303      	bcc.n	8008de8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	68d9      	ldr	r1, [r3, #12]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df0:	461a      	mov	r2, r3
 8008df2:	6838      	ldr	r0, [r7, #0]
 8008df4:	f001 fcac 	bl	800a750 <memcpy>
	}
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e08:	f001 f9a0 	bl	800a14c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e14:	e011      	b.n	8008e3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d012      	beq.n	8008e44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	3324      	adds	r3, #36	; 0x24
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 fc9a 	bl	800975c <xTaskRemoveFromEventList>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e2e:	f000 fd6f 	bl	8009910 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	dce9      	bgt.n	8008e16 <prvUnlockQueue+0x16>
 8008e42:	e000      	b.n	8008e46 <prvUnlockQueue+0x46>
					break;
 8008e44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	22ff      	movs	r2, #255	; 0xff
 8008e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e4e:	f001 f9ad 	bl	800a1ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e52:	f001 f97b 	bl	800a14c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e5e:	e011      	b.n	8008e84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d012      	beq.n	8008e8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	3310      	adds	r3, #16
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 fc75 	bl	800975c <xTaskRemoveFromEventList>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e78:	f000 fd4a 	bl	8009910 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	dce9      	bgt.n	8008e60 <prvUnlockQueue+0x60>
 8008e8c:	e000      	b.n	8008e90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	22ff      	movs	r2, #255	; 0xff
 8008e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e98:	f001 f988 	bl	800a1ac <vPortExitCritical>
}
 8008e9c:	bf00      	nop
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008eac:	f001 f94e 	bl	800a14c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d102      	bne.n	8008ebe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	e001      	b.n	8008ec2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ec2:	f001 f973 	bl	800a1ac <vPortExitCritical>

	return xReturn;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ed8:	f001 f938 	bl	800a14c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d102      	bne.n	8008eee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	e001      	b.n	8008ef2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ef2:	f001 f95b 	bl	800a1ac <vPortExitCritical>

	return xReturn;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60fb      	str	r3, [r7, #12]
 8008f0c:	e016      	b.n	8008f3c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008f0e:	4a10      	ldr	r2, [pc, #64]	; (8008f50 <vQueueUnregisterQueue+0x50>)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	4413      	add	r3, r2
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d10b      	bne.n	8008f36 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008f1e:	4a0c      	ldr	r2, [pc, #48]	; (8008f50 <vQueueUnregisterQueue+0x50>)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2100      	movs	r1, #0
 8008f24:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008f28:	4a09      	ldr	r2, [pc, #36]	; (8008f50 <vQueueUnregisterQueue+0x50>)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	00db      	lsls	r3, r3, #3
 8008f2e:	4413      	add	r3, r2
 8008f30:	2200      	movs	r2, #0
 8008f32:	605a      	str	r2, [r3, #4]
				break;
 8008f34:	e006      	b.n	8008f44 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	60fb      	str	r3, [r7, #12]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2b07      	cmp	r3, #7
 8008f40:	d9e5      	bls.n	8008f0e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008f42:	bf00      	nop
 8008f44:	bf00      	nop
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bc80      	pop	{r7}
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	200009c4 	.word	0x200009c4

08008f54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08e      	sub	sp, #56	; 0x38
 8008f58:	af04      	add	r7, sp, #16
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
 8008f60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	623b      	str	r3, [r7, #32]
}
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10a      	bne.n	8008f9a <xTaskCreateStatic+0x46>
	__asm volatile
 8008f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	61fb      	str	r3, [r7, #28]
}
 8008f96:	bf00      	nop
 8008f98:	e7fe      	b.n	8008f98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f9a:	2354      	movs	r3, #84	; 0x54
 8008f9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	2b54      	cmp	r3, #84	; 0x54
 8008fa2:	d00a      	beq.n	8008fba <xTaskCreateStatic+0x66>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	61bb      	str	r3, [r7, #24]
}
 8008fb6:	bf00      	nop
 8008fb8:	e7fe      	b.n	8008fb8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d01e      	beq.n	8008ffe <xTaskCreateStatic+0xaa>
 8008fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d01b      	beq.n	8008ffe <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fd8:	2300      	movs	r3, #0
 8008fda:	9303      	str	r3, [sp, #12]
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fde:	9302      	str	r3, [sp, #8]
 8008fe0:	f107 0314 	add.w	r3, r7, #20
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	68b9      	ldr	r1, [r7, #8]
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 f850 	bl	8009096 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ff6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ff8:	f000 f8cc 	bl	8009194 <prvAddNewTaskToReadyList>
 8008ffc:	e001      	b.n	8009002 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008ffe:	2300      	movs	r3, #0
 8009000:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009002:	697b      	ldr	r3, [r7, #20]
	}
 8009004:	4618      	mov	r0, r3
 8009006:	3728      	adds	r7, #40	; 0x28
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800900c:	b580      	push	{r7, lr}
 800900e:	b08c      	sub	sp, #48	; 0x30
 8009010:	af04      	add	r7, sp, #16
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	603b      	str	r3, [r7, #0]
 8009018:	4613      	mov	r3, r2
 800901a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800901c:	88fb      	ldrh	r3, [r7, #6]
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4618      	mov	r0, r3
 8009022:	f001 f993 	bl	800a34c <pvPortMalloc>
 8009026:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00e      	beq.n	800904c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800902e:	2054      	movs	r0, #84	; 0x54
 8009030:	f001 f98c 	bl	800a34c <pvPortMalloc>
 8009034:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	631a      	str	r2, [r3, #48]	; 0x30
 8009042:	e005      	b.n	8009050 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009044:	6978      	ldr	r0, [r7, #20]
 8009046:	f001 fa45 	bl	800a4d4 <vPortFree>
 800904a:	e001      	b.n	8009050 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800904c:	2300      	movs	r3, #0
 800904e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d017      	beq.n	8009086 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800905e:	88fa      	ldrh	r2, [r7, #6]
 8009060:	2300      	movs	r3, #0
 8009062:	9303      	str	r3, [sp, #12]
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	9302      	str	r3, [sp, #8]
 8009068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	68b9      	ldr	r1, [r7, #8]
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 f80e 	bl	8009096 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800907a:	69f8      	ldr	r0, [r7, #28]
 800907c:	f000 f88a 	bl	8009194 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009080:	2301      	movs	r3, #1
 8009082:	61bb      	str	r3, [r7, #24]
 8009084:	e002      	b.n	800908c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009086:	f04f 33ff 	mov.w	r3, #4294967295
 800908a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800908c:	69bb      	ldr	r3, [r7, #24]
	}
 800908e:	4618      	mov	r0, r3
 8009090:	3720      	adds	r7, #32
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b088      	sub	sp, #32
 800909a:	af00      	add	r7, sp, #0
 800909c:	60f8      	str	r0, [r7, #12]
 800909e:	60b9      	str	r1, [r7, #8]
 80090a0:	607a      	str	r2, [r7, #4]
 80090a2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80090a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090ae:	3b01      	subs	r3, #1
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	f023 0307 	bic.w	r3, r3, #7
 80090bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	f003 0307 	and.w	r3, r3, #7
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00a      	beq.n	80090de <prvInitialiseNewTask+0x48>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	617b      	str	r3, [r7, #20]
}
 80090da:	bf00      	nop
 80090dc:	e7fe      	b.n	80090dc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090de:	2300      	movs	r3, #0
 80090e0:	61fb      	str	r3, [r7, #28]
 80090e2:	e012      	b.n	800910a <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	4413      	add	r3, r2
 80090ea:	7819      	ldrb	r1, [r3, #0]
 80090ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	4413      	add	r3, r2
 80090f2:	3334      	adds	r3, #52	; 0x34
 80090f4:	460a      	mov	r2, r1
 80090f6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	4413      	add	r3, r2
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d006      	beq.n	8009112 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	3301      	adds	r3, #1
 8009108:	61fb      	str	r3, [r7, #28]
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	2b0f      	cmp	r3, #15
 800910e:	d9e9      	bls.n	80090e4 <prvInitialiseNewTask+0x4e>
 8009110:	e000      	b.n	8009114 <prvInitialiseNewTask+0x7e>
		{
			break;
 8009112:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	2200      	movs	r2, #0
 8009118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911e:	2b06      	cmp	r3, #6
 8009120:	d901      	bls.n	8009126 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009122:	2306      	movs	r3, #6
 8009124:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800912a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800912c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009130:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009134:	2200      	movs	r2, #0
 8009136:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	3304      	adds	r3, #4
 800913c:	4618      	mov	r0, r3
 800913e:	f7ff f8b1 	bl	80082a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009144:	3318      	adds	r3, #24
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff f8ac 	bl	80082a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009150:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009154:	f1c3 0207 	rsb	r2, r3, #7
 8009158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800915c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009160:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	2200      	movs	r2, #0
 8009166:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	2200      	movs	r2, #0
 800916c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	68f9      	ldr	r1, [r7, #12]
 8009174:	69b8      	ldr	r0, [r7, #24]
 8009176:	f000 fef5 	bl	8009f64 <pxPortInitialiseStack>
 800917a:	4602      	mov	r2, r0
 800917c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800918a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800918c:	bf00      	nop
 800918e:	3720      	adds	r7, #32
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800919c:	f000 ffd6 	bl	800a14c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091a0:	4b2a      	ldr	r3, [pc, #168]	; (800924c <prvAddNewTaskToReadyList+0xb8>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3301      	adds	r3, #1
 80091a6:	4a29      	ldr	r2, [pc, #164]	; (800924c <prvAddNewTaskToReadyList+0xb8>)
 80091a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091aa:	4b29      	ldr	r3, [pc, #164]	; (8009250 <prvAddNewTaskToReadyList+0xbc>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d109      	bne.n	80091c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091b2:	4a27      	ldr	r2, [pc, #156]	; (8009250 <prvAddNewTaskToReadyList+0xbc>)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091b8:	4b24      	ldr	r3, [pc, #144]	; (800924c <prvAddNewTaskToReadyList+0xb8>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d110      	bne.n	80091e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091c0:	f000 fbca 	bl	8009958 <prvInitialiseTaskLists>
 80091c4:	e00d      	b.n	80091e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80091c6:	4b23      	ldr	r3, [pc, #140]	; (8009254 <prvAddNewTaskToReadyList+0xc0>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d109      	bne.n	80091e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80091ce:	4b20      	ldr	r3, [pc, #128]	; (8009250 <prvAddNewTaskToReadyList+0xbc>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d8:	429a      	cmp	r2, r3
 80091da:	d802      	bhi.n	80091e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80091dc:	4a1c      	ldr	r2, [pc, #112]	; (8009250 <prvAddNewTaskToReadyList+0xbc>)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80091e2:	4b1d      	ldr	r3, [pc, #116]	; (8009258 <prvAddNewTaskToReadyList+0xc4>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3301      	adds	r3, #1
 80091e8:	4a1b      	ldr	r2, [pc, #108]	; (8009258 <prvAddNewTaskToReadyList+0xc4>)
 80091ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f0:	2201      	movs	r2, #1
 80091f2:	409a      	lsls	r2, r3
 80091f4:	4b19      	ldr	r3, [pc, #100]	; (800925c <prvAddNewTaskToReadyList+0xc8>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	4a18      	ldr	r2, [pc, #96]	; (800925c <prvAddNewTaskToReadyList+0xc8>)
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009202:	4613      	mov	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4a15      	ldr	r2, [pc, #84]	; (8009260 <prvAddNewTaskToReadyList+0xcc>)
 800920c:	441a      	add	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	3304      	adds	r3, #4
 8009212:	4619      	mov	r1, r3
 8009214:	4610      	mov	r0, r2
 8009216:	f7ff f851 	bl	80082bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800921a:	f000 ffc7 	bl	800a1ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800921e:	4b0d      	ldr	r3, [pc, #52]	; (8009254 <prvAddNewTaskToReadyList+0xc0>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00e      	beq.n	8009244 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009226:	4b0a      	ldr	r3, [pc, #40]	; (8009250 <prvAddNewTaskToReadyList+0xbc>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009230:	429a      	cmp	r2, r3
 8009232:	d207      	bcs.n	8009244 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009234:	4b0b      	ldr	r3, [pc, #44]	; (8009264 <prvAddNewTaskToReadyList+0xd0>)
 8009236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800923a:	601a      	str	r2, [r3, #0]
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009244:	bf00      	nop
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20000b04 	.word	0x20000b04
 8009250:	20000a04 	.word	0x20000a04
 8009254:	20000b10 	.word	0x20000b10
 8009258:	20000b20 	.word	0x20000b20
 800925c:	20000b0c 	.word	0x20000b0c
 8009260:	20000a08 	.word	0x20000a08
 8009264:	e000ed04 	.word	0xe000ed04

08009268 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009270:	2300      	movs	r3, #0
 8009272:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d017      	beq.n	80092aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800927a:	4b13      	ldr	r3, [pc, #76]	; (80092c8 <vTaskDelay+0x60>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00a      	beq.n	8009298 <vTaskDelay+0x30>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	60bb      	str	r3, [r7, #8]
}
 8009294:	bf00      	nop
 8009296:	e7fe      	b.n	8009296 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009298:	f000 f87a 	bl	8009390 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800929c:	2100      	movs	r1, #0
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fdfa 	bl	8009e98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092a4:	f000 f882 	bl	80093ac <xTaskResumeAll>
 80092a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d107      	bne.n	80092c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80092b0:	4b06      	ldr	r3, [pc, #24]	; (80092cc <vTaskDelay+0x64>)
 80092b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092b6:	601a      	str	r2, [r3, #0]
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092c0:	bf00      	nop
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	20000b2c 	.word	0x20000b2c
 80092cc:	e000ed04 	.word	0xe000ed04

080092d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b08a      	sub	sp, #40	; 0x28
 80092d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80092da:	2300      	movs	r3, #0
 80092dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092de:	463a      	mov	r2, r7
 80092e0:	1d39      	adds	r1, r7, #4
 80092e2:	f107 0308 	add.w	r3, r7, #8
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7f7 feac 	bl	8001044 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	9202      	str	r2, [sp, #8]
 80092f4:	9301      	str	r3, [sp, #4]
 80092f6:	2300      	movs	r3, #0
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	2300      	movs	r3, #0
 80092fc:	460a      	mov	r2, r1
 80092fe:	491e      	ldr	r1, [pc, #120]	; (8009378 <vTaskStartScheduler+0xa8>)
 8009300:	481e      	ldr	r0, [pc, #120]	; (800937c <vTaskStartScheduler+0xac>)
 8009302:	f7ff fe27 	bl	8008f54 <xTaskCreateStatic>
 8009306:	4603      	mov	r3, r0
 8009308:	4a1d      	ldr	r2, [pc, #116]	; (8009380 <vTaskStartScheduler+0xb0>)
 800930a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800930c:	4b1c      	ldr	r3, [pc, #112]	; (8009380 <vTaskStartScheduler+0xb0>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009314:	2301      	movs	r3, #1
 8009316:	617b      	str	r3, [r7, #20]
 8009318:	e001      	b.n	800931e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800931a:	2300      	movs	r3, #0
 800931c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d116      	bne.n	8009352 <vTaskStartScheduler+0x82>
	__asm volatile
 8009324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	613b      	str	r3, [r7, #16]
}
 8009336:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009338:	4b12      	ldr	r3, [pc, #72]	; (8009384 <vTaskStartScheduler+0xb4>)
 800933a:	f04f 32ff 	mov.w	r2, #4294967295
 800933e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009340:	4b11      	ldr	r3, [pc, #68]	; (8009388 <vTaskStartScheduler+0xb8>)
 8009342:	2201      	movs	r2, #1
 8009344:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009346:	4b11      	ldr	r3, [pc, #68]	; (800938c <vTaskStartScheduler+0xbc>)
 8009348:	2200      	movs	r2, #0
 800934a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800934c:	f000 fe8c 	bl	800a068 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009350:	e00e      	b.n	8009370 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009358:	d10a      	bne.n	8009370 <vTaskStartScheduler+0xa0>
	__asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	60fb      	str	r3, [r7, #12]
}
 800936c:	bf00      	nop
 800936e:	e7fe      	b.n	800936e <vTaskStartScheduler+0x9e>
}
 8009370:	bf00      	nop
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	0800b41c 	.word	0x0800b41c
 800937c:	08009929 	.word	0x08009929
 8009380:	20000b28 	.word	0x20000b28
 8009384:	20000b24 	.word	0x20000b24
 8009388:	20000b10 	.word	0x20000b10
 800938c:	20000b08 	.word	0x20000b08

08009390 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009390:	b480      	push	{r7}
 8009392:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009394:	4b04      	ldr	r3, [pc, #16]	; (80093a8 <vTaskSuspendAll+0x18>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3301      	adds	r3, #1
 800939a:	4a03      	ldr	r2, [pc, #12]	; (80093a8 <vTaskSuspendAll+0x18>)
 800939c:	6013      	str	r3, [r2, #0]
}
 800939e:	bf00      	nop
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bc80      	pop	{r7}
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	20000b2c 	.word	0x20000b2c

080093ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093b2:	2300      	movs	r3, #0
 80093b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093b6:	2300      	movs	r3, #0
 80093b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093ba:	4b41      	ldr	r3, [pc, #260]	; (80094c0 <xTaskResumeAll+0x114>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10a      	bne.n	80093d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	603b      	str	r3, [r7, #0]
}
 80093d4:	bf00      	nop
 80093d6:	e7fe      	b.n	80093d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093d8:	f000 feb8 	bl	800a14c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093dc:	4b38      	ldr	r3, [pc, #224]	; (80094c0 <xTaskResumeAll+0x114>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	4a37      	ldr	r2, [pc, #220]	; (80094c0 <xTaskResumeAll+0x114>)
 80093e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093e6:	4b36      	ldr	r3, [pc, #216]	; (80094c0 <xTaskResumeAll+0x114>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d161      	bne.n	80094b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80093ee:	4b35      	ldr	r3, [pc, #212]	; (80094c4 <xTaskResumeAll+0x118>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d05d      	beq.n	80094b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093f6:	e02e      	b.n	8009456 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80093f8:	4b33      	ldr	r3, [pc, #204]	; (80094c8 <xTaskResumeAll+0x11c>)
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	3318      	adds	r3, #24
 8009404:	4618      	mov	r0, r3
 8009406:	f7fe ffb4 	bl	8008372 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	3304      	adds	r3, #4
 800940e:	4618      	mov	r0, r3
 8009410:	f7fe ffaf 	bl	8008372 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009418:	2201      	movs	r2, #1
 800941a:	409a      	lsls	r2, r3
 800941c:	4b2b      	ldr	r3, [pc, #172]	; (80094cc <xTaskResumeAll+0x120>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4313      	orrs	r3, r2
 8009422:	4a2a      	ldr	r2, [pc, #168]	; (80094cc <xTaskResumeAll+0x120>)
 8009424:	6013      	str	r3, [r2, #0]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800942a:	4613      	mov	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4a27      	ldr	r2, [pc, #156]	; (80094d0 <xTaskResumeAll+0x124>)
 8009434:	441a      	add	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3304      	adds	r3, #4
 800943a:	4619      	mov	r1, r3
 800943c:	4610      	mov	r0, r2
 800943e:	f7fe ff3d 	bl	80082bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009446:	4b23      	ldr	r3, [pc, #140]	; (80094d4 <xTaskResumeAll+0x128>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944c:	429a      	cmp	r2, r3
 800944e:	d302      	bcc.n	8009456 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009450:	4b21      	ldr	r3, [pc, #132]	; (80094d8 <xTaskResumeAll+0x12c>)
 8009452:	2201      	movs	r2, #1
 8009454:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009456:	4b1c      	ldr	r3, [pc, #112]	; (80094c8 <xTaskResumeAll+0x11c>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1cc      	bne.n	80093f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d001      	beq.n	8009468 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009464:	f000 fb16 	bl	8009a94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009468:	4b1c      	ldr	r3, [pc, #112]	; (80094dc <xTaskResumeAll+0x130>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d010      	beq.n	8009496 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009474:	f000 f836 	bl	80094e4 <xTaskIncrementTick>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d002      	beq.n	8009484 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800947e:	4b16      	ldr	r3, [pc, #88]	; (80094d8 <xTaskResumeAll+0x12c>)
 8009480:	2201      	movs	r2, #1
 8009482:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	3b01      	subs	r3, #1
 8009488:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1f1      	bne.n	8009474 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009490:	4b12      	ldr	r3, [pc, #72]	; (80094dc <xTaskResumeAll+0x130>)
 8009492:	2200      	movs	r2, #0
 8009494:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009496:	4b10      	ldr	r3, [pc, #64]	; (80094d8 <xTaskResumeAll+0x12c>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d009      	beq.n	80094b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800949e:	2301      	movs	r3, #1
 80094a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094a2:	4b0f      	ldr	r3, [pc, #60]	; (80094e0 <xTaskResumeAll+0x134>)
 80094a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094b2:	f000 fe7b 	bl	800a1ac <vPortExitCritical>

	return xAlreadyYielded;
 80094b6:	68bb      	ldr	r3, [r7, #8]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	20000b2c 	.word	0x20000b2c
 80094c4:	20000b04 	.word	0x20000b04
 80094c8:	20000ac4 	.word	0x20000ac4
 80094cc:	20000b0c 	.word	0x20000b0c
 80094d0:	20000a08 	.word	0x20000a08
 80094d4:	20000a04 	.word	0x20000a04
 80094d8:	20000b18 	.word	0x20000b18
 80094dc:	20000b14 	.word	0x20000b14
 80094e0:	e000ed04 	.word	0xe000ed04

080094e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80094ea:	2300      	movs	r3, #0
 80094ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094ee:	4b51      	ldr	r3, [pc, #324]	; (8009634 <xTaskIncrementTick+0x150>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f040 808d 	bne.w	8009612 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094f8:	4b4f      	ldr	r3, [pc, #316]	; (8009638 <xTaskIncrementTick+0x154>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3301      	adds	r3, #1
 80094fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009500:	4a4d      	ldr	r2, [pc, #308]	; (8009638 <xTaskIncrementTick+0x154>)
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d120      	bne.n	800954e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800950c:	4b4b      	ldr	r3, [pc, #300]	; (800963c <xTaskIncrementTick+0x158>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00a      	beq.n	800952c <xTaskIncrementTick+0x48>
	__asm volatile
 8009516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	603b      	str	r3, [r7, #0]
}
 8009528:	bf00      	nop
 800952a:	e7fe      	b.n	800952a <xTaskIncrementTick+0x46>
 800952c:	4b43      	ldr	r3, [pc, #268]	; (800963c <xTaskIncrementTick+0x158>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60fb      	str	r3, [r7, #12]
 8009532:	4b43      	ldr	r3, [pc, #268]	; (8009640 <xTaskIncrementTick+0x15c>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a41      	ldr	r2, [pc, #260]	; (800963c <xTaskIncrementTick+0x158>)
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	4a41      	ldr	r2, [pc, #260]	; (8009640 <xTaskIncrementTick+0x15c>)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6013      	str	r3, [r2, #0]
 8009540:	4b40      	ldr	r3, [pc, #256]	; (8009644 <xTaskIncrementTick+0x160>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3301      	adds	r3, #1
 8009546:	4a3f      	ldr	r2, [pc, #252]	; (8009644 <xTaskIncrementTick+0x160>)
 8009548:	6013      	str	r3, [r2, #0]
 800954a:	f000 faa3 	bl	8009a94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800954e:	4b3e      	ldr	r3, [pc, #248]	; (8009648 <xTaskIncrementTick+0x164>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	429a      	cmp	r2, r3
 8009556:	d34d      	bcc.n	80095f4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009558:	4b38      	ldr	r3, [pc, #224]	; (800963c <xTaskIncrementTick+0x158>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d101      	bne.n	8009566 <xTaskIncrementTick+0x82>
 8009562:	2301      	movs	r3, #1
 8009564:	e000      	b.n	8009568 <xTaskIncrementTick+0x84>
 8009566:	2300      	movs	r3, #0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d004      	beq.n	8009576 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800956c:	4b36      	ldr	r3, [pc, #216]	; (8009648 <xTaskIncrementTick+0x164>)
 800956e:	f04f 32ff 	mov.w	r2, #4294967295
 8009572:	601a      	str	r2, [r3, #0]
					break;
 8009574:	e03e      	b.n	80095f4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009576:	4b31      	ldr	r3, [pc, #196]	; (800963c <xTaskIncrementTick+0x158>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	429a      	cmp	r2, r3
 800958c:	d203      	bcs.n	8009596 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800958e:	4a2e      	ldr	r2, [pc, #184]	; (8009648 <xTaskIncrementTick+0x164>)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6013      	str	r3, [r2, #0]
						break;
 8009594:	e02e      	b.n	80095f4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	3304      	adds	r3, #4
 800959a:	4618      	mov	r0, r3
 800959c:	f7fe fee9 	bl	8008372 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d004      	beq.n	80095b2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	3318      	adds	r3, #24
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fe fee0 	bl	8008372 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b6:	2201      	movs	r2, #1
 80095b8:	409a      	lsls	r2, r3
 80095ba:	4b24      	ldr	r3, [pc, #144]	; (800964c <xTaskIncrementTick+0x168>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4313      	orrs	r3, r2
 80095c0:	4a22      	ldr	r2, [pc, #136]	; (800964c <xTaskIncrementTick+0x168>)
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c8:	4613      	mov	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4a1f      	ldr	r2, [pc, #124]	; (8009650 <xTaskIncrementTick+0x16c>)
 80095d2:	441a      	add	r2, r3
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	3304      	adds	r3, #4
 80095d8:	4619      	mov	r1, r3
 80095da:	4610      	mov	r0, r2
 80095dc:	f7fe fe6e 	bl	80082bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e4:	4b1b      	ldr	r3, [pc, #108]	; (8009654 <xTaskIncrementTick+0x170>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d3b4      	bcc.n	8009558 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80095ee:	2301      	movs	r3, #1
 80095f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095f2:	e7b1      	b.n	8009558 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095f4:	4b17      	ldr	r3, [pc, #92]	; (8009654 <xTaskIncrementTick+0x170>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fa:	4915      	ldr	r1, [pc, #84]	; (8009650 <xTaskIncrementTick+0x16c>)
 80095fc:	4613      	mov	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	440b      	add	r3, r1
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d907      	bls.n	800961c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800960c:	2301      	movs	r3, #1
 800960e:	617b      	str	r3, [r7, #20]
 8009610:	e004      	b.n	800961c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009612:	4b11      	ldr	r3, [pc, #68]	; (8009658 <xTaskIncrementTick+0x174>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	3301      	adds	r3, #1
 8009618:	4a0f      	ldr	r2, [pc, #60]	; (8009658 <xTaskIncrementTick+0x174>)
 800961a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800961c:	4b0f      	ldr	r3, [pc, #60]	; (800965c <xTaskIncrementTick+0x178>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009624:	2301      	movs	r3, #1
 8009626:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009628:	697b      	ldr	r3, [r7, #20]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3718      	adds	r7, #24
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20000b2c 	.word	0x20000b2c
 8009638:	20000b08 	.word	0x20000b08
 800963c:	20000abc 	.word	0x20000abc
 8009640:	20000ac0 	.word	0x20000ac0
 8009644:	20000b1c 	.word	0x20000b1c
 8009648:	20000b24 	.word	0x20000b24
 800964c:	20000b0c 	.word	0x20000b0c
 8009650:	20000a08 	.word	0x20000a08
 8009654:	20000a04 	.word	0x20000a04
 8009658:	20000b14 	.word	0x20000b14
 800965c:	20000b18 	.word	0x20000b18

08009660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009660:	b480      	push	{r7}
 8009662:	b087      	sub	sp, #28
 8009664:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009666:	4b26      	ldr	r3, [pc, #152]	; (8009700 <vTaskSwitchContext+0xa0>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d003      	beq.n	8009676 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800966e:	4b25      	ldr	r3, [pc, #148]	; (8009704 <vTaskSwitchContext+0xa4>)
 8009670:	2201      	movs	r2, #1
 8009672:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009674:	e03f      	b.n	80096f6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009676:	4b23      	ldr	r3, [pc, #140]	; (8009704 <vTaskSwitchContext+0xa4>)
 8009678:	2200      	movs	r2, #0
 800967a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800967c:	4b22      	ldr	r3, [pc, #136]	; (8009708 <vTaskSwitchContext+0xa8>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	fab3 f383 	clz	r3, r3
 8009688:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800968a:	7afb      	ldrb	r3, [r7, #11]
 800968c:	f1c3 031f 	rsb	r3, r3, #31
 8009690:	617b      	str	r3, [r7, #20]
 8009692:	491e      	ldr	r1, [pc, #120]	; (800970c <vTaskSwitchContext+0xac>)
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	4613      	mov	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	440b      	add	r3, r1
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d10a      	bne.n	80096bc <vTaskSwitchContext+0x5c>
	__asm volatile
 80096a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	607b      	str	r3, [r7, #4]
}
 80096b8:	bf00      	nop
 80096ba:	e7fe      	b.n	80096ba <vTaskSwitchContext+0x5a>
 80096bc:	697a      	ldr	r2, [r7, #20]
 80096be:	4613      	mov	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4413      	add	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4a11      	ldr	r2, [pc, #68]	; (800970c <vTaskSwitchContext+0xac>)
 80096c8:	4413      	add	r3, r2
 80096ca:	613b      	str	r3, [r7, #16]
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	605a      	str	r2, [r3, #4]
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	3308      	adds	r3, #8
 80096de:	429a      	cmp	r2, r3
 80096e0:	d104      	bne.n	80096ec <vTaskSwitchContext+0x8c>
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	685a      	ldr	r2, [r3, #4]
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	605a      	str	r2, [r3, #4]
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	4a07      	ldr	r2, [pc, #28]	; (8009710 <vTaskSwitchContext+0xb0>)
 80096f4:	6013      	str	r3, [r2, #0]
}
 80096f6:	bf00      	nop
 80096f8:	371c      	adds	r7, #28
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bc80      	pop	{r7}
 80096fe:	4770      	bx	lr
 8009700:	20000b2c 	.word	0x20000b2c
 8009704:	20000b18 	.word	0x20000b18
 8009708:	20000b0c 	.word	0x20000b0c
 800970c:	20000a08 	.word	0x20000a08
 8009710:	20000a04 	.word	0x20000a04

08009714 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10a      	bne.n	800973a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	60fb      	str	r3, [r7, #12]
}
 8009736:	bf00      	nop
 8009738:	e7fe      	b.n	8009738 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800973a:	4b07      	ldr	r3, [pc, #28]	; (8009758 <vTaskPlaceOnEventList+0x44>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3318      	adds	r3, #24
 8009740:	4619      	mov	r1, r3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7fe fddd 	bl	8008302 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009748:	2101      	movs	r1, #1
 800974a:	6838      	ldr	r0, [r7, #0]
 800974c:	f000 fba4 	bl	8009e98 <prvAddCurrentTaskToDelayedList>
}
 8009750:	bf00      	nop
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	20000a04 	.word	0x20000a04

0800975c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10a      	bne.n	8009788 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	60fb      	str	r3, [r7, #12]
}
 8009784:	bf00      	nop
 8009786:	e7fe      	b.n	8009786 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	3318      	adds	r3, #24
 800978c:	4618      	mov	r0, r3
 800978e:	f7fe fdf0 	bl	8008372 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009792:	4b1d      	ldr	r3, [pc, #116]	; (8009808 <xTaskRemoveFromEventList+0xac>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d11c      	bne.n	80097d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	3304      	adds	r3, #4
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fe fde7 	bl	8008372 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a8:	2201      	movs	r2, #1
 80097aa:	409a      	lsls	r2, r3
 80097ac:	4b17      	ldr	r3, [pc, #92]	; (800980c <xTaskRemoveFromEventList+0xb0>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	4a16      	ldr	r2, [pc, #88]	; (800980c <xTaskRemoveFromEventList+0xb0>)
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ba:	4613      	mov	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4a13      	ldr	r2, [pc, #76]	; (8009810 <xTaskRemoveFromEventList+0xb4>)
 80097c4:	441a      	add	r2, r3
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	3304      	adds	r3, #4
 80097ca:	4619      	mov	r1, r3
 80097cc:	4610      	mov	r0, r2
 80097ce:	f7fe fd75 	bl	80082bc <vListInsertEnd>
 80097d2:	e005      	b.n	80097e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	3318      	adds	r3, #24
 80097d8:	4619      	mov	r1, r3
 80097da:	480e      	ldr	r0, [pc, #56]	; (8009814 <xTaskRemoveFromEventList+0xb8>)
 80097dc:	f7fe fd6e 	bl	80082bc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e4:	4b0c      	ldr	r3, [pc, #48]	; (8009818 <xTaskRemoveFromEventList+0xbc>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d905      	bls.n	80097fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097ee:	2301      	movs	r3, #1
 80097f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80097f2:	4b0a      	ldr	r3, [pc, #40]	; (800981c <xTaskRemoveFromEventList+0xc0>)
 80097f4:	2201      	movs	r2, #1
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	e001      	b.n	80097fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80097fa:	2300      	movs	r3, #0
 80097fc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80097fe:	697b      	ldr	r3, [r7, #20]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3718      	adds	r7, #24
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20000b2c 	.word	0x20000b2c
 800980c:	20000b0c 	.word	0x20000b0c
 8009810:	20000a08 	.word	0x20000a08
 8009814:	20000ac4 	.word	0x20000ac4
 8009818:	20000a04 	.word	0x20000a04
 800981c:	20000b18 	.word	0x20000b18

08009820 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009828:	4b06      	ldr	r3, [pc, #24]	; (8009844 <vTaskInternalSetTimeOutState+0x24>)
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009830:	4b05      	ldr	r3, [pc, #20]	; (8009848 <vTaskInternalSetTimeOutState+0x28>)
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	605a      	str	r2, [r3, #4]
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	bc80      	pop	{r7}
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	20000b1c 	.word	0x20000b1c
 8009848:	20000b08 	.word	0x20000b08

0800984c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10a      	bne.n	8009872 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	613b      	str	r3, [r7, #16]
}
 800986e:	bf00      	nop
 8009870:	e7fe      	b.n	8009870 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10a      	bne.n	800988e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	60fb      	str	r3, [r7, #12]
}
 800988a:	bf00      	nop
 800988c:	e7fe      	b.n	800988c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800988e:	f000 fc5d 	bl	800a14c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009892:	4b1d      	ldr	r3, [pc, #116]	; (8009908 <xTaskCheckForTimeOut+0xbc>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	69ba      	ldr	r2, [r7, #24]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098aa:	d102      	bne.n	80098b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80098ac:	2300      	movs	r3, #0
 80098ae:	61fb      	str	r3, [r7, #28]
 80098b0:	e023      	b.n	80098fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	4b15      	ldr	r3, [pc, #84]	; (800990c <xTaskCheckForTimeOut+0xc0>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d007      	beq.n	80098ce <xTaskCheckForTimeOut+0x82>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d302      	bcc.n	80098ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80098c8:	2301      	movs	r3, #1
 80098ca:	61fb      	str	r3, [r7, #28]
 80098cc:	e015      	b.n	80098fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d20b      	bcs.n	80098f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	1ad2      	subs	r2, r2, r3
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7ff ff9b 	bl	8009820 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098ea:	2300      	movs	r3, #0
 80098ec:	61fb      	str	r3, [r7, #28]
 80098ee:	e004      	b.n	80098fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	2200      	movs	r2, #0
 80098f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80098f6:	2301      	movs	r3, #1
 80098f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098fa:	f000 fc57 	bl	800a1ac <vPortExitCritical>

	return xReturn;
 80098fe:	69fb      	ldr	r3, [r7, #28]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3720      	adds	r7, #32
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	20000b08 	.word	0x20000b08
 800990c:	20000b1c 	.word	0x20000b1c

08009910 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009910:	b480      	push	{r7}
 8009912:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009914:	4b03      	ldr	r3, [pc, #12]	; (8009924 <vTaskMissedYield+0x14>)
 8009916:	2201      	movs	r2, #1
 8009918:	601a      	str	r2, [r3, #0]
}
 800991a:	bf00      	nop
 800991c:	46bd      	mov	sp, r7
 800991e:	bc80      	pop	{r7}
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	20000b18 	.word	0x20000b18

08009928 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009930:	f000 f852 	bl	80099d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009934:	4b06      	ldr	r3, [pc, #24]	; (8009950 <prvIdleTask+0x28>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d9f9      	bls.n	8009930 <prvIdleTask+0x8>
			{
				taskYIELD();
 800993c:	4b05      	ldr	r3, [pc, #20]	; (8009954 <prvIdleTask+0x2c>)
 800993e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009942:	601a      	str	r2, [r3, #0]
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800994c:	e7f0      	b.n	8009930 <prvIdleTask+0x8>
 800994e:	bf00      	nop
 8009950:	20000a08 	.word	0x20000a08
 8009954:	e000ed04 	.word	0xe000ed04

08009958 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800995e:	2300      	movs	r3, #0
 8009960:	607b      	str	r3, [r7, #4]
 8009962:	e00c      	b.n	800997e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	4613      	mov	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4a12      	ldr	r2, [pc, #72]	; (80099b8 <prvInitialiseTaskLists+0x60>)
 8009970:	4413      	add	r3, r2
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe fc77 	bl	8008266 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	3301      	adds	r3, #1
 800997c:	607b      	str	r3, [r7, #4]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b06      	cmp	r3, #6
 8009982:	d9ef      	bls.n	8009964 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009984:	480d      	ldr	r0, [pc, #52]	; (80099bc <prvInitialiseTaskLists+0x64>)
 8009986:	f7fe fc6e 	bl	8008266 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800998a:	480d      	ldr	r0, [pc, #52]	; (80099c0 <prvInitialiseTaskLists+0x68>)
 800998c:	f7fe fc6b 	bl	8008266 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009990:	480c      	ldr	r0, [pc, #48]	; (80099c4 <prvInitialiseTaskLists+0x6c>)
 8009992:	f7fe fc68 	bl	8008266 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009996:	480c      	ldr	r0, [pc, #48]	; (80099c8 <prvInitialiseTaskLists+0x70>)
 8009998:	f7fe fc65 	bl	8008266 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800999c:	480b      	ldr	r0, [pc, #44]	; (80099cc <prvInitialiseTaskLists+0x74>)
 800999e:	f7fe fc62 	bl	8008266 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80099a2:	4b0b      	ldr	r3, [pc, #44]	; (80099d0 <prvInitialiseTaskLists+0x78>)
 80099a4:	4a05      	ldr	r2, [pc, #20]	; (80099bc <prvInitialiseTaskLists+0x64>)
 80099a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80099a8:	4b0a      	ldr	r3, [pc, #40]	; (80099d4 <prvInitialiseTaskLists+0x7c>)
 80099aa:	4a05      	ldr	r2, [pc, #20]	; (80099c0 <prvInitialiseTaskLists+0x68>)
 80099ac:	601a      	str	r2, [r3, #0]
}
 80099ae:	bf00      	nop
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	20000a08 	.word	0x20000a08
 80099bc:	20000a94 	.word	0x20000a94
 80099c0:	20000aa8 	.word	0x20000aa8
 80099c4:	20000ac4 	.word	0x20000ac4
 80099c8:	20000ad8 	.word	0x20000ad8
 80099cc:	20000af0 	.word	0x20000af0
 80099d0:	20000abc 	.word	0x20000abc
 80099d4:	20000ac0 	.word	0x20000ac0

080099d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099de:	e019      	b.n	8009a14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099e0:	f000 fbb4 	bl	800a14c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80099e4:	4b10      	ldr	r3, [pc, #64]	; (8009a28 <prvCheckTasksWaitingTermination+0x50>)
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	3304      	adds	r3, #4
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fe fcbe 	bl	8008372 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80099f6:	4b0d      	ldr	r3, [pc, #52]	; (8009a2c <prvCheckTasksWaitingTermination+0x54>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3b01      	subs	r3, #1
 80099fc:	4a0b      	ldr	r2, [pc, #44]	; (8009a2c <prvCheckTasksWaitingTermination+0x54>)
 80099fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a00:	4b0b      	ldr	r3, [pc, #44]	; (8009a30 <prvCheckTasksWaitingTermination+0x58>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	4a0a      	ldr	r2, [pc, #40]	; (8009a30 <prvCheckTasksWaitingTermination+0x58>)
 8009a08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a0a:	f000 fbcf 	bl	800a1ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f810 	bl	8009a34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a14:	4b06      	ldr	r3, [pc, #24]	; (8009a30 <prvCheckTasksWaitingTermination+0x58>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1e1      	bne.n	80099e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a1c:	bf00      	nop
 8009a1e:	bf00      	nop
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20000ad8 	.word	0x20000ad8
 8009a2c:	20000b04 	.word	0x20000b04
 8009a30:	20000aec 	.word	0x20000aec

08009a34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d108      	bne.n	8009a58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 fd42 	bl	800a4d4 <vPortFree>
				vPortFree( pxTCB );
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fd3f 	bl	800a4d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a56:	e018      	b.n	8009a8a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d103      	bne.n	8009a6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fd36 	bl	800a4d4 <vPortFree>
	}
 8009a68:	e00f      	b.n	8009a8a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d00a      	beq.n	8009a8a <prvDeleteTCB+0x56>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	60fb      	str	r3, [r7, #12]
}
 8009a86:	bf00      	nop
 8009a88:	e7fe      	b.n	8009a88 <prvDeleteTCB+0x54>
	}
 8009a8a:	bf00      	nop
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
	...

08009a94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a9a:	4b0e      	ldr	r3, [pc, #56]	; (8009ad4 <prvResetNextTaskUnblockTime+0x40>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <prvResetNextTaskUnblockTime+0x14>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e000      	b.n	8009aaa <prvResetNextTaskUnblockTime+0x16>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d004      	beq.n	8009ab8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009aae:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <prvResetNextTaskUnblockTime+0x44>)
 8009ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ab6:	e008      	b.n	8009aca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009ab8:	4b06      	ldr	r3, [pc, #24]	; (8009ad4 <prvResetNextTaskUnblockTime+0x40>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	4a04      	ldr	r2, [pc, #16]	; (8009ad8 <prvResetNextTaskUnblockTime+0x44>)
 8009ac8:	6013      	str	r3, [r2, #0]
}
 8009aca:	bf00      	nop
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bc80      	pop	{r7}
 8009ad2:	4770      	bx	lr
 8009ad4:	20000abc 	.word	0x20000abc
 8009ad8:	20000b24 	.word	0x20000b24

08009adc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ae2:	4b0b      	ldr	r3, [pc, #44]	; (8009b10 <xTaskGetSchedulerState+0x34>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d102      	bne.n	8009af0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009aea:	2301      	movs	r3, #1
 8009aec:	607b      	str	r3, [r7, #4]
 8009aee:	e008      	b.n	8009b02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009af0:	4b08      	ldr	r3, [pc, #32]	; (8009b14 <xTaskGetSchedulerState+0x38>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d102      	bne.n	8009afe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009af8:	2302      	movs	r3, #2
 8009afa:	607b      	str	r3, [r7, #4]
 8009afc:	e001      	b.n	8009b02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009afe:	2300      	movs	r3, #0
 8009b00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b02:	687b      	ldr	r3, [r7, #4]
	}
 8009b04:	4618      	mov	r0, r3
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bc80      	pop	{r7}
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	20000b10 	.word	0x20000b10
 8009b14:	20000b2c 	.word	0x20000b2c

08009b18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009b24:	2300      	movs	r3, #0
 8009b26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d06e      	beq.n	8009c0c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b32:	4b39      	ldr	r3, [pc, #228]	; (8009c18 <xTaskPriorityInherit+0x100>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d25e      	bcs.n	8009bfa <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	db06      	blt.n	8009b52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b44:	4b34      	ldr	r3, [pc, #208]	; (8009c18 <xTaskPriorityInherit+0x100>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4a:	f1c3 0207 	rsb	r2, r3, #7
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	6959      	ldr	r1, [r3, #20]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4a2e      	ldr	r2, [pc, #184]	; (8009c1c <xTaskPriorityInherit+0x104>)
 8009b64:	4413      	add	r3, r2
 8009b66:	4299      	cmp	r1, r3
 8009b68:	d101      	bne.n	8009b6e <xTaskPriorityInherit+0x56>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e000      	b.n	8009b70 <xTaskPriorityInherit+0x58>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d03a      	beq.n	8009bea <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	3304      	adds	r3, #4
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fe fbfa 	bl	8008372 <uxListRemove>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d115      	bne.n	8009bb0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b88:	4924      	ldr	r1, [pc, #144]	; (8009c1c <xTaskPriorityInherit+0x104>)
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	4413      	add	r3, r2
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	440b      	add	r3, r1
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10a      	bne.n	8009bb0 <xTaskPriorityInherit+0x98>
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba4:	43da      	mvns	r2, r3
 8009ba6:	4b1e      	ldr	r3, [pc, #120]	; (8009c20 <xTaskPriorityInherit+0x108>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4013      	ands	r3, r2
 8009bac:	4a1c      	ldr	r2, [pc, #112]	; (8009c20 <xTaskPriorityInherit+0x108>)
 8009bae:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009bb0:	4b19      	ldr	r3, [pc, #100]	; (8009c18 <xTaskPriorityInherit+0x100>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	409a      	lsls	r2, r3
 8009bc2:	4b17      	ldr	r3, [pc, #92]	; (8009c20 <xTaskPriorityInherit+0x108>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	4a15      	ldr	r2, [pc, #84]	; (8009c20 <xTaskPriorityInherit+0x108>)
 8009bca:	6013      	str	r3, [r2, #0]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4a10      	ldr	r2, [pc, #64]	; (8009c1c <xTaskPriorityInherit+0x104>)
 8009bda:	441a      	add	r2, r3
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	3304      	adds	r3, #4
 8009be0:	4619      	mov	r1, r3
 8009be2:	4610      	mov	r0, r2
 8009be4:	f7fe fb6a 	bl	80082bc <vListInsertEnd>
 8009be8:	e004      	b.n	8009bf4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009bea:	4b0b      	ldr	r3, [pc, #44]	; (8009c18 <xTaskPriorityInherit+0x100>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	e008      	b.n	8009c0c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bfe:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <xTaskPriorityInherit+0x100>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d201      	bcs.n	8009c0c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
	}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	20000a04 	.word	0x20000a04
 8009c1c:	20000a08 	.word	0x20000a08
 8009c20:	20000b0c 	.word	0x20000b0c

08009c24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b086      	sub	sp, #24
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c30:	2300      	movs	r3, #0
 8009c32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d06e      	beq.n	8009d18 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c3a:	4b3a      	ldr	r3, [pc, #232]	; (8009d24 <xTaskPriorityDisinherit+0x100>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	693a      	ldr	r2, [r7, #16]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d00a      	beq.n	8009c5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	60fb      	str	r3, [r7, #12]
}
 8009c56:	bf00      	nop
 8009c58:	e7fe      	b.n	8009c58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10a      	bne.n	8009c78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	60bb      	str	r3, [r7, #8]
}
 8009c74:	bf00      	nop
 8009c76:	e7fe      	b.n	8009c76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c7c:	1e5a      	subs	r2, r3, #1
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d044      	beq.n	8009d18 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d140      	bne.n	8009d18 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	3304      	adds	r3, #4
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe fb69 	bl	8008372 <uxListRemove>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d115      	bne.n	8009cd2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009caa:	491f      	ldr	r1, [pc, #124]	; (8009d28 <xTaskPriorityDisinherit+0x104>)
 8009cac:	4613      	mov	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	4413      	add	r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	440b      	add	r3, r1
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d10a      	bne.n	8009cd2 <xTaskPriorityDisinherit+0xae>
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc6:	43da      	mvns	r2, r3
 8009cc8:	4b18      	ldr	r3, [pc, #96]	; (8009d2c <xTaskPriorityDisinherit+0x108>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4013      	ands	r3, r2
 8009cce:	4a17      	ldr	r2, [pc, #92]	; (8009d2c <xTaskPriorityDisinherit+0x108>)
 8009cd0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cde:	f1c3 0207 	rsb	r2, r3, #7
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cea:	2201      	movs	r2, #1
 8009cec:	409a      	lsls	r2, r3
 8009cee:	4b0f      	ldr	r3, [pc, #60]	; (8009d2c <xTaskPriorityDisinherit+0x108>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	4a0d      	ldr	r2, [pc, #52]	; (8009d2c <xTaskPriorityDisinherit+0x108>)
 8009cf6:	6013      	str	r3, [r2, #0]
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4a08      	ldr	r2, [pc, #32]	; (8009d28 <xTaskPriorityDisinherit+0x104>)
 8009d06:	441a      	add	r2, r3
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4610      	mov	r0, r2
 8009d10:	f7fe fad4 	bl	80082bc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d14:	2301      	movs	r3, #1
 8009d16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d18:	697b      	ldr	r3, [r7, #20]
	}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	20000a04 	.word	0x20000a04
 8009d28:	20000a08 	.word	0x20000a08
 8009d2c:	20000b0c 	.word	0x20000b0c

08009d30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b088      	sub	sp, #32
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 8088 	beq.w	8009e5a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10a      	bne.n	8009d68 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d56:	f383 8811 	msr	BASEPRI, r3
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	60fb      	str	r3, [r7, #12]
}
 8009d64:	bf00      	nop
 8009d66:	e7fe      	b.n	8009d66 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d6c:	683a      	ldr	r2, [r7, #0]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d902      	bls.n	8009d78 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	61fb      	str	r3, [r7, #28]
 8009d76:	e002      	b.n	8009d7e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d7c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d82:	69fa      	ldr	r2, [r7, #28]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d068      	beq.n	8009e5a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d163      	bne.n	8009e5a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009d92:	4b34      	ldr	r3, [pc, #208]	; (8009e64 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	69ba      	ldr	r2, [r7, #24]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d10a      	bne.n	8009db2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	60bb      	str	r3, [r7, #8]
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	69fa      	ldr	r2, [r7, #28]
 8009dbc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	db04      	blt.n	8009dd0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	f1c3 0207 	rsb	r2, r3, #7
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	6959      	ldr	r1, [r3, #20]
 8009dd4:	693a      	ldr	r2, [r7, #16]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4a22      	ldr	r2, [pc, #136]	; (8009e68 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009de0:	4413      	add	r3, r2
 8009de2:	4299      	cmp	r1, r3
 8009de4:	d101      	bne.n	8009dea <vTaskPriorityDisinheritAfterTimeout+0xba>
 8009de6:	2301      	movs	r3, #1
 8009de8:	e000      	b.n	8009dec <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8009dea:	2300      	movs	r3, #0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d034      	beq.n	8009e5a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	3304      	adds	r3, #4
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fe fabc 	bl	8008372 <uxListRemove>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d115      	bne.n	8009e2c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e04:	4918      	ldr	r1, [pc, #96]	; (8009e68 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009e06:	4613      	mov	r3, r2
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4413      	add	r3, r2
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	440b      	add	r3, r1
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10a      	bne.n	8009e2c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e20:	43da      	mvns	r2, r3
 8009e22:	4b12      	ldr	r3, [pc, #72]	; (8009e6c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4013      	ands	r3, r2
 8009e28:	4a10      	ldr	r2, [pc, #64]	; (8009e6c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009e2a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e30:	2201      	movs	r2, #1
 8009e32:	409a      	lsls	r2, r3
 8009e34:	4b0d      	ldr	r3, [pc, #52]	; (8009e6c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	4a0c      	ldr	r2, [pc, #48]	; (8009e6c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e42:	4613      	mov	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	4a07      	ldr	r2, [pc, #28]	; (8009e68 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009e4c:	441a      	add	r2, r3
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	3304      	adds	r3, #4
 8009e52:	4619      	mov	r1, r3
 8009e54:	4610      	mov	r0, r2
 8009e56:	f7fe fa31 	bl	80082bc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e5a:	bf00      	nop
 8009e5c:	3720      	adds	r7, #32
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	20000a04 	.word	0x20000a04
 8009e68:	20000a08 	.word	0x20000a08
 8009e6c:	20000b0c 	.word	0x20000b0c

08009e70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009e70:	b480      	push	{r7}
 8009e72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009e74:	4b07      	ldr	r3, [pc, #28]	; (8009e94 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d004      	beq.n	8009e86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009e7c:	4b05      	ldr	r3, [pc, #20]	; (8009e94 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e82:	3201      	adds	r2, #1
 8009e84:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009e86:	4b03      	ldr	r3, [pc, #12]	; (8009e94 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e88:	681b      	ldr	r3, [r3, #0]
	}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bc80      	pop	{r7}
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	20000a04 	.word	0x20000a04

08009e98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ea2:	4b29      	ldr	r3, [pc, #164]	; (8009f48 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ea8:	4b28      	ldr	r3, [pc, #160]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3304      	adds	r3, #4
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fe fa5f 	bl	8008372 <uxListRemove>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10b      	bne.n	8009ed2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009eba:	4b24      	ldr	r3, [pc, #144]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec6:	43da      	mvns	r2, r3
 8009ec8:	4b21      	ldr	r3, [pc, #132]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4013      	ands	r3, r2
 8009ece:	4a20      	ldr	r2, [pc, #128]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ed0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed8:	d10a      	bne.n	8009ef0 <prvAddCurrentTaskToDelayedList+0x58>
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d007      	beq.n	8009ef0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ee0:	4b1a      	ldr	r3, [pc, #104]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	481a      	ldr	r0, [pc, #104]	; (8009f54 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009eea:	f7fe f9e7 	bl	80082bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009eee:	e026      	b.n	8009f3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ef8:	4b14      	ldr	r3, [pc, #80]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d209      	bcs.n	8009f1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f08:	4b13      	ldr	r3, [pc, #76]	; (8009f58 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	4b0f      	ldr	r3, [pc, #60]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3304      	adds	r3, #4
 8009f12:	4619      	mov	r1, r3
 8009f14:	4610      	mov	r0, r2
 8009f16:	f7fe f9f4 	bl	8008302 <vListInsert>
}
 8009f1a:	e010      	b.n	8009f3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f1c:	4b0f      	ldr	r3, [pc, #60]	; (8009f5c <prvAddCurrentTaskToDelayedList+0xc4>)
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	4b0a      	ldr	r3, [pc, #40]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3304      	adds	r3, #4
 8009f26:	4619      	mov	r1, r3
 8009f28:	4610      	mov	r0, r2
 8009f2a:	f7fe f9ea 	bl	8008302 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f2e:	4b0c      	ldr	r3, [pc, #48]	; (8009f60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d202      	bcs.n	8009f3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009f38:	4a09      	ldr	r2, [pc, #36]	; (8009f60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	6013      	str	r3, [r2, #0]
}
 8009f3e:	bf00      	nop
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	20000b08 	.word	0x20000b08
 8009f4c:	20000a04 	.word	0x20000a04
 8009f50:	20000b0c 	.word	0x20000b0c
 8009f54:	20000af0 	.word	0x20000af0
 8009f58:	20000ac0 	.word	0x20000ac0
 8009f5c:	20000abc 	.word	0x20000abc
 8009f60:	20000b24 	.word	0x20000b24

08009f64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3b04      	subs	r3, #4
 8009f74:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	3b04      	subs	r3, #4
 8009f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	f023 0201 	bic.w	r2, r3, #1
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3b04      	subs	r3, #4
 8009f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f94:	4a08      	ldr	r2, [pc, #32]	; (8009fb8 <pxPortInitialiseStack+0x54>)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3b14      	subs	r3, #20
 8009f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3b20      	subs	r3, #32
 8009faa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009fac:	68fb      	ldr	r3, [r7, #12]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3714      	adds	r7, #20
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bc80      	pop	{r7}
 8009fb6:	4770      	bx	lr
 8009fb8:	08009fbd 	.word	0x08009fbd

08009fbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009fc6:	4b12      	ldr	r3, [pc, #72]	; (800a010 <prvTaskExitError+0x54>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fce:	d00a      	beq.n	8009fe6 <prvTaskExitError+0x2a>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	60fb      	str	r3, [r7, #12]
}
 8009fe2:	bf00      	nop
 8009fe4:	e7fe      	b.n	8009fe4 <prvTaskExitError+0x28>
	__asm volatile
 8009fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fea:	f383 8811 	msr	BASEPRI, r3
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	60bb      	str	r3, [r7, #8]
}
 8009ff8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ffa:	bf00      	nop
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d0fc      	beq.n	8009ffc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a002:	bf00      	nop
 800a004:	bf00      	nop
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	bc80      	pop	{r7}
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	20000034 	.word	0x20000034
	...

0800a020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a020:	4b07      	ldr	r3, [pc, #28]	; (800a040 <pxCurrentTCBConst2>)
 800a022:	6819      	ldr	r1, [r3, #0]
 800a024:	6808      	ldr	r0, [r1, #0]
 800a026:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a02a:	f380 8809 	msr	PSP, r0
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f04f 0000 	mov.w	r0, #0
 800a036:	f380 8811 	msr	BASEPRI, r0
 800a03a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a03e:	4770      	bx	lr

0800a040 <pxCurrentTCBConst2>:
 800a040:	20000a04 	.word	0x20000a04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a044:	bf00      	nop
 800a046:	bf00      	nop

0800a048 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a048:	4806      	ldr	r0, [pc, #24]	; (800a064 <prvPortStartFirstTask+0x1c>)
 800a04a:	6800      	ldr	r0, [r0, #0]
 800a04c:	6800      	ldr	r0, [r0, #0]
 800a04e:	f380 8808 	msr	MSP, r0
 800a052:	b662      	cpsie	i
 800a054:	b661      	cpsie	f
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	df00      	svc	0
 800a060:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a062:	bf00      	nop
 800a064:	e000ed08 	.word	0xe000ed08

0800a068 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a06e:	4b32      	ldr	r3, [pc, #200]	; (800a138 <xPortStartScheduler+0xd0>)
 800a070:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	b2db      	uxtb	r3, r3
 800a078:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	22ff      	movs	r2, #255	; 0xff
 800a07e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	b2db      	uxtb	r3, r3
 800a086:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a088:	78fb      	ldrb	r3, [r7, #3]
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a090:	b2da      	uxtb	r2, r3
 800a092:	4b2a      	ldr	r3, [pc, #168]	; (800a13c <xPortStartScheduler+0xd4>)
 800a094:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a096:	4b2a      	ldr	r3, [pc, #168]	; (800a140 <xPortStartScheduler+0xd8>)
 800a098:	2207      	movs	r2, #7
 800a09a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a09c:	e009      	b.n	800a0b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a09e:	4b28      	ldr	r3, [pc, #160]	; (800a140 <xPortStartScheduler+0xd8>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	4a26      	ldr	r2, [pc, #152]	; (800a140 <xPortStartScheduler+0xd8>)
 800a0a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a0a8:	78fb      	ldrb	r3, [r7, #3]
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	005b      	lsls	r3, r3, #1
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0b2:	78fb      	ldrb	r3, [r7, #3]
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ba:	2b80      	cmp	r3, #128	; 0x80
 800a0bc:	d0ef      	beq.n	800a09e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a0be:	4b20      	ldr	r3, [pc, #128]	; (800a140 <xPortStartScheduler+0xd8>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f1c3 0307 	rsb	r3, r3, #7
 800a0c6:	2b04      	cmp	r3, #4
 800a0c8:	d00a      	beq.n	800a0e0 <xPortStartScheduler+0x78>
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	60bb      	str	r3, [r7, #8]
}
 800a0dc:	bf00      	nop
 800a0de:	e7fe      	b.n	800a0de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0e0:	4b17      	ldr	r3, [pc, #92]	; (800a140 <xPortStartScheduler+0xd8>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	021b      	lsls	r3, r3, #8
 800a0e6:	4a16      	ldr	r2, [pc, #88]	; (800a140 <xPortStartScheduler+0xd8>)
 800a0e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0ea:	4b15      	ldr	r3, [pc, #84]	; (800a140 <xPortStartScheduler+0xd8>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0f2:	4a13      	ldr	r2, [pc, #76]	; (800a140 <xPortStartScheduler+0xd8>)
 800a0f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0fe:	4b11      	ldr	r3, [pc, #68]	; (800a144 <xPortStartScheduler+0xdc>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a10      	ldr	r2, [pc, #64]	; (800a144 <xPortStartScheduler+0xdc>)
 800a104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a108:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a10a:	4b0e      	ldr	r3, [pc, #56]	; (800a144 <xPortStartScheduler+0xdc>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a0d      	ldr	r2, [pc, #52]	; (800a144 <xPortStartScheduler+0xdc>)
 800a110:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a114:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a116:	f000 f8b9 	bl	800a28c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a11a:	4b0b      	ldr	r3, [pc, #44]	; (800a148 <xPortStartScheduler+0xe0>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a120:	f7ff ff92 	bl	800a048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a124:	f7ff fa9c 	bl	8009660 <vTaskSwitchContext>
	prvTaskExitError();
 800a128:	f7ff ff48 	bl	8009fbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	e000e400 	.word	0xe000e400
 800a13c:	20000b30 	.word	0x20000b30
 800a140:	20000b34 	.word	0x20000b34
 800a144:	e000ed20 	.word	0xe000ed20
 800a148:	20000034 	.word	0x20000034

0800a14c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
	__asm volatile
 800a152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	607b      	str	r3, [r7, #4]
}
 800a164:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a166:	4b0f      	ldr	r3, [pc, #60]	; (800a1a4 <vPortEnterCritical+0x58>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	3301      	adds	r3, #1
 800a16c:	4a0d      	ldr	r2, [pc, #52]	; (800a1a4 <vPortEnterCritical+0x58>)
 800a16e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a170:	4b0c      	ldr	r3, [pc, #48]	; (800a1a4 <vPortEnterCritical+0x58>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d10f      	bne.n	800a198 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a178:	4b0b      	ldr	r3, [pc, #44]	; (800a1a8 <vPortEnterCritical+0x5c>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d00a      	beq.n	800a198 <vPortEnterCritical+0x4c>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	603b      	str	r3, [r7, #0]
}
 800a194:	bf00      	nop
 800a196:	e7fe      	b.n	800a196 <vPortEnterCritical+0x4a>
	}
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bc80      	pop	{r7}
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	20000034 	.word	0x20000034
 800a1a8:	e000ed04 	.word	0xe000ed04

0800a1ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1b2:	4b11      	ldr	r3, [pc, #68]	; (800a1f8 <vPortExitCritical+0x4c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d10a      	bne.n	800a1d0 <vPortExitCritical+0x24>
	__asm volatile
 800a1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	607b      	str	r3, [r7, #4]
}
 800a1cc:	bf00      	nop
 800a1ce:	e7fe      	b.n	800a1ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1d0:	4b09      	ldr	r3, [pc, #36]	; (800a1f8 <vPortExitCritical+0x4c>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	4a08      	ldr	r2, [pc, #32]	; (800a1f8 <vPortExitCritical+0x4c>)
 800a1d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1da:	4b07      	ldr	r3, [pc, #28]	; (800a1f8 <vPortExitCritical+0x4c>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d105      	bne.n	800a1ee <vPortExitCritical+0x42>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	f383 8811 	msr	BASEPRI, r3
}
 800a1ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1ee:	bf00      	nop
 800a1f0:	370c      	adds	r7, #12
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bc80      	pop	{r7}
 800a1f6:	4770      	bx	lr
 800a1f8:	20000034 	.word	0x20000034
 800a1fc:	00000000 	.word	0x00000000

0800a200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a200:	f3ef 8009 	mrs	r0, PSP
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	4b0d      	ldr	r3, [pc, #52]	; (800a240 <pxCurrentTCBConst>)
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a210:	6010      	str	r0, [r2, #0]
 800a212:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a216:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a21a:	f380 8811 	msr	BASEPRI, r0
 800a21e:	f7ff fa1f 	bl	8009660 <vTaskSwitchContext>
 800a222:	f04f 0000 	mov.w	r0, #0
 800a226:	f380 8811 	msr	BASEPRI, r0
 800a22a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a22e:	6819      	ldr	r1, [r3, #0]
 800a230:	6808      	ldr	r0, [r1, #0]
 800a232:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a236:	f380 8809 	msr	PSP, r0
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	4770      	bx	lr

0800a240 <pxCurrentTCBConst>:
 800a240:	20000a04 	.word	0x20000a04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop

0800a248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
	__asm volatile
 800a24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	607b      	str	r3, [r7, #4]
}
 800a260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a262:	f7ff f93f 	bl	80094e4 <xTaskIncrementTick>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a26c:	4b06      	ldr	r3, [pc, #24]	; (800a288 <SysTick_Handler+0x40>)
 800a26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a272:	601a      	str	r2, [r3, #0]
 800a274:	2300      	movs	r3, #0
 800a276:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	f383 8811 	msr	BASEPRI, r3
}
 800a27e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a280:	bf00      	nop
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	e000ed04 	.word	0xe000ed04

0800a28c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a28c:	b480      	push	{r7}
 800a28e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a290:	4b0a      	ldr	r3, [pc, #40]	; (800a2bc <vPortSetupTimerInterrupt+0x30>)
 800a292:	2200      	movs	r2, #0
 800a294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a296:	4b0a      	ldr	r3, [pc, #40]	; (800a2c0 <vPortSetupTimerInterrupt+0x34>)
 800a298:	2200      	movs	r2, #0
 800a29a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a29c:	4b09      	ldr	r3, [pc, #36]	; (800a2c4 <vPortSetupTimerInterrupt+0x38>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a09      	ldr	r2, [pc, #36]	; (800a2c8 <vPortSetupTimerInterrupt+0x3c>)
 800a2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2a6:	099b      	lsrs	r3, r3, #6
 800a2a8:	4a08      	ldr	r2, [pc, #32]	; (800a2cc <vPortSetupTimerInterrupt+0x40>)
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2ae:	4b03      	ldr	r3, [pc, #12]	; (800a2bc <vPortSetupTimerInterrupt+0x30>)
 800a2b0:	2207      	movs	r2, #7
 800a2b2:	601a      	str	r2, [r3, #0]
}
 800a2b4:	bf00      	nop
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bc80      	pop	{r7}
 800a2ba:	4770      	bx	lr
 800a2bc:	e000e010 	.word	0xe000e010
 800a2c0:	e000e018 	.word	0xe000e018
 800a2c4:	20000014 	.word	0x20000014
 800a2c8:	10624dd3 	.word	0x10624dd3
 800a2cc:	e000e014 	.word	0xe000e014

0800a2d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a2d6:	f3ef 8305 	mrs	r3, IPSR
 800a2da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2b0f      	cmp	r3, #15
 800a2e0:	d914      	bls.n	800a30c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a2e2:	4a16      	ldr	r2, [pc, #88]	; (800a33c <vPortValidateInterruptPriority+0x6c>)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a2ec:	4b14      	ldr	r3, [pc, #80]	; (800a340 <vPortValidateInterruptPriority+0x70>)
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	7afa      	ldrb	r2, [r7, #11]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d20a      	bcs.n	800a30c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	607b      	str	r3, [r7, #4]
}
 800a308:	bf00      	nop
 800a30a:	e7fe      	b.n	800a30a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a30c:	4b0d      	ldr	r3, [pc, #52]	; (800a344 <vPortValidateInterruptPriority+0x74>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a314:	4b0c      	ldr	r3, [pc, #48]	; (800a348 <vPortValidateInterruptPriority+0x78>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d90a      	bls.n	800a332 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a320:	f383 8811 	msr	BASEPRI, r3
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	603b      	str	r3, [r7, #0]
}
 800a32e:	bf00      	nop
 800a330:	e7fe      	b.n	800a330 <vPortValidateInterruptPriority+0x60>
	}
 800a332:	bf00      	nop
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	bc80      	pop	{r7}
 800a33a:	4770      	bx	lr
 800a33c:	e000e3f0 	.word	0xe000e3f0
 800a340:	20000b30 	.word	0x20000b30
 800a344:	e000ed0c 	.word	0xe000ed0c
 800a348:	20000b34 	.word	0x20000b34

0800a34c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08a      	sub	sp, #40	; 0x28
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a354:	2300      	movs	r3, #0
 800a356:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a358:	f7ff f81a 	bl	8009390 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a35c:	4b58      	ldr	r3, [pc, #352]	; (800a4c0 <pvPortMalloc+0x174>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a364:	f000 f910 	bl	800a588 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a368:	4b56      	ldr	r3, [pc, #344]	; (800a4c4 <pvPortMalloc+0x178>)
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4013      	ands	r3, r2
 800a370:	2b00      	cmp	r3, #0
 800a372:	f040 808e 	bne.w	800a492 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d01d      	beq.n	800a3b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a37c:	2208      	movs	r2, #8
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4413      	add	r3, r2
 800a382:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d014      	beq.n	800a3b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f023 0307 	bic.w	r3, r3, #7
 800a394:	3308      	adds	r3, #8
 800a396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f003 0307 	and.w	r3, r3, #7
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00a      	beq.n	800a3b8 <pvPortMalloc+0x6c>
	__asm volatile
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	617b      	str	r3, [r7, #20]
}
 800a3b4:	bf00      	nop
 800a3b6:	e7fe      	b.n	800a3b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d069      	beq.n	800a492 <pvPortMalloc+0x146>
 800a3be:	4b42      	ldr	r3, [pc, #264]	; (800a4c8 <pvPortMalloc+0x17c>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d864      	bhi.n	800a492 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a3c8:	4b40      	ldr	r3, [pc, #256]	; (800a4cc <pvPortMalloc+0x180>)
 800a3ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a3cc:	4b3f      	ldr	r3, [pc, #252]	; (800a4cc <pvPortMalloc+0x180>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3d2:	e004      	b.n	800a3de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d903      	bls.n	800a3f0 <pvPortMalloc+0xa4>
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1f1      	bne.n	800a3d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3f0:	4b33      	ldr	r3, [pc, #204]	; (800a4c0 <pvPortMalloc+0x174>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d04b      	beq.n	800a492 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2208      	movs	r2, #8
 800a400:	4413      	add	r3, r2
 800a402:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	6a3b      	ldr	r3, [r7, #32]
 800a40a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	1ad2      	subs	r2, r2, r3
 800a414:	2308      	movs	r3, #8
 800a416:	005b      	lsls	r3, r3, #1
 800a418:	429a      	cmp	r2, r3
 800a41a:	d91f      	bls.n	800a45c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a41c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4413      	add	r3, r2
 800a422:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	f003 0307 	and.w	r3, r3, #7
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00a      	beq.n	800a444 <pvPortMalloc+0xf8>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	613b      	str	r3, [r7, #16]
}
 800a440:	bf00      	nop
 800a442:	e7fe      	b.n	800a442 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	1ad2      	subs	r2, r2, r3
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a456:	69b8      	ldr	r0, [r7, #24]
 800a458:	f000 f8f8 	bl	800a64c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a45c:	4b1a      	ldr	r3, [pc, #104]	; (800a4c8 <pvPortMalloc+0x17c>)
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	4a18      	ldr	r2, [pc, #96]	; (800a4c8 <pvPortMalloc+0x17c>)
 800a468:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a46a:	4b17      	ldr	r3, [pc, #92]	; (800a4c8 <pvPortMalloc+0x17c>)
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	4b18      	ldr	r3, [pc, #96]	; (800a4d0 <pvPortMalloc+0x184>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	429a      	cmp	r2, r3
 800a474:	d203      	bcs.n	800a47e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a476:	4b14      	ldr	r3, [pc, #80]	; (800a4c8 <pvPortMalloc+0x17c>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a15      	ldr	r2, [pc, #84]	; (800a4d0 <pvPortMalloc+0x184>)
 800a47c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a480:	685a      	ldr	r2, [r3, #4]
 800a482:	4b10      	ldr	r3, [pc, #64]	; (800a4c4 <pvPortMalloc+0x178>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	431a      	orrs	r2, r3
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48e:	2200      	movs	r2, #0
 800a490:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a492:	f7fe ff8b 	bl	80093ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	f003 0307 	and.w	r3, r3, #7
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00a      	beq.n	800a4b6 <pvPortMalloc+0x16a>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	60fb      	str	r3, [r7, #12]
}
 800a4b2:	bf00      	nop
 800a4b4:	e7fe      	b.n	800a4b4 <pvPortMalloc+0x168>
	return pvReturn;
 800a4b6:	69fb      	ldr	r3, [r7, #28]
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3728      	adds	r7, #40	; 0x28
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	20001740 	.word	0x20001740
 800a4c4:	2000174c 	.word	0x2000174c
 800a4c8:	20001744 	.word	0x20001744
 800a4cc:	20001738 	.word	0x20001738
 800a4d0:	20001748 	.word	0x20001748

0800a4d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b086      	sub	sp, #24
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d048      	beq.n	800a578 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a4e6:	2308      	movs	r3, #8
 800a4e8:	425b      	negs	r3, r3
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	685a      	ldr	r2, [r3, #4]
 800a4f8:	4b21      	ldr	r3, [pc, #132]	; (800a580 <vPortFree+0xac>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10a      	bne.n	800a518 <vPortFree+0x44>
	__asm volatile
 800a502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a506:	f383 8811 	msr	BASEPRI, r3
 800a50a:	f3bf 8f6f 	isb	sy
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	60fb      	str	r3, [r7, #12]
}
 800a514:	bf00      	nop
 800a516:	e7fe      	b.n	800a516 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00a      	beq.n	800a536 <vPortFree+0x62>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	60bb      	str	r3, [r7, #8]
}
 800a532:	bf00      	nop
 800a534:	e7fe      	b.n	800a534 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	685a      	ldr	r2, [r3, #4]
 800a53a:	4b11      	ldr	r3, [pc, #68]	; (800a580 <vPortFree+0xac>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4013      	ands	r3, r2
 800a540:	2b00      	cmp	r3, #0
 800a542:	d019      	beq.n	800a578 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d115      	bne.n	800a578 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	685a      	ldr	r2, [r3, #4]
 800a550:	4b0b      	ldr	r3, [pc, #44]	; (800a580 <vPortFree+0xac>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	43db      	mvns	r3, r3
 800a556:	401a      	ands	r2, r3
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a55c:	f7fe ff18 	bl	8009390 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	4b07      	ldr	r3, [pc, #28]	; (800a584 <vPortFree+0xb0>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4413      	add	r3, r2
 800a56a:	4a06      	ldr	r2, [pc, #24]	; (800a584 <vPortFree+0xb0>)
 800a56c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a56e:	6938      	ldr	r0, [r7, #16]
 800a570:	f000 f86c 	bl	800a64c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a574:	f7fe ff1a 	bl	80093ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a578:	bf00      	nop
 800a57a:	3718      	adds	r7, #24
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	2000174c 	.word	0x2000174c
 800a584:	20001744 	.word	0x20001744

0800a588 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a58e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a592:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a594:	4b27      	ldr	r3, [pc, #156]	; (800a634 <prvHeapInit+0xac>)
 800a596:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f003 0307 	and.w	r3, r3, #7
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00c      	beq.n	800a5bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	3307      	adds	r3, #7
 800a5a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f023 0307 	bic.w	r3, r3, #7
 800a5ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	4a1f      	ldr	r2, [pc, #124]	; (800a634 <prvHeapInit+0xac>)
 800a5b8:	4413      	add	r3, r2
 800a5ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a5c0:	4a1d      	ldr	r2, [pc, #116]	; (800a638 <prvHeapInit+0xb0>)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a5c6:	4b1c      	ldr	r3, [pc, #112]	; (800a638 <prvHeapInit+0xb0>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a5d4:	2208      	movs	r2, #8
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	1a9b      	subs	r3, r3, r2
 800a5da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f023 0307 	bic.w	r3, r3, #7
 800a5e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4a15      	ldr	r2, [pc, #84]	; (800a63c <prvHeapInit+0xb4>)
 800a5e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a5ea:	4b14      	ldr	r3, [pc, #80]	; (800a63c <prvHeapInit+0xb4>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a5f2:	4b12      	ldr	r3, [pc, #72]	; (800a63c <prvHeapInit+0xb4>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	1ad2      	subs	r2, r2, r3
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a608:	4b0c      	ldr	r3, [pc, #48]	; (800a63c <prvHeapInit+0xb4>)
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	4a0a      	ldr	r2, [pc, #40]	; (800a640 <prvHeapInit+0xb8>)
 800a616:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	4a09      	ldr	r2, [pc, #36]	; (800a644 <prvHeapInit+0xbc>)
 800a61e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a620:	4b09      	ldr	r3, [pc, #36]	; (800a648 <prvHeapInit+0xc0>)
 800a622:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a626:	601a      	str	r2, [r3, #0]
}
 800a628:	bf00      	nop
 800a62a:	3714      	adds	r7, #20
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bc80      	pop	{r7}
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	20000b38 	.word	0x20000b38
 800a638:	20001738 	.word	0x20001738
 800a63c:	20001740 	.word	0x20001740
 800a640:	20001748 	.word	0x20001748
 800a644:	20001744 	.word	0x20001744
 800a648:	2000174c 	.word	0x2000174c

0800a64c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a64c:	b480      	push	{r7}
 800a64e:	b085      	sub	sp, #20
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a654:	4b27      	ldr	r3, [pc, #156]	; (800a6f4 <prvInsertBlockIntoFreeList+0xa8>)
 800a656:	60fb      	str	r3, [r7, #12]
 800a658:	e002      	b.n	800a660 <prvInsertBlockIntoFreeList+0x14>
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	60fb      	str	r3, [r7, #12]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	429a      	cmp	r2, r3
 800a668:	d8f7      	bhi.n	800a65a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	4413      	add	r3, r2
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d108      	bne.n	800a68e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	441a      	add	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	441a      	add	r2, r3
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d118      	bne.n	800a6d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	4b14      	ldr	r3, [pc, #80]	; (800a6f8 <prvInsertBlockIntoFreeList+0xac>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d00d      	beq.n	800a6ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	685a      	ldr	r2, [r3, #4]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	441a      	add	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	601a      	str	r2, [r3, #0]
 800a6c8:	e008      	b.n	800a6dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a6ca:	4b0b      	ldr	r3, [pc, #44]	; (800a6f8 <prvInsertBlockIntoFreeList+0xac>)
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	601a      	str	r2, [r3, #0]
 800a6d2:	e003      	b.n	800a6dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d002      	beq.n	800a6ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6ea:	bf00      	nop
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bc80      	pop	{r7}
 800a6f2:	4770      	bx	lr
 800a6f4:	20001738 	.word	0x20001738
 800a6f8:	20001740 	.word	0x20001740

0800a6fc <__errno>:
 800a6fc:	4b01      	ldr	r3, [pc, #4]	; (800a704 <__errno+0x8>)
 800a6fe:	6818      	ldr	r0, [r3, #0]
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	20000038 	.word	0x20000038

0800a708 <__libc_init_array>:
 800a708:	b570      	push	{r4, r5, r6, lr}
 800a70a:	2600      	movs	r6, #0
 800a70c:	4d0c      	ldr	r5, [pc, #48]	; (800a740 <__libc_init_array+0x38>)
 800a70e:	4c0d      	ldr	r4, [pc, #52]	; (800a744 <__libc_init_array+0x3c>)
 800a710:	1b64      	subs	r4, r4, r5
 800a712:	10a4      	asrs	r4, r4, #2
 800a714:	42a6      	cmp	r6, r4
 800a716:	d109      	bne.n	800a72c <__libc_init_array+0x24>
 800a718:	f000 fc9c 	bl	800b054 <_init>
 800a71c:	2600      	movs	r6, #0
 800a71e:	4d0a      	ldr	r5, [pc, #40]	; (800a748 <__libc_init_array+0x40>)
 800a720:	4c0a      	ldr	r4, [pc, #40]	; (800a74c <__libc_init_array+0x44>)
 800a722:	1b64      	subs	r4, r4, r5
 800a724:	10a4      	asrs	r4, r4, #2
 800a726:	42a6      	cmp	r6, r4
 800a728:	d105      	bne.n	800a736 <__libc_init_array+0x2e>
 800a72a:	bd70      	pop	{r4, r5, r6, pc}
 800a72c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a730:	4798      	blx	r3
 800a732:	3601      	adds	r6, #1
 800a734:	e7ee      	b.n	800a714 <__libc_init_array+0xc>
 800a736:	f855 3b04 	ldr.w	r3, [r5], #4
 800a73a:	4798      	blx	r3
 800a73c:	3601      	adds	r6, #1
 800a73e:	e7f2      	b.n	800a726 <__libc_init_array+0x1e>
 800a740:	0800b4f0 	.word	0x0800b4f0
 800a744:	0800b4f0 	.word	0x0800b4f0
 800a748:	0800b4f0 	.word	0x0800b4f0
 800a74c:	0800b4f4 	.word	0x0800b4f4

0800a750 <memcpy>:
 800a750:	440a      	add	r2, r1
 800a752:	4291      	cmp	r1, r2
 800a754:	f100 33ff 	add.w	r3, r0, #4294967295
 800a758:	d100      	bne.n	800a75c <memcpy+0xc>
 800a75a:	4770      	bx	lr
 800a75c:	b510      	push	{r4, lr}
 800a75e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a762:	4291      	cmp	r1, r2
 800a764:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a768:	d1f9      	bne.n	800a75e <memcpy+0xe>
 800a76a:	bd10      	pop	{r4, pc}

0800a76c <memset>:
 800a76c:	4603      	mov	r3, r0
 800a76e:	4402      	add	r2, r0
 800a770:	4293      	cmp	r3, r2
 800a772:	d100      	bne.n	800a776 <memset+0xa>
 800a774:	4770      	bx	lr
 800a776:	f803 1b01 	strb.w	r1, [r3], #1
 800a77a:	e7f9      	b.n	800a770 <memset+0x4>

0800a77c <siprintf>:
 800a77c:	b40e      	push	{r1, r2, r3}
 800a77e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a782:	b500      	push	{lr}
 800a784:	b09c      	sub	sp, #112	; 0x70
 800a786:	ab1d      	add	r3, sp, #116	; 0x74
 800a788:	9002      	str	r0, [sp, #8]
 800a78a:	9006      	str	r0, [sp, #24]
 800a78c:	9107      	str	r1, [sp, #28]
 800a78e:	9104      	str	r1, [sp, #16]
 800a790:	4808      	ldr	r0, [pc, #32]	; (800a7b4 <siprintf+0x38>)
 800a792:	4909      	ldr	r1, [pc, #36]	; (800a7b8 <siprintf+0x3c>)
 800a794:	f853 2b04 	ldr.w	r2, [r3], #4
 800a798:	9105      	str	r1, [sp, #20]
 800a79a:	6800      	ldr	r0, [r0, #0]
 800a79c:	a902      	add	r1, sp, #8
 800a79e:	9301      	str	r3, [sp, #4]
 800a7a0:	f000 f868 	bl	800a874 <_svfiprintf_r>
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	9b02      	ldr	r3, [sp, #8]
 800a7a8:	701a      	strb	r2, [r3, #0]
 800a7aa:	b01c      	add	sp, #112	; 0x70
 800a7ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7b0:	b003      	add	sp, #12
 800a7b2:	4770      	bx	lr
 800a7b4:	20000038 	.word	0x20000038
 800a7b8:	ffff0208 	.word	0xffff0208

0800a7bc <__ssputs_r>:
 800a7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c0:	688e      	ldr	r6, [r1, #8]
 800a7c2:	4682      	mov	sl, r0
 800a7c4:	429e      	cmp	r6, r3
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	4690      	mov	r8, r2
 800a7ca:	461f      	mov	r7, r3
 800a7cc:	d838      	bhi.n	800a840 <__ssputs_r+0x84>
 800a7ce:	898a      	ldrh	r2, [r1, #12]
 800a7d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7d4:	d032      	beq.n	800a83c <__ssputs_r+0x80>
 800a7d6:	6825      	ldr	r5, [r4, #0]
 800a7d8:	6909      	ldr	r1, [r1, #16]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	eba5 0901 	sub.w	r9, r5, r1
 800a7e0:	6965      	ldr	r5, [r4, #20]
 800a7e2:	444b      	add	r3, r9
 800a7e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7ec:	106d      	asrs	r5, r5, #1
 800a7ee:	429d      	cmp	r5, r3
 800a7f0:	bf38      	it	cc
 800a7f2:	461d      	movcc	r5, r3
 800a7f4:	0553      	lsls	r3, r2, #21
 800a7f6:	d531      	bpl.n	800a85c <__ssputs_r+0xa0>
 800a7f8:	4629      	mov	r1, r5
 800a7fa:	f000 fb61 	bl	800aec0 <_malloc_r>
 800a7fe:	4606      	mov	r6, r0
 800a800:	b950      	cbnz	r0, 800a818 <__ssputs_r+0x5c>
 800a802:	230c      	movs	r3, #12
 800a804:	f04f 30ff 	mov.w	r0, #4294967295
 800a808:	f8ca 3000 	str.w	r3, [sl]
 800a80c:	89a3      	ldrh	r3, [r4, #12]
 800a80e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a812:	81a3      	strh	r3, [r4, #12]
 800a814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a818:	464a      	mov	r2, r9
 800a81a:	6921      	ldr	r1, [r4, #16]
 800a81c:	f7ff ff98 	bl	800a750 <memcpy>
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	6126      	str	r6, [r4, #16]
 800a82e:	444e      	add	r6, r9
 800a830:	6026      	str	r6, [r4, #0]
 800a832:	463e      	mov	r6, r7
 800a834:	6165      	str	r5, [r4, #20]
 800a836:	eba5 0509 	sub.w	r5, r5, r9
 800a83a:	60a5      	str	r5, [r4, #8]
 800a83c:	42be      	cmp	r6, r7
 800a83e:	d900      	bls.n	800a842 <__ssputs_r+0x86>
 800a840:	463e      	mov	r6, r7
 800a842:	4632      	mov	r2, r6
 800a844:	4641      	mov	r1, r8
 800a846:	6820      	ldr	r0, [r4, #0]
 800a848:	f000 fab8 	bl	800adbc <memmove>
 800a84c:	68a3      	ldr	r3, [r4, #8]
 800a84e:	2000      	movs	r0, #0
 800a850:	1b9b      	subs	r3, r3, r6
 800a852:	60a3      	str	r3, [r4, #8]
 800a854:	6823      	ldr	r3, [r4, #0]
 800a856:	4433      	add	r3, r6
 800a858:	6023      	str	r3, [r4, #0]
 800a85a:	e7db      	b.n	800a814 <__ssputs_r+0x58>
 800a85c:	462a      	mov	r2, r5
 800a85e:	f000 fba3 	bl	800afa8 <_realloc_r>
 800a862:	4606      	mov	r6, r0
 800a864:	2800      	cmp	r0, #0
 800a866:	d1e1      	bne.n	800a82c <__ssputs_r+0x70>
 800a868:	4650      	mov	r0, sl
 800a86a:	6921      	ldr	r1, [r4, #16]
 800a86c:	f000 fac0 	bl	800adf0 <_free_r>
 800a870:	e7c7      	b.n	800a802 <__ssputs_r+0x46>
	...

0800a874 <_svfiprintf_r>:
 800a874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a878:	4698      	mov	r8, r3
 800a87a:	898b      	ldrh	r3, [r1, #12]
 800a87c:	4607      	mov	r7, r0
 800a87e:	061b      	lsls	r3, r3, #24
 800a880:	460d      	mov	r5, r1
 800a882:	4614      	mov	r4, r2
 800a884:	b09d      	sub	sp, #116	; 0x74
 800a886:	d50e      	bpl.n	800a8a6 <_svfiprintf_r+0x32>
 800a888:	690b      	ldr	r3, [r1, #16]
 800a88a:	b963      	cbnz	r3, 800a8a6 <_svfiprintf_r+0x32>
 800a88c:	2140      	movs	r1, #64	; 0x40
 800a88e:	f000 fb17 	bl	800aec0 <_malloc_r>
 800a892:	6028      	str	r0, [r5, #0]
 800a894:	6128      	str	r0, [r5, #16]
 800a896:	b920      	cbnz	r0, 800a8a2 <_svfiprintf_r+0x2e>
 800a898:	230c      	movs	r3, #12
 800a89a:	603b      	str	r3, [r7, #0]
 800a89c:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a0:	e0d1      	b.n	800aa46 <_svfiprintf_r+0x1d2>
 800a8a2:	2340      	movs	r3, #64	; 0x40
 800a8a4:	616b      	str	r3, [r5, #20]
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8aa:	2320      	movs	r3, #32
 800a8ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8b0:	2330      	movs	r3, #48	; 0x30
 800a8b2:	f04f 0901 	mov.w	r9, #1
 800a8b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aa60 <_svfiprintf_r+0x1ec>
 800a8be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8c2:	4623      	mov	r3, r4
 800a8c4:	469a      	mov	sl, r3
 800a8c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8ca:	b10a      	cbz	r2, 800a8d0 <_svfiprintf_r+0x5c>
 800a8cc:	2a25      	cmp	r2, #37	; 0x25
 800a8ce:	d1f9      	bne.n	800a8c4 <_svfiprintf_r+0x50>
 800a8d0:	ebba 0b04 	subs.w	fp, sl, r4
 800a8d4:	d00b      	beq.n	800a8ee <_svfiprintf_r+0x7a>
 800a8d6:	465b      	mov	r3, fp
 800a8d8:	4622      	mov	r2, r4
 800a8da:	4629      	mov	r1, r5
 800a8dc:	4638      	mov	r0, r7
 800a8de:	f7ff ff6d 	bl	800a7bc <__ssputs_r>
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	f000 80aa 	beq.w	800aa3c <_svfiprintf_r+0x1c8>
 800a8e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8ea:	445a      	add	r2, fp
 800a8ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a8ee:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f000 80a2 	beq.w	800aa3c <_svfiprintf_r+0x1c8>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a8fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a902:	f10a 0a01 	add.w	sl, sl, #1
 800a906:	9304      	str	r3, [sp, #16]
 800a908:	9307      	str	r3, [sp, #28]
 800a90a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a90e:	931a      	str	r3, [sp, #104]	; 0x68
 800a910:	4654      	mov	r4, sl
 800a912:	2205      	movs	r2, #5
 800a914:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a918:	4851      	ldr	r0, [pc, #324]	; (800aa60 <_svfiprintf_r+0x1ec>)
 800a91a:	f000 fa41 	bl	800ada0 <memchr>
 800a91e:	9a04      	ldr	r2, [sp, #16]
 800a920:	b9d8      	cbnz	r0, 800a95a <_svfiprintf_r+0xe6>
 800a922:	06d0      	lsls	r0, r2, #27
 800a924:	bf44      	itt	mi
 800a926:	2320      	movmi	r3, #32
 800a928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a92c:	0711      	lsls	r1, r2, #28
 800a92e:	bf44      	itt	mi
 800a930:	232b      	movmi	r3, #43	; 0x2b
 800a932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a936:	f89a 3000 	ldrb.w	r3, [sl]
 800a93a:	2b2a      	cmp	r3, #42	; 0x2a
 800a93c:	d015      	beq.n	800a96a <_svfiprintf_r+0xf6>
 800a93e:	4654      	mov	r4, sl
 800a940:	2000      	movs	r0, #0
 800a942:	f04f 0c0a 	mov.w	ip, #10
 800a946:	9a07      	ldr	r2, [sp, #28]
 800a948:	4621      	mov	r1, r4
 800a94a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a94e:	3b30      	subs	r3, #48	; 0x30
 800a950:	2b09      	cmp	r3, #9
 800a952:	d94e      	bls.n	800a9f2 <_svfiprintf_r+0x17e>
 800a954:	b1b0      	cbz	r0, 800a984 <_svfiprintf_r+0x110>
 800a956:	9207      	str	r2, [sp, #28]
 800a958:	e014      	b.n	800a984 <_svfiprintf_r+0x110>
 800a95a:	eba0 0308 	sub.w	r3, r0, r8
 800a95e:	fa09 f303 	lsl.w	r3, r9, r3
 800a962:	4313      	orrs	r3, r2
 800a964:	46a2      	mov	sl, r4
 800a966:	9304      	str	r3, [sp, #16]
 800a968:	e7d2      	b.n	800a910 <_svfiprintf_r+0x9c>
 800a96a:	9b03      	ldr	r3, [sp, #12]
 800a96c:	1d19      	adds	r1, r3, #4
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	9103      	str	r1, [sp, #12]
 800a972:	2b00      	cmp	r3, #0
 800a974:	bfbb      	ittet	lt
 800a976:	425b      	neglt	r3, r3
 800a978:	f042 0202 	orrlt.w	r2, r2, #2
 800a97c:	9307      	strge	r3, [sp, #28]
 800a97e:	9307      	strlt	r3, [sp, #28]
 800a980:	bfb8      	it	lt
 800a982:	9204      	strlt	r2, [sp, #16]
 800a984:	7823      	ldrb	r3, [r4, #0]
 800a986:	2b2e      	cmp	r3, #46	; 0x2e
 800a988:	d10c      	bne.n	800a9a4 <_svfiprintf_r+0x130>
 800a98a:	7863      	ldrb	r3, [r4, #1]
 800a98c:	2b2a      	cmp	r3, #42	; 0x2a
 800a98e:	d135      	bne.n	800a9fc <_svfiprintf_r+0x188>
 800a990:	9b03      	ldr	r3, [sp, #12]
 800a992:	3402      	adds	r4, #2
 800a994:	1d1a      	adds	r2, r3, #4
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	9203      	str	r2, [sp, #12]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	bfb8      	it	lt
 800a99e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9a2:	9305      	str	r3, [sp, #20]
 800a9a4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800aa64 <_svfiprintf_r+0x1f0>
 800a9a8:	2203      	movs	r2, #3
 800a9aa:	4650      	mov	r0, sl
 800a9ac:	7821      	ldrb	r1, [r4, #0]
 800a9ae:	f000 f9f7 	bl	800ada0 <memchr>
 800a9b2:	b140      	cbz	r0, 800a9c6 <_svfiprintf_r+0x152>
 800a9b4:	2340      	movs	r3, #64	; 0x40
 800a9b6:	eba0 000a 	sub.w	r0, r0, sl
 800a9ba:	fa03 f000 	lsl.w	r0, r3, r0
 800a9be:	9b04      	ldr	r3, [sp, #16]
 800a9c0:	3401      	adds	r4, #1
 800a9c2:	4303      	orrs	r3, r0
 800a9c4:	9304      	str	r3, [sp, #16]
 800a9c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ca:	2206      	movs	r2, #6
 800a9cc:	4826      	ldr	r0, [pc, #152]	; (800aa68 <_svfiprintf_r+0x1f4>)
 800a9ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9d2:	f000 f9e5 	bl	800ada0 <memchr>
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d038      	beq.n	800aa4c <_svfiprintf_r+0x1d8>
 800a9da:	4b24      	ldr	r3, [pc, #144]	; (800aa6c <_svfiprintf_r+0x1f8>)
 800a9dc:	bb1b      	cbnz	r3, 800aa26 <_svfiprintf_r+0x1b2>
 800a9de:	9b03      	ldr	r3, [sp, #12]
 800a9e0:	3307      	adds	r3, #7
 800a9e2:	f023 0307 	bic.w	r3, r3, #7
 800a9e6:	3308      	adds	r3, #8
 800a9e8:	9303      	str	r3, [sp, #12]
 800a9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ec:	4433      	add	r3, r6
 800a9ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f0:	e767      	b.n	800a8c2 <_svfiprintf_r+0x4e>
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	2001      	movs	r0, #1
 800a9f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9fa:	e7a5      	b.n	800a948 <_svfiprintf_r+0xd4>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	f04f 0c0a 	mov.w	ip, #10
 800aa02:	4619      	mov	r1, r3
 800aa04:	3401      	adds	r4, #1
 800aa06:	9305      	str	r3, [sp, #20]
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa0e:	3a30      	subs	r2, #48	; 0x30
 800aa10:	2a09      	cmp	r2, #9
 800aa12:	d903      	bls.n	800aa1c <_svfiprintf_r+0x1a8>
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d0c5      	beq.n	800a9a4 <_svfiprintf_r+0x130>
 800aa18:	9105      	str	r1, [sp, #20]
 800aa1a:	e7c3      	b.n	800a9a4 <_svfiprintf_r+0x130>
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	2301      	movs	r3, #1
 800aa20:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa24:	e7f0      	b.n	800aa08 <_svfiprintf_r+0x194>
 800aa26:	ab03      	add	r3, sp, #12
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	462a      	mov	r2, r5
 800aa2c:	4638      	mov	r0, r7
 800aa2e:	4b10      	ldr	r3, [pc, #64]	; (800aa70 <_svfiprintf_r+0x1fc>)
 800aa30:	a904      	add	r1, sp, #16
 800aa32:	f3af 8000 	nop.w
 800aa36:	1c42      	adds	r2, r0, #1
 800aa38:	4606      	mov	r6, r0
 800aa3a:	d1d6      	bne.n	800a9ea <_svfiprintf_r+0x176>
 800aa3c:	89ab      	ldrh	r3, [r5, #12]
 800aa3e:	065b      	lsls	r3, r3, #25
 800aa40:	f53f af2c 	bmi.w	800a89c <_svfiprintf_r+0x28>
 800aa44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa46:	b01d      	add	sp, #116	; 0x74
 800aa48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa4c:	ab03      	add	r3, sp, #12
 800aa4e:	9300      	str	r3, [sp, #0]
 800aa50:	462a      	mov	r2, r5
 800aa52:	4638      	mov	r0, r7
 800aa54:	4b06      	ldr	r3, [pc, #24]	; (800aa70 <_svfiprintf_r+0x1fc>)
 800aa56:	a904      	add	r1, sp, #16
 800aa58:	f000 f87c 	bl	800ab54 <_printf_i>
 800aa5c:	e7eb      	b.n	800aa36 <_svfiprintf_r+0x1c2>
 800aa5e:	bf00      	nop
 800aa60:	0800b4bc 	.word	0x0800b4bc
 800aa64:	0800b4c2 	.word	0x0800b4c2
 800aa68:	0800b4c6 	.word	0x0800b4c6
 800aa6c:	00000000 	.word	0x00000000
 800aa70:	0800a7bd 	.word	0x0800a7bd

0800aa74 <_printf_common>:
 800aa74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa78:	4616      	mov	r6, r2
 800aa7a:	4699      	mov	r9, r3
 800aa7c:	688a      	ldr	r2, [r1, #8]
 800aa7e:	690b      	ldr	r3, [r1, #16]
 800aa80:	4607      	mov	r7, r0
 800aa82:	4293      	cmp	r3, r2
 800aa84:	bfb8      	it	lt
 800aa86:	4613      	movlt	r3, r2
 800aa88:	6033      	str	r3, [r6, #0]
 800aa8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa8e:	460c      	mov	r4, r1
 800aa90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa94:	b10a      	cbz	r2, 800aa9a <_printf_common+0x26>
 800aa96:	3301      	adds	r3, #1
 800aa98:	6033      	str	r3, [r6, #0]
 800aa9a:	6823      	ldr	r3, [r4, #0]
 800aa9c:	0699      	lsls	r1, r3, #26
 800aa9e:	bf42      	ittt	mi
 800aaa0:	6833      	ldrmi	r3, [r6, #0]
 800aaa2:	3302      	addmi	r3, #2
 800aaa4:	6033      	strmi	r3, [r6, #0]
 800aaa6:	6825      	ldr	r5, [r4, #0]
 800aaa8:	f015 0506 	ands.w	r5, r5, #6
 800aaac:	d106      	bne.n	800aabc <_printf_common+0x48>
 800aaae:	f104 0a19 	add.w	sl, r4, #25
 800aab2:	68e3      	ldr	r3, [r4, #12]
 800aab4:	6832      	ldr	r2, [r6, #0]
 800aab6:	1a9b      	subs	r3, r3, r2
 800aab8:	42ab      	cmp	r3, r5
 800aaba:	dc28      	bgt.n	800ab0e <_printf_common+0x9a>
 800aabc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aac0:	1e13      	subs	r3, r2, #0
 800aac2:	6822      	ldr	r2, [r4, #0]
 800aac4:	bf18      	it	ne
 800aac6:	2301      	movne	r3, #1
 800aac8:	0692      	lsls	r2, r2, #26
 800aaca:	d42d      	bmi.n	800ab28 <_printf_common+0xb4>
 800aacc:	4649      	mov	r1, r9
 800aace:	4638      	mov	r0, r7
 800aad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aad4:	47c0      	blx	r8
 800aad6:	3001      	adds	r0, #1
 800aad8:	d020      	beq.n	800ab1c <_printf_common+0xa8>
 800aada:	6823      	ldr	r3, [r4, #0]
 800aadc:	68e5      	ldr	r5, [r4, #12]
 800aade:	f003 0306 	and.w	r3, r3, #6
 800aae2:	2b04      	cmp	r3, #4
 800aae4:	bf18      	it	ne
 800aae6:	2500      	movne	r5, #0
 800aae8:	6832      	ldr	r2, [r6, #0]
 800aaea:	f04f 0600 	mov.w	r6, #0
 800aaee:	68a3      	ldr	r3, [r4, #8]
 800aaf0:	bf08      	it	eq
 800aaf2:	1aad      	subeq	r5, r5, r2
 800aaf4:	6922      	ldr	r2, [r4, #16]
 800aaf6:	bf08      	it	eq
 800aaf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aafc:	4293      	cmp	r3, r2
 800aafe:	bfc4      	itt	gt
 800ab00:	1a9b      	subgt	r3, r3, r2
 800ab02:	18ed      	addgt	r5, r5, r3
 800ab04:	341a      	adds	r4, #26
 800ab06:	42b5      	cmp	r5, r6
 800ab08:	d11a      	bne.n	800ab40 <_printf_common+0xcc>
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	e008      	b.n	800ab20 <_printf_common+0xac>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	4652      	mov	r2, sl
 800ab12:	4649      	mov	r1, r9
 800ab14:	4638      	mov	r0, r7
 800ab16:	47c0      	blx	r8
 800ab18:	3001      	adds	r0, #1
 800ab1a:	d103      	bne.n	800ab24 <_printf_common+0xb0>
 800ab1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab24:	3501      	adds	r5, #1
 800ab26:	e7c4      	b.n	800aab2 <_printf_common+0x3e>
 800ab28:	2030      	movs	r0, #48	; 0x30
 800ab2a:	18e1      	adds	r1, r4, r3
 800ab2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab30:	1c5a      	adds	r2, r3, #1
 800ab32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab36:	4422      	add	r2, r4
 800ab38:	3302      	adds	r3, #2
 800ab3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab3e:	e7c5      	b.n	800aacc <_printf_common+0x58>
 800ab40:	2301      	movs	r3, #1
 800ab42:	4622      	mov	r2, r4
 800ab44:	4649      	mov	r1, r9
 800ab46:	4638      	mov	r0, r7
 800ab48:	47c0      	blx	r8
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	d0e6      	beq.n	800ab1c <_printf_common+0xa8>
 800ab4e:	3601      	adds	r6, #1
 800ab50:	e7d9      	b.n	800ab06 <_printf_common+0x92>
	...

0800ab54 <_printf_i>:
 800ab54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab58:	7e0f      	ldrb	r7, [r1, #24]
 800ab5a:	4691      	mov	r9, r2
 800ab5c:	2f78      	cmp	r7, #120	; 0x78
 800ab5e:	4680      	mov	r8, r0
 800ab60:	460c      	mov	r4, r1
 800ab62:	469a      	mov	sl, r3
 800ab64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab6a:	d807      	bhi.n	800ab7c <_printf_i+0x28>
 800ab6c:	2f62      	cmp	r7, #98	; 0x62
 800ab6e:	d80a      	bhi.n	800ab86 <_printf_i+0x32>
 800ab70:	2f00      	cmp	r7, #0
 800ab72:	f000 80d9 	beq.w	800ad28 <_printf_i+0x1d4>
 800ab76:	2f58      	cmp	r7, #88	; 0x58
 800ab78:	f000 80a4 	beq.w	800acc4 <_printf_i+0x170>
 800ab7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab84:	e03a      	b.n	800abfc <_printf_i+0xa8>
 800ab86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab8a:	2b15      	cmp	r3, #21
 800ab8c:	d8f6      	bhi.n	800ab7c <_printf_i+0x28>
 800ab8e:	a101      	add	r1, pc, #4	; (adr r1, 800ab94 <_printf_i+0x40>)
 800ab90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab94:	0800abed 	.word	0x0800abed
 800ab98:	0800ac01 	.word	0x0800ac01
 800ab9c:	0800ab7d 	.word	0x0800ab7d
 800aba0:	0800ab7d 	.word	0x0800ab7d
 800aba4:	0800ab7d 	.word	0x0800ab7d
 800aba8:	0800ab7d 	.word	0x0800ab7d
 800abac:	0800ac01 	.word	0x0800ac01
 800abb0:	0800ab7d 	.word	0x0800ab7d
 800abb4:	0800ab7d 	.word	0x0800ab7d
 800abb8:	0800ab7d 	.word	0x0800ab7d
 800abbc:	0800ab7d 	.word	0x0800ab7d
 800abc0:	0800ad0f 	.word	0x0800ad0f
 800abc4:	0800ac31 	.word	0x0800ac31
 800abc8:	0800acf1 	.word	0x0800acf1
 800abcc:	0800ab7d 	.word	0x0800ab7d
 800abd0:	0800ab7d 	.word	0x0800ab7d
 800abd4:	0800ad31 	.word	0x0800ad31
 800abd8:	0800ab7d 	.word	0x0800ab7d
 800abdc:	0800ac31 	.word	0x0800ac31
 800abe0:	0800ab7d 	.word	0x0800ab7d
 800abe4:	0800ab7d 	.word	0x0800ab7d
 800abe8:	0800acf9 	.word	0x0800acf9
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	1d1a      	adds	r2, r3, #4
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	602a      	str	r2, [r5, #0]
 800abf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abfc:	2301      	movs	r3, #1
 800abfe:	e0a4      	b.n	800ad4a <_printf_i+0x1f6>
 800ac00:	6820      	ldr	r0, [r4, #0]
 800ac02:	6829      	ldr	r1, [r5, #0]
 800ac04:	0606      	lsls	r6, r0, #24
 800ac06:	f101 0304 	add.w	r3, r1, #4
 800ac0a:	d50a      	bpl.n	800ac22 <_printf_i+0xce>
 800ac0c:	680e      	ldr	r6, [r1, #0]
 800ac0e:	602b      	str	r3, [r5, #0]
 800ac10:	2e00      	cmp	r6, #0
 800ac12:	da03      	bge.n	800ac1c <_printf_i+0xc8>
 800ac14:	232d      	movs	r3, #45	; 0x2d
 800ac16:	4276      	negs	r6, r6
 800ac18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac1c:	230a      	movs	r3, #10
 800ac1e:	485e      	ldr	r0, [pc, #376]	; (800ad98 <_printf_i+0x244>)
 800ac20:	e019      	b.n	800ac56 <_printf_i+0x102>
 800ac22:	680e      	ldr	r6, [r1, #0]
 800ac24:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac28:	602b      	str	r3, [r5, #0]
 800ac2a:	bf18      	it	ne
 800ac2c:	b236      	sxthne	r6, r6
 800ac2e:	e7ef      	b.n	800ac10 <_printf_i+0xbc>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	6820      	ldr	r0, [r4, #0]
 800ac34:	1d19      	adds	r1, r3, #4
 800ac36:	6029      	str	r1, [r5, #0]
 800ac38:	0601      	lsls	r1, r0, #24
 800ac3a:	d501      	bpl.n	800ac40 <_printf_i+0xec>
 800ac3c:	681e      	ldr	r6, [r3, #0]
 800ac3e:	e002      	b.n	800ac46 <_printf_i+0xf2>
 800ac40:	0646      	lsls	r6, r0, #25
 800ac42:	d5fb      	bpl.n	800ac3c <_printf_i+0xe8>
 800ac44:	881e      	ldrh	r6, [r3, #0]
 800ac46:	2f6f      	cmp	r7, #111	; 0x6f
 800ac48:	bf0c      	ite	eq
 800ac4a:	2308      	moveq	r3, #8
 800ac4c:	230a      	movne	r3, #10
 800ac4e:	4852      	ldr	r0, [pc, #328]	; (800ad98 <_printf_i+0x244>)
 800ac50:	2100      	movs	r1, #0
 800ac52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac56:	6865      	ldr	r5, [r4, #4]
 800ac58:	2d00      	cmp	r5, #0
 800ac5a:	bfa8      	it	ge
 800ac5c:	6821      	ldrge	r1, [r4, #0]
 800ac5e:	60a5      	str	r5, [r4, #8]
 800ac60:	bfa4      	itt	ge
 800ac62:	f021 0104 	bicge.w	r1, r1, #4
 800ac66:	6021      	strge	r1, [r4, #0]
 800ac68:	b90e      	cbnz	r6, 800ac6e <_printf_i+0x11a>
 800ac6a:	2d00      	cmp	r5, #0
 800ac6c:	d04d      	beq.n	800ad0a <_printf_i+0x1b6>
 800ac6e:	4615      	mov	r5, r2
 800ac70:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac74:	fb03 6711 	mls	r7, r3, r1, r6
 800ac78:	5dc7      	ldrb	r7, [r0, r7]
 800ac7a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac7e:	4637      	mov	r7, r6
 800ac80:	42bb      	cmp	r3, r7
 800ac82:	460e      	mov	r6, r1
 800ac84:	d9f4      	bls.n	800ac70 <_printf_i+0x11c>
 800ac86:	2b08      	cmp	r3, #8
 800ac88:	d10b      	bne.n	800aca2 <_printf_i+0x14e>
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	07de      	lsls	r6, r3, #31
 800ac8e:	d508      	bpl.n	800aca2 <_printf_i+0x14e>
 800ac90:	6923      	ldr	r3, [r4, #16]
 800ac92:	6861      	ldr	r1, [r4, #4]
 800ac94:	4299      	cmp	r1, r3
 800ac96:	bfde      	ittt	le
 800ac98:	2330      	movle	r3, #48	; 0x30
 800ac9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aca2:	1b52      	subs	r2, r2, r5
 800aca4:	6122      	str	r2, [r4, #16]
 800aca6:	464b      	mov	r3, r9
 800aca8:	4621      	mov	r1, r4
 800acaa:	4640      	mov	r0, r8
 800acac:	f8cd a000 	str.w	sl, [sp]
 800acb0:	aa03      	add	r2, sp, #12
 800acb2:	f7ff fedf 	bl	800aa74 <_printf_common>
 800acb6:	3001      	adds	r0, #1
 800acb8:	d14c      	bne.n	800ad54 <_printf_i+0x200>
 800acba:	f04f 30ff 	mov.w	r0, #4294967295
 800acbe:	b004      	add	sp, #16
 800acc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc4:	4834      	ldr	r0, [pc, #208]	; (800ad98 <_printf_i+0x244>)
 800acc6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800acca:	6829      	ldr	r1, [r5, #0]
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	f851 6b04 	ldr.w	r6, [r1], #4
 800acd2:	6029      	str	r1, [r5, #0]
 800acd4:	061d      	lsls	r5, r3, #24
 800acd6:	d514      	bpl.n	800ad02 <_printf_i+0x1ae>
 800acd8:	07df      	lsls	r7, r3, #31
 800acda:	bf44      	itt	mi
 800acdc:	f043 0320 	orrmi.w	r3, r3, #32
 800ace0:	6023      	strmi	r3, [r4, #0]
 800ace2:	b91e      	cbnz	r6, 800acec <_printf_i+0x198>
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	f023 0320 	bic.w	r3, r3, #32
 800acea:	6023      	str	r3, [r4, #0]
 800acec:	2310      	movs	r3, #16
 800acee:	e7af      	b.n	800ac50 <_printf_i+0xfc>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	f043 0320 	orr.w	r3, r3, #32
 800acf6:	6023      	str	r3, [r4, #0]
 800acf8:	2378      	movs	r3, #120	; 0x78
 800acfa:	4828      	ldr	r0, [pc, #160]	; (800ad9c <_printf_i+0x248>)
 800acfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad00:	e7e3      	b.n	800acca <_printf_i+0x176>
 800ad02:	0659      	lsls	r1, r3, #25
 800ad04:	bf48      	it	mi
 800ad06:	b2b6      	uxthmi	r6, r6
 800ad08:	e7e6      	b.n	800acd8 <_printf_i+0x184>
 800ad0a:	4615      	mov	r5, r2
 800ad0c:	e7bb      	b.n	800ac86 <_printf_i+0x132>
 800ad0e:	682b      	ldr	r3, [r5, #0]
 800ad10:	6826      	ldr	r6, [r4, #0]
 800ad12:	1d18      	adds	r0, r3, #4
 800ad14:	6961      	ldr	r1, [r4, #20]
 800ad16:	6028      	str	r0, [r5, #0]
 800ad18:	0635      	lsls	r5, r6, #24
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	d501      	bpl.n	800ad22 <_printf_i+0x1ce>
 800ad1e:	6019      	str	r1, [r3, #0]
 800ad20:	e002      	b.n	800ad28 <_printf_i+0x1d4>
 800ad22:	0670      	lsls	r0, r6, #25
 800ad24:	d5fb      	bpl.n	800ad1e <_printf_i+0x1ca>
 800ad26:	8019      	strh	r1, [r3, #0]
 800ad28:	2300      	movs	r3, #0
 800ad2a:	4615      	mov	r5, r2
 800ad2c:	6123      	str	r3, [r4, #16]
 800ad2e:	e7ba      	b.n	800aca6 <_printf_i+0x152>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	2100      	movs	r1, #0
 800ad34:	1d1a      	adds	r2, r3, #4
 800ad36:	602a      	str	r2, [r5, #0]
 800ad38:	681d      	ldr	r5, [r3, #0]
 800ad3a:	6862      	ldr	r2, [r4, #4]
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	f000 f82f 	bl	800ada0 <memchr>
 800ad42:	b108      	cbz	r0, 800ad48 <_printf_i+0x1f4>
 800ad44:	1b40      	subs	r0, r0, r5
 800ad46:	6060      	str	r0, [r4, #4]
 800ad48:	6863      	ldr	r3, [r4, #4]
 800ad4a:	6123      	str	r3, [r4, #16]
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad52:	e7a8      	b.n	800aca6 <_printf_i+0x152>
 800ad54:	462a      	mov	r2, r5
 800ad56:	4649      	mov	r1, r9
 800ad58:	4640      	mov	r0, r8
 800ad5a:	6923      	ldr	r3, [r4, #16]
 800ad5c:	47d0      	blx	sl
 800ad5e:	3001      	adds	r0, #1
 800ad60:	d0ab      	beq.n	800acba <_printf_i+0x166>
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	079b      	lsls	r3, r3, #30
 800ad66:	d413      	bmi.n	800ad90 <_printf_i+0x23c>
 800ad68:	68e0      	ldr	r0, [r4, #12]
 800ad6a:	9b03      	ldr	r3, [sp, #12]
 800ad6c:	4298      	cmp	r0, r3
 800ad6e:	bfb8      	it	lt
 800ad70:	4618      	movlt	r0, r3
 800ad72:	e7a4      	b.n	800acbe <_printf_i+0x16a>
 800ad74:	2301      	movs	r3, #1
 800ad76:	4632      	mov	r2, r6
 800ad78:	4649      	mov	r1, r9
 800ad7a:	4640      	mov	r0, r8
 800ad7c:	47d0      	blx	sl
 800ad7e:	3001      	adds	r0, #1
 800ad80:	d09b      	beq.n	800acba <_printf_i+0x166>
 800ad82:	3501      	adds	r5, #1
 800ad84:	68e3      	ldr	r3, [r4, #12]
 800ad86:	9903      	ldr	r1, [sp, #12]
 800ad88:	1a5b      	subs	r3, r3, r1
 800ad8a:	42ab      	cmp	r3, r5
 800ad8c:	dcf2      	bgt.n	800ad74 <_printf_i+0x220>
 800ad8e:	e7eb      	b.n	800ad68 <_printf_i+0x214>
 800ad90:	2500      	movs	r5, #0
 800ad92:	f104 0619 	add.w	r6, r4, #25
 800ad96:	e7f5      	b.n	800ad84 <_printf_i+0x230>
 800ad98:	0800b4cd 	.word	0x0800b4cd
 800ad9c:	0800b4de 	.word	0x0800b4de

0800ada0 <memchr>:
 800ada0:	4603      	mov	r3, r0
 800ada2:	b510      	push	{r4, lr}
 800ada4:	b2c9      	uxtb	r1, r1
 800ada6:	4402      	add	r2, r0
 800ada8:	4293      	cmp	r3, r2
 800adaa:	4618      	mov	r0, r3
 800adac:	d101      	bne.n	800adb2 <memchr+0x12>
 800adae:	2000      	movs	r0, #0
 800adb0:	e003      	b.n	800adba <memchr+0x1a>
 800adb2:	7804      	ldrb	r4, [r0, #0]
 800adb4:	3301      	adds	r3, #1
 800adb6:	428c      	cmp	r4, r1
 800adb8:	d1f6      	bne.n	800ada8 <memchr+0x8>
 800adba:	bd10      	pop	{r4, pc}

0800adbc <memmove>:
 800adbc:	4288      	cmp	r0, r1
 800adbe:	b510      	push	{r4, lr}
 800adc0:	eb01 0402 	add.w	r4, r1, r2
 800adc4:	d902      	bls.n	800adcc <memmove+0x10>
 800adc6:	4284      	cmp	r4, r0
 800adc8:	4623      	mov	r3, r4
 800adca:	d807      	bhi.n	800addc <memmove+0x20>
 800adcc:	1e43      	subs	r3, r0, #1
 800adce:	42a1      	cmp	r1, r4
 800add0:	d008      	beq.n	800ade4 <memmove+0x28>
 800add2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800add6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adda:	e7f8      	b.n	800adce <memmove+0x12>
 800addc:	4601      	mov	r1, r0
 800adde:	4402      	add	r2, r0
 800ade0:	428a      	cmp	r2, r1
 800ade2:	d100      	bne.n	800ade6 <memmove+0x2a>
 800ade4:	bd10      	pop	{r4, pc}
 800ade6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adee:	e7f7      	b.n	800ade0 <memmove+0x24>

0800adf0 <_free_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4605      	mov	r5, r0
 800adf4:	2900      	cmp	r1, #0
 800adf6:	d040      	beq.n	800ae7a <_free_r+0x8a>
 800adf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adfc:	1f0c      	subs	r4, r1, #4
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	bfb8      	it	lt
 800ae02:	18e4      	addlt	r4, r4, r3
 800ae04:	f000 f910 	bl	800b028 <__malloc_lock>
 800ae08:	4a1c      	ldr	r2, [pc, #112]	; (800ae7c <_free_r+0x8c>)
 800ae0a:	6813      	ldr	r3, [r2, #0]
 800ae0c:	b933      	cbnz	r3, 800ae1c <_free_r+0x2c>
 800ae0e:	6063      	str	r3, [r4, #4]
 800ae10:	6014      	str	r4, [r2, #0]
 800ae12:	4628      	mov	r0, r5
 800ae14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae18:	f000 b90c 	b.w	800b034 <__malloc_unlock>
 800ae1c:	42a3      	cmp	r3, r4
 800ae1e:	d908      	bls.n	800ae32 <_free_r+0x42>
 800ae20:	6820      	ldr	r0, [r4, #0]
 800ae22:	1821      	adds	r1, r4, r0
 800ae24:	428b      	cmp	r3, r1
 800ae26:	bf01      	itttt	eq
 800ae28:	6819      	ldreq	r1, [r3, #0]
 800ae2a:	685b      	ldreq	r3, [r3, #4]
 800ae2c:	1809      	addeq	r1, r1, r0
 800ae2e:	6021      	streq	r1, [r4, #0]
 800ae30:	e7ed      	b.n	800ae0e <_free_r+0x1e>
 800ae32:	461a      	mov	r2, r3
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	b10b      	cbz	r3, 800ae3c <_free_r+0x4c>
 800ae38:	42a3      	cmp	r3, r4
 800ae3a:	d9fa      	bls.n	800ae32 <_free_r+0x42>
 800ae3c:	6811      	ldr	r1, [r2, #0]
 800ae3e:	1850      	adds	r0, r2, r1
 800ae40:	42a0      	cmp	r0, r4
 800ae42:	d10b      	bne.n	800ae5c <_free_r+0x6c>
 800ae44:	6820      	ldr	r0, [r4, #0]
 800ae46:	4401      	add	r1, r0
 800ae48:	1850      	adds	r0, r2, r1
 800ae4a:	4283      	cmp	r3, r0
 800ae4c:	6011      	str	r1, [r2, #0]
 800ae4e:	d1e0      	bne.n	800ae12 <_free_r+0x22>
 800ae50:	6818      	ldr	r0, [r3, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	4401      	add	r1, r0
 800ae56:	6011      	str	r1, [r2, #0]
 800ae58:	6053      	str	r3, [r2, #4]
 800ae5a:	e7da      	b.n	800ae12 <_free_r+0x22>
 800ae5c:	d902      	bls.n	800ae64 <_free_r+0x74>
 800ae5e:	230c      	movs	r3, #12
 800ae60:	602b      	str	r3, [r5, #0]
 800ae62:	e7d6      	b.n	800ae12 <_free_r+0x22>
 800ae64:	6820      	ldr	r0, [r4, #0]
 800ae66:	1821      	adds	r1, r4, r0
 800ae68:	428b      	cmp	r3, r1
 800ae6a:	bf01      	itttt	eq
 800ae6c:	6819      	ldreq	r1, [r3, #0]
 800ae6e:	685b      	ldreq	r3, [r3, #4]
 800ae70:	1809      	addeq	r1, r1, r0
 800ae72:	6021      	streq	r1, [r4, #0]
 800ae74:	6063      	str	r3, [r4, #4]
 800ae76:	6054      	str	r4, [r2, #4]
 800ae78:	e7cb      	b.n	800ae12 <_free_r+0x22>
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	20001750 	.word	0x20001750

0800ae80 <sbrk_aligned>:
 800ae80:	b570      	push	{r4, r5, r6, lr}
 800ae82:	4e0e      	ldr	r6, [pc, #56]	; (800aebc <sbrk_aligned+0x3c>)
 800ae84:	460c      	mov	r4, r1
 800ae86:	6831      	ldr	r1, [r6, #0]
 800ae88:	4605      	mov	r5, r0
 800ae8a:	b911      	cbnz	r1, 800ae92 <sbrk_aligned+0x12>
 800ae8c:	f000 f8bc 	bl	800b008 <_sbrk_r>
 800ae90:	6030      	str	r0, [r6, #0]
 800ae92:	4621      	mov	r1, r4
 800ae94:	4628      	mov	r0, r5
 800ae96:	f000 f8b7 	bl	800b008 <_sbrk_r>
 800ae9a:	1c43      	adds	r3, r0, #1
 800ae9c:	d00a      	beq.n	800aeb4 <sbrk_aligned+0x34>
 800ae9e:	1cc4      	adds	r4, r0, #3
 800aea0:	f024 0403 	bic.w	r4, r4, #3
 800aea4:	42a0      	cmp	r0, r4
 800aea6:	d007      	beq.n	800aeb8 <sbrk_aligned+0x38>
 800aea8:	1a21      	subs	r1, r4, r0
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f000 f8ac 	bl	800b008 <_sbrk_r>
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	d101      	bne.n	800aeb8 <sbrk_aligned+0x38>
 800aeb4:	f04f 34ff 	mov.w	r4, #4294967295
 800aeb8:	4620      	mov	r0, r4
 800aeba:	bd70      	pop	{r4, r5, r6, pc}
 800aebc:	20001754 	.word	0x20001754

0800aec0 <_malloc_r>:
 800aec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec4:	1ccd      	adds	r5, r1, #3
 800aec6:	f025 0503 	bic.w	r5, r5, #3
 800aeca:	3508      	adds	r5, #8
 800aecc:	2d0c      	cmp	r5, #12
 800aece:	bf38      	it	cc
 800aed0:	250c      	movcc	r5, #12
 800aed2:	2d00      	cmp	r5, #0
 800aed4:	4607      	mov	r7, r0
 800aed6:	db01      	blt.n	800aedc <_malloc_r+0x1c>
 800aed8:	42a9      	cmp	r1, r5
 800aeda:	d905      	bls.n	800aee8 <_malloc_r+0x28>
 800aedc:	230c      	movs	r3, #12
 800aede:	2600      	movs	r6, #0
 800aee0:	603b      	str	r3, [r7, #0]
 800aee2:	4630      	mov	r0, r6
 800aee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aee8:	4e2e      	ldr	r6, [pc, #184]	; (800afa4 <_malloc_r+0xe4>)
 800aeea:	f000 f89d 	bl	800b028 <__malloc_lock>
 800aeee:	6833      	ldr	r3, [r6, #0]
 800aef0:	461c      	mov	r4, r3
 800aef2:	bb34      	cbnz	r4, 800af42 <_malloc_r+0x82>
 800aef4:	4629      	mov	r1, r5
 800aef6:	4638      	mov	r0, r7
 800aef8:	f7ff ffc2 	bl	800ae80 <sbrk_aligned>
 800aefc:	1c43      	adds	r3, r0, #1
 800aefe:	4604      	mov	r4, r0
 800af00:	d14d      	bne.n	800af9e <_malloc_r+0xde>
 800af02:	6834      	ldr	r4, [r6, #0]
 800af04:	4626      	mov	r6, r4
 800af06:	2e00      	cmp	r6, #0
 800af08:	d140      	bne.n	800af8c <_malloc_r+0xcc>
 800af0a:	6823      	ldr	r3, [r4, #0]
 800af0c:	4631      	mov	r1, r6
 800af0e:	4638      	mov	r0, r7
 800af10:	eb04 0803 	add.w	r8, r4, r3
 800af14:	f000 f878 	bl	800b008 <_sbrk_r>
 800af18:	4580      	cmp	r8, r0
 800af1a:	d13a      	bne.n	800af92 <_malloc_r+0xd2>
 800af1c:	6821      	ldr	r1, [r4, #0]
 800af1e:	3503      	adds	r5, #3
 800af20:	1a6d      	subs	r5, r5, r1
 800af22:	f025 0503 	bic.w	r5, r5, #3
 800af26:	3508      	adds	r5, #8
 800af28:	2d0c      	cmp	r5, #12
 800af2a:	bf38      	it	cc
 800af2c:	250c      	movcc	r5, #12
 800af2e:	4638      	mov	r0, r7
 800af30:	4629      	mov	r1, r5
 800af32:	f7ff ffa5 	bl	800ae80 <sbrk_aligned>
 800af36:	3001      	adds	r0, #1
 800af38:	d02b      	beq.n	800af92 <_malloc_r+0xd2>
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	442b      	add	r3, r5
 800af3e:	6023      	str	r3, [r4, #0]
 800af40:	e00e      	b.n	800af60 <_malloc_r+0xa0>
 800af42:	6822      	ldr	r2, [r4, #0]
 800af44:	1b52      	subs	r2, r2, r5
 800af46:	d41e      	bmi.n	800af86 <_malloc_r+0xc6>
 800af48:	2a0b      	cmp	r2, #11
 800af4a:	d916      	bls.n	800af7a <_malloc_r+0xba>
 800af4c:	1961      	adds	r1, r4, r5
 800af4e:	42a3      	cmp	r3, r4
 800af50:	6025      	str	r5, [r4, #0]
 800af52:	bf18      	it	ne
 800af54:	6059      	strne	r1, [r3, #4]
 800af56:	6863      	ldr	r3, [r4, #4]
 800af58:	bf08      	it	eq
 800af5a:	6031      	streq	r1, [r6, #0]
 800af5c:	5162      	str	r2, [r4, r5]
 800af5e:	604b      	str	r3, [r1, #4]
 800af60:	4638      	mov	r0, r7
 800af62:	f104 060b 	add.w	r6, r4, #11
 800af66:	f000 f865 	bl	800b034 <__malloc_unlock>
 800af6a:	f026 0607 	bic.w	r6, r6, #7
 800af6e:	1d23      	adds	r3, r4, #4
 800af70:	1af2      	subs	r2, r6, r3
 800af72:	d0b6      	beq.n	800aee2 <_malloc_r+0x22>
 800af74:	1b9b      	subs	r3, r3, r6
 800af76:	50a3      	str	r3, [r4, r2]
 800af78:	e7b3      	b.n	800aee2 <_malloc_r+0x22>
 800af7a:	6862      	ldr	r2, [r4, #4]
 800af7c:	42a3      	cmp	r3, r4
 800af7e:	bf0c      	ite	eq
 800af80:	6032      	streq	r2, [r6, #0]
 800af82:	605a      	strne	r2, [r3, #4]
 800af84:	e7ec      	b.n	800af60 <_malloc_r+0xa0>
 800af86:	4623      	mov	r3, r4
 800af88:	6864      	ldr	r4, [r4, #4]
 800af8a:	e7b2      	b.n	800aef2 <_malloc_r+0x32>
 800af8c:	4634      	mov	r4, r6
 800af8e:	6876      	ldr	r6, [r6, #4]
 800af90:	e7b9      	b.n	800af06 <_malloc_r+0x46>
 800af92:	230c      	movs	r3, #12
 800af94:	4638      	mov	r0, r7
 800af96:	603b      	str	r3, [r7, #0]
 800af98:	f000 f84c 	bl	800b034 <__malloc_unlock>
 800af9c:	e7a1      	b.n	800aee2 <_malloc_r+0x22>
 800af9e:	6025      	str	r5, [r4, #0]
 800afa0:	e7de      	b.n	800af60 <_malloc_r+0xa0>
 800afa2:	bf00      	nop
 800afa4:	20001750 	.word	0x20001750

0800afa8 <_realloc_r>:
 800afa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afac:	4680      	mov	r8, r0
 800afae:	4614      	mov	r4, r2
 800afb0:	460e      	mov	r6, r1
 800afb2:	b921      	cbnz	r1, 800afbe <_realloc_r+0x16>
 800afb4:	4611      	mov	r1, r2
 800afb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afba:	f7ff bf81 	b.w	800aec0 <_malloc_r>
 800afbe:	b92a      	cbnz	r2, 800afcc <_realloc_r+0x24>
 800afc0:	f7ff ff16 	bl	800adf0 <_free_r>
 800afc4:	4625      	mov	r5, r4
 800afc6:	4628      	mov	r0, r5
 800afc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afcc:	f000 f838 	bl	800b040 <_malloc_usable_size_r>
 800afd0:	4284      	cmp	r4, r0
 800afd2:	4607      	mov	r7, r0
 800afd4:	d802      	bhi.n	800afdc <_realloc_r+0x34>
 800afd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afda:	d812      	bhi.n	800b002 <_realloc_r+0x5a>
 800afdc:	4621      	mov	r1, r4
 800afde:	4640      	mov	r0, r8
 800afe0:	f7ff ff6e 	bl	800aec0 <_malloc_r>
 800afe4:	4605      	mov	r5, r0
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d0ed      	beq.n	800afc6 <_realloc_r+0x1e>
 800afea:	42bc      	cmp	r4, r7
 800afec:	4622      	mov	r2, r4
 800afee:	4631      	mov	r1, r6
 800aff0:	bf28      	it	cs
 800aff2:	463a      	movcs	r2, r7
 800aff4:	f7ff fbac 	bl	800a750 <memcpy>
 800aff8:	4631      	mov	r1, r6
 800affa:	4640      	mov	r0, r8
 800affc:	f7ff fef8 	bl	800adf0 <_free_r>
 800b000:	e7e1      	b.n	800afc6 <_realloc_r+0x1e>
 800b002:	4635      	mov	r5, r6
 800b004:	e7df      	b.n	800afc6 <_realloc_r+0x1e>
	...

0800b008 <_sbrk_r>:
 800b008:	b538      	push	{r3, r4, r5, lr}
 800b00a:	2300      	movs	r3, #0
 800b00c:	4d05      	ldr	r5, [pc, #20]	; (800b024 <_sbrk_r+0x1c>)
 800b00e:	4604      	mov	r4, r0
 800b010:	4608      	mov	r0, r1
 800b012:	602b      	str	r3, [r5, #0]
 800b014:	f7f6 ff96 	bl	8001f44 <_sbrk>
 800b018:	1c43      	adds	r3, r0, #1
 800b01a:	d102      	bne.n	800b022 <_sbrk_r+0x1a>
 800b01c:	682b      	ldr	r3, [r5, #0]
 800b01e:	b103      	cbz	r3, 800b022 <_sbrk_r+0x1a>
 800b020:	6023      	str	r3, [r4, #0]
 800b022:	bd38      	pop	{r3, r4, r5, pc}
 800b024:	20001758 	.word	0x20001758

0800b028 <__malloc_lock>:
 800b028:	4801      	ldr	r0, [pc, #4]	; (800b030 <__malloc_lock+0x8>)
 800b02a:	f000 b811 	b.w	800b050 <__retarget_lock_acquire_recursive>
 800b02e:	bf00      	nop
 800b030:	2000175c 	.word	0x2000175c

0800b034 <__malloc_unlock>:
 800b034:	4801      	ldr	r0, [pc, #4]	; (800b03c <__malloc_unlock+0x8>)
 800b036:	f000 b80c 	b.w	800b052 <__retarget_lock_release_recursive>
 800b03a:	bf00      	nop
 800b03c:	2000175c 	.word	0x2000175c

0800b040 <_malloc_usable_size_r>:
 800b040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b044:	1f18      	subs	r0, r3, #4
 800b046:	2b00      	cmp	r3, #0
 800b048:	bfbc      	itt	lt
 800b04a:	580b      	ldrlt	r3, [r1, r0]
 800b04c:	18c0      	addlt	r0, r0, r3
 800b04e:	4770      	bx	lr

0800b050 <__retarget_lock_acquire_recursive>:
 800b050:	4770      	bx	lr

0800b052 <__retarget_lock_release_recursive>:
 800b052:	4770      	bx	lr

0800b054 <_init>:
 800b054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b056:	bf00      	nop
 800b058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b05a:	bc08      	pop	{r3}
 800b05c:	469e      	mov	lr, r3
 800b05e:	4770      	bx	lr

0800b060 <_fini>:
 800b060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b062:	bf00      	nop
 800b064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b066:	bc08      	pop	{r3}
 800b068:	469e      	mov	lr, r3
 800b06a:	4770      	bx	lr
