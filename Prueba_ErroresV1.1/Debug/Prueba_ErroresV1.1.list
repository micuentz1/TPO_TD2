
Prueba_ErroresV1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c20  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005d30  08005d30  00015d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e80  08005e80  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08005e80  08005e80  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e80  08005e80  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001110  20000088  08005f10  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001198  08005f10  00021198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013adc  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003441  00000000  00000000  00033b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  00036fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  00038508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170c5  00000000  00000000  000398c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b2f  00000000  00000000  0005098d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d2f2  00000000  00000000  000664bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e37ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d20  00000000  00000000  000e3800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d18 	.word	0x08005d18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08005d18 	.word	0x08005d18

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_frsub>:
 8000164:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__addsf3>
 800016a:	bf00      	nop

0800016c <__aeabi_fsub>:
 800016c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000170 <__addsf3>:
 8000170:	0042      	lsls	r2, r0, #1
 8000172:	bf1f      	itttt	ne
 8000174:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000178:	ea92 0f03 	teqne	r2, r3
 800017c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000180:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000184:	d06a      	beq.n	800025c <__addsf3+0xec>
 8000186:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800018a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018e:	bfc1      	itttt	gt
 8000190:	18d2      	addgt	r2, r2, r3
 8000192:	4041      	eorgt	r1, r0
 8000194:	4048      	eorgt	r0, r1
 8000196:	4041      	eorgt	r1, r0
 8000198:	bfb8      	it	lt
 800019a:	425b      	neglt	r3, r3
 800019c:	2b19      	cmp	r3, #25
 800019e:	bf88      	it	hi
 80001a0:	4770      	bxhi	lr
 80001a2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ae:	bf18      	it	ne
 80001b0:	4240      	negne	r0, r0
 80001b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001ba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001be:	bf18      	it	ne
 80001c0:	4249      	negne	r1, r1
 80001c2:	ea92 0f03 	teq	r2, r3
 80001c6:	d03f      	beq.n	8000248 <__addsf3+0xd8>
 80001c8:	f1a2 0201 	sub.w	r2, r2, #1
 80001cc:	fa41 fc03 	asr.w	ip, r1, r3
 80001d0:	eb10 000c 	adds.w	r0, r0, ip
 80001d4:	f1c3 0320 	rsb	r3, r3, #32
 80001d8:	fa01 f103 	lsl.w	r1, r1, r3
 80001dc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001e0:	d502      	bpl.n	80001e8 <__addsf3+0x78>
 80001e2:	4249      	negs	r1, r1
 80001e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001ec:	d313      	bcc.n	8000216 <__addsf3+0xa6>
 80001ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001f2:	d306      	bcc.n	8000202 <__addsf3+0x92>
 80001f4:	0840      	lsrs	r0, r0, #1
 80001f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80001fa:	f102 0201 	add.w	r2, r2, #1
 80001fe:	2afe      	cmp	r2, #254	; 0xfe
 8000200:	d251      	bcs.n	80002a6 <__addsf3+0x136>
 8000202:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000206:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800020a:	bf08      	it	eq
 800020c:	f020 0001 	biceq.w	r0, r0, #1
 8000210:	ea40 0003 	orr.w	r0, r0, r3
 8000214:	4770      	bx	lr
 8000216:	0049      	lsls	r1, r1, #1
 8000218:	eb40 0000 	adc.w	r0, r0, r0
 800021c:	3a01      	subs	r2, #1
 800021e:	bf28      	it	cs
 8000220:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000224:	d2ed      	bcs.n	8000202 <__addsf3+0x92>
 8000226:	fab0 fc80 	clz	ip, r0
 800022a:	f1ac 0c08 	sub.w	ip, ip, #8
 800022e:	ebb2 020c 	subs.w	r2, r2, ip
 8000232:	fa00 f00c 	lsl.w	r0, r0, ip
 8000236:	bfaa      	itet	ge
 8000238:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800023c:	4252      	neglt	r2, r2
 800023e:	4318      	orrge	r0, r3
 8000240:	bfbc      	itt	lt
 8000242:	40d0      	lsrlt	r0, r2
 8000244:	4318      	orrlt	r0, r3
 8000246:	4770      	bx	lr
 8000248:	f092 0f00 	teq	r2, #0
 800024c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000250:	bf06      	itte	eq
 8000252:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000256:	3201      	addeq	r2, #1
 8000258:	3b01      	subne	r3, #1
 800025a:	e7b5      	b.n	80001c8 <__addsf3+0x58>
 800025c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000260:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000264:	bf18      	it	ne
 8000266:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800026a:	d021      	beq.n	80002b0 <__addsf3+0x140>
 800026c:	ea92 0f03 	teq	r2, r3
 8000270:	d004      	beq.n	800027c <__addsf3+0x10c>
 8000272:	f092 0f00 	teq	r2, #0
 8000276:	bf08      	it	eq
 8000278:	4608      	moveq	r0, r1
 800027a:	4770      	bx	lr
 800027c:	ea90 0f01 	teq	r0, r1
 8000280:	bf1c      	itt	ne
 8000282:	2000      	movne	r0, #0
 8000284:	4770      	bxne	lr
 8000286:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800028a:	d104      	bne.n	8000296 <__addsf3+0x126>
 800028c:	0040      	lsls	r0, r0, #1
 800028e:	bf28      	it	cs
 8000290:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000294:	4770      	bx	lr
 8000296:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800029a:	bf3c      	itt	cc
 800029c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002a0:	4770      	bxcc	lr
 80002a2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ae:	4770      	bx	lr
 80002b0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b4:	bf16      	itet	ne
 80002b6:	4608      	movne	r0, r1
 80002b8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002bc:	4601      	movne	r1, r0
 80002be:	0242      	lsls	r2, r0, #9
 80002c0:	bf06      	itte	eq
 80002c2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c6:	ea90 0f01 	teqeq	r0, r1
 80002ca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_ui2f>:
 80002d0:	f04f 0300 	mov.w	r3, #0
 80002d4:	e004      	b.n	80002e0 <__aeabi_i2f+0x8>
 80002d6:	bf00      	nop

080002d8 <__aeabi_i2f>:
 80002d8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002dc:	bf48      	it	mi
 80002de:	4240      	negmi	r0, r0
 80002e0:	ea5f 0c00 	movs.w	ip, r0
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002ec:	4601      	mov	r1, r0
 80002ee:	f04f 0000 	mov.w	r0, #0
 80002f2:	e01c      	b.n	800032e <__aeabi_l2f+0x2a>

080002f4 <__aeabi_ul2f>:
 80002f4:	ea50 0201 	orrs.w	r2, r0, r1
 80002f8:	bf08      	it	eq
 80002fa:	4770      	bxeq	lr
 80002fc:	f04f 0300 	mov.w	r3, #0
 8000300:	e00a      	b.n	8000318 <__aeabi_l2f+0x14>
 8000302:	bf00      	nop

08000304 <__aeabi_l2f>:
 8000304:	ea50 0201 	orrs.w	r2, r0, r1
 8000308:	bf08      	it	eq
 800030a:	4770      	bxeq	lr
 800030c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000310:	d502      	bpl.n	8000318 <__aeabi_l2f+0x14>
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	ea5f 0c01 	movs.w	ip, r1
 800031c:	bf02      	ittt	eq
 800031e:	4684      	moveq	ip, r0
 8000320:	4601      	moveq	r1, r0
 8000322:	2000      	moveq	r0, #0
 8000324:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000328:	bf08      	it	eq
 800032a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000332:	fabc f28c 	clz	r2, ip
 8000336:	3a08      	subs	r2, #8
 8000338:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800033c:	db10      	blt.n	8000360 <__aeabi_l2f+0x5c>
 800033e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000342:	4463      	add	r3, ip
 8000344:	fa00 fc02 	lsl.w	ip, r0, r2
 8000348:	f1c2 0220 	rsb	r2, r2, #32
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000350:	fa20 f202 	lsr.w	r2, r0, r2
 8000354:	eb43 0002 	adc.w	r0, r3, r2
 8000358:	bf08      	it	eq
 800035a:	f020 0001 	biceq.w	r0, r0, #1
 800035e:	4770      	bx	lr
 8000360:	f102 0220 	add.w	r2, r2, #32
 8000364:	fa01 fc02 	lsl.w	ip, r1, r2
 8000368:	f1c2 0220 	rsb	r2, r2, #32
 800036c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000370:	fa21 f202 	lsr.w	r2, r1, r2
 8000374:	eb43 0002 	adc.w	r0, r3, r2
 8000378:	bf08      	it	eq
 800037a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037e:	4770      	bx	lr

08000380 <__aeabi_fmul>:
 8000380:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000384:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000388:	bf1e      	ittt	ne
 800038a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038e:	ea92 0f0c 	teqne	r2, ip
 8000392:	ea93 0f0c 	teqne	r3, ip
 8000396:	d06f      	beq.n	8000478 <__aeabi_fmul+0xf8>
 8000398:	441a      	add	r2, r3
 800039a:	ea80 0c01 	eor.w	ip, r0, r1
 800039e:	0240      	lsls	r0, r0, #9
 80003a0:	bf18      	it	ne
 80003a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a6:	d01e      	beq.n	80003e6 <__aeabi_fmul+0x66>
 80003a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b4:	fba0 3101 	umull	r3, r1, r0, r1
 80003b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003c0:	bf3e      	ittt	cc
 80003c2:	0049      	lslcc	r1, r1, #1
 80003c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c8:	005b      	lslcc	r3, r3, #1
 80003ca:	ea40 0001 	orr.w	r0, r0, r1
 80003ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003d2:	2afd      	cmp	r2, #253	; 0xfd
 80003d4:	d81d      	bhi.n	8000412 <__aeabi_fmul+0x92>
 80003d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003de:	bf08      	it	eq
 80003e0:	f020 0001 	biceq.w	r0, r0, #1
 80003e4:	4770      	bx	lr
 80003e6:	f090 0f00 	teq	r0, #0
 80003ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ee:	bf08      	it	eq
 80003f0:	0249      	lsleq	r1, r1, #9
 80003f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003fa:	3a7f      	subs	r2, #127	; 0x7f
 80003fc:	bfc2      	ittt	gt
 80003fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000402:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000406:	4770      	bxgt	lr
 8000408:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800040c:	f04f 0300 	mov.w	r3, #0
 8000410:	3a01      	subs	r2, #1
 8000412:	dc5d      	bgt.n	80004d0 <__aeabi_fmul+0x150>
 8000414:	f112 0f19 	cmn.w	r2, #25
 8000418:	bfdc      	itt	le
 800041a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041e:	4770      	bxle	lr
 8000420:	f1c2 0200 	rsb	r2, r2, #0
 8000424:	0041      	lsls	r1, r0, #1
 8000426:	fa21 f102 	lsr.w	r1, r1, r2
 800042a:	f1c2 0220 	rsb	r2, r2, #32
 800042e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000432:	ea5f 0031 	movs.w	r0, r1, rrx
 8000436:	f140 0000 	adc.w	r0, r0, #0
 800043a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043e:	bf08      	it	eq
 8000440:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000444:	4770      	bx	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0040      	lsleq	r0, r0, #1
 8000452:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000456:	3a01      	subeq	r2, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xce>
 800045a:	ea40 000c 	orr.w	r0, r0, ip
 800045e:	f093 0f00 	teq	r3, #0
 8000462:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0049      	lsleq	r1, r1, #1
 800046a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046e:	3b01      	subeq	r3, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xe6>
 8000472:	ea41 010c 	orr.w	r1, r1, ip
 8000476:	e78f      	b.n	8000398 <__aeabi_fmul+0x18>
 8000478:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800047c:	ea92 0f0c 	teq	r2, ip
 8000480:	bf18      	it	ne
 8000482:	ea93 0f0c 	teqne	r3, ip
 8000486:	d00a      	beq.n	800049e <__aeabi_fmul+0x11e>
 8000488:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800048c:	bf18      	it	ne
 800048e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000492:	d1d8      	bne.n	8000446 <__aeabi_fmul+0xc6>
 8000494:	ea80 0001 	eor.w	r0, r0, r1
 8000498:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800049c:	4770      	bx	lr
 800049e:	f090 0f00 	teq	r0, #0
 80004a2:	bf17      	itett	ne
 80004a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a8:	4608      	moveq	r0, r1
 80004aa:	f091 0f00 	teqne	r1, #0
 80004ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004b2:	d014      	beq.n	80004de <__aeabi_fmul+0x15e>
 80004b4:	ea92 0f0c 	teq	r2, ip
 80004b8:	d101      	bne.n	80004be <__aeabi_fmul+0x13e>
 80004ba:	0242      	lsls	r2, r0, #9
 80004bc:	d10f      	bne.n	80004de <__aeabi_fmul+0x15e>
 80004be:	ea93 0f0c 	teq	r3, ip
 80004c2:	d103      	bne.n	80004cc <__aeabi_fmul+0x14c>
 80004c4:	024b      	lsls	r3, r1, #9
 80004c6:	bf18      	it	ne
 80004c8:	4608      	movne	r0, r1
 80004ca:	d108      	bne.n	80004de <__aeabi_fmul+0x15e>
 80004cc:	ea80 0001 	eor.w	r0, r0, r1
 80004d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004dc:	4770      	bx	lr
 80004de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e6:	4770      	bx	lr

080004e8 <__aeabi_fdiv>:
 80004e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004f0:	bf1e      	ittt	ne
 80004f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f6:	ea92 0f0c 	teqne	r2, ip
 80004fa:	ea93 0f0c 	teqne	r3, ip
 80004fe:	d069      	beq.n	80005d4 <__aeabi_fdiv+0xec>
 8000500:	eba2 0203 	sub.w	r2, r2, r3
 8000504:	ea80 0c01 	eor.w	ip, r0, r1
 8000508:	0249      	lsls	r1, r1, #9
 800050a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050e:	d037      	beq.n	8000580 <__aeabi_fdiv+0x98>
 8000510:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000514:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000518:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800051c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000520:	428b      	cmp	r3, r1
 8000522:	bf38      	it	cc
 8000524:	005b      	lslcc	r3, r3, #1
 8000526:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800052a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052e:	428b      	cmp	r3, r1
 8000530:	bf24      	itt	cs
 8000532:	1a5b      	subcs	r3, r3, r1
 8000534:	ea40 000c 	orrcs.w	r0, r0, ip
 8000538:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800053c:	bf24      	itt	cs
 800053e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000542:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000546:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800054a:	bf24      	itt	cs
 800054c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000550:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000554:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000558:	bf24      	itt	cs
 800055a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	bf18      	it	ne
 8000566:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800056a:	d1e0      	bne.n	800052e <__aeabi_fdiv+0x46>
 800056c:	2afd      	cmp	r2, #253	; 0xfd
 800056e:	f63f af50 	bhi.w	8000412 <__aeabi_fmul+0x92>
 8000572:	428b      	cmp	r3, r1
 8000574:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000584:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000588:	327f      	adds	r2, #127	; 0x7f
 800058a:	bfc2      	ittt	gt
 800058c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000590:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000594:	4770      	bxgt	lr
 8000596:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059a:	f04f 0300 	mov.w	r3, #0
 800059e:	3a01      	subs	r2, #1
 80005a0:	e737      	b.n	8000412 <__aeabi_fmul+0x92>
 80005a2:	f092 0f00 	teq	r2, #0
 80005a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0040      	lsleq	r0, r0, #1
 80005ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005b2:	3a01      	subeq	r2, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xc2>
 80005b6:	ea40 000c 	orr.w	r0, r0, ip
 80005ba:	f093 0f00 	teq	r3, #0
 80005be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0049      	lsleq	r1, r1, #1
 80005c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005ca:	3b01      	subeq	r3, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xda>
 80005ce:	ea41 010c 	orr.w	r1, r1, ip
 80005d2:	e795      	b.n	8000500 <__aeabi_fdiv+0x18>
 80005d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d8:	ea92 0f0c 	teq	r2, ip
 80005dc:	d108      	bne.n	80005f0 <__aeabi_fdiv+0x108>
 80005de:	0242      	lsls	r2, r0, #9
 80005e0:	f47f af7d 	bne.w	80004de <__aeabi_fmul+0x15e>
 80005e4:	ea93 0f0c 	teq	r3, ip
 80005e8:	f47f af70 	bne.w	80004cc <__aeabi_fmul+0x14c>
 80005ec:	4608      	mov	r0, r1
 80005ee:	e776      	b.n	80004de <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	d104      	bne.n	8000600 <__aeabi_fdiv+0x118>
 80005f6:	024b      	lsls	r3, r1, #9
 80005f8:	f43f af4c 	beq.w	8000494 <__aeabi_fmul+0x114>
 80005fc:	4608      	mov	r0, r1
 80005fe:	e76e      	b.n	80004de <__aeabi_fmul+0x15e>
 8000600:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000604:	bf18      	it	ne
 8000606:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800060a:	d1ca      	bne.n	80005a2 <__aeabi_fdiv+0xba>
 800060c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000610:	f47f af5c 	bne.w	80004cc <__aeabi_fmul+0x14c>
 8000614:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000618:	f47f af3c 	bne.w	8000494 <__aeabi_fmul+0x114>
 800061c:	e75f      	b.n	80004de <__aeabi_fmul+0x15e>
 800061e:	bf00      	nop

08000620 <__gesf2>:
 8000620:	f04f 3cff 	mov.w	ip, #4294967295
 8000624:	e006      	b.n	8000634 <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__lesf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	e002      	b.n	8000634 <__cmpsf2+0x4>
 800062e:	bf00      	nop

08000630 <__cmpsf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000638:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800063c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000640:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000644:	bf18      	it	ne
 8000646:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800064a:	d011      	beq.n	8000670 <__cmpsf2+0x40>
 800064c:	b001      	add	sp, #4
 800064e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000652:	bf18      	it	ne
 8000654:	ea90 0f01 	teqne	r0, r1
 8000658:	bf58      	it	pl
 800065a:	ebb2 0003 	subspl.w	r0, r2, r3
 800065e:	bf88      	it	hi
 8000660:	17c8      	asrhi	r0, r1, #31
 8000662:	bf38      	it	cc
 8000664:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000668:	bf18      	it	ne
 800066a:	f040 0001 	orrne.w	r0, r0, #1
 800066e:	4770      	bx	lr
 8000670:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000674:	d102      	bne.n	800067c <__cmpsf2+0x4c>
 8000676:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800067a:	d105      	bne.n	8000688 <__cmpsf2+0x58>
 800067c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000680:	d1e4      	bne.n	800064c <__cmpsf2+0x1c>
 8000682:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000686:	d0e1      	beq.n	800064c <__cmpsf2+0x1c>
 8000688:	f85d 0b04 	ldr.w	r0, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <__aeabi_cfrcmple>:
 8000690:	4684      	mov	ip, r0
 8000692:	4608      	mov	r0, r1
 8000694:	4661      	mov	r1, ip
 8000696:	e7ff      	b.n	8000698 <__aeabi_cfcmpeq>

08000698 <__aeabi_cfcmpeq>:
 8000698:	b50f      	push	{r0, r1, r2, r3, lr}
 800069a:	f7ff ffc9 	bl	8000630 <__cmpsf2>
 800069e:	2800      	cmp	r0, #0
 80006a0:	bf48      	it	mi
 80006a2:	f110 0f00 	cmnmi.w	r0, #0
 80006a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a8 <__aeabi_fcmpeq>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff fff4 	bl	8000698 <__aeabi_cfcmpeq>
 80006b0:	bf0c      	ite	eq
 80006b2:	2001      	moveq	r0, #1
 80006b4:	2000      	movne	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmplt>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffea 	bl	8000698 <__aeabi_cfcmpeq>
 80006c4:	bf34      	ite	cc
 80006c6:	2001      	movcc	r0, #1
 80006c8:	2000      	movcs	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmple>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffe0 	bl	8000698 <__aeabi_cfcmpeq>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpge>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffd2 	bl	8000690 <__aeabi_cfrcmple>
 80006ec:	bf94      	ite	ls
 80006ee:	2001      	movls	r0, #1
 80006f0:	2000      	movhi	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_fcmpgt>:
 80006f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006fc:	f7ff ffc8 	bl	8000690 <__aeabi_cfrcmple>
 8000700:	bf34      	ite	cc
 8000702:	2001      	movcc	r0, #1
 8000704:	2000      	movcs	r0, #0
 8000706:	f85d fb08 	ldr.w	pc, [sp], #8
 800070a:	bf00      	nop

0800070c <Tarea_Lectura>:
*	\author  Grupo6_2022
*	\date    11-10-2022 12:25:11
*/


void Tarea_Lectura( void *p ) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]

	TickType_t xLastWakeTime;

	while(1) {

		xLastWakeTime = xTaskGetTickCount();
 8000714:	f004 f862 	bl	80047dc <xTaskGetTickCount>
 8000718:	4603      	mov	r3, r0
 800071a:	60fb      	str	r3, [r7, #12]

		get_Temperature();
 800071c:	f000 fce2 	bl	80010e4 <get_Temperature>

		//vTaskDelayUntil(&xLastWakeTime,ONE_SEC);
		vTaskDelayUntil(&xLastWakeTime, 1000);
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000728:	4618      	mov	r0, r3
 800072a:	f003 fe9b 	bl	8004464 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 800072e:	e7f1      	b.n	8000714 <Tarea_Lectura+0x8>

08000730 <Error_Sensores>:

	vTaskDelete(NULL); // En caso de romperse el loop
}


void Error_Sensores( void *p ) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

	float dif=0, dif_s0=0, dif_s1=0, auxTemp[2] = {0, 0};
 8000738:	f04f 0300 	mov.w	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
 800073e:	f04f 0300 	mov.w	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	f04f 0300 	mov.w	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	f04f 0300 	mov.w	r3, #0
 8000754:	613b      	str	r3, [r7, #16]

	while(1) {

		dif = Temp[1] - Temp[0];
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <Error_Sensores+0x8c>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	4a18      	ldr	r2, [pc, #96]	; (80007bc <Error_Sensores+0x8c>)
 800075c:	6812      	ldr	r2, [r2, #0]
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fd03 	bl	800016c <__aeabi_fsub>
 8000766:	4603      	mov	r3, r0
 8000768:	61fb      	str	r3, [r7, #28]

		// Chequeamos que los sensores funcionen bien
		if( (dif>MAX_DIF_P) || (dif<MAX_DIF_N) ) {
 800076a:	4915      	ldr	r1, [pc, #84]	; (80007c0 <Error_Sensores+0x90>)
 800076c:	69f8      	ldr	r0, [r7, #28]
 800076e:	f7ff ffc3 	bl	80006f8 <__aeabi_fcmpgt>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d106      	bne.n	8000786 <Error_Sensores+0x56>
 8000778:	4912      	ldr	r1, [pc, #72]	; (80007c4 <Error_Sensores+0x94>)
 800077a:	69f8      	ldr	r0, [r7, #28]
 800077c:	f7ff ff9e 	bl	80006bc <__aeabi_fcmplt>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d015      	beq.n	80007b2 <Error_Sensores+0x82>
			HAL_GPIO_WritePin(GREEN_PORT, GREEN_PIN, OFF);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078c:	480e      	ldr	r0, [pc, #56]	; (80007c8 <Error_Sensores+0x98>)
 800078e:	f001 fdc5 	bl	800231c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_PORT, RED_PIN, ON);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <Error_Sensores+0x98>)
 800079a:	f001 fdbf 	bl	800231c <HAL_GPIO_WritePin>

		    HD44780_PrintStr("Error en");
 800079e:	480b      	ldr	r0, [pc, #44]	; (80007cc <Error_Sensores+0x9c>)
 80007a0:	f000 fe73 	bl	800148a <HD44780_PrintStr>
		    HD44780_SetCursor(10,1);
 80007a4:	2101      	movs	r1, #1
 80007a6:	200a      	movs	r0, #10
 80007a8:	f000 fde8 	bl	800137c <HD44780_SetCursor>
		    HD44780_PrintStr("Sensores");
 80007ac:	4808      	ldr	r0, [pc, #32]	; (80007d0 <Error_Sensores+0xa0>)
 80007ae:	f000 fe6c 	bl	800148a <HD44780_PrintStr>
			//f_Error = 1; Comento porque de momento no se usa

			// En base a si la dif es positiva o negativa sabemos cual sensor fallo
		}

		vTaskDelay(ONE_SEC); // Tiene que ser 1s
 80007b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b6:	f003 fed3 	bl	8004560 <vTaskDelay>
		dif = Temp[1] - Temp[0];
 80007ba:	e7cc      	b.n	8000756 <Error_Sensores+0x26>
 80007bc:	200000b4 	.word	0x200000b4
 80007c0:	40a00000 	.word	0x40a00000
 80007c4:	c0a00000 	.word	0xc0a00000
 80007c8:	40010c00 	.word	0x40010c00
 80007cc:	08005d30 	.word	0x08005d30
 80007d0:	08005d3c 	.word	0x08005d3c

080007d4 <Error_Anafe>:
	vTaskDelete(NULL); // En caso de romperse el loop
}


void Error_Anafe(void *p)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	float dif_s0=0, dif_s1=0, auxTemp[2] = {0, 0};
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	f04f 0300 	mov.w	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	f04f 0300 	mov.w	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	f04f 0300 	mov.w	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]

	while(1)
	{

		dif_s0 = Temp[0]-auxTemp[0];
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <Error_Anafe+0xa8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	68ba      	ldr	r2, [r7, #8]
 80007fa:	4611      	mov	r1, r2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fcb5 	bl	800016c <__aeabi_fsub>
 8000802:	4603      	mov	r3, r0
 8000804:	617b      	str	r3, [r7, #20]
		dif_s1 = Temp[1]-auxTemp[1];
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <Error_Anafe+0xa8>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fcac 	bl	800016c <__aeabi_fsub>
 8000814:	4603      	mov	r3, r0
 8000816:	613b      	str	r3, [r7, #16]

		auxTemp[0] = Temp[0];
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <Error_Anafe+0xa8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	60bb      	str	r3, [r7, #8]
		auxTemp[1] = Temp[1];
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <Error_Anafe+0xa8>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	60fb      	str	r3, [r7, #12]
		// Chequeamos que el anafe funcione bien
		if( (dif_s0<MIN_DIF_CALENTAMIENTO) || (dif_s1<MIN_DIF_CALENTAMIENTO) ) {
 8000824:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000828:	6978      	ldr	r0, [r7, #20]
 800082a:	f7ff ff47 	bl	80006bc <__aeabi_fcmplt>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d107      	bne.n	8000844 <Error_Anafe+0x70>
 8000834:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000838:	6938      	ldr	r0, [r7, #16]
 800083a:	f7ff ff3f 	bl	80006bc <__aeabi_fcmplt>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d015      	beq.n	8000870 <Error_Anafe+0x9c>
			HAL_GPIO_WritePin(GREEN_PORT, GREEN_PIN, OFF);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800084a:	480d      	ldr	r0, [pc, #52]	; (8000880 <Error_Anafe+0xac>)
 800084c:	f001 fd66 	bl	800231c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_PORT, RED_PIN, ON);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000856:	480a      	ldr	r0, [pc, #40]	; (8000880 <Error_Anafe+0xac>)
 8000858:	f001 fd60 	bl	800231c <HAL_GPIO_WritePin>

		    HD44780_PrintStr("Error en");
 800085c:	4809      	ldr	r0, [pc, #36]	; (8000884 <Error_Anafe+0xb0>)
 800085e:	f000 fe14 	bl	800148a <HD44780_PrintStr>
		    HD44780_SetCursor(10,1);
 8000862:	2101      	movs	r1, #1
 8000864:	200a      	movs	r0, #10
 8000866:	f000 fd89 	bl	800137c <HD44780_SetCursor>
		    HD44780_PrintStr("Anafe");
 800086a:	4807      	ldr	r0, [pc, #28]	; (8000888 <Error_Anafe+0xb4>)
 800086c:	f000 fe0d 	bl	800148a <HD44780_PrintStr>

			//f_Error = 1; Comento porque de momento no se usa

		}

		vTaskDelay(5*ONE_SEC); // Que mida cada 5 secs
 8000870:	f241 3088 	movw	r0, #5000	; 0x1388
 8000874:	f003 fe74 	bl	8004560 <vTaskDelay>
		dif_s0 = Temp[0]-auxTemp[0];
 8000878:	e7bc      	b.n	80007f4 <Error_Anafe+0x20>
 800087a:	bf00      	nop
 800087c:	200000b4 	.word	0x200000b4
 8000880:	40010c00 	.word	0x40010c00
 8000884:	08005d30 	.word	0x08005d30
 8000888:	08005d48 	.word	0x08005d48

0800088c <USART_SendData>:
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
}

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000898:	887b      	ldrh	r3, [r7, #2]
 800089a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	605a      	str	r2, [r3, #4]
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <usart_setup>:


uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <usart_setup+0x60>)
 80008b6:	4a16      	ldr	r2, [pc, #88]	; (8000910 <usart_setup+0x64>)
 80008b8:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 80008ba:	4a14      	ldr	r2, [pc, #80]	; (800090c <usart_setup+0x60>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <usart_setup+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <usart_setup+0x60>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <usart_setup+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <usart_setup+0x60>)
 80008d4:	220c      	movs	r2, #12
 80008d6:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <usart_setup+0x60>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <usart_setup+0x60>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 80008e4:	4809      	ldr	r0, [pc, #36]	; (800090c <usart_setup+0x60>)
 80008e6:	f002 ffa1 	bl	800382c <HAL_HalfDuplex_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d000      	beq.n	80008f2 <usart_setup+0x46>
	{
		//	    Error_Handler();
		__asm__("NOP");
 80008f0:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <usart_setup+0x60>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	68da      	ldr	r2, [r3, #12]
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <usart_setup+0x60>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f042 0220 	orr.w	r2, r2, #32
 8000900:	60da      	str	r2, [r3, #12]
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200003b0 	.word	0x200003b0
 8000910:	40013800 	.word	0x40013800

08000914 <owInit>:

void owInit(OneWire *ow) {
 8000914:	b480      	push	{r7}
 8000916:	b087      	sub	sp, #28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8000924:	e015      	b.n	8000952 <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];      
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
    k=0;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 8000934:	e007      	b.n	8000946 <owInit+0x32>
    r[k] = 0;
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	4413      	add	r3, r2
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	3301      	adds	r3, #1
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	2b07      	cmp	r3, #7
 800094a:	ddf4      	ble.n	8000936 <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	3301      	adds	r3, #1
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	dde6      	ble.n	8000926 <owInit+0x12>
  }
  k=0;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 800095c:	e008      	b.n	8000970 <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	4413      	add	r3, r2
 8000964:	330c      	adds	r3, #12
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	3301      	adds	r3, #1
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	2b07      	cmp	r3, #7
 8000974:	ddf3      	ble.n	800095e <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2240      	movs	r2, #64	; 0x40
 800097a:	609a      	str	r2, [r3, #8]

}
 800097c:	bf00      	nop
 800097e:	371c      	adds	r7, #28
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr

08000986 <owResetCmd>:
 *
 * @param N usart -- выбранный для реализации 1wire usart
 * @return Возвращает 1 если на шине кто-то есть и 0 в противном случае
 */

  uint16_t owResetCmd() {
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
	uint16_t owPresence;
	
	usart_setup(9600);
 800098c:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000990:	f7ff ff8c 	bl	80008ac <usart_setup>

  owSend(0xF0); // Send RESET отправляем импуль сброса
 8000994:	20f0      	movs	r0, #240	; 0xf0
 8000996:	f000 f815 	bl	80009c4 <owSend>
  owPresence = owEchoRead(); // Ждём PRESENCE на шине и вовзращаем, что есть
 800099a:	f000 f851 	bl	8000a40 <owEchoRead>
 800099e:	4603      	mov	r3, r0
 80009a0:	80fb      	strh	r3, [r7, #6]

	usart_setup(115200);// перенастраиваем скорость UART
 80009a2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80009a6:	f7ff ff81 	bl	80008ac <usart_setup>
  return owPresence;
 80009aa:	88fb      	ldrh	r3, [r7, #6]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <getUsartIndex>:

uint8_t getUsartIndex() {// смотрит по номеру UART c каким будет идти работа
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
	...

080009c4 <owSend>:

void owSend(uint16_t data) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());//устанавливаем флаг если попадем в обработчик прерывания там он сбросится
 80009ce:	f7ff fff1 	bl	80009b4 <getUsartIndex>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	2301      	movs	r3, #1
 80009d8:	4093      	lsls	r3, r2
 80009da:	b25a      	sxtb	r2, r3
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <owSend+0x50>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	b25b      	sxtb	r3, r3
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <owSend+0x50>)
 80009ec:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);//отправляем данные
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	4619      	mov	r1, r3
 80009f2:	4809      	ldr	r0, [pc, #36]	; (8000a18 <owSend+0x54>)
 80009f4:	f7ff ff4a 	bl	800088c <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);//ждем пока передача закончится
 80009f8:	bf00      	nop
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <owSend+0x58>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a04:	2b40      	cmp	r3, #64	; 0x40
 8000a06:	d1f8      	bne.n	80009fa <owSend+0x36>
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000a4 	.word	0x200000a4
 8000a18:	40013800 	.word	0x40013800
 8000a1c:	200003b0 	.word	0x200003b0

08000a20 <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {//читаем у нас пришла единица или ноль в ответ
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0; //если пришло 0xFF, то бит = 1, что то другое бит = 0
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	2bff      	cmp	r3, #255	; 0xff
 8000a2e:	bf0c      	ite	eq
 8000a30:	2301      	moveq	r3, #1
 8000a32:	2300      	movne	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <owEchoRead>:

uint16_t owEchoRead() {//
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();//получаем номер USART
 8000a46:	f7ff ffb5 	bl	80009b4 <getUsartIndex>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 8000a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a52:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);// ждем пока кто-то не ответит но не больше паузы
 8000a54:	bf00      	nop
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <owEchoRead+0x48>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	797b      	ldrb	r3, [r7, #5]
 8000a60:	fa42 f303 	asr.w	r3, r2, r3
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d004      	beq.n	8000a76 <owEchoRead+0x36>
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	1e5a      	subs	r2, r3, #1
 8000a70:	80fa      	strh	r2, [r7, #6]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1ef      	bne.n	8000a56 <owEchoRead+0x16>
  return rc_buffer[i];//в зависимости от используемого номера UART 
 8000a76:	797b      	ldrb	r3, [r7, #5]
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <owEchoRead+0x4c>)
 8000a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a7e:	b29b      	uxth	r3, r3
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200000a4 	.word	0x200000a4
 8000a8c:	200000a8 	.word	0x200000a8

08000a90 <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {//разлагаем 1 байт на 8 байт ,кодируем так скасказать в посылку для 1wire
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e014      	b.n	8000acc <byteToBits+0x3c>
    if (ow_byte & 0x01) {//если текущий бит в байте ==1 то
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d003      	beq.n	8000ab4 <byteToBits+0x24>
      *bits = WIRE_1; //заменяем на число которое при передаче по USART для 1wire будет единцией t.e 0xFF
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	22ff      	movs	r2, #255	; 0xff
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	e002      	b.n	8000aba <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;// тоже самое только для 0
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1; //сдвигаем обработанный бит
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	085b      	lsrs	r3, r3, #1
 8000ac4:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	2b07      	cmp	r3, #7
 8000ad0:	d9e7      	bls.n	8000aa2 <byteToBits+0x12>
  }
  return bits; //возвращае массив для передачи 
 8000ad2:	683b      	ldr	r3, [r7, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <owSendByte>:
/**
 * Метод пересылает последовательно 8 байт по одному на каждый бит в data
 * @param usart -- выбранный для эмуляции 1wire UART
 * @param d -- данные
 */
void owSendByte(uint8_t d) {
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);//преобразовываем байт в биты "массив байт для  передачи UART и эмуляции 1WIRE"
 8000ae8:	f107 020c 	add.w	r2, r7, #12
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ffcd 	bl	8000a90 <byteToBits>
  for (i = 0; i < 8; ++i) {
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e00b      	b.n	8000b14 <owSendByte+0x36>
    owSend(data[i]);
 8000afc:	f107 020c 	add.w	r2, r7, #12
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	4413      	add	r3, r2
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff5b 	bl	80009c4 <owSend>
  for (i = 0; i < 8; ++i) {
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	2b07      	cmp	r3, #7
 8000b18:	ddf0      	ble.n	8000afc <owSendByte+0x1e>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	bf00      	nop
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <owCRC>:
  }
  return target_byte; //возвращаем полученный байт
}

/* Подсчет CRC8 массива mas длиной Len */
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	733b      	strb	r3, [r7, #12]
  crc = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 8000b38:	7b3b      	ldrb	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 8000b42:	2300      	movs	r3, #0
 8000b44:	73fb      	strb	r3, [r7, #15]
 8000b46:	e018      	b.n	8000b7a <owCRC+0x56>
      fb = crc ^ dat;
 8000b48:	7b7a      	ldrb	r2, [r7, #13]
 8000b4a:	7bbb      	ldrb	r3, [r7, #14]
 8000b4c:	4053      	eors	r3, r2
 8000b4e:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 8000b50:	7afb      	ldrb	r3, [r7, #11]
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 8000b58:	7b7b      	ldrb	r3, [r7, #13]
 8000b5a:	085b      	lsrs	r3, r3, #1
 8000b5c:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 8000b5e:	7bbb      	ldrb	r3, [r7, #14]
 8000b60:	085b      	lsrs	r3, r3, #1
 8000b62:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c; // полином
 8000b64:	7afb      	ldrb	r3, [r7, #11]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d104      	bne.n	8000b74 <owCRC+0x50>
 8000b6a:	7b7b      	ldrb	r3, [r7, #13]
 8000b6c:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8000b70:	43db      	mvns	r3, r3
 8000b72:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	3301      	adds	r3, #1
 8000b78:	73fb      	strb	r3, [r7, #15]
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	2b07      	cmp	r3, #7
 8000b7e:	d9e3      	bls.n	8000b48 <owCRC+0x24>
    }
    st_byt++;
 8000b80:	7b3b      	ldrb	r3, [r7, #12]
 8000b82:	3301      	adds	r3, #1
 8000b84:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len); // счетчик байтов в массиве
 8000b86:	7b3a      	ldrb	r2, [r7, #12]
 8000b88:	78fb      	ldrb	r3, [r7, #3]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d3d4      	bcc.n	8000b38 <owCRC+0x14>
  return crc;
 8000b8e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr

08000b9a <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);                        
 8000ba2:	2107      	movs	r1, #7
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ffbd 	bl	8000b24 <owCRC>
 8000baa:	4603      	mov	r3, r0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <hasNextRom>:
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 * переделать на функции обратного вызова для реакции на ошибки
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {//
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) { //есть ли кто на шине
 8000bcc:	f7ff fedb 	bl	8000986 <owResetCmd>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2bf0      	cmp	r3, #240	; 0xf0
 8000bd4:	d101      	bne.n	8000bda <hasNextRom+0x26>
    return 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e097      	b.n	8000d0a <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);//
 8000bda:	20f0      	movs	r0, #240	; 0xf0
 8000bdc:	f7ff ff7f 	bl	8000ade <owSendByte>
  do {
		uint8_t answerBit =0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 8000be4:	7ffb      	ldrb	r3, [r7, #31]
 8000be6:	08db      	lsrs	r3, r3, #3
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ); // чтение прямого бита
 8000bf8:	20ff      	movs	r0, #255	; 0xff
 8000bfa:	f7ff fee3 	bl	80009c4 <owSend>
    cB = owReadSlot(owEchoRead());//ответ от датчика
 8000bfe:	f7ff ff1f 	bl	8000a40 <owEchoRead>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff0b 	bl	8000a20 <owReadSlot>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ); // чтение инверсного бита
 8000c0e:	20ff      	movs	r0, #255	; 0xff
 8000c10:	f7ff fed8 	bl	80009c4 <owSend>
    cmp_cB = owReadSlot(owEchoRead());//ответ от датчика
 8000c14:	f7ff ff14 	bl	8000a40 <owEchoRead>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff00 	bl	8000a20 <owReadSlot>
 8000c20:	4603      	mov	r3, r0
 8000c22:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)//сравниваем два ответа
 8000c24:	7afa      	ldrb	r2, [r7, #11]
 8000c26:	7abb      	ldrb	r3, [r7, #10]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d105      	bne.n	8000c38 <hasNextRom+0x84>
 8000c2c:	7afb      	ldrb	r3, [r7, #11]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d102      	bne.n	8000c38 <hasNextRom+0x84>
      return -1;//ошибка никто не ответил 
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e068      	b.n	8000d0a <hasNextRom+0x156>
    if (cB != cmp_cB) { //нормальная ситуация пришло либо 10 либо 01
 8000c38:	7afa      	ldrb	r2, [r7, #11]
 8000c3a:	7abb      	ldrb	r3, [r7, #10]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d002      	beq.n	8000c46 <hasNextRom+0x92>
      searchDirection = cB;//выбираем в каком направлении будем двигатся дальше
 8000c40:	7afb      	ldrb	r3, [r7, #11]
 8000c42:	75bb      	strb	r3, [r7, #22]
 8000c44:	e023      	b.n	8000c8e <hasNextRom+0xda>
			} else {//колизия пришло 00 т.е текущий бит у ROM-ов разный
				if (ui32BitNumber == ow->lastDiscrepancy)//если текущая позиция колизии равна прошлой
 8000c46:	7ffa      	ldrb	r2, [r7, #31]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d102      	bne.n	8000c56 <hasNextRom+0xa2>
        searchDirection = 1;//выбираем в каком направлении будем двигатся дальше
 8000c50:	2301      	movs	r3, #1
 8000c52:	75bb      	strb	r3, [r7, #22]
 8000c54:	e01b      	b.n	8000c8e <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {//если мы зашили дальше
 8000c56:	7ffa      	ldrb	r2, [r7, #31]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dd02      	ble.n	8000c66 <hasNextRom+0xb2>
          searchDirection = 0;//выбираем в каком направлении будем двигатся дальше 
 8000c60:	2300      	movs	r3, #0
 8000c62:	75bb      	strb	r3, [r7, #22]
 8000c64:	e00e      	b.n	8000c84 <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	330c      	adds	r3, #12
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	7ffb      	ldrb	r3, [r7, #31]
 8000c74:	f003 0307 	and.w	r3, r3, #7
 8000c78:	fa42 f303 	asr.w	r3, r2, r3
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 8000c84:	7dbb      	ldrb	r3, [r7, #22]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <hasNextRom+0xda>
          zeroFork = ui32BitNumber;//запоминаем развилку
 8000c8a:	7ffb      	ldrb	r3, [r7, #31]
 8000c8c:	61bb      	str	r3, [r7, #24]
      }
    }
    // сохраняем бит
    if (searchDirection)
 8000c8e:	7dbb      	ldrb	r3, [r7, #22]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d00e      	beq.n	8000cb2 <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;//выставляем бит в текущем байте байте
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b25a      	sxtb	r2, r3
 8000c9a:	7ffb      	ldrb	r3, [r7, #31]
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	b25b      	sxtb	r3, r3
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);// решаем кого отключить
 8000cb2:	7dbb      	ldrb	r3, [r7, #22]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <hasNextRom+0x108>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	e000      	b.n	8000cbe <hasNextRom+0x10a>
 8000cbc:	23ff      	movs	r3, #255	; 0xff
 8000cbe:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);//вырубаем "мешающие" устройсва
 8000cc0:	7d7b      	ldrb	r3, [r7, #21]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fe7d 	bl	80009c4 <owSend>
    ui32BitNumber++;//ищем следующий бит
 8000cca:	7ffb      	ldrb	r3, [r7, #31]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);//пока не найден весь ROM все биты
 8000cd0:	7ffb      	ldrb	r3, [r7, #31]
 8000cd2:	2b3f      	cmp	r3, #63	; 0x3f
 8000cd4:	d984      	bls.n	8000be0 <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;//запоминаем развилку
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	609a      	str	r2, [r3, #8]
  for (; i < 7; i++)
 8000cdc:	e00b      	b.n	8000cf6 <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];//запоминаем последний ROM
 8000cde:	7dfb      	ldrb	r3, [r7, #23]
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	441a      	add	r2, r3
 8000ce4:	7dfb      	ldrb	r3, [r7, #23]
 8000ce6:	7811      	ldrb	r1, [r2, #0]
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	4413      	add	r3, r2
 8000cec:	460a      	mov	r2, r1
 8000cee:	731a      	strb	r2, [r3, #12]
  for (; i < 7; i++)
 8000cf0:	7dfb      	ldrb	r3, [r7, #23]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	75fb      	strb	r3, [r7, #23]
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	2b06      	cmp	r3, #6
 8000cfa:	d9f0      	bls.n	8000cde <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	bfcc      	ite	gt
 8000d04:	2301      	movgt	r3, #1
 8000d06:	2300      	movle	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <owSearchCmd>:

// Возвращает количество устройств на шине или код ошибки, если значение меньше 0
int owSearchCmd(OneWire *ow) {
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff fdf8 	bl	8000914 <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //передаем указатель на структуру куда положить след.ROM
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ff40 	bl	8000bb4 <hasNextRom>
 8000d34:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	da02      	bge.n	8000d42 <owSearchCmd+0x30>
      return -1;
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d40:	e009      	b.n	8000d56 <owSearchCmd+0x44>
    device++;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3301      	adds	r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//ищем пока кто-то есть и этих кто-то не больше дефайна
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <owSearchCmd+0x42>
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	dde7      	ble.n	8000d24 <owSearchCmd+0x12>
		return device;//возвращаем порядковый номер датчика (устройства) на шине
 8000d54:	68fb      	ldr	r3, [r7, #12]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {//отправляет команду пропуска ROM после этого следующая команда будет
  owResetCmd();                 //для всех устройств на шине
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {//позволяет мастеру обращаться к конкретному  ведомому устройству
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 8000d6a:	f7ff fe0c 	bl	8000986 <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);//обращаемся к конкретному устройсву
 8000d6e:	2055      	movs	r0, #85	; 0x55
 8000d70:	f7ff feb5 	bl	8000ade <owSendByte>
  for (; i < 8; i++)
 8000d74:	e009      	b.n	8000d8a <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));//"перебираемся по структуре как по массиву" первой звездочкой получаем i тый байт из структуры
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fead 	bl	8000ade <owSendByte>
  for (; i < 8; i++)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	3301      	adds	r3, #1
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2b07      	cmp	r3, #7
 8000d8e:	ddf2      	ble.n	8000d76 <owMatchRomCmd+0x18>
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);//позволяет мастеру обращаться к конкретному  ведомому устройству
 8000da4:	6838      	ldr	r0, [r7, #0]
 8000da6:	f7ff ffda 	bl	8000d5e <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);//говорим датчику пора бы преобразовать температуру
 8000daa:	2044      	movs	r0, #68	; 0x44
 8000dac:	f7ff fe97 	bl	8000ade <owSendByte>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <owReadScratchpadCmd>:
 * @param ow -- OneWire pointer
 * @param rom -- selected device on the bus
 * @param data -- buffer for data
 * @return data
 */
uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {//читаем память датчика
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b10      	cmp	r3, #16
 8000dce:	d001      	beq.n	8000dd4 <owReadScratchpadCmd+0x1c>
 8000dd0:	2b28      	cmp	r3, #40	; 0x28
 8000dd2:	d109      	bne.n	8000de8 <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;  //9*8 =72 == равняется 9 байт данных
 8000dd4:	2348      	movs	r3, #72	; 0x48
 8000dd6:	82bb      	strh	r3, [r7, #20]
      break;
 8000dd8:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 8000dda:	68b8      	ldr	r0, [r7, #8]
 8000ddc:	f7ff ffbf 	bl	8000d5e <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);//отправляем команду на чтение памяти
 8000de0:	20be      	movs	r0, #190	; 0xbe
 8000de2:	f7ff fe7c 	bl	8000ade <owSendByte>
  while (b < p) {// пока мы не обработали 9 байт 
 8000de6:	e048      	b.n	8000e7a <owReadScratchpadCmd+0xc2>
      return data;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	e04b      	b.n	8000e84 <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8)); //позиция обрабатываемого байта
 8000dec:	8abb      	ldrh	r3, [r7, #20]
 8000dee:	3b08      	subs	r3, #8
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	da00      	bge.n	8000df6 <owReadScratchpadCmd+0x3e>
 8000df4:	3307      	adds	r3, #7
 8000df6:	10db      	asrs	r3, r3, #3
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	8afb      	ldrh	r3, [r7, #22]
 8000dfc:	08db      	lsrs	r3, r3, #3
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	74fb      	strb	r3, [r7, #19]
    uint8_t bt; 
		owSend(OW_READ);
 8000e06:	20ff      	movs	r0, #255	; 0xff
 8000e08:	f7ff fddc 	bl	80009c4 <owSend>
    bt = owReadSlot(owEchoRead());//читаем данные 
 8000e0c:	f7ff fe18 	bl	8000a40 <owEchoRead>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fe04 	bl	8000a20 <owReadSlot>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 8000e1c:	7cbb      	ldrb	r3, [r7, #18]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d113      	bne.n	8000e4a <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;//выставляем бит в нужной позиции
 8000e22:	7cfb      	ldrb	r3, [r7, #19]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b25a      	sxtb	r2, r3
 8000e2c:	8afb      	ldrh	r3, [r7, #22]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	2101      	movs	r1, #1
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b259      	sxtb	r1, r3
 8000e3e:	7cfb      	ldrb	r3, [r7, #19]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	4413      	add	r3, r2
 8000e44:	b2ca      	uxtb	r2, r1
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	e014      	b.n	8000e74 <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);//сбрасываем бит в нужной позиции
 8000e4a:	7cfb      	ldrb	r3, [r7, #19]
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4413      	add	r3, r2
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b25a      	sxtb	r2, r3
 8000e54:	8afb      	ldrh	r3, [r7, #22]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	b25b      	sxtb	r3, r3
 8000e66:	4013      	ands	r3, r2
 8000e68:	b259      	sxtb	r1, r3
 8000e6a:	7cfb      	ldrb	r3, [r7, #19]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	4413      	add	r3, r2
 8000e70:	b2ca      	uxtb	r2, r1
 8000e72:	701a      	strb	r2, [r3, #0]
    b++;//следующий бит
 8000e74:	8afb      	ldrh	r3, [r7, #22]
 8000e76:	3301      	adds	r3, #1
 8000e78:	82fb      	strh	r3, [r7, #22]
  while (b < p) {// пока мы не обработали 9 байт 
 8000e7a:	8afa      	ldrh	r2, [r7, #22]
 8000e7c:	8abb      	ldrh	r3, [r7, #20]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d3b4      	bcc.n	8000dec <owReadScratchpadCmd+0x34>
  }
  return data;
 8000e82:	687b      	ldr	r3, [r7, #4]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <readTemperature>:
 * @param ow -- OneWire bus pointer
 * @param rom -- selected device
 * @param reSense -- do you want resense temp for next time?
 * @return struct with data
 */
Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08c      	sub	sp, #48	; 0x30
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	4613      	mov	r3, r2
 8000e98:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sp = (Scratchpad_DS18B20 *) &pad; 
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  switch (rom->family) {
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b10      	cmp	r3, #16
 8000eb8:	d022      	beq.n	8000f00 <readTemperature+0x74>
 8000eba:	2b28      	cmp	r3, #40	; 0x28
 8000ebc:	d13a      	bne.n	8000f34 <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18B20
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f7ff ff76 	bl	8000db8 <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);//целая часть
 8000ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ece:	79db      	ldrb	r3, [r3, #7]
 8000ed0:	011b      	lsls	r3, r3, #4
 8000ed2:	b25a      	sxtb	r2, r3
 8000ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed6:	7a1b      	ldrb	r3, [r3, #8]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);//дробная
 8000ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee8:	7a1b      	ldrb	r3, [r3, #8]
 8000eea:	f003 020f 	and.w	r2, r3, #15
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	111b      	asrs	r3, r3, #4
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 8000efe:	e01c      	b.n	8000f3a <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18S20
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	461a      	mov	r2, r3
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f7ff ff55 	bl	8000db8 <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 8000f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f10:	7a1b      	ldrb	r3, [r3, #8]
 8000f12:	085b      	lsrs	r3, r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 8000f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1e:	7a1b      	ldrb	r3, [r3, #8]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	461a      	mov	r2, r3
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 8000f32:	e002      	b.n	8000f3a <readTemperature+0xae>
    default:
      return t;
 8000f34:	8c3b      	ldrh	r3, [r7, #32]
 8000f36:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000f38:	e008      	b.n	8000f4c <readTemperature+0xc0>
  }
  if (reSense) {
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);//можно сразу после как забрали данные отдаем датчику команду на преобразования температуры
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f7ff ff29 	bl	8000d9a <owConvertTemperatureCmd>
  }
  return t;
 8000f48:	8c3b      	ldrh	r3, [r7, #32]
 8000f4a:	84bb      	strh	r3, [r7, #36]	; 0x24
}
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000f52:	f362 0307 	bfi	r3, r2, #0, #8
 8000f56:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000f5a:	f362 230f 	bfi	r3, r2, #8, #8
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3730      	adds	r7, #48	; 0x30
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <get_ROMid>:
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}


int get_ROMid (void){
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {    // is anybody on the bus?
 8000f6e:	f7ff fd0a 	bl	8000986 <owResetCmd>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2bf0      	cmp	r3, #240	; 0xf0
 8000f76:	d079      	beq.n	800106c <get_ROMid+0x104>
		devices = owSearchCmd(&ow);        // получить ROMid в�?ех у�?трой�?т на шине или вернуть код ошибки
 8000f78:	484e      	ldr	r0, [pc, #312]	; (80010b4 <get_ROMid+0x14c>)
 8000f7a:	f7ff feca 	bl	8000d12 <owSearchCmd>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b4d      	ldr	r3, [pc, #308]	; (80010b8 <get_ROMid+0x150>)
 8000f84:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 8000f86:	4b4c      	ldr	r3, [pc, #304]	; (80010b8 <get_ROMid+0x150>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d113      	bne.n	8000fb6 <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 8000f8e:	4b4b      	ldr	r3, [pc, #300]	; (80010bc <get_ROMid+0x154>)
 8000f90:	4a4b      	ldr	r2, [pc, #300]	; (80010c0 <get_ROMid+0x158>)
 8000f92:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 8000f94:	4b4b      	ldr	r3, [pc, #300]	; (80010c4 <get_ROMid+0x15c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	e005      	b.n	8000fa8 <get_ROMid+0x40>
					__asm__("nop");
 8000f9c:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 8000f9e:	4b49      	ldr	r3, [pc, #292]	; (80010c4 <get_ROMid+0x15c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	4a47      	ldr	r2, [pc, #284]	; (80010c4 <get_ROMid+0x15c>)
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b46      	ldr	r3, [pc, #280]	; (80010c4 <get_ROMid+0x15c>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b43      	ldr	r3, [pc, #268]	; (80010bc <get_ROMid+0x154>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d3f3      	bcc.n	8000f9c <get_ROMid+0x34>
				pDelay = 1000000;
 8000fb4:	e7eb      	b.n	8000f8e <get_ROMid+0x26>
			}

		}
		i = 0;
 8000fb6:	4b43      	ldr	r3, [pc, #268]	; (80010c4 <get_ROMid+0x15c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 8000fbc:	e04f      	b.n	800105e <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 8000fbe:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <get_ROMid+0x15c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	4a3b      	ldr	r2, [pc, #236]	; (80010b4 <get_ROMid+0x14c>)
 8000fc6:	4413      	add	r3, r2
 8000fc8:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fde5 	bl	8000b9a <owCRC8>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	79db      	ldrb	r3, [r3, #7]
 8000fd8:	78fa      	ldrb	r2, [r7, #3]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d101      	bne.n	8000fe2 <get_ROMid+0x7a>
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <get_ROMid+0x160>)
 8000fe0:	e000      	b.n	8000fe4 <get_ROMid+0x7c>
 8000fe2:	4b3a      	ldr	r3, [pc, #232]	; (80010cc <get_ROMid+0x164>)
 8000fe4:	4a3a      	ldr	r2, [pc, #232]	; (80010d0 <get_ROMid+0x168>)
 8000fe6:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 8000fe8:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <get_ROMid+0x15c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <get_ROMid+0x16c>)
 8000ff0:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461e      	mov	r6, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	799b      	ldrb	r3, [r3, #6]
 8000ffc:	469c      	mov	ip, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	795b      	ldrb	r3, [r3, #5]
 8001002:	461a      	mov	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	791b      	ldrb	r3, [r3, #4]
 8001008:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800100e:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001014:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800101a:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001020:	9305      	str	r3, [sp, #20]
 8001022:	9504      	str	r5, [sp, #16]
 8001024:	9403      	str	r4, [sp, #12]
 8001026:	9002      	str	r0, [sp, #8]
 8001028:	9101      	str	r1, [sp, #4]
 800102a:	9200      	str	r2, [sp, #0]
 800102c:	4663      	mov	r3, ip
 800102e:	4632      	mov	r2, r6
 8001030:	4929      	ldr	r1, [pc, #164]	; (80010d8 <get_ROMid+0x170>)
 8001032:	482a      	ldr	r0, [pc, #168]	; (80010dc <get_ROMid+0x174>)
 8001034:	f004 fa04 	bl	8005440 <siprintf>

			if (crc != r->crc) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	79db      	ldrb	r3, [r3, #7]
 800103c:	78fa      	ldrb	r2, [r7, #3]
 800103e:	429a      	cmp	r2, r3
 8001040:	d008      	beq.n	8001054 <get_ROMid+0xec>
				devInfo.device = i;
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <get_ROMid+0x15c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <get_ROMid+0x16c>)
 800104a:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 800104c:	4924      	ldr	r1, [pc, #144]	; (80010e0 <get_ROMid+0x178>)
 800104e:	4823      	ldr	r0, [pc, #140]	; (80010dc <get_ROMid+0x174>)
 8001050:	f004 f9f6 	bl	8005440 <siprintf>
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <get_ROMid+0x15c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a1a      	ldr	r2, [pc, #104]	; (80010c4 <get_ROMid+0x15c>)
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <get_ROMid+0x150>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <get_ROMid+0x15c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8a8      	bhi.n	8000fbe <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <get_ROMid+0x154>)
 800106e:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <get_ROMid+0x158>)
 8001070:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <get_ROMid+0x15c>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e005      	b.n	8001086 <get_ROMid+0x11e>
		__asm__("nop");
 800107a:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <get_ROMid+0x15c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	4a10      	ldr	r2, [pc, #64]	; (80010c4 <get_ROMid+0x15c>)
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <get_ROMid+0x15c>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <get_ROMid+0x154>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d3f3      	bcc.n	800107a <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <get_ROMid+0x168>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	490c      	ldr	r1, [pc, #48]	; (80010c8 <get_ROMid+0x160>)
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff f859 	bl	8000150 <strcmp>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <get_ROMid+0x140>
 80010a4:	2300      	movs	r3, #0
 80010a6:	e001      	b.n	80010ac <get_ROMid+0x144>
	else return -1;
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b4:	200000e0 	.word	0x200000e0
 80010b8:	200000dc 	.word	0x200000dc
 80010bc:	20000000 	.word	0x20000000
 80010c0:	000f4240 	.word	0x000f4240
 80010c4:	200000f4 	.word	0x200000f4
 80010c8:	08005d50 	.word	0x08005d50
 80010cc:	08005d58 	.word	0x08005d58
 80010d0:	200000fc 	.word	0x200000fc
 80010d4:	200000b8 	.word	0x200000b8
 80010d8:	08005d64 	.word	0x08005d64
 80010dc:	200000bc 	.word	0x200000bc
 80010e0:	08005d8c 	.word	0x08005d8c

080010e4 <get_Temperature>:

void get_Temperature (void)
{
 80010e4:	b598      	push	{r3, r4, r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	i=0;
 80010e8:	4b3a      	ldr	r3, [pc, #232]	; (80011d4 <get_Temperature+0xf0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 80010ee:	e067      	b.n	80011c0 <get_Temperature+0xdc>
		switch ((ow.ids[i]).family) {//че у нас за датчик
 80010f0:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <get_Temperature+0xf0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a38      	ldr	r2, [pc, #224]	; (80011d8 <get_Temperature+0xf4>)
 80010f6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80010fa:	2b28      	cmp	r3, #40	; 0x28
 80010fc:	d006      	beq.n	800110c <get_Temperature+0x28>
 80010fe:	2b28      	cmp	r3, #40	; 0x28
 8001100:	dc56      	bgt.n	80011b0 <get_Temperature+0xcc>
 8001102:	2b00      	cmp	r3, #0
 8001104:	d056      	beq.n	80011b4 <get_Temperature+0xd0>
 8001106:	2b10      	cmp	r3, #16
 8001108:	d029      	beq.n	800115e <get_Temperature+0x7a>
			break;
		case 0x00:
			break;
		default:
			// error handler
			break;
 800110a:	e051      	b.n	80011b0 <get_Temperature+0xcc>
			t = readTemperature(&ow, &ow.ids[i], 1);
 800110c:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <get_Temperature+0xf0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	4a31      	ldr	r2, [pc, #196]	; (80011d8 <get_Temperature+0xf4>)
 8001114:	4413      	add	r3, r2
 8001116:	2201      	movs	r2, #1
 8001118:	4619      	mov	r1, r3
 800111a:	482f      	ldr	r0, [pc, #188]	; (80011d8 <get_Temperature+0xf4>)
 800111c:	f7ff feb6 	bl	8000e8c <readTemperature>
 8001120:	4603      	mov	r3, r0
 8001122:	4a2e      	ldr	r2, [pc, #184]	; (80011dc <get_Temperature+0xf8>)
 8001124:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8001126:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <get_Temperature+0xf8>)
 8001128:	f993 3000 	ldrsb.w	r3, [r3]
 800112c:	461a      	mov	r2, r3
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	461a      	mov	r2, r3
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <get_Temperature+0xf8>)
 800113a:	785b      	ldrb	r3, [r3, #1]
 800113c:	4413      	add	r3, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f8ca 	bl	80002d8 <__aeabi_i2f>
 8001144:	4603      	mov	r3, r0
 8001146:	4a23      	ldr	r2, [pc, #140]	; (80011d4 <get_Temperature+0xf0>)
 8001148:	6814      	ldr	r4, [r2, #0]
 800114a:	4925      	ldr	r1, [pc, #148]	; (80011e0 <get_Temperature+0xfc>)
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f9cb 	bl	80004e8 <__aeabi_fdiv>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <get_Temperature+0x100>)
 8001158:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 800115c:	e02b      	b.n	80011b6 <get_Temperature+0xd2>
			t = readTemperature(&ow, &ow.ids[i], 1);
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <get_Temperature+0xf0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4a1c      	ldr	r2, [pc, #112]	; (80011d8 <get_Temperature+0xf4>)
 8001166:	4413      	add	r3, r2
 8001168:	2201      	movs	r2, #1
 800116a:	4619      	mov	r1, r3
 800116c:	481a      	ldr	r0, [pc, #104]	; (80011d8 <get_Temperature+0xf4>)
 800116e:	f7ff fe8d 	bl	8000e8c <readTemperature>
 8001172:	4603      	mov	r3, r0
 8001174:	4a19      	ldr	r2, [pc, #100]	; (80011dc <get_Temperature+0xf8>)
 8001176:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <get_Temperature+0xf8>)
 800117a:	f993 3000 	ldrsb.w	r3, [r3]
 800117e:	461a      	mov	r2, r3
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	461a      	mov	r2, r3
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <get_Temperature+0xf8>)
 800118c:	785b      	ldrb	r3, [r3, #1]
 800118e:	4413      	add	r3, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f8a1 	bl	80002d8 <__aeabi_i2f>
 8001196:	4603      	mov	r3, r0
 8001198:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <get_Temperature+0xf0>)
 800119a:	6814      	ldr	r4, [r2, #0]
 800119c:	4910      	ldr	r1, [pc, #64]	; (80011e0 <get_Temperature+0xfc>)
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9a2 	bl	80004e8 <__aeabi_fdiv>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <get_Temperature+0x100>)
 80011aa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 80011ae:	e002      	b.n	80011b6 <get_Temperature+0xd2>
			break;
 80011b0:	bf00      	nop
 80011b2:	e000      	b.n	80011b6 <get_Temperature+0xd2>
			break;
 80011b4:	bf00      	nop
	for (; i < devices; i++) {
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <get_Temperature+0xf0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <get_Temperature+0xf0>)
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <get_Temperature+0x104>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <get_Temperature+0xf0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d890      	bhi.n	80010f0 <get_Temperature+0xc>
		}
	}
//	pDelay = 4000000;
//	for (i = 0; i < pDelay * 1; i++){}   /* Wait a bit. */
}
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
 80011d2:	bd98      	pop	{r3, r4, r7, pc}
 80011d4:	200000f4 	.word	0x200000f4
 80011d8:	200000e0 	.word	0x200000e0
 80011dc:	200000f8 	.word	0x200000f8
 80011e0:	41200000 	.word	0x41200000
 80011e4:	200000b4 	.word	0x200000b4
 80011e8:	200000dc 	.word	0x200000dc

080011ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4a06      	ldr	r2, [pc, #24]	; (8001214 <vApplicationGetIdleTaskMemory+0x28>)
 80011fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	4a05      	ldr	r2, [pc, #20]	; (8001218 <vApplicationGetIdleTaskMemory+0x2c>)
 8001202:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2280      	movs	r2, #128	; 0x80
 8001208:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	20000100 	.word	0x20000100
 8001218:	20000154 	.word	0x20000154

0800121c <InitAll>:
#include "funciones.h"
#include "liquidcrystal_i2c.h"
#include "OneWire.h"

void InitAll(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GREEN_PORT, GREEN_PIN, ON); // Sistema Prendido y funcionando
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001226:	4807      	ldr	r0, [pc, #28]	; (8001244 <InitAll+0x28>)
 8001228:	f001 f878 	bl	800231c <HAL_GPIO_WritePin>

	get_ROMid();
 800122c:	f7ff fe9c 	bl	8000f68 <get_ROMid>

	HD44780_Init(2);
 8001230:	2002      	movs	r0, #2
 8001232:	f000 f809 	bl	8001248 <HD44780_Init>
	HD44780_NoCursor();
 8001236:	f000 f8e9 	bl	800140c <HD44780_NoCursor>
	HD44780_Clear();
 800123a:	f000 f889 	bl	8001350 <HD44780_Clear>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40010c00 	.word	0x40010c00

08001248 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8001252:	4a38      	ldr	r2, [pc, #224]	; (8001334 <HD44780_Init+0xec>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001258:	4b37      	ldr	r3, [pc, #220]	; (8001338 <HD44780_Init+0xf0>)
 800125a:	2208      	movs	r2, #8
 800125c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800125e:	4b37      	ldr	r3, [pc, #220]	; (800133c <HD44780_Init+0xf4>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001264:	4b33      	ldr	r3, [pc, #204]	; (8001334 <HD44780_Init+0xec>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d907      	bls.n	800127c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800126c:	4b33      	ldr	r3, [pc, #204]	; (800133c <HD44780_Init+0xf4>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b31      	ldr	r3, [pc, #196]	; (800133c <HD44780_Init+0xf4>)
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	e006      	b.n	800128a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800127c:	4b2f      	ldr	r3, [pc, #188]	; (800133c <HD44780_Init+0xf4>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b2d      	ldr	r3, [pc, #180]	; (800133c <HD44780_Init+0xf4>)
 8001288:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800128a:	f000 f99b 	bl	80015c4 <DelayInit>
  HAL_Delay(50);
 800128e:	2032      	movs	r0, #50	; 0x32
 8001290:	f000 fd46 	bl	8001d20 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001294:	4b28      	ldr	r3, [pc, #160]	; (8001338 <HD44780_Init+0xf0>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f959 	bl	8001550 <ExpanderWrite>
  HAL_Delay(1000);
 800129e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a2:	f000 fd3d 	bl	8001d20 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80012a6:	2030      	movs	r0, #48	; 0x30
 80012a8:	f000 f941 	bl	800152e <Write4Bits>
  DelayUS(4500);
 80012ac:	f241 1094 	movw	r0, #4500	; 0x1194
 80012b0:	f000 f9b0 	bl	8001614 <DelayUS>

  Write4Bits(0x03 << 4);
 80012b4:	2030      	movs	r0, #48	; 0x30
 80012b6:	f000 f93a 	bl	800152e <Write4Bits>
  DelayUS(4500);
 80012ba:	f241 1094 	movw	r0, #4500	; 0x1194
 80012be:	f000 f9a9 	bl	8001614 <DelayUS>

  Write4Bits(0x03 << 4);
 80012c2:	2030      	movs	r0, #48	; 0x30
 80012c4:	f000 f933 	bl	800152e <Write4Bits>
  DelayUS(4500);
 80012c8:	f241 1094 	movw	r0, #4500	; 0x1194
 80012cc:	f000 f9a2 	bl	8001614 <DelayUS>

  Write4Bits(0x02 << 4);
 80012d0:	2020      	movs	r0, #32
 80012d2:	f000 f92c 	bl	800152e <Write4Bits>
  DelayUS(100);
 80012d6:	2064      	movs	r0, #100	; 0x64
 80012d8:	f000 f99c 	bl	8001614 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <HD44780_Init+0xf4>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	f043 0320 	orr.w	r3, r3, #32
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f8e4 	bl	80014b4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <HD44780_Init+0xf8>)
 80012ee:	2204      	movs	r2, #4
 80012f0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80012f2:	f000 f875 	bl	80013e0 <HD44780_Display>
  HD44780_Clear();
 80012f6:	f000 f82b 	bl	8001350 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HD44780_Init+0xfc>)
 80012fc:	2202      	movs	r2, #2
 80012fe:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HD44780_Init+0xfc>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f8d2 	bl	80014b4 <SendCommand>
  DelayUS(4500);
 8001310:	f241 1094 	movw	r0, #4500	; 0x1194
 8001314:	f000 f97e 	bl	8001614 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001318:	490b      	ldr	r1, [pc, #44]	; (8001348 <HD44780_Init+0x100>)
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f88c 	bl	8001438 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001320:	490a      	ldr	r1, [pc, #40]	; (800134c <HD44780_Init+0x104>)
 8001322:	2001      	movs	r0, #1
 8001324:	f000 f888 	bl	8001438 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001328:	f000 f81d 	bl	8001366 <HD44780_Home>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000357 	.word	0x20000357
 8001338:	20000358 	.word	0x20000358
 800133c:	20000354 	.word	0x20000354
 8001340:	20000355 	.word	0x20000355
 8001344:	20000356 	.word	0x20000356
 8001348:	20000004 	.word	0x20000004
 800134c:	2000000c 	.word	0x2000000c

08001350 <HD44780_Clear>:

void HD44780_Clear()
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001354:	2001      	movs	r0, #1
 8001356:	f000 f8ad 	bl	80014b4 <SendCommand>
  DelayUS(2000);
 800135a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800135e:	f000 f959 	bl	8001614 <DelayUS>
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}

08001366 <HD44780_Home>:

void HD44780_Home()
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800136a:	2002      	movs	r0, #2
 800136c:	f000 f8a2 	bl	80014b4 <SendCommand>
  DelayUS(2000);
 8001370:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001374:	f000 f94e 	bl	8001614 <DelayUS>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	460a      	mov	r2, r1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	4613      	mov	r3, r2
 800138a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HD44780_SetCursor+0x5c>)
 800138e:	f107 0408 	add.w	r4, r7, #8
 8001392:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001394:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HD44780_SetCursor+0x60>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	79ba      	ldrb	r2, [r7, #6]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d303      	bcc.n	80013aa <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HD44780_SetCursor+0x60>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	3318      	adds	r3, #24
 80013b0:	443b      	add	r3, r7
 80013b2:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	4413      	add	r3, r2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 f873 	bl	80014b4 <SendCommand>
}
 80013ce:	bf00      	nop
 80013d0:	371c      	adds	r7, #28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}
 80013d6:	bf00      	nop
 80013d8:	08005dac 	.word	0x08005dac
 80013dc:	20000357 	.word	0x20000357

080013e0 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HD44780_Display+0x28>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HD44780_Display+0x28>)
 80013f0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HD44780_Display+0x28>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	f043 0308 	orr.w	r3, r3, #8
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 f859 	bl	80014b4 <SendCommand>
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000355 	.word	0x20000355

0800140c <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HD44780_NoCursor+0x28>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	f023 0302 	bic.w	r3, r3, #2
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HD44780_NoCursor+0x28>)
 800141c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HD44780_NoCursor+0x28>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f000 f843 	bl	80014b4 <SendCommand>
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000355 	.word	0x20000355

08001438 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	b25b      	sxtb	r3, r3
 8001452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001456:	b25b      	sxtb	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f82a 	bl	80014b4 <SendCommand>
  for (int i=0; i<8; i++)
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	e009      	b.n	800147a <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	4413      	add	r3, r2
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f82e 	bl	80014d0 <SendChar>
  for (int i=0; i<8; i++)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3301      	adds	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b07      	cmp	r3, #7
 800147e:	ddf2      	ble.n	8001466 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8001492:	e006      	b.n	80014a2 <HD44780_PrintStr+0x18>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f817 	bl	80014d0 <SendChar>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f4      	bne.n	8001494 <HD44780_PrintStr+0xa>
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f812 	bl	80014ec <Send>
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <SendChar>:

static void SendChar(uint8_t ch)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2101      	movs	r1, #1
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f804 	bl	80014ec <Send>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	460a      	mov	r2, r1
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	4613      	mov	r3, r2
 80014fa:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	f023 030f 	bic.w	r3, r3, #15
 8001502:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	4313      	orrs	r3, r2
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f80b 	bl	800152e <Write4Bits>
  Write4Bits((lownib)|mode);
 8001518:	7bba      	ldrb	r2, [r7, #14]
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	4313      	orrs	r3, r2
 800151e:	b2db      	uxtb	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	f000 f804 	bl	800152e <Write4Bits>
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f808 	bl	8001550 <ExpanderWrite>
  PulseEnable(value);
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f820 	bl	8001588 <PulseEnable>
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af02      	add	r7, sp, #8
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <ExpanderWrite+0x30>)
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	4313      	orrs	r3, r2
 8001562:	b2db      	uxtb	r3, r3
 8001564:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001566:	f107 020f 	add.w	r2, r7, #15
 800156a:	230a      	movs	r3, #10
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	2301      	movs	r3, #1
 8001570:	217e      	movs	r1, #126	; 0x7e
 8001572:	4804      	ldr	r0, [pc, #16]	; (8001584 <ExpanderWrite+0x34>)
 8001574:	f001 f81e 	bl	80025b4 <HAL_I2C_Master_Transmit>
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000358 	.word	0x20000358
 8001584:	2000035c 	.word	0x2000035c

08001588 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ffd8 	bl	8001550 <ExpanderWrite>
  DelayUS(20);
 80015a0:	2014      	movs	r0, #20
 80015a2:	f000 f837 	bl	8001614 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f023 0304 	bic.w	r3, r3, #4
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ffce 	bl	8001550 <ExpanderWrite>
  DelayUS(20);
 80015b4:	2014      	movs	r0, #20
 80015b6:	f000 f82d 	bl	8001614 <DelayUS>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <DelayInit>:

static void DelayInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <DelayInit+0x48>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4a0f      	ldr	r2, [pc, #60]	; (800160c <DelayInit+0x48>)
 80015ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015d2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <DelayInit+0x48>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4a0c      	ldr	r2, [pc, #48]	; (800160c <DelayInit+0x48>)
 80015da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015de:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <DelayInit+0x4c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <DelayInit+0x4c>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <DelayInit+0x4c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <DelayInit+0x4c>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <DelayInit+0x4c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80015fe:	bf00      	nop
  __ASM volatile ("NOP");
 8001600:	bf00      	nop
  __ASM volatile ("NOP");
 8001602:	bf00      	nop
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	e000edf0 	.word	0xe000edf0
 8001610:	e0001000 	.word	0xe0001000

08001614 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <DelayUS+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <DelayUS+0x44>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0c9a      	lsrs	r2, r3, #18
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <DelayUS+0x48>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <DelayUS+0x48>)
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	429a      	cmp	r2, r3
 8001646:	d8f6      	bhi.n	8001636 <DelayUS+0x22>
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	371c      	adds	r7, #28
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	20000014 	.word	0x20000014
 8001658:	431bde83 	.word	0x431bde83
 800165c:	e0001000 	.word	0xe0001000

08001660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001666:	f000 fb29 	bl	8001cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166a:	f000 f84b 	bl	8001704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166e:	f000 f8e7 	bl	8001840 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001672:	f000 f88d 	bl	8001790 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001676:	f000 f8b9 	bl	80017ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  InitAll();
 800167a:	f7ff fdcf 	bl	800121c <InitAll>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <main+0x84>)
 8001680:	1d3c      	adds	r4, r7, #4
 8001682:	461d      	mov	r5, r3
 8001684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001688:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800168c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f002 fc4b 	bl	8003f30 <osThreadCreate>
 800169a:	4603      	mov	r3, r0
 800169c:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <main+0x88>)
 800169e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(Error_Sensores, "Error Sensores", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80016a0:	2300      	movs	r3, #0
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	2301      	movs	r3, #1
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2300      	movs	r3, #0
 80016aa:	2280      	movs	r2, #128	; 0x80
 80016ac:	490f      	ldr	r1, [pc, #60]	; (80016ec <main+0x8c>)
 80016ae:	4810      	ldr	r0, [pc, #64]	; (80016f0 <main+0x90>)
 80016b0:	f002 fda9 	bl	8004206 <xTaskCreate>
  xTaskCreate(Error_Anafe, "Error Anafe", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80016b4:	2300      	movs	r3, #0
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	2301      	movs	r3, #1
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2300      	movs	r3, #0
 80016be:	2280      	movs	r2, #128	; 0x80
 80016c0:	490c      	ldr	r1, [pc, #48]	; (80016f4 <main+0x94>)
 80016c2:	480d      	ldr	r0, [pc, #52]	; (80016f8 <main+0x98>)
 80016c4:	f002 fd9f 	bl	8004206 <xTaskCreate>
  xTaskCreate(Tarea_Lectura, "Tarea Lectura Temperatura", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80016c8:	2300      	movs	r3, #0
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	2301      	movs	r3, #1
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2300      	movs	r3, #0
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	4909      	ldr	r1, [pc, #36]	; (80016fc <main+0x9c>)
 80016d6:	480a      	ldr	r0, [pc, #40]	; (8001700 <main+0xa0>)
 80016d8:	f002 fd95 	bl	8004206 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016dc:	f002 fc21 	bl	8003f22 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <main+0x80>
 80016e2:	bf00      	nop
 80016e4:	08005e00 	.word	0x08005e00
 80016e8:	200003f0 	.word	0x200003f0
 80016ec:	08005dc8 	.word	0x08005dc8
 80016f0:	08000731 	.word	0x08000731
 80016f4:	08005dd8 	.word	0x08005dd8
 80016f8:	080007d5 	.word	0x080007d5
 80016fc:	08005de4 	.word	0x08005de4
 8001700:	0800070d 	.word	0x0800070d

08001704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b090      	sub	sp, #64	; 0x40
 8001708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170a:	f107 0318 	add.w	r3, r7, #24
 800170e:	2228      	movs	r2, #40	; 0x28
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f003 fe8c 	bl	8005430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001726:	2301      	movs	r3, #1
 8001728:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800172a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800172e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001734:	2301      	movs	r3, #1
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001738:	2302      	movs	r3, #2
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001742:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001748:	f107 0318 	add.w	r3, r7, #24
 800174c:	4618      	mov	r0, r3
 800174e:	f001 fa2b 	bl	8002ba8 <HAL_RCC_OscConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001758:	f000 f8e4 	bl	8001924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175c:	230f      	movs	r3, #15
 800175e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001760:	2302      	movs	r3, #2
 8001762:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800176c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	2102      	movs	r1, #2
 8001776:	4618      	mov	r0, r3
 8001778:	f001 fc98 	bl	80030ac <HAL_RCC_ClockConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001782:	f000 f8cf 	bl	8001924 <Error_Handler>
  }
}
 8001786:	bf00      	nop
 8001788:	3740      	adds	r7, #64	; 0x40
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <MX_I2C1_Init+0x50>)
 8001796:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <MX_I2C1_Init+0x54>)
 8001798:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_I2C1_Init+0x50>)
 800179c:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <MX_I2C1_Init+0x58>)
 800179e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017cc:	4804      	ldr	r0, [pc, #16]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017ce:	f000 fdbd 	bl	800234c <HAL_I2C_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017d8:	f000 f8a4 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	2000035c 	.word	0x2000035c
 80017e4:	40005400 	.word	0x40005400
 80017e8:	000186a0 	.word	0x000186a0

080017ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <MX_USART1_UART_Init+0x50>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001824:	f002 f802 	bl	800382c <HAL_HalfDuplex_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800182e:	f000 f879 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200003b0 	.word	0x200003b0
 800183c:	40013800 	.word	0x40013800

08001840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <MX_GPIO_Init+0xa8>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a23      	ldr	r2, [pc, #140]	; (80018e8 <MX_GPIO_Init+0xa8>)
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <MX_GPIO_Init+0xa8>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <MX_GPIO_Init+0xa8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a1d      	ldr	r2, [pc, #116]	; (80018e8 <MX_GPIO_Init+0xa8>)
 8001872:	f043 0320 	orr.w	r3, r3, #32
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_GPIO_Init+0xa8>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_GPIO_Init+0xa8>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <MX_GPIO_Init+0xa8>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_GPIO_Init+0xa8>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_GPIO_Init+0xa8>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <MX_GPIO_Init+0xa8>)
 80018a2:	f043 0308 	orr.w	r3, r3, #8
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_GPIO_Init+0xa8>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ba:	480c      	ldr	r0, [pc, #48]	; (80018ec <MX_GPIO_Init+0xac>)
 80018bc:	f000 fd2e 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	4619      	mov	r1, r3
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_GPIO_Init+0xac>)
 80018da:	f000 fb9b 	bl	8002014 <HAL_GPIO_Init>

}
 80018de:	bf00      	nop
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40011000 	.word	0x40011000

080018f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80018f8:	2001      	movs	r0, #1
 80018fa:	f002 fb65 	bl	8003fc8 <osDelay>
 80018fe:	e7fb      	b.n	80018f8 <StartDefaultTask+0x8>

08001900 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a04      	ldr	r2, [pc, #16]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d101      	bne.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001912:	f000 f9e9 	bl	8001ce8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40012c00 	.word	0x40012c00

08001924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_MspInit+0x68>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <HAL_MspInit+0x68>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6193      	str	r3, [r2, #24]
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_MspInit+0x68>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_MspInit+0x68>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	4a11      	ldr	r2, [pc, #68]	; (8001998 <HAL_MspInit+0x68>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	61d3      	str	r3, [r2, #28]
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_MspInit+0x68>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	210f      	movs	r1, #15
 800196a:	f06f 0001 	mvn.w	r0, #1
 800196e:	f000 fab0 	bl	8001ed2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_MspInit+0x6c>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_MspInit+0x6c>)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	40010000 	.word	0x40010000

080019a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a15      	ldr	r2, [pc, #84]	; (8001a10 <HAL_I2C_MspInit+0x70>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d123      	bne.n	8001a08 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <HAL_I2C_MspInit+0x74>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a13      	ldr	r2, [pc, #76]	; (8001a14 <HAL_I2C_MspInit+0x74>)
 80019c6:	f043 0308 	orr.w	r3, r3, #8
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_I2C_MspInit+0x74>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019d8:	23c0      	movs	r3, #192	; 0xc0
 80019da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019dc:	2312      	movs	r3, #18
 80019de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	4619      	mov	r1, r3
 80019ea:	480b      	ldr	r0, [pc, #44]	; (8001a18 <HAL_I2C_MspInit+0x78>)
 80019ec:	f000 fb12 	bl	8002014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_I2C_MspInit+0x74>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_I2C_MspInit+0x74>)
 80019f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019fa:	61d3      	str	r3, [r2, #28]
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_I2C_MspInit+0x74>)
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a08:	bf00      	nop
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40005400 	.word	0x40005400
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010c00 	.word	0x40010c00

08001a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1a      	ldr	r2, [pc, #104]	; (8001aa0 <HAL_UART_MspInit+0x84>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d12c      	bne.n	8001a96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_UART_MspInit+0x88>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <HAL_UART_MspInit+0x88>)
 8001a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_UART_MspInit+0x88>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_UART_MspInit+0x88>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <HAL_UART_MspInit+0x88>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <HAL_UART_MspInit+0x88>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a72:	2312      	movs	r3, #18
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a76:	2303      	movs	r3, #3
 8001a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <HAL_UART_MspInit+0x8c>)
 8001a82:	f000 fac7 	bl	8002014 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2105      	movs	r1, #5
 8001a8a:	2025      	movs	r0, #37	; 0x25
 8001a8c:	f000 fa21 	bl	8001ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a90:	2025      	movs	r0, #37	; 0x25
 8001a92:	f000 fa3a 	bl	8001f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a96:	bf00      	nop
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40013800 	.word	0x40013800
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010800 	.word	0x40010800

08001aac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001abc:	2200      	movs	r2, #0
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	2019      	movs	r0, #25
 8001ac2:	f000 fa06 	bl	8001ed2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ac6:	2019      	movs	r0, #25
 8001ac8:	f000 fa1f 	bl	8001f0a <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <HAL_InitTick+0x9c>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a1d      	ldr	r2, [pc, #116]	; (8001b48 <HAL_InitTick+0x9c>)
 8001ad2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <HAL_InitTick+0x9c>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ae4:	f107 0210 	add.w	r2, r7, #16
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4611      	mov	r1, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f001 fc56 	bl	80033a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001af4:	f001 fc40 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8001af8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <HAL_InitTick+0xa0>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0c9b      	lsrs	r3, r3, #18
 8001b04:	3b01      	subs	r3, #1
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_InitTick+0xa4>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <HAL_InitTick+0xa8>)
 8001b0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_InitTick+0xa4>)
 8001b10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b14:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b16:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <HAL_InitTick+0xa4>)
 8001b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_InitTick+0xa4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_InitTick+0xa4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b28:	4809      	ldr	r0, [pc, #36]	; (8001b50 <HAL_InitTick+0xa4>)
 8001b2a:	f001 fc87 	bl	800343c <HAL_TIM_Base_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d104      	bne.n	8001b3e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001b34:	4806      	ldr	r0, [pc, #24]	; (8001b50 <HAL_InitTick+0xa4>)
 8001b36:	f001 fcb5 	bl	80034a4 <HAL_TIM_Base_Start_IT>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	e000      	b.n	8001b40 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3730      	adds	r7, #48	; 0x30
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	431bde83 	.word	0x431bde83
 8001b50:	200003f4 	.word	0x200003f4
 8001b54:	40012c00 	.word	0x40012c00

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <HardFault_Handler+0x4>

08001b6a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <MemManage_Handler+0x4>

08001b70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <BusFault_Handler+0x4>

08001b76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <UsageFault_Handler+0x4>

08001b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <TIM1_UP_IRQHandler+0x10>)
 8001b8e:	f001 fcac 	bl	80034ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200003f4 	.word	0x200003f4

08001b9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <USART1_IRQHandler+0x10>)
 8001ba2:	f001 fe99 	bl	80038d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200003b0 	.word	0x200003b0

08001bb0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <_sbrk+0x50>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <_sbrk+0x16>
		heap_end = &end;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <_sbrk+0x50>)
 8001bc2:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <_sbrk+0x54>)
 8001bc4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <_sbrk+0x50>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <_sbrk+0x50>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	466a      	mov	r2, sp
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d907      	bls.n	8001bea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001bda:	f003 fbf1 	bl	80053c0 <__errno>
 8001bde:	4603      	mov	r3, r0
 8001be0:	220c      	movs	r2, #12
 8001be2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001be4:	f04f 33ff 	mov.w	r3, #4294967295
 8001be8:	e006      	b.n	8001bf8 <_sbrk+0x48>
	}

	heap_end += incr;
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <_sbrk+0x50>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4a03      	ldr	r2, [pc, #12]	; (8001c00 <_sbrk+0x50>)
 8001bf4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000434 	.word	0x20000434
 8001c04:	20001198 	.word	0x20001198

08001c08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <SystemInit+0x5c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <SystemInit+0x5c>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <SystemInit+0x5c>)
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4911      	ldr	r1, [pc, #68]	; (8001c64 <SystemInit+0x5c>)
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <SystemInit+0x60>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <SystemInit+0x5c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <SystemInit+0x5c>)
 8001c2a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c32:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <SystemInit+0x5c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <SystemInit+0x5c>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <SystemInit+0x5c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <SystemInit+0x5c>)
 8001c46:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001c4a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <SystemInit+0x5c>)
 8001c4e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c52:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <SystemInit+0x64>)
 8001c56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c5a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40021000 	.word	0x40021000
 8001c68:	f8ff0000 	.word	0xf8ff0000
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c70:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c72:	e003      	b.n	8001c7c <LoopCopyDataInit>

08001c74 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c76:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c78:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c7a:	3104      	adds	r1, #4

08001c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c7c:	480a      	ldr	r0, [pc, #40]	; (8001ca8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c80:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c82:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c84:	d3f6      	bcc.n	8001c74 <CopyDataInit>
  ldr r2, =_sbss
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c88:	e002      	b.n	8001c90 <LoopFillZerobss>

08001c8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c8c:	f842 3b04 	str.w	r3, [r2], #4

08001c90 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c92:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c94:	d3f9      	bcc.n	8001c8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c96:	f7ff ffb7 	bl	8001c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c9a:	f003 fb97 	bl	80053cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c9e:	f7ff fcdf 	bl	8001660 <main>
  bx lr
 8001ca2:	4770      	bx	lr
  ldr r3, =_sidata
 8001ca4:	08005e88 	.word	0x08005e88
  ldr r0, =_sdata
 8001ca8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001cac:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 8001cb0:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8001cb4:	20001198 	.word	0x20001198

08001cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC1_2_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_Init+0x28>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_Init+0x28>)
 8001cc6:	f043 0310 	orr.w	r3, r3, #16
 8001cca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f000 f8f5 	bl	8001ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f7ff feea 	bl	8001aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd8:	f7ff fe2a 	bl	8001930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40022000 	.word	0x40022000

08001ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_IncTick+0x1c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_IncTick+0x20>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4a03      	ldr	r2, [pc, #12]	; (8001d08 <HAL_IncTick+0x20>)
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	2000001c 	.word	0x2000001c
 8001d08:	20000438 	.word	0x20000438

08001d0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d10:	4b02      	ldr	r3, [pc, #8]	; (8001d1c <HAL_GetTick+0x10>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	20000438 	.word	0x20000438

08001d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d28:	f7ff fff0 	bl	8001d0c <HAL_GetTick>
 8001d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d38:	d005      	beq.n	8001d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_Delay+0x44>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4413      	add	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d46:	bf00      	nop
 8001d48:	f7ff ffe0 	bl	8001d0c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d8f7      	bhi.n	8001d48 <HAL_Delay+0x28>
  {
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000001c 	.word	0x2000001c

08001d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <__NVIC_SetPriorityGrouping+0x44>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d84:	4013      	ands	r3, r2
 8001d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9a:	4a04      	ldr	r2, [pc, #16]	; (8001dac <__NVIC_SetPriorityGrouping+0x44>)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	60d3      	str	r3, [r2, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	f003 0307 	and.w	r3, r3, #7
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	db0b      	blt.n	8001df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	f003 021f 	and.w	r2, r3, #31
 8001de4:	4906      	ldr	r1, [pc, #24]	; (8001e00 <__NVIC_EnableIRQ+0x34>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	2001      	movs	r0, #1
 8001dee:	fa00 f202 	lsl.w	r2, r0, r2
 8001df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	; (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	; (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff4f 	bl	8001d68 <__NVIC_SetPriorityGrouping>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee4:	f7ff ff64 	bl	8001db0 <__NVIC_GetPriorityGrouping>
 8001ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	6978      	ldr	r0, [r7, #20]
 8001ef0:	f7ff ffb2 	bl	8001e58 <NVIC_EncodePriority>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff81 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f02:	bf00      	nop
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff57 	bl	8001dcc <__NVIC_EnableIRQ>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d005      	beq.n	8001f4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2204      	movs	r2, #4
 8001f42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e051      	b.n	8001fee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 020e 	bic.w	r2, r2, #14
 8001f58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0201 	bic.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a22      	ldr	r2, [pc, #136]	; (8001ff8 <HAL_DMA_Abort_IT+0xd0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d029      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xa0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a20      	ldr	r2, [pc, #128]	; (8001ffc <HAL_DMA_Abort_IT+0xd4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d022      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0x9c>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <HAL_DMA_Abort_IT+0xd8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d01a      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x96>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <HAL_DMA_Abort_IT+0xdc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d012      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0x90>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <HAL_DMA_Abort_IT+0xe0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_DMA_Abort_IT+0x8a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1a      	ldr	r2, [pc, #104]	; (800200c <HAL_DMA_Abort_IT+0xe4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d102      	bne.n	8001fac <HAL_DMA_Abort_IT+0x84>
 8001fa6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001faa:	e00e      	b.n	8001fca <HAL_DMA_Abort_IT+0xa2>
 8001fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb0:	e00b      	b.n	8001fca <HAL_DMA_Abort_IT+0xa2>
 8001fb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb6:	e008      	b.n	8001fca <HAL_DMA_Abort_IT+0xa2>
 8001fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fbc:	e005      	b.n	8001fca <HAL_DMA_Abort_IT+0xa2>
 8001fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc2:	e002      	b.n	8001fca <HAL_DMA_Abort_IT+0xa2>
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	e000      	b.n	8001fca <HAL_DMA_Abort_IT+0xa2>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	4a11      	ldr	r2, [pc, #68]	; (8002010 <HAL_DMA_Abort_IT+0xe8>)
 8001fcc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	4798      	blx	r3
    } 
  }
  return status;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40020008 	.word	0x40020008
 8001ffc:	4002001c 	.word	0x4002001c
 8002000:	40020030 	.word	0x40020030
 8002004:	40020044 	.word	0x40020044
 8002008:	40020058 	.word	0x40020058
 800200c:	4002006c 	.word	0x4002006c
 8002010:	40020000 	.word	0x40020000

08002014 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002014:	b480      	push	{r7}
 8002016:	b08b      	sub	sp, #44	; 0x2c
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002026:	e169      	b.n	80022fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002028:	2201      	movs	r2, #1
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	429a      	cmp	r2, r3
 8002042:	f040 8158 	bne.w	80022f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4a9a      	ldr	r2, [pc, #616]	; (80022b4 <HAL_GPIO_Init+0x2a0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d05e      	beq.n	800210e <HAL_GPIO_Init+0xfa>
 8002050:	4a98      	ldr	r2, [pc, #608]	; (80022b4 <HAL_GPIO_Init+0x2a0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d875      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 8002056:	4a98      	ldr	r2, [pc, #608]	; (80022b8 <HAL_GPIO_Init+0x2a4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d058      	beq.n	800210e <HAL_GPIO_Init+0xfa>
 800205c:	4a96      	ldr	r2, [pc, #600]	; (80022b8 <HAL_GPIO_Init+0x2a4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d86f      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 8002062:	4a96      	ldr	r2, [pc, #600]	; (80022bc <HAL_GPIO_Init+0x2a8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d052      	beq.n	800210e <HAL_GPIO_Init+0xfa>
 8002068:	4a94      	ldr	r2, [pc, #592]	; (80022bc <HAL_GPIO_Init+0x2a8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d869      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 800206e:	4a94      	ldr	r2, [pc, #592]	; (80022c0 <HAL_GPIO_Init+0x2ac>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d04c      	beq.n	800210e <HAL_GPIO_Init+0xfa>
 8002074:	4a92      	ldr	r2, [pc, #584]	; (80022c0 <HAL_GPIO_Init+0x2ac>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d863      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 800207a:	4a92      	ldr	r2, [pc, #584]	; (80022c4 <HAL_GPIO_Init+0x2b0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d046      	beq.n	800210e <HAL_GPIO_Init+0xfa>
 8002080:	4a90      	ldr	r2, [pc, #576]	; (80022c4 <HAL_GPIO_Init+0x2b0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d85d      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 8002086:	2b12      	cmp	r3, #18
 8002088:	d82a      	bhi.n	80020e0 <HAL_GPIO_Init+0xcc>
 800208a:	2b12      	cmp	r3, #18
 800208c:	d859      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 800208e:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <HAL_GPIO_Init+0x80>)
 8002090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002094:	0800210f 	.word	0x0800210f
 8002098:	080020e9 	.word	0x080020e9
 800209c:	080020fb 	.word	0x080020fb
 80020a0:	0800213d 	.word	0x0800213d
 80020a4:	08002143 	.word	0x08002143
 80020a8:	08002143 	.word	0x08002143
 80020ac:	08002143 	.word	0x08002143
 80020b0:	08002143 	.word	0x08002143
 80020b4:	08002143 	.word	0x08002143
 80020b8:	08002143 	.word	0x08002143
 80020bc:	08002143 	.word	0x08002143
 80020c0:	08002143 	.word	0x08002143
 80020c4:	08002143 	.word	0x08002143
 80020c8:	08002143 	.word	0x08002143
 80020cc:	08002143 	.word	0x08002143
 80020d0:	08002143 	.word	0x08002143
 80020d4:	08002143 	.word	0x08002143
 80020d8:	080020f1 	.word	0x080020f1
 80020dc:	08002105 	.word	0x08002105
 80020e0:	4a79      	ldr	r2, [pc, #484]	; (80022c8 <HAL_GPIO_Init+0x2b4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d013      	beq.n	800210e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020e6:	e02c      	b.n	8002142 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	623b      	str	r3, [r7, #32]
          break;
 80020ee:	e029      	b.n	8002144 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	3304      	adds	r3, #4
 80020f6:	623b      	str	r3, [r7, #32]
          break;
 80020f8:	e024      	b.n	8002144 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	3308      	adds	r3, #8
 8002100:	623b      	str	r3, [r7, #32]
          break;
 8002102:	e01f      	b.n	8002144 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	330c      	adds	r3, #12
 800210a:	623b      	str	r3, [r7, #32]
          break;
 800210c:	e01a      	b.n	8002144 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d102      	bne.n	800211c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002116:	2304      	movs	r3, #4
 8002118:	623b      	str	r3, [r7, #32]
          break;
 800211a:	e013      	b.n	8002144 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002124:	2308      	movs	r3, #8
 8002126:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	611a      	str	r2, [r3, #16]
          break;
 800212e:	e009      	b.n	8002144 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002130:	2308      	movs	r3, #8
 8002132:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	615a      	str	r2, [r3, #20]
          break;
 800213a:	e003      	b.n	8002144 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800213c:	2300      	movs	r3, #0
 800213e:	623b      	str	r3, [r7, #32]
          break;
 8002140:	e000      	b.n	8002144 <HAL_GPIO_Init+0x130>
          break;
 8002142:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2bff      	cmp	r3, #255	; 0xff
 8002148:	d801      	bhi.n	800214e <HAL_GPIO_Init+0x13a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	e001      	b.n	8002152 <HAL_GPIO_Init+0x13e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3304      	adds	r3, #4
 8002152:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2bff      	cmp	r3, #255	; 0xff
 8002158:	d802      	bhi.n	8002160 <HAL_GPIO_Init+0x14c>
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	e002      	b.n	8002166 <HAL_GPIO_Init+0x152>
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	3b08      	subs	r3, #8
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	210f      	movs	r1, #15
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	401a      	ands	r2, r3
 8002178:	6a39      	ldr	r1, [r7, #32]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	431a      	orrs	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80b1 	beq.w	80022f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002194:	4b4d      	ldr	r3, [pc, #308]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	4a4c      	ldr	r2, [pc, #304]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6193      	str	r3, [r2, #24]
 80021a0:	4b4a      	ldr	r3, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021ac:	4a48      	ldr	r2, [pc, #288]	; (80022d0 <HAL_GPIO_Init+0x2bc>)
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	3302      	adds	r3, #2
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4013      	ands	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a40      	ldr	r2, [pc, #256]	; (80022d4 <HAL_GPIO_Init+0x2c0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d013      	beq.n	8002200 <HAL_GPIO_Init+0x1ec>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a3f      	ldr	r2, [pc, #252]	; (80022d8 <HAL_GPIO_Init+0x2c4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00d      	beq.n	80021fc <HAL_GPIO_Init+0x1e8>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3e      	ldr	r2, [pc, #248]	; (80022dc <HAL_GPIO_Init+0x2c8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d007      	beq.n	80021f8 <HAL_GPIO_Init+0x1e4>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3d      	ldr	r2, [pc, #244]	; (80022e0 <HAL_GPIO_Init+0x2cc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d101      	bne.n	80021f4 <HAL_GPIO_Init+0x1e0>
 80021f0:	2303      	movs	r3, #3
 80021f2:	e006      	b.n	8002202 <HAL_GPIO_Init+0x1ee>
 80021f4:	2304      	movs	r3, #4
 80021f6:	e004      	b.n	8002202 <HAL_GPIO_Init+0x1ee>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e002      	b.n	8002202 <HAL_GPIO_Init+0x1ee>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_GPIO_Init+0x1ee>
 8002200:	2300      	movs	r3, #0
 8002202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002204:	f002 0203 	and.w	r2, r2, #3
 8002208:	0092      	lsls	r2, r2, #2
 800220a:	4093      	lsls	r3, r2
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002212:	492f      	ldr	r1, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x2bc>)
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	3302      	adds	r3, #2
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d006      	beq.n	800223a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800222c:	4b2d      	ldr	r3, [pc, #180]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	492c      	ldr	r1, [pc, #176]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]
 8002238:	e006      	b.n	8002248 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800223a:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	43db      	mvns	r3, r3
 8002242:	4928      	ldr	r1, [pc, #160]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002244:	4013      	ands	r3, r2
 8002246:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d006      	beq.n	8002262 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002254:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	4922      	ldr	r1, [pc, #136]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
 8002260:	e006      	b.n	8002270 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	43db      	mvns	r3, r3
 800226a:	491e      	ldr	r1, [pc, #120]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800226c:	4013      	ands	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d006      	beq.n	800228a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800227c:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	4918      	ldr	r1, [pc, #96]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	608b      	str	r3, [r1, #8]
 8002288:	e006      	b.n	8002298 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800228a:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	43db      	mvns	r3, r3
 8002292:	4914      	ldr	r1, [pc, #80]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002294:	4013      	ands	r3, r2
 8002296:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d021      	beq.n	80022e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	490e      	ldr	r1, [pc, #56]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60cb      	str	r3, [r1, #12]
 80022b0:	e021      	b.n	80022f6 <HAL_GPIO_Init+0x2e2>
 80022b2:	bf00      	nop
 80022b4:	10320000 	.word	0x10320000
 80022b8:	10310000 	.word	0x10310000
 80022bc:	10220000 	.word	0x10220000
 80022c0:	10210000 	.word	0x10210000
 80022c4:	10120000 	.word	0x10120000
 80022c8:	10110000 	.word	0x10110000
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40010000 	.word	0x40010000
 80022d4:	40010800 	.word	0x40010800
 80022d8:	40010c00 	.word	0x40010c00
 80022dc:	40011000 	.word	0x40011000
 80022e0:	40011400 	.word	0x40011400
 80022e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_GPIO_Init+0x304>)
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	4909      	ldr	r1, [pc, #36]	; (8002318 <HAL_GPIO_Init+0x304>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	3301      	adds	r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	fa22 f303 	lsr.w	r3, r2, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	f47f ae8e 	bne.w	8002028 <HAL_GPIO_Init+0x14>
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	372c      	adds	r7, #44	; 0x2c
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	40010400 	.word	0x40010400

0800231c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
 8002328:	4613      	mov	r3, r2
 800232a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800232c:	787b      	ldrb	r3, [r7, #1]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002332:	887a      	ldrh	r2, [r7, #2]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002338:	e003      	b.n	8002342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800233a:	887b      	ldrh	r3, [r7, #2]
 800233c:	041a      	lsls	r2, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	611a      	str	r2, [r3, #16]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e11b      	b.n	8002596 <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff fb14 	bl	80019a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2224      	movs	r2, #36	; 0x24
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0201 	bic.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002390:	f000 ffde 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 8002394:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	4a81      	ldr	r2, [pc, #516]	; (80025a0 <HAL_I2C_Init+0x254>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d807      	bhi.n	80023b0 <HAL_I2C_Init+0x64>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4a80      	ldr	r2, [pc, #512]	; (80025a4 <HAL_I2C_Init+0x258>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	bf94      	ite	ls
 80023a8:	2301      	movls	r3, #1
 80023aa:	2300      	movhi	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	e006      	b.n	80023be <HAL_I2C_Init+0x72>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4a7d      	ldr	r2, [pc, #500]	; (80025a8 <HAL_I2C_Init+0x25c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	bf94      	ite	ls
 80023b8:	2301      	movls	r3, #1
 80023ba:	2300      	movhi	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0e7      	b.n	8002596 <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4a78      	ldr	r2, [pc, #480]	; (80025ac <HAL_I2C_Init+0x260>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	0c9b      	lsrs	r3, r3, #18
 80023d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a6a      	ldr	r2, [pc, #424]	; (80025a0 <HAL_I2C_Init+0x254>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d802      	bhi.n	8002400 <HAL_I2C_Init+0xb4>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	3301      	adds	r3, #1
 80023fe:	e009      	b.n	8002414 <HAL_I2C_Init+0xc8>
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002406:	fb02 f303 	mul.w	r3, r2, r3
 800240a:	4a69      	ldr	r2, [pc, #420]	; (80025b0 <HAL_I2C_Init+0x264>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	099b      	lsrs	r3, r3, #6
 8002412:	3301      	adds	r3, #1
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	430b      	orrs	r3, r1
 800241a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002426:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	495c      	ldr	r1, [pc, #368]	; (80025a0 <HAL_I2C_Init+0x254>)
 8002430:	428b      	cmp	r3, r1
 8002432:	d819      	bhi.n	8002468 <HAL_I2C_Init+0x11c>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1e59      	subs	r1, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002442:	1c59      	adds	r1, r3, #1
 8002444:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002448:	400b      	ands	r3, r1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_I2C_Init+0x118>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1e59      	subs	r1, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fbb1 f3f3 	udiv	r3, r1, r3
 800245c:	3301      	adds	r3, #1
 800245e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002462:	e051      	b.n	8002508 <HAL_I2C_Init+0x1bc>
 8002464:	2304      	movs	r3, #4
 8002466:	e04f      	b.n	8002508 <HAL_I2C_Init+0x1bc>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d111      	bne.n	8002494 <HAL_I2C_Init+0x148>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1e58      	subs	r0, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	440b      	add	r3, r1
 800247e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002482:	3301      	adds	r3, #1
 8002484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	e012      	b.n	80024ba <HAL_I2C_Init+0x16e>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1e58      	subs	r0, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	0099      	lsls	r1, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_I2C_Init+0x176>
 80024be:	2301      	movs	r3, #1
 80024c0:	e022      	b.n	8002508 <HAL_I2C_Init+0x1bc>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10e      	bne.n	80024e8 <HAL_I2C_Init+0x19c>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1e58      	subs	r0, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6859      	ldr	r1, [r3, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	440b      	add	r3, r1
 80024d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e6:	e00f      	b.n	8002508 <HAL_I2C_Init+0x1bc>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1e58      	subs	r0, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6859      	ldr	r1, [r3, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	0099      	lsls	r1, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80024fe:	3301      	adds	r3, #1
 8002500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	6809      	ldr	r1, [r1, #0]
 800250c:	4313      	orrs	r3, r2
 800250e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69da      	ldr	r2, [r3, #28]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002536:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6911      	ldr	r1, [r2, #16]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68d2      	ldr	r2, [r2, #12]
 8002542:	4311      	orrs	r1, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	430b      	orrs	r3, r1
 800254a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	000186a0 	.word	0x000186a0
 80025a4:	001e847f 	.word	0x001e847f
 80025a8:	003d08ff 	.word	0x003d08ff
 80025ac:	431bde83 	.word	0x431bde83
 80025b0:	10624dd3 	.word	0x10624dd3

080025b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	461a      	mov	r2, r3
 80025c0:	460b      	mov	r3, r1
 80025c2:	817b      	strh	r3, [r7, #10]
 80025c4:	4613      	mov	r3, r2
 80025c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff fba0 	bl	8001d0c <HAL_GetTick>
 80025cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	f040 80e0 	bne.w	800279c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2319      	movs	r3, #25
 80025e2:	2201      	movs	r2, #1
 80025e4:	4970      	ldr	r1, [pc, #448]	; (80027a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f958 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025f2:	2302      	movs	r3, #2
 80025f4:	e0d3      	b.n	800279e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_I2C_Master_Transmit+0x50>
 8002600:	2302      	movs	r3, #2
 8002602:	e0cc      	b.n	800279e <HAL_I2C_Master_Transmit+0x1ea>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b01      	cmp	r3, #1
 8002618:	d007      	beq.n	800262a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002638:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2221      	movs	r2, #33	; 0x21
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2210      	movs	r2, #16
 8002646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	893a      	ldrh	r2, [r7, #8]
 800265a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4a50      	ldr	r2, [pc, #320]	; (80027ac <HAL_I2C_Master_Transmit+0x1f8>)
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800266c:	8979      	ldrh	r1, [r7, #10]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	6a3a      	ldr	r2, [r7, #32]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f89c 	bl	80027b0 <I2C_MasterRequestWrite>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e08d      	b.n	800279e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002698:	e066      	b.n	8002768 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	6a39      	ldr	r1, [r7, #32]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f9d2 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00d      	beq.n	80026c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d107      	bne.n	80026c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e06b      	b.n	800279e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b04      	cmp	r3, #4
 8002702:	d11b      	bne.n	800273c <HAL_I2C_Master_Transmit+0x188>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	2b00      	cmp	r3, #0
 800270a:	d017      	beq.n	800273c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	6a39      	ldr	r1, [r7, #32]
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 f9c2 	bl	8002aca <I2C_WaitOnBTFFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00d      	beq.n	8002768 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	2b04      	cmp	r3, #4
 8002752:	d107      	bne.n	8002764 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002762:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e01a      	b.n	800279e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	2b00      	cmp	r3, #0
 800276e:	d194      	bne.n	800269a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	e000      	b.n	800279e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800279c:	2302      	movs	r3, #2
  }
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	00100002 	.word	0x00100002
 80027ac:	ffff0000 	.word	0xffff0000

080027b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	460b      	mov	r3, r1
 80027be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d006      	beq.n	80027da <I2C_MasterRequestWrite+0x2a>
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d003      	beq.n	80027da <I2C_MasterRequestWrite+0x2a>
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027d8:	d108      	bne.n	80027ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e00b      	b.n	8002804 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	2b12      	cmp	r3, #18
 80027f2:	d107      	bne.n	8002804 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002802:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f843 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e035      	b.n	800288c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002828:	d108      	bne.n	800283c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800282a:	897b      	ldrh	r3, [r7, #10]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002838:	611a      	str	r2, [r3, #16]
 800283a:	e01b      	b.n	8002874 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800283c:	897b      	ldrh	r3, [r7, #10]
 800283e:	11db      	asrs	r3, r3, #7
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f003 0306 	and.w	r3, r3, #6
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f063 030f 	orn	r3, r3, #15
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	490e      	ldr	r1, [pc, #56]	; (8002894 <I2C_MasterRequestWrite+0xe4>)
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f875 	bl	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e010      	b.n	800288c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800286a:	897b      	ldrh	r3, [r7, #10]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	4907      	ldr	r1, [pc, #28]	; (8002898 <I2C_MasterRequestWrite+0xe8>)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f865 	bl	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	00010008 	.word	0x00010008
 8002898:	00010002 	.word	0x00010002

0800289c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ac:	e025      	b.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d021      	beq.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b6:	f7ff fa29 	bl	8001d0c <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d302      	bcc.n	80028cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d116      	bne.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e023      	b.n	8002942 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	0c1b      	lsrs	r3, r3, #16
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d10d      	bne.n	8002920 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	43da      	mvns	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4013      	ands	r3, r2
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	bf0c      	ite	eq
 8002916:	2301      	moveq	r3, #1
 8002918:	2300      	movne	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	e00c      	b.n	800293a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4013      	ands	r3, r2
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	429a      	cmp	r2, r3
 800293e:	d0b6      	beq.n	80028ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002958:	e051      	b.n	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002968:	d123      	bne.n	80029b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002978:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002982:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f043 0204 	orr.w	r2, r3, #4
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e046      	b.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d021      	beq.n	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ba:	f7ff f9a7 	bl	8001d0c <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d302      	bcc.n	80029d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d116      	bne.n	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f043 0220 	orr.w	r2, r3, #32
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e020      	b.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	0c1b      	lsrs	r3, r3, #16
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d10c      	bne.n	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4013      	ands	r3, r2
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf14      	ite	ne
 8002a1a:	2301      	movne	r3, #1
 8002a1c:	2300      	moveq	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	e00b      	b.n	8002a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	43da      	mvns	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d18d      	bne.n	800295a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a54:	e02d      	b.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f878 	bl	8002b4c <I2C_IsAcknowledgeFailed>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e02d      	b.n	8002ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d021      	beq.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6e:	f7ff f94d 	bl	8001d0c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d302      	bcc.n	8002a84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d116      	bne.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e007      	b.n	8002ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abc:	2b80      	cmp	r3, #128	; 0x80
 8002abe:	d1ca      	bne.n	8002a56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ad6:	e02d      	b.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f837 	bl	8002b4c <I2C_IsAcknowledgeFailed>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e02d      	b.n	8002b44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aee:	d021      	beq.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af0:	f7ff f90c 	bl	8001d0c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d302      	bcc.n	8002b06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f043 0220 	orr.w	r2, r3, #32
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e007      	b.n	8002b44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d1ca      	bne.n	8002ad8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b62:	d11b      	bne.n	8002b9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f043 0204 	orr.w	r2, r3, #4
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e272      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8087 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc8:	4b92      	ldr	r3, [pc, #584]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d00c      	beq.n	8002bee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd4:	4b8f      	ldr	r3, [pc, #572]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d112      	bne.n	8002c06 <HAL_RCC_OscConfig+0x5e>
 8002be0:	4b8c      	ldr	r3, [pc, #560]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bec:	d10b      	bne.n	8002c06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bee:	4b89      	ldr	r3, [pc, #548]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d06c      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x12c>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d168      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e24c      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x76>
 8002c10:	4b80      	ldr	r3, [pc, #512]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a7f      	ldr	r2, [pc, #508]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	e02e      	b.n	8002c7c <HAL_RCC_OscConfig+0xd4>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x98>
 8002c26:	4b7b      	ldr	r3, [pc, #492]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a7a      	ldr	r2, [pc, #488]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b78      	ldr	r3, [pc, #480]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a77      	ldr	r2, [pc, #476]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e01d      	b.n	8002c7c <HAL_RCC_OscConfig+0xd4>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0xbc>
 8002c4a:	4b72      	ldr	r3, [pc, #456]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a71      	ldr	r2, [pc, #452]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4b6f      	ldr	r3, [pc, #444]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a6e      	ldr	r2, [pc, #440]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e00b      	b.n	8002c7c <HAL_RCC_OscConfig+0xd4>
 8002c64:	4b6b      	ldr	r3, [pc, #428]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a6a      	ldr	r2, [pc, #424]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b68      	ldr	r3, [pc, #416]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a67      	ldr	r2, [pc, #412]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d013      	beq.n	8002cac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7ff f842 	bl	8001d0c <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7ff f83e 	bl	8001d0c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	; 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e200      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	4b5d      	ldr	r3, [pc, #372]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0xe4>
 8002caa:	e014      	b.n	8002cd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7ff f82e 	bl	8001d0c <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7ff f82a 	bl	8001d0c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e1ec      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x10c>
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d063      	beq.n	8002daa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ce2:	4b4c      	ldr	r3, [pc, #304]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cee:	4b49      	ldr	r3, [pc, #292]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d11c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x18c>
 8002cfa:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d116      	bne.n	8002d34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	4b43      	ldr	r3, [pc, #268]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_RCC_OscConfig+0x176>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d001      	beq.n	8002d1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e1c0      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1e:	4b3d      	ldr	r3, [pc, #244]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4939      	ldr	r1, [pc, #228]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d32:	e03a      	b.n	8002daa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d020      	beq.n	8002d7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d3c:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fe ffe3 	bl	8001d0c <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7fe ffdf 	bl	8001d0c <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e1a1      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	4b2d      	ldr	r3, [pc, #180]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d68:	4b2a      	ldr	r3, [pc, #168]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4927      	ldr	r1, [pc, #156]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]
 8002d7c:	e015      	b.n	8002daa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <HAL_RCC_OscConfig+0x270>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7fe ffc2 	bl	8001d0c <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8c:	f7fe ffbe 	bl	8001d0c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e180      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d03a      	beq.n	8002e2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d019      	beq.n	8002df2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <HAL_RCC_OscConfig+0x274>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc4:	f7fe ffa2 	bl	8001d0c <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dcc:	f7fe ff9e 	bl	8001d0c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e160      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dea:	2001      	movs	r0, #1
 8002dec:	f000 fb08 	bl	8003400 <RCC_Delay>
 8002df0:	e01c      	b.n	8002e2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <HAL_RCC_OscConfig+0x274>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df8:	f7fe ff88 	bl	8001d0c <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfe:	e00f      	b.n	8002e20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e00:	f7fe ff84 	bl	8001d0c <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d908      	bls.n	8002e20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e146      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000
 8002e18:	42420000 	.word	0x42420000
 8002e1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e20:	4b92      	ldr	r3, [pc, #584]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e9      	bne.n	8002e00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80a6 	beq.w	8002f86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3e:	4b8b      	ldr	r3, [pc, #556]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10d      	bne.n	8002e66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4a:	4b88      	ldr	r3, [pc, #544]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	4a87      	ldr	r2, [pc, #540]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e54:	61d3      	str	r3, [r2, #28]
 8002e56:	4b85      	ldr	r3, [pc, #532]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e62:	2301      	movs	r3, #1
 8002e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b82      	ldr	r3, [pc, #520]	; (8003070 <HAL_RCC_OscConfig+0x4c8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d118      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e72:	4b7f      	ldr	r3, [pc, #508]	; (8003070 <HAL_RCC_OscConfig+0x4c8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a7e      	ldr	r2, [pc, #504]	; (8003070 <HAL_RCC_OscConfig+0x4c8>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7e:	f7fe ff45 	bl	8001d0c <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e86:	f7fe ff41 	bl	8001d0c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b64      	cmp	r3, #100	; 0x64
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e103      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	4b75      	ldr	r3, [pc, #468]	; (8003070 <HAL_RCC_OscConfig+0x4c8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d106      	bne.n	8002eba <HAL_RCC_OscConfig+0x312>
 8002eac:	4b6f      	ldr	r3, [pc, #444]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4a6e      	ldr	r2, [pc, #440]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6213      	str	r3, [r2, #32]
 8002eb8:	e02d      	b.n	8002f16 <HAL_RCC_OscConfig+0x36e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCC_OscConfig+0x334>
 8002ec2:	4b6a      	ldr	r3, [pc, #424]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4a69      	ldr	r2, [pc, #420]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6213      	str	r3, [r2, #32]
 8002ece:	4b67      	ldr	r3, [pc, #412]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a66      	ldr	r2, [pc, #408]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	f023 0304 	bic.w	r3, r3, #4
 8002ed8:	6213      	str	r3, [r2, #32]
 8002eda:	e01c      	b.n	8002f16 <HAL_RCC_OscConfig+0x36e>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b05      	cmp	r3, #5
 8002ee2:	d10c      	bne.n	8002efe <HAL_RCC_OscConfig+0x356>
 8002ee4:	4b61      	ldr	r3, [pc, #388]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4a60      	ldr	r2, [pc, #384]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	f043 0304 	orr.w	r3, r3, #4
 8002eee:	6213      	str	r3, [r2, #32]
 8002ef0:	4b5e      	ldr	r3, [pc, #376]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a5d      	ldr	r2, [pc, #372]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6213      	str	r3, [r2, #32]
 8002efc:	e00b      	b.n	8002f16 <HAL_RCC_OscConfig+0x36e>
 8002efe:	4b5b      	ldr	r3, [pc, #364]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a5a      	ldr	r2, [pc, #360]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	6213      	str	r3, [r2, #32]
 8002f0a:	4b58      	ldr	r3, [pc, #352]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4a57      	ldr	r2, [pc, #348]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d015      	beq.n	8002f4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe fef5 	bl	8001d0c <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7fe fef1 	bl	8001d0c <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e0b1      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3c:	4b4b      	ldr	r3, [pc, #300]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0ee      	beq.n	8002f26 <HAL_RCC_OscConfig+0x37e>
 8002f48:	e014      	b.n	8002f74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fedf 	bl	8001d0c <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7fe fedb 	bl	8001d0c <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e09b      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f68:	4b40      	ldr	r3, [pc, #256]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ee      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d105      	bne.n	8002f86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7a:	4b3c      	ldr	r3, [pc, #240]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4a3b      	ldr	r2, [pc, #236]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8087 	beq.w	800309e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f90:	4b36      	ldr	r3, [pc, #216]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d061      	beq.n	8003060 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d146      	bne.n	8003032 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa4:	4b33      	ldr	r3, [pc, #204]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002faa:	f7fe feaf 	bl	8001d0c <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb2:	f7fe feab 	bl	8001d0c <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e06d      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc4:	4b29      	ldr	r3, [pc, #164]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f0      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd8:	d108      	bne.n	8002fec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fda:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	4921      	ldr	r1, [pc, #132]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a19      	ldr	r1, [r3, #32]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	491b      	ldr	r1, [pc, #108]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7fe fe7f 	bl	8001d0c <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003012:	f7fe fe7b 	bl	8001d0c <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e03d      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x46a>
 8003030:	e035      	b.n	800309e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_RCC_OscConfig+0x4cc>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe fe68 	bl	8001d0c <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe fe64 	bl	8001d0c <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e026      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_RCC_OscConfig+0x4c4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x498>
 800305e:	e01e      	b.n	800309e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d107      	bne.n	8003078 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e019      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
 800306c:	40021000 	.word	0x40021000
 8003070:	40007000 	.word	0x40007000
 8003074:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_RCC_OscConfig+0x500>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	429a      	cmp	r2, r3
 800308a:	d106      	bne.n	800309a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d001      	beq.n	800309e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40021000 	.word	0x40021000

080030ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0d0      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030c0:	4b6a      	ldr	r3, [pc, #424]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d910      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b67      	ldr	r3, [pc, #412]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 0207 	bic.w	r2, r3, #7
 80030d6:	4965      	ldr	r1, [pc, #404]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b63      	ldr	r3, [pc, #396]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0b8      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003108:	4b59      	ldr	r3, [pc, #356]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a58      	ldr	r2, [pc, #352]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003112:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003120:	4b53      	ldr	r3, [pc, #332]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800312a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312c:	4b50      	ldr	r3, [pc, #320]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	494d      	ldr	r1, [pc, #308]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d040      	beq.n	80031cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d107      	bne.n	8003162 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d115      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e07f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d107      	bne.n	800317a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316a:	4b41      	ldr	r3, [pc, #260]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e073      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317a:	4b3d      	ldr	r3, [pc, #244]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e06b      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800318a:	4b39      	ldr	r3, [pc, #228]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f023 0203 	bic.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4936      	ldr	r1, [pc, #216]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800319c:	f7fe fdb6 	bl	8001d0c <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a4:	f7fe fdb2 	bl	8001d0c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e053      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ba:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 020c 	and.w	r2, r3, #12
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d1eb      	bne.n	80031a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031cc:	4b27      	ldr	r3, [pc, #156]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d210      	bcs.n	80031fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b24      	ldr	r3, [pc, #144]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 0207 	bic.w	r2, r3, #7
 80031e2:	4922      	ldr	r1, [pc, #136]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e032      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4916      	ldr	r1, [pc, #88]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	490e      	ldr	r1, [pc, #56]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	4313      	orrs	r3, r2
 8003238:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800323a:	f000 f821 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800323e:	4602      	mov	r2, r0
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	490a      	ldr	r1, [pc, #40]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800324c:	5ccb      	ldrb	r3, [r1, r3]
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	4a09      	ldr	r2, [pc, #36]	; (8003278 <HAL_RCC_ClockConfig+0x1cc>)
 8003254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1d0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe fc26 	bl	8001aac <HAL_InitTick>

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40022000 	.word	0x40022000
 8003270:	40021000 	.word	0x40021000
 8003274:	08005e34 	.word	0x08005e34
 8003278:	20000014 	.word	0x20000014
 800327c:	20000018 	.word	0x20000018

08003280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003280:	b490      	push	{r4, r7}
 8003282:	b08a      	sub	sp, #40	; 0x28
 8003284:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003286:	4b29      	ldr	r3, [pc, #164]	; (800332c <HAL_RCC_GetSysClockFreq+0xac>)
 8003288:	1d3c      	adds	r4, r7, #4
 800328a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800328c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003290:	f240 2301 	movw	r3, #513	; 0x201
 8003294:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032aa:	4b21      	ldr	r3, [pc, #132]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d002      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x40>
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x46>
 80032be:	e02b      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032c2:	623b      	str	r3, [r7, #32]
      break;
 80032c4:	e02b      	b.n	800331e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	0c9b      	lsrs	r3, r3, #18
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	3328      	adds	r3, #40	; 0x28
 80032d0:	443b      	add	r3, r7
 80032d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d012      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032e2:	4b13      	ldr	r3, [pc, #76]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	0c5b      	lsrs	r3, r3, #17
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	3328      	adds	r3, #40	; 0x28
 80032ee:	443b      	add	r3, r7
 80032f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	4a0e      	ldr	r2, [pc, #56]	; (8003334 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032fa:	fb03 f202 	mul.w	r2, r3, r2
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
 8003306:	e004      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <HAL_RCC_GetSysClockFreq+0xb8>)
 800330c:	fb02 f303 	mul.w	r3, r2, r3
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	623b      	str	r3, [r7, #32]
      break;
 8003316:	e002      	b.n	800331e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCC_GetSysClockFreq+0xb4>)
 800331a:	623b      	str	r3, [r7, #32]
      break;
 800331c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331e:	6a3b      	ldr	r3, [r7, #32]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3728      	adds	r7, #40	; 0x28
 8003324:	46bd      	mov	sp, r7
 8003326:	bc90      	pop	{r4, r7}
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	08005e1c 	.word	0x08005e1c
 8003330:	40021000 	.word	0x40021000
 8003334:	007a1200 	.word	0x007a1200
 8003338:	003d0900 	.word	0x003d0900

0800333c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003340:	4b02      	ldr	r3, [pc, #8]	; (800334c <HAL_RCC_GetHCLKFreq+0x10>)
 8003342:	681b      	ldr	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	20000014 	.word	0x20000014

08003350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003354:	f7ff fff2 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	0a1b      	lsrs	r3, r3, #8
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4903      	ldr	r1, [pc, #12]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	08005e44 	.word	0x08005e44

08003378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800337c:	f7ff ffde 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	0adb      	lsrs	r3, r3, #11
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4903      	ldr	r1, [pc, #12]	; (800339c <HAL_RCC_GetPCLK2Freq+0x24>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40021000 	.word	0x40021000
 800339c:	08005e44 	.word	0x08005e44

080033a0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	220f      	movs	r2, #15
 80033ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <HAL_RCC_GetClockConfig+0x58>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0203 	and.w	r2, r3, #3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033bc:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <HAL_RCC_GetClockConfig+0x58>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_GetClockConfig+0x58>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80033d4:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <HAL_RCC_GetClockConfig+0x58>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	08db      	lsrs	r3, r3, #3
 80033da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <HAL_RCC_GetClockConfig+0x5c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0207 	and.w	r2, r3, #7
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40022000 	.word	0x40022000

08003400 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003408:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <RCC_Delay+0x34>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <RCC_Delay+0x38>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	0a5b      	lsrs	r3, r3, #9
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	fb02 f303 	mul.w	r3, r2, r3
 800341a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800341c:	bf00      	nop
  }
  while (Delay --);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1e5a      	subs	r2, r3, #1
 8003422:	60fa      	str	r2, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f9      	bne.n	800341c <RCC_Delay+0x1c>
}
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	20000014 	.word	0x20000014
 8003438:	10624dd3 	.word	0x10624dd3

0800343c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e01d      	b.n	800348a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f815 	bl	8003492 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	4619      	mov	r1, r3
 800347a:	4610      	mov	r0, r2
 800347c:	f000 f962 	bl	8003744 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d007      	beq.n	80034de <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0201 	orr.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr

080034ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d122      	bne.n	8003546 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b02      	cmp	r3, #2
 800350c:	d11b      	bne.n	8003546 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f06f 0202 	mvn.w	r2, #2
 8003516:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f8ed 	bl	800370c <HAL_TIM_IC_CaptureCallback>
 8003532:	e005      	b.n	8003540 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f8e0 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f8ef 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b04      	cmp	r3, #4
 8003552:	d122      	bne.n	800359a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b04      	cmp	r3, #4
 8003560:	d11b      	bne.n	800359a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f06f 0204 	mvn.w	r2, #4
 800356a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f8c3 	bl	800370c <HAL_TIM_IC_CaptureCallback>
 8003586:	e005      	b.n	8003594 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f8b6 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f8c5 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d122      	bne.n	80035ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d11b      	bne.n	80035ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f06f 0208 	mvn.w	r2, #8
 80035be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2204      	movs	r2, #4
 80035c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f899 	bl	800370c <HAL_TIM_IC_CaptureCallback>
 80035da:	e005      	b.n	80035e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f88c 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f89b 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b10      	cmp	r3, #16
 80035fa:	d122      	bne.n	8003642 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	2b10      	cmp	r3, #16
 8003608:	d11b      	bne.n	8003642 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f06f 0210 	mvn.w	r2, #16
 8003612:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2208      	movs	r2, #8
 8003618:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f86f 	bl	800370c <HAL_TIM_IC_CaptureCallback>
 800362e:	e005      	b.n	800363c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f862 	bl	80036fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f871 	bl	800371e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b01      	cmp	r3, #1
 800364e:	d10e      	bne.n	800366e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b01      	cmp	r3, #1
 800365c:	d107      	bne.n	800366e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f06f 0201 	mvn.w	r2, #1
 8003666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7fe f949 	bl	8001900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003678:	2b80      	cmp	r3, #128	; 0x80
 800367a:	d10e      	bne.n	800369a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b80      	cmp	r3, #128	; 0x80
 8003688:	d107      	bne.n	800369a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f8c0 	bl	800381a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d10e      	bne.n	80036c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d107      	bne.n	80036c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f835 	bl	8003730 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d10e      	bne.n	80036f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d107      	bne.n	80036f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f06f 0220 	mvn.w	r2, #32
 80036ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f88b 	bl	8003808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr
	...

08003744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a29      	ldr	r2, [pc, #164]	; (80037fc <TIM_Base_SetConfig+0xb8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00b      	beq.n	8003774 <TIM_Base_SetConfig+0x30>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003762:	d007      	beq.n	8003774 <TIM_Base_SetConfig+0x30>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a26      	ldr	r2, [pc, #152]	; (8003800 <TIM_Base_SetConfig+0xbc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d003      	beq.n	8003774 <TIM_Base_SetConfig+0x30>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a25      	ldr	r2, [pc, #148]	; (8003804 <TIM_Base_SetConfig+0xc0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d108      	bne.n	8003786 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <TIM_Base_SetConfig+0xb8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00b      	beq.n	80037a6 <TIM_Base_SetConfig+0x62>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003794:	d007      	beq.n	80037a6 <TIM_Base_SetConfig+0x62>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a19      	ldr	r2, [pc, #100]	; (8003800 <TIM_Base_SetConfig+0xbc>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d003      	beq.n	80037a6 <TIM_Base_SetConfig+0x62>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a18      	ldr	r2, [pc, #96]	; (8003804 <TIM_Base_SetConfig+0xc0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d108      	bne.n	80037b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a07      	ldr	r2, [pc, #28]	; (80037fc <TIM_Base_SetConfig+0xb8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d103      	bne.n	80037ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	615a      	str	r2, [r3, #20]
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800

08003808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr

0800381a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e047      	b.n	80038ce <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fe f8e2 	bl	8001a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2224      	movs	r2, #36	; 0x24
 800385c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800386e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fa65 	bl	8003d40 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003884:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695a      	ldr	r2, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003894:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0208 	orr.w	r2, r2, #8
 80038a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10d      	bne.n	800392a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_UART_IRQHandler+0x52>
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f98b 	bl	8003c3e <UART_Receive_IT>
      return;
 8003928:	e0cb      	b.n	8003ac2 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80ab 	beq.w	8003a88 <HAL_UART_IRQHandler+0x1b0>
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d105      	bne.n	8003948 <HAL_UART_IRQHandler+0x70>
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 80a0 	beq.w	8003a88 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_UART_IRQHandler+0x90>
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	f043 0201 	orr.w	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_UART_IRQHandler+0xb0>
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	f043 0202 	orr.w	r2, r3, #2
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_UART_IRQHandler+0xd0>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	f043 0204 	orr.w	r2, r3, #4
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_UART_IRQHandler+0xf0>
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	f043 0208 	orr.w	r2, r3, #8
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d077      	beq.n	8003ac0 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d007      	beq.n	80039ea <HAL_UART_IRQHandler+0x112>
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f92a 	bl	8003c3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bf14      	ite	ne
 80039f8:	2301      	movne	r3, #1
 80039fa:	2300      	moveq	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <HAL_UART_IRQHandler+0x13a>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d031      	beq.n	8003a76 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f875 	bl	8003b02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d023      	beq.n	8003a6e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a34:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d013      	beq.n	8003a66 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a42:	4a21      	ldr	r2, [pc, #132]	; (8003ac8 <HAL_UART_IRQHandler+0x1f0>)
 8003a44:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe fa6c 	bl	8001f28 <HAL_DMA_Abort_IT>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d016      	beq.n	8003a84 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a60:	4610      	mov	r0, r2
 8003a62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	e00e      	b.n	8003a84 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f842 	bl	8003af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6c:	e00a      	b.n	8003a84 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f83e 	bl	8003af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a74:	e006      	b.n	8003a84 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f83a 	bl	8003af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003a82:	e01d      	b.n	8003ac0 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a84:	bf00      	nop
    return;
 8003a86:	e01b      	b.n	8003ac0 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x1cc>
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f861 	bl	8003b64 <UART_Transmit_IT>
    return;
 8003aa2:	e00e      	b.n	8003ac2 <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x1ea>
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d004      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f8a8 	bl	8003c0e <UART_EndTransmit_IT>
    return;
 8003abe:	e000      	b.n	8003ac2 <HAL_UART_IRQHandler+0x1ea>
    return;
 8003ac0:	bf00      	nop
  }
}
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	08003b3d 	.word	0x08003b3d

08003acc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr

08003ade <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr

08003b02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b18:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f7ff ffca 	bl	8003af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b21      	cmp	r3, #33	; 0x21
 8003b76:	d144      	bne.n	8003c02 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b80:	d11a      	bne.n	8003bb8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b96:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d105      	bne.n	8003bac <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	1c9a      	adds	r2, r3, #2
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	621a      	str	r2, [r3, #32]
 8003baa:	e00e      	b.n	8003bca <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	621a      	str	r2, [r3, #32]
 8003bb6:	e008      	b.n	8003bca <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	1c59      	adds	r1, r3, #1
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6211      	str	r1, [r2, #32]
 8003bc2:	781a      	ldrb	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10f      	bne.n	8003bfe <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bfc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
  }
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr

08003c0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff ff4c 	bl	8003acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b22      	cmp	r3, #34	; 0x22
 8003c50:	d171      	bne.n	8003d36 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5a:	d123      	bne.n	8003ca4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10e      	bne.n	8003c88 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	1c9a      	adds	r2, r3, #2
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	629a      	str	r2, [r3, #40]	; 0x28
 8003c86:	e029      	b.n	8003cdc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ca2:	e01b      	b.n	8003cdc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6858      	ldr	r0, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	1c59      	adds	r1, r3, #1
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6291      	str	r1, [r2, #40]	; 0x28
 8003cbc:	b2c2      	uxtb	r2, r0
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	e00c      	b.n	8003cdc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	1c58      	adds	r0, r3, #1
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	6288      	str	r0, [r1, #40]	; 0x28
 8003cd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d120      	bne.n	8003d32 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0220 	bic.w	r2, r2, #32
 8003cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695a      	ldr	r2, [r3, #20]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0201 	bic.w	r2, r2, #1
 8003d1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff fed8 	bl	8003ade <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	e002      	b.n	8003d38 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	e000      	b.n	8003d38 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
  }
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d7a:	f023 030c 	bic.w	r3, r3, #12
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	68f9      	ldr	r1, [r7, #12]
 8003d84:	430b      	orrs	r3, r1
 8003d86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a52      	ldr	r2, [pc, #328]	; (8003eec <UART_SetConfig+0x1ac>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d14e      	bne.n	8003e46 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003da8:	f7ff fae6 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8003dac:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	009a      	lsls	r2, r3, #2
 8003db8:	441a      	add	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	4a4a      	ldr	r2, [pc, #296]	; (8003ef0 <UART_SetConfig+0x1b0>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	0119      	lsls	r1, r3, #4
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009a      	lsls	r2, r3, #2
 8003dd8:	441a      	add	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003de4:	4b42      	ldr	r3, [pc, #264]	; (8003ef0 <UART_SetConfig+0x1b0>)
 8003de6:	fba3 0302 	umull	r0, r3, r3, r2
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	2064      	movs	r0, #100	; 0x64
 8003dee:	fb00 f303 	mul.w	r3, r0, r3
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	3332      	adds	r3, #50	; 0x32
 8003df8:	4a3d      	ldr	r2, [pc, #244]	; (8003ef0 <UART_SetConfig+0x1b0>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e04:	4419      	add	r1, r3
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009a      	lsls	r2, r3, #2
 8003e10:	441a      	add	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e1c:	4b34      	ldr	r3, [pc, #208]	; (8003ef0 <UART_SetConfig+0x1b0>)
 8003e1e:	fba3 0302 	umull	r0, r3, r3, r2
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	2064      	movs	r0, #100	; 0x64
 8003e26:	fb00 f303 	mul.w	r3, r0, r3
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	3332      	adds	r3, #50	; 0x32
 8003e30:	4a2f      	ldr	r2, [pc, #188]	; (8003ef0 <UART_SetConfig+0x1b0>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	f003 020f 	and.w	r2, r3, #15
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	440a      	add	r2, r1
 8003e42:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003e44:	e04d      	b.n	8003ee2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e46:	f7ff fa83 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 8003e4a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	009a      	lsls	r2, r3, #2
 8003e56:	441a      	add	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e62:	4a23      	ldr	r2, [pc, #140]	; (8003ef0 <UART_SetConfig+0x1b0>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	0119      	lsls	r1, r3, #4
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	009a      	lsls	r2, r3, #2
 8003e76:	441a      	add	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e82:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <UART_SetConfig+0x1b0>)
 8003e84:	fba3 0302 	umull	r0, r3, r3, r2
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	2064      	movs	r0, #100	; 0x64
 8003e8c:	fb00 f303 	mul.w	r3, r0, r3
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	3332      	adds	r3, #50	; 0x32
 8003e96:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <UART_SetConfig+0x1b0>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ea2:	4419      	add	r1, r3
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	009a      	lsls	r2, r3, #2
 8003eae:	441a      	add	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eba:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <UART_SetConfig+0x1b0>)
 8003ebc:	fba3 0302 	umull	r0, r3, r3, r2
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	2064      	movs	r0, #100	; 0x64
 8003ec4:	fb00 f303 	mul.w	r3, r0, r3
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	3332      	adds	r3, #50	; 0x32
 8003ece:	4a08      	ldr	r2, [pc, #32]	; (8003ef0 <UART_SetConfig+0x1b0>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	f003 020f 	and.w	r2, r3, #15
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	440a      	add	r2, r1
 8003ee0:	609a      	str	r2, [r3, #8]
}
 8003ee2:	bf00      	nop
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40013800 	.word	0x40013800
 8003ef0:	51eb851f 	.word	0x51eb851f

08003ef4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f06:	2b84      	cmp	r3, #132	; 0x84
 8003f08:	d005      	beq.n	8003f16 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003f0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4413      	add	r3, r2
 8003f12:	3303      	adds	r3, #3
 8003f14:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003f16:	68fb      	ldr	r3, [r7, #12]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr

08003f22 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003f26:	f000 fb4f 	bl	80045c8 <vTaskStartScheduler>
  
  return osOK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f32:	b089      	sub	sp, #36	; 0x24
 8003f34:	af04      	add	r7, sp, #16
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d020      	beq.n	8003f84 <osThreadCreate+0x54>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01c      	beq.n	8003f84 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685c      	ldr	r4, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681d      	ldr	r5, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691e      	ldr	r6, [r3, #16]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ffc9 	bl	8003ef4 <makeFreeRtosPriority>
 8003f62:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f6c:	9202      	str	r2, [sp, #8]
 8003f6e:	9301      	str	r3, [sp, #4]
 8003f70:	9100      	str	r1, [sp, #0]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	4632      	mov	r2, r6
 8003f76:	4629      	mov	r1, r5
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f000 f8e8 	bl	800414e <xTaskCreateStatic>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	e01c      	b.n	8003fbe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685c      	ldr	r4, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f90:	b29e      	uxth	r6, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ffab 	bl	8003ef4 <makeFreeRtosPriority>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	f107 030c 	add.w	r3, r7, #12
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	9200      	str	r2, [sp, #0]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	4632      	mov	r2, r6
 8003fac:	4629      	mov	r1, r5
 8003fae:	4620      	mov	r0, r4
 8003fb0:	f000 f929 	bl	8004206 <xTaskCreate>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d001      	beq.n	8003fbe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e000      	b.n	8003fc0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fc8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <osDelay+0x16>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	e000      	b.n	8003fe0 <osDelay+0x18>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 fabd 	bl	8004560 <vTaskDelay>
  
  return osOK;
 8003fe6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f103 0208 	add.w	r2, r3, #8
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f04f 32ff 	mov.w	r2, #4294967295
 8004008:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f103 0208 	add.w	r2, r3, #8
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f103 0208 	add.w	r2, r3, #8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr

08004046 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	601a      	str	r2, [r3, #0]
}
 8004082:	bf00      	nop
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a2:	d103      	bne.n	80040ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	e00c      	b.n	80040c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3308      	adds	r3, #8
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	e002      	b.n	80040ba <vListInsert+0x2e>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d2f6      	bcs.n	80040b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	601a      	str	r2, [r3, #0]
}
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6892      	ldr	r2, [r2, #8]
 8004112:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6852      	ldr	r2, [r2, #4]
 800411c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	d103      	bne.n	8004130 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	1e5a      	subs	r2, r3, #1
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr

0800414e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800414e:	b580      	push	{r7, lr}
 8004150:	b08e      	sub	sp, #56	; 0x38
 8004152:	af04      	add	r7, sp, #16
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800415c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10a      	bne.n	8004178 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004174:	bf00      	nop
 8004176:	e7fe      	b.n	8004176 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10a      	bne.n	8004194 <xTaskCreateStatic+0x46>
	__asm volatile
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	61fb      	str	r3, [r7, #28]
}
 8004190:	bf00      	nop
 8004192:	e7fe      	b.n	8004192 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004194:	2354      	movs	r3, #84	; 0x54
 8004196:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	2b54      	cmp	r3, #84	; 0x54
 800419c:	d00a      	beq.n	80041b4 <xTaskCreateStatic+0x66>
	__asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	61bb      	str	r3, [r7, #24]
}
 80041b0:	bf00      	nop
 80041b2:	e7fe      	b.n	80041b2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01e      	beq.n	80041f8 <xTaskCreateStatic+0xaa>
 80041ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01b      	beq.n	80041f8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	2202      	movs	r2, #2
 80041ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041d2:	2300      	movs	r3, #0
 80041d4:	9303      	str	r3, [sp, #12]
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	9302      	str	r3, [sp, #8]
 80041da:	f107 0314 	add.w	r3, r7, #20
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f850 	bl	8004290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041f2:	f000 f8cd 	bl	8004390 <prvAddNewTaskToReadyList>
 80041f6:	e001      	b.n	80041fc <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041fc:	697b      	ldr	r3, [r7, #20]
	}
 80041fe:	4618      	mov	r0, r3
 8004200:	3728      	adds	r7, #40	; 0x28
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004206:	b580      	push	{r7, lr}
 8004208:	b08c      	sub	sp, #48	; 0x30
 800420a:	af04      	add	r7, sp, #16
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fef8 	bl	8005010 <pvPortMalloc>
 8004220:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00e      	beq.n	8004246 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004228:	2054      	movs	r0, #84	; 0x54
 800422a:	f000 fef1 	bl	8005010 <pvPortMalloc>
 800422e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
 800423c:	e005      	b.n	800424a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800423e:	6978      	ldr	r0, [r7, #20]
 8004240:	f000 ffaa 	bl	8005198 <vPortFree>
 8004244:	e001      	b.n	800424a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d017      	beq.n	8004280 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004258:	88fa      	ldrh	r2, [r7, #6]
 800425a:	2300      	movs	r3, #0
 800425c:	9303      	str	r3, [sp, #12]
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	9302      	str	r3, [sp, #8]
 8004262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f80e 	bl	8004290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004274:	69f8      	ldr	r0, [r7, #28]
 8004276:	f000 f88b 	bl	8004390 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800427a:	2301      	movs	r3, #1
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	e002      	b.n	8004286 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004280:	f04f 33ff 	mov.w	r3, #4294967295
 8004284:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004286:	69bb      	ldr	r3, [r7, #24]
	}
 8004288:	4618      	mov	r0, r3
 800428a:	3720      	adds	r7, #32
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042a8:	3b01      	subs	r3, #1
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f023 0307 	bic.w	r3, r3, #7
 80042b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	617b      	str	r3, [r7, #20]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042d8:	2300      	movs	r3, #0
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	e012      	b.n	8004304 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	4413      	add	r3, r2
 80042e4:	7819      	ldrb	r1, [r3, #0]
 80042e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	4413      	add	r3, r2
 80042ec:	3334      	adds	r3, #52	; 0x34
 80042ee:	460a      	mov	r2, r1
 80042f0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	4413      	add	r3, r2
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d006      	beq.n	800430c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	3301      	adds	r3, #1
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	2b0f      	cmp	r3, #15
 8004308:	d9e9      	bls.n	80042de <prvInitialiseNewTask+0x4e>
 800430a:	e000      	b.n	800430e <prvInitialiseNewTask+0x7e>
		{
			break;
 800430c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	2b06      	cmp	r3, #6
 800431a:	d901      	bls.n	8004320 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800431c:	2306      	movs	r3, #6
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004324:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800432a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	2200      	movs	r2, #0
 8004330:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	3304      	adds	r3, #4
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff fe79 	bl	800402e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	3318      	adds	r3, #24
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff fe74 	bl	800402e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	f1c3 0207 	rsb	r2, r3, #7
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800435a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	2200      	movs	r2, #0
 8004360:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	68f9      	ldr	r1, [r7, #12]
 800436e:	69b8      	ldr	r0, [r7, #24]
 8004370:	f000 fc9a 	bl	8004ca8 <pxPortInitialiseStack>
 8004374:	4602      	mov	r2, r0
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004386:	bf00      	nop
 8004388:	3720      	adds	r7, #32
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004398:	f000 fd78 	bl	8004e8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800439c:	4b2a      	ldr	r3, [pc, #168]	; (8004448 <prvAddNewTaskToReadyList+0xb8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3301      	adds	r3, #1
 80043a2:	4a29      	ldr	r2, [pc, #164]	; (8004448 <prvAddNewTaskToReadyList+0xb8>)
 80043a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043a6:	4b29      	ldr	r3, [pc, #164]	; (800444c <prvAddNewTaskToReadyList+0xbc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043ae:	4a27      	ldr	r2, [pc, #156]	; (800444c <prvAddNewTaskToReadyList+0xbc>)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043b4:	4b24      	ldr	r3, [pc, #144]	; (8004448 <prvAddNewTaskToReadyList+0xb8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d110      	bne.n	80043de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043bc:	f000 fb4c 	bl	8004a58 <prvInitialiseTaskLists>
 80043c0:	e00d      	b.n	80043de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043c2:	4b23      	ldr	r3, [pc, #140]	; (8004450 <prvAddNewTaskToReadyList+0xc0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d109      	bne.n	80043de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043ca:	4b20      	ldr	r3, [pc, #128]	; (800444c <prvAddNewTaskToReadyList+0xbc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d802      	bhi.n	80043de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043d8:	4a1c      	ldr	r2, [pc, #112]	; (800444c <prvAddNewTaskToReadyList+0xbc>)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043de:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <prvAddNewTaskToReadyList+0xc4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3301      	adds	r3, #1
 80043e4:	4a1b      	ldr	r2, [pc, #108]	; (8004454 <prvAddNewTaskToReadyList+0xc4>)
 80043e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	2201      	movs	r2, #1
 80043ee:	409a      	lsls	r2, r3
 80043f0:	4b19      	ldr	r3, [pc, #100]	; (8004458 <prvAddNewTaskToReadyList+0xc8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	4a18      	ldr	r2, [pc, #96]	; (8004458 <prvAddNewTaskToReadyList+0xc8>)
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4a15      	ldr	r2, [pc, #84]	; (800445c <prvAddNewTaskToReadyList+0xcc>)
 8004408:	441a      	add	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3304      	adds	r3, #4
 800440e:	4619      	mov	r1, r3
 8004410:	4610      	mov	r0, r2
 8004412:	f7ff fe18 	bl	8004046 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004416:	f000 fd69 	bl	8004eec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800441a:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <prvAddNewTaskToReadyList+0xc0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00e      	beq.n	8004440 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <prvAddNewTaskToReadyList+0xbc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	429a      	cmp	r2, r3
 800442e:	d207      	bcs.n	8004440 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <prvAddNewTaskToReadyList+0xd0>)
 8004432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	2000053c 	.word	0x2000053c
 800444c:	2000043c 	.word	0x2000043c
 8004450:	20000548 	.word	0x20000548
 8004454:	20000558 	.word	0x20000558
 8004458:	20000544 	.word	0x20000544
 800445c:	20000440 	.word	0x20000440
 8004460:	e000ed04 	.word	0xe000ed04

08004464 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800446e:	2300      	movs	r3, #0
 8004470:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10a      	bne.n	800448e <vTaskDelayUntil+0x2a>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	617b      	str	r3, [r7, #20]
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10a      	bne.n	80044aa <vTaskDelayUntil+0x46>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	613b      	str	r3, [r7, #16]
}
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80044aa:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <vTaskDelayUntil+0xf0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <vTaskDelayUntil+0x64>
	__asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	60fb      	str	r3, [r7, #12]
}
 80044c4:	bf00      	nop
 80044c6:	e7fe      	b.n	80044c6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80044c8:	f000 f8de 	bl	8004688 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80044cc:	4b22      	ldr	r3, [pc, #136]	; (8004558 <vTaskDelayUntil+0xf4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	4413      	add	r3, r2
 80044da:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6a3a      	ldr	r2, [r7, #32]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d20b      	bcs.n	80044fe <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d211      	bcs.n	8004514 <vTaskDelayUntil+0xb0>
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d90d      	bls.n	8004514 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80044f8:	2301      	movs	r3, #1
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
 80044fc:	e00a      	b.n	8004514 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	429a      	cmp	r2, r3
 8004506:	d303      	bcc.n	8004510 <vTaskDelayUntil+0xac>
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	429a      	cmp	r2, r3
 800450e:	d901      	bls.n	8004514 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004510:	2301      	movs	r3, #1
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	2b00      	cmp	r3, #0
 800451e:	d006      	beq.n	800452e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2100      	movs	r1, #0
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fb57 	bl	8004bdc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800452e:	f000 f8b9 	bl	80046a4 <xTaskResumeAll>
 8004532:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d107      	bne.n	800454a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <vTaskDelayUntil+0xf8>)
 800453c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800454a:	bf00      	nop
 800454c:	3728      	adds	r7, #40	; 0x28
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000564 	.word	0x20000564
 8004558:	20000540 	.word	0x20000540
 800455c:	e000ed04 	.word	0xe000ed04

08004560 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d017      	beq.n	80045a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004572:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <vTaskDelay+0x60>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <vTaskDelay+0x30>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	60bb      	str	r3, [r7, #8]
}
 800458c:	bf00      	nop
 800458e:	e7fe      	b.n	800458e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004590:	f000 f87a 	bl	8004688 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004594:	2100      	movs	r1, #0
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fb20 	bl	8004bdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800459c:	f000 f882 	bl	80046a4 <xTaskResumeAll>
 80045a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d107      	bne.n	80045b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <vTaskDelay+0x64>)
 80045aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	20000564 	.word	0x20000564
 80045c4:	e000ed04 	.word	0xe000ed04

080045c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	; 0x28
 80045cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045d6:	463a      	mov	r2, r7
 80045d8:	1d39      	adds	r1, r7, #4
 80045da:	f107 0308 	add.w	r3, r7, #8
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fc fe04 	bl	80011ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045e4:	6839      	ldr	r1, [r7, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	9202      	str	r2, [sp, #8]
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	2300      	movs	r3, #0
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	2300      	movs	r3, #0
 80045f4:	460a      	mov	r2, r1
 80045f6:	491e      	ldr	r1, [pc, #120]	; (8004670 <vTaskStartScheduler+0xa8>)
 80045f8:	481e      	ldr	r0, [pc, #120]	; (8004674 <vTaskStartScheduler+0xac>)
 80045fa:	f7ff fda8 	bl	800414e <xTaskCreateStatic>
 80045fe:	4603      	mov	r3, r0
 8004600:	4a1d      	ldr	r2, [pc, #116]	; (8004678 <vTaskStartScheduler+0xb0>)
 8004602:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004604:	4b1c      	ldr	r3, [pc, #112]	; (8004678 <vTaskStartScheduler+0xb0>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800460c:	2301      	movs	r3, #1
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	e001      	b.n	8004616 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d116      	bne.n	800464a <vTaskStartScheduler+0x82>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	613b      	str	r3, [r7, #16]
}
 800462e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004630:	4b12      	ldr	r3, [pc, #72]	; (800467c <vTaskStartScheduler+0xb4>)
 8004632:	f04f 32ff 	mov.w	r2, #4294967295
 8004636:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004638:	4b11      	ldr	r3, [pc, #68]	; (8004680 <vTaskStartScheduler+0xb8>)
 800463a:	2201      	movs	r2, #1
 800463c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800463e:	4b11      	ldr	r3, [pc, #68]	; (8004684 <vTaskStartScheduler+0xbc>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004644:	f000 fbb0 	bl	8004da8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004648:	e00e      	b.n	8004668 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d10a      	bne.n	8004668 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	60fb      	str	r3, [r7, #12]
}
 8004664:	bf00      	nop
 8004666:	e7fe      	b.n	8004666 <vTaskStartScheduler+0x9e>
}
 8004668:	bf00      	nop
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	08005e2c 	.word	0x08005e2c
 8004674:	08004a29 	.word	0x08004a29
 8004678:	20000560 	.word	0x20000560
 800467c:	2000055c 	.word	0x2000055c
 8004680:	20000548 	.word	0x20000548
 8004684:	20000540 	.word	0x20000540

08004688 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800468c:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <vTaskSuspendAll+0x18>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3301      	adds	r3, #1
 8004692:	4a03      	ldr	r2, [pc, #12]	; (80046a0 <vTaskSuspendAll+0x18>)
 8004694:	6013      	str	r3, [r2, #0]
}
 8004696:	bf00      	nop
 8004698:	46bd      	mov	sp, r7
 800469a:	bc80      	pop	{r7}
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	20000564 	.word	0x20000564

080046a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046b2:	4b41      	ldr	r3, [pc, #260]	; (80047b8 <xTaskResumeAll+0x114>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	603b      	str	r3, [r7, #0]
}
 80046cc:	bf00      	nop
 80046ce:	e7fe      	b.n	80046ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046d0:	f000 fbdc 	bl	8004e8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046d4:	4b38      	ldr	r3, [pc, #224]	; (80047b8 <xTaskResumeAll+0x114>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3b01      	subs	r3, #1
 80046da:	4a37      	ldr	r2, [pc, #220]	; (80047b8 <xTaskResumeAll+0x114>)
 80046dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046de:	4b36      	ldr	r3, [pc, #216]	; (80047b8 <xTaskResumeAll+0x114>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d161      	bne.n	80047aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046e6:	4b35      	ldr	r3, [pc, #212]	; (80047bc <xTaskResumeAll+0x118>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d05d      	beq.n	80047aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046ee:	e02e      	b.n	800474e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80046f0:	4b33      	ldr	r3, [pc, #204]	; (80047c0 <xTaskResumeAll+0x11c>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3318      	adds	r3, #24
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fcfd 	bl	80040fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3304      	adds	r3, #4
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fcf8 	bl	80040fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	2201      	movs	r2, #1
 8004712:	409a      	lsls	r2, r3
 8004714:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <xTaskResumeAll+0x120>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4313      	orrs	r3, r2
 800471a:	4a2a      	ldr	r2, [pc, #168]	; (80047c4 <xTaskResumeAll+0x120>)
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4a27      	ldr	r2, [pc, #156]	; (80047c8 <xTaskResumeAll+0x124>)
 800472c:	441a      	add	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3304      	adds	r3, #4
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f7ff fc86 	bl	8004046 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473e:	4b23      	ldr	r3, [pc, #140]	; (80047cc <xTaskResumeAll+0x128>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	429a      	cmp	r2, r3
 8004746:	d302      	bcc.n	800474e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004748:	4b21      	ldr	r3, [pc, #132]	; (80047d0 <xTaskResumeAll+0x12c>)
 800474a:	2201      	movs	r2, #1
 800474c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800474e:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <xTaskResumeAll+0x11c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1cc      	bne.n	80046f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800475c:	f000 fa1a 	bl	8004b94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004760:	4b1c      	ldr	r3, [pc, #112]	; (80047d4 <xTaskResumeAll+0x130>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d010      	beq.n	800478e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800476c:	f000 f844 	bl	80047f8 <xTaskIncrementTick>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004776:	4b16      	ldr	r3, [pc, #88]	; (80047d0 <xTaskResumeAll+0x12c>)
 8004778:	2201      	movs	r2, #1
 800477a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3b01      	subs	r3, #1
 8004780:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f1      	bne.n	800476c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004788:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <xTaskResumeAll+0x130>)
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <xTaskResumeAll+0x12c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004796:	2301      	movs	r3, #1
 8004798:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800479a:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <xTaskResumeAll+0x134>)
 800479c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047aa:	f000 fb9f 	bl	8004eec <vPortExitCritical>

	return xAlreadyYielded;
 80047ae:	68bb      	ldr	r3, [r7, #8]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20000564 	.word	0x20000564
 80047bc:	2000053c 	.word	0x2000053c
 80047c0:	200004fc 	.word	0x200004fc
 80047c4:	20000544 	.word	0x20000544
 80047c8:	20000440 	.word	0x20000440
 80047cc:	2000043c 	.word	0x2000043c
 80047d0:	20000550 	.word	0x20000550
 80047d4:	2000054c 	.word	0x2000054c
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047e2:	4b04      	ldr	r3, [pc, #16]	; (80047f4 <xTaskGetTickCount+0x18>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80047e8:	687b      	ldr	r3, [r7, #4]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr
 80047f4:	20000540 	.word	0x20000540

080047f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004802:	4b51      	ldr	r3, [pc, #324]	; (8004948 <xTaskIncrementTick+0x150>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f040 808d 	bne.w	8004926 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800480c:	4b4f      	ldr	r3, [pc, #316]	; (800494c <xTaskIncrementTick+0x154>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3301      	adds	r3, #1
 8004812:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004814:	4a4d      	ldr	r2, [pc, #308]	; (800494c <xTaskIncrementTick+0x154>)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d120      	bne.n	8004862 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004820:	4b4b      	ldr	r3, [pc, #300]	; (8004950 <xTaskIncrementTick+0x158>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <xTaskIncrementTick+0x48>
	__asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	603b      	str	r3, [r7, #0]
}
 800483c:	bf00      	nop
 800483e:	e7fe      	b.n	800483e <xTaskIncrementTick+0x46>
 8004840:	4b43      	ldr	r3, [pc, #268]	; (8004950 <xTaskIncrementTick+0x158>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	4b43      	ldr	r3, [pc, #268]	; (8004954 <xTaskIncrementTick+0x15c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a41      	ldr	r2, [pc, #260]	; (8004950 <xTaskIncrementTick+0x158>)
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	4a41      	ldr	r2, [pc, #260]	; (8004954 <xTaskIncrementTick+0x15c>)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	4b40      	ldr	r3, [pc, #256]	; (8004958 <xTaskIncrementTick+0x160>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3301      	adds	r3, #1
 800485a:	4a3f      	ldr	r2, [pc, #252]	; (8004958 <xTaskIncrementTick+0x160>)
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	f000 f999 	bl	8004b94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004862:	4b3e      	ldr	r3, [pc, #248]	; (800495c <xTaskIncrementTick+0x164>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	429a      	cmp	r2, r3
 800486a:	d34d      	bcc.n	8004908 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800486c:	4b38      	ldr	r3, [pc, #224]	; (8004950 <xTaskIncrementTick+0x158>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <xTaskIncrementTick+0x82>
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <xTaskIncrementTick+0x84>
 800487a:	2300      	movs	r3, #0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d004      	beq.n	800488a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004880:	4b36      	ldr	r3, [pc, #216]	; (800495c <xTaskIncrementTick+0x164>)
 8004882:	f04f 32ff 	mov.w	r2, #4294967295
 8004886:	601a      	str	r2, [r3, #0]
					break;
 8004888:	e03e      	b.n	8004908 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800488a:	4b31      	ldr	r3, [pc, #196]	; (8004950 <xTaskIncrementTick+0x158>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d203      	bcs.n	80048aa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048a2:	4a2e      	ldr	r2, [pc, #184]	; (800495c <xTaskIncrementTick+0x164>)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6013      	str	r3, [r2, #0]
						break;
 80048a8:	e02e      	b.n	8004908 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	3304      	adds	r3, #4
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff fc24 	bl	80040fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d004      	beq.n	80048c6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	3318      	adds	r3, #24
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fc1b 	bl	80040fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	2201      	movs	r2, #1
 80048cc:	409a      	lsls	r2, r3
 80048ce:	4b24      	ldr	r3, [pc, #144]	; (8004960 <xTaskIncrementTick+0x168>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	4a22      	ldr	r2, [pc, #136]	; (8004960 <xTaskIncrementTick+0x168>)
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4a1f      	ldr	r2, [pc, #124]	; (8004964 <xTaskIncrementTick+0x16c>)
 80048e6:	441a      	add	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	3304      	adds	r3, #4
 80048ec:	4619      	mov	r1, r3
 80048ee:	4610      	mov	r0, r2
 80048f0:	f7ff fba9 	bl	8004046 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f8:	4b1b      	ldr	r3, [pc, #108]	; (8004968 <xTaskIncrementTick+0x170>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	429a      	cmp	r2, r3
 8004900:	d3b4      	bcc.n	800486c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004902:	2301      	movs	r3, #1
 8004904:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004906:	e7b1      	b.n	800486c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004908:	4b17      	ldr	r3, [pc, #92]	; (8004968 <xTaskIncrementTick+0x170>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490e:	4915      	ldr	r1, [pc, #84]	; (8004964 <xTaskIncrementTick+0x16c>)
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d907      	bls.n	8004930 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004920:	2301      	movs	r3, #1
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	e004      	b.n	8004930 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004926:	4b11      	ldr	r3, [pc, #68]	; (800496c <xTaskIncrementTick+0x174>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3301      	adds	r3, #1
 800492c:	4a0f      	ldr	r2, [pc, #60]	; (800496c <xTaskIncrementTick+0x174>)
 800492e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004930:	4b0f      	ldr	r3, [pc, #60]	; (8004970 <xTaskIncrementTick+0x178>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004938:	2301      	movs	r3, #1
 800493a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800493c:	697b      	ldr	r3, [r7, #20]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000564 	.word	0x20000564
 800494c:	20000540 	.word	0x20000540
 8004950:	200004f4 	.word	0x200004f4
 8004954:	200004f8 	.word	0x200004f8
 8004958:	20000554 	.word	0x20000554
 800495c:	2000055c 	.word	0x2000055c
 8004960:	20000544 	.word	0x20000544
 8004964:	20000440 	.word	0x20000440
 8004968:	2000043c 	.word	0x2000043c
 800496c:	2000054c 	.word	0x2000054c
 8004970:	20000550 	.word	0x20000550

08004974 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800497a:	4b26      	ldr	r3, [pc, #152]	; (8004a14 <vTaskSwitchContext+0xa0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004982:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <vTaskSwitchContext+0xa4>)
 8004984:	2201      	movs	r2, #1
 8004986:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004988:	e03f      	b.n	8004a0a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800498a:	4b23      	ldr	r3, [pc, #140]	; (8004a18 <vTaskSwitchContext+0xa4>)
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004990:	4b22      	ldr	r3, [pc, #136]	; (8004a1c <vTaskSwitchContext+0xa8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	fab3 f383 	clz	r3, r3
 800499c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800499e:	7afb      	ldrb	r3, [r7, #11]
 80049a0:	f1c3 031f 	rsb	r3, r3, #31
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	491e      	ldr	r1, [pc, #120]	; (8004a20 <vTaskSwitchContext+0xac>)
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	607b      	str	r3, [r7, #4]
}
 80049cc:	bf00      	nop
 80049ce:	e7fe      	b.n	80049ce <vTaskSwitchContext+0x5a>
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4a11      	ldr	r2, [pc, #68]	; (8004a20 <vTaskSwitchContext+0xac>)
 80049dc:	4413      	add	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	3308      	adds	r3, #8
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d104      	bne.n	8004a00 <vTaskSwitchContext+0x8c>
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	605a      	str	r2, [r3, #4]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	4a07      	ldr	r2, [pc, #28]	; (8004a24 <vTaskSwitchContext+0xb0>)
 8004a08:	6013      	str	r3, [r2, #0]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	20000564 	.word	0x20000564
 8004a18:	20000550 	.word	0x20000550
 8004a1c:	20000544 	.word	0x20000544
 8004a20:	20000440 	.word	0x20000440
 8004a24:	2000043c 	.word	0x2000043c

08004a28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a30:	f000 f852 	bl	8004ad8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <prvIdleTask+0x28>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d9f9      	bls.n	8004a30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a3c:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <prvIdleTask+0x2c>)
 8004a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a4c:	e7f0      	b.n	8004a30 <prvIdleTask+0x8>
 8004a4e:	bf00      	nop
 8004a50:	20000440 	.word	0x20000440
 8004a54:	e000ed04 	.word	0xe000ed04

08004a58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a5e:	2300      	movs	r3, #0
 8004a60:	607b      	str	r3, [r7, #4]
 8004a62:	e00c      	b.n	8004a7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4a12      	ldr	r2, [pc, #72]	; (8004ab8 <prvInitialiseTaskLists+0x60>)
 8004a70:	4413      	add	r3, r2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fabc 	bl	8003ff0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	607b      	str	r3, [r7, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b06      	cmp	r3, #6
 8004a82:	d9ef      	bls.n	8004a64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a84:	480d      	ldr	r0, [pc, #52]	; (8004abc <prvInitialiseTaskLists+0x64>)
 8004a86:	f7ff fab3 	bl	8003ff0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a8a:	480d      	ldr	r0, [pc, #52]	; (8004ac0 <prvInitialiseTaskLists+0x68>)
 8004a8c:	f7ff fab0 	bl	8003ff0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a90:	480c      	ldr	r0, [pc, #48]	; (8004ac4 <prvInitialiseTaskLists+0x6c>)
 8004a92:	f7ff faad 	bl	8003ff0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a96:	480c      	ldr	r0, [pc, #48]	; (8004ac8 <prvInitialiseTaskLists+0x70>)
 8004a98:	f7ff faaa 	bl	8003ff0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a9c:	480b      	ldr	r0, [pc, #44]	; (8004acc <prvInitialiseTaskLists+0x74>)
 8004a9e:	f7ff faa7 	bl	8003ff0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004aa2:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <prvInitialiseTaskLists+0x78>)
 8004aa4:	4a05      	ldr	r2, [pc, #20]	; (8004abc <prvInitialiseTaskLists+0x64>)
 8004aa6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004aa8:	4b0a      	ldr	r3, [pc, #40]	; (8004ad4 <prvInitialiseTaskLists+0x7c>)
 8004aaa:	4a05      	ldr	r2, [pc, #20]	; (8004ac0 <prvInitialiseTaskLists+0x68>)
 8004aac:	601a      	str	r2, [r3, #0]
}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000440 	.word	0x20000440
 8004abc:	200004cc 	.word	0x200004cc
 8004ac0:	200004e0 	.word	0x200004e0
 8004ac4:	200004fc 	.word	0x200004fc
 8004ac8:	20000510 	.word	0x20000510
 8004acc:	20000528 	.word	0x20000528
 8004ad0:	200004f4 	.word	0x200004f4
 8004ad4:	200004f8 	.word	0x200004f8

08004ad8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ade:	e019      	b.n	8004b14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ae0:	f000 f9d4 	bl	8004e8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ae4:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <prvCheckTasksWaitingTermination+0x50>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3304      	adds	r3, #4
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7ff fb03 	bl	80040fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004af6:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <prvCheckTasksWaitingTermination+0x54>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	4a0b      	ldr	r2, [pc, #44]	; (8004b2c <prvCheckTasksWaitingTermination+0x54>)
 8004afe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b00:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <prvCheckTasksWaitingTermination+0x58>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	4a0a      	ldr	r2, [pc, #40]	; (8004b30 <prvCheckTasksWaitingTermination+0x58>)
 8004b08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b0a:	f000 f9ef 	bl	8004eec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f810 	bl	8004b34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <prvCheckTasksWaitingTermination+0x58>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e1      	bne.n	8004ae0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b1c:	bf00      	nop
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000510 	.word	0x20000510
 8004b2c:	2000053c 	.word	0x2000053c
 8004b30:	20000524 	.word	0x20000524

08004b34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fb24 	bl	8005198 <vPortFree>
				vPortFree( pxTCB );
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fb21 	bl	8005198 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b56:	e018      	b.n	8004b8a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d103      	bne.n	8004b6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fb18 	bl	8005198 <vPortFree>
	}
 8004b68:	e00f      	b.n	8004b8a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d00a      	beq.n	8004b8a <prvDeleteTCB+0x56>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	60fb      	str	r3, [r7, #12]
}
 8004b86:	bf00      	nop
 8004b88:	e7fe      	b.n	8004b88 <prvDeleteTCB+0x54>
	}
 8004b8a:	bf00      	nop
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b9a:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <prvResetNextTaskUnblockTime+0x40>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <prvResetNextTaskUnblockTime+0x14>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <prvResetNextTaskUnblockTime+0x16>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bae:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <prvResetNextTaskUnblockTime+0x44>)
 8004bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bb6:	e008      	b.n	8004bca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bb8:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <prvResetNextTaskUnblockTime+0x40>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	4a04      	ldr	r2, [pc, #16]	; (8004bd8 <prvResetNextTaskUnblockTime+0x44>)
 8004bc8:	6013      	str	r3, [r2, #0]
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr
 8004bd4:	200004f4 	.word	0x200004f4
 8004bd8:	2000055c 	.word	0x2000055c

08004bdc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004be6:	4b29      	ldr	r3, [pc, #164]	; (8004c8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bec:	4b28      	ldr	r3, [pc, #160]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff fa82 	bl	80040fc <uxListRemove>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10b      	bne.n	8004c16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004bfe:	4b24      	ldr	r3, [pc, #144]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	2201      	movs	r2, #1
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43da      	mvns	r2, r3
 8004c0c:	4b21      	ldr	r3, [pc, #132]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4013      	ands	r3, r2
 8004c12:	4a20      	ldr	r2, [pc, #128]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d10a      	bne.n	8004c34 <prvAddCurrentTaskToDelayedList+0x58>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d007      	beq.n	8004c34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c24:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	481a      	ldr	r0, [pc, #104]	; (8004c98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c2e:	f7ff fa0a 	bl	8004046 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c32:	e026      	b.n	8004c82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4413      	add	r3, r2
 8004c3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c3c:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d209      	bcs.n	8004c60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c4c:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3304      	adds	r3, #4
 8004c56:	4619      	mov	r1, r3
 8004c58:	4610      	mov	r0, r2
 8004c5a:	f7ff fa17 	bl	800408c <vListInsert>
}
 8004c5e:	e010      	b.n	8004c82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f7ff fa0d 	bl	800408c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c72:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d202      	bcs.n	8004c82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c7c:	4a09      	ldr	r2, [pc, #36]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	6013      	str	r3, [r2, #0]
}
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000540 	.word	0x20000540
 8004c90:	2000043c 	.word	0x2000043c
 8004c94:	20000544 	.word	0x20000544
 8004c98:	20000528 	.word	0x20000528
 8004c9c:	200004f8 	.word	0x200004f8
 8004ca0:	200004f4 	.word	0x200004f4
 8004ca4:	2000055c 	.word	0x2000055c

08004ca8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3b04      	subs	r3, #4
 8004cb8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3b04      	subs	r3, #4
 8004cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f023 0201 	bic.w	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3b04      	subs	r3, #4
 8004cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cd8:	4a08      	ldr	r2, [pc, #32]	; (8004cfc <pxPortInitialiseStack+0x54>)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3b14      	subs	r3, #20
 8004ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3b20      	subs	r3, #32
 8004cee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr
 8004cfc:	08004d01 	.word	0x08004d01

08004d00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d0a:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <prvTaskExitError+0x54>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d12:	d00a      	beq.n	8004d2a <prvTaskExitError+0x2a>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	60fb      	str	r3, [r7, #12]
}
 8004d26:	bf00      	nop
 8004d28:	e7fe      	b.n	8004d28 <prvTaskExitError+0x28>
	__asm volatile
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	60bb      	str	r3, [r7, #8]
}
 8004d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d3e:	bf00      	nop
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0fc      	beq.n	8004d40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d46:	bf00      	nop
 8004d48:	bf00      	nop
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	20000020 	.word	0x20000020
	...

08004d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d60:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <pxCurrentTCBConst2>)
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	6808      	ldr	r0, [r1, #0]
 8004d66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d6a:	f380 8809 	msr	PSP, r0
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f380 8811 	msr	BASEPRI, r0
 8004d7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004d7e:	4770      	bx	lr

08004d80 <pxCurrentTCBConst2>:
 8004d80:	2000043c 	.word	0x2000043c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop

08004d88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004d88:	4806      	ldr	r0, [pc, #24]	; (8004da4 <prvPortStartFirstTask+0x1c>)
 8004d8a:	6800      	ldr	r0, [r0, #0]
 8004d8c:	6800      	ldr	r0, [r0, #0]
 8004d8e:	f380 8808 	msr	MSP, r0
 8004d92:	b662      	cpsie	i
 8004d94:	b661      	cpsie	f
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	df00      	svc	0
 8004da0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004da2:	bf00      	nop
 8004da4:	e000ed08 	.word	0xe000ed08

08004da8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dae:	4b32      	ldr	r3, [pc, #200]	; (8004e78 <xPortStartScheduler+0xd0>)
 8004db0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	22ff      	movs	r2, #255	; 0xff
 8004dbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	4b2a      	ldr	r3, [pc, #168]	; (8004e7c <xPortStartScheduler+0xd4>)
 8004dd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dd6:	4b2a      	ldr	r3, [pc, #168]	; (8004e80 <xPortStartScheduler+0xd8>)
 8004dd8:	2207      	movs	r2, #7
 8004dda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ddc:	e009      	b.n	8004df2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004dde:	4b28      	ldr	r3, [pc, #160]	; (8004e80 <xPortStartScheduler+0xd8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	4a26      	ldr	r2, [pc, #152]	; (8004e80 <xPortStartScheduler+0xd8>)
 8004de6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfa:	2b80      	cmp	r3, #128	; 0x80
 8004dfc:	d0ef      	beq.n	8004dde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004dfe:	4b20      	ldr	r3, [pc, #128]	; (8004e80 <xPortStartScheduler+0xd8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f1c3 0307 	rsb	r3, r3, #7
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d00a      	beq.n	8004e20 <xPortStartScheduler+0x78>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	60bb      	str	r3, [r7, #8]
}
 8004e1c:	bf00      	nop
 8004e1e:	e7fe      	b.n	8004e1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e20:	4b17      	ldr	r3, [pc, #92]	; (8004e80 <xPortStartScheduler+0xd8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	021b      	lsls	r3, r3, #8
 8004e26:	4a16      	ldr	r2, [pc, #88]	; (8004e80 <xPortStartScheduler+0xd8>)
 8004e28:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e2a:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <xPortStartScheduler+0xd8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e32:	4a13      	ldr	r2, [pc, #76]	; (8004e80 <xPortStartScheduler+0xd8>)
 8004e34:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e3e:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <xPortStartScheduler+0xdc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a10      	ldr	r2, [pc, #64]	; (8004e84 <xPortStartScheduler+0xdc>)
 8004e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e4a:	4b0e      	ldr	r3, [pc, #56]	; (8004e84 <xPortStartScheduler+0xdc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a0d      	ldr	r2, [pc, #52]	; (8004e84 <xPortStartScheduler+0xdc>)
 8004e50:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e54:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e56:	f000 f8b9 	bl	8004fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <xPortStartScheduler+0xe0>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e60:	f7ff ff92 	bl	8004d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e64:	f7ff fd86 	bl	8004974 <vTaskSwitchContext>
	prvTaskExitError();
 8004e68:	f7ff ff4a 	bl	8004d00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	e000e400 	.word	0xe000e400
 8004e7c:	20000568 	.word	0x20000568
 8004e80:	2000056c 	.word	0x2000056c
 8004e84:	e000ed20 	.word	0xe000ed20
 8004e88:	20000020 	.word	0x20000020

08004e8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	607b      	str	r3, [r7, #4]
}
 8004ea4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ea6:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <vPortEnterCritical+0x58>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	4a0d      	ldr	r2, [pc, #52]	; (8004ee4 <vPortEnterCritical+0x58>)
 8004eae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <vPortEnterCritical+0x58>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d10f      	bne.n	8004ed8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <vPortEnterCritical+0x5c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	603b      	str	r3, [r7, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <vPortEnterCritical+0x4a>
	}
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bc80      	pop	{r7}
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20000020 	.word	0x20000020
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ef2:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <vPortExitCritical+0x4c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10a      	bne.n	8004f10 <vPortExitCritical+0x24>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	607b      	str	r3, [r7, #4]
}
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f10:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <vPortExitCritical+0x4c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	4a08      	ldr	r2, [pc, #32]	; (8004f38 <vPortExitCritical+0x4c>)
 8004f18:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f1a:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <vPortExitCritical+0x4c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d105      	bne.n	8004f2e <vPortExitCritical+0x42>
 8004f22:	2300      	movs	r3, #0
 8004f24:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f2c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr
 8004f38:	20000020 	.word	0x20000020
 8004f3c:	00000000 	.word	0x00000000

08004f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f40:	f3ef 8009 	mrs	r0, PSP
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <pxCurrentTCBConst>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f50:	6010      	str	r0, [r2, #0]
 8004f52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004f56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f5a:	f380 8811 	msr	BASEPRI, r0
 8004f5e:	f7ff fd09 	bl	8004974 <vTaskSwitchContext>
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f380 8811 	msr	BASEPRI, r0
 8004f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004f6e:	6819      	ldr	r1, [r3, #0]
 8004f70:	6808      	ldr	r0, [r1, #0]
 8004f72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f76:	f380 8809 	msr	PSP, r0
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	4770      	bx	lr

08004f80 <pxCurrentTCBConst>:
 8004f80:	2000043c 	.word	0x2000043c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop

08004f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	607b      	str	r3, [r7, #4]
}
 8004fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fa2:	f7ff fc29 	bl	80047f8 <xTaskIncrementTick>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fac:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <SysTick_Handler+0x40>)
 8004fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	f383 8811 	msr	BASEPRI, r3
}
 8004fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fd0:	4b0a      	ldr	r3, [pc, #40]	; (8004ffc <vPortSetupTimerInterrupt+0x30>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fd6:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <vPortSetupTimerInterrupt+0x34>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fdc:	4b09      	ldr	r3, [pc, #36]	; (8005004 <vPortSetupTimerInterrupt+0x38>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a09      	ldr	r2, [pc, #36]	; (8005008 <vPortSetupTimerInterrupt+0x3c>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	099b      	lsrs	r3, r3, #6
 8004fe8:	4a08      	ldr	r2, [pc, #32]	; (800500c <vPortSetupTimerInterrupt+0x40>)
 8004fea:	3b01      	subs	r3, #1
 8004fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fee:	4b03      	ldr	r3, [pc, #12]	; (8004ffc <vPortSetupTimerInterrupt+0x30>)
 8004ff0:	2207      	movs	r2, #7
 8004ff2:	601a      	str	r2, [r3, #0]
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr
 8004ffc:	e000e010 	.word	0xe000e010
 8005000:	e000e018 	.word	0xe000e018
 8005004:	20000014 	.word	0x20000014
 8005008:	10624dd3 	.word	0x10624dd3
 800500c:	e000e014 	.word	0xe000e014

08005010 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08a      	sub	sp, #40	; 0x28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005018:	2300      	movs	r3, #0
 800501a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800501c:	f7ff fb34 	bl	8004688 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005020:	4b58      	ldr	r3, [pc, #352]	; (8005184 <pvPortMalloc+0x174>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005028:	f000 f910 	bl	800524c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800502c:	4b56      	ldr	r3, [pc, #344]	; (8005188 <pvPortMalloc+0x178>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	f040 808e 	bne.w	8005156 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01d      	beq.n	800507c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005040:	2208      	movs	r2, #8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4413      	add	r3, r2
 8005046:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	2b00      	cmp	r3, #0
 8005050:	d014      	beq.n	800507c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f023 0307 	bic.w	r3, r3, #7
 8005058:	3308      	adds	r3, #8
 800505a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <pvPortMalloc+0x6c>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	617b      	str	r3, [r7, #20]
}
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d069      	beq.n	8005156 <pvPortMalloc+0x146>
 8005082:	4b42      	ldr	r3, [pc, #264]	; (800518c <pvPortMalloc+0x17c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	429a      	cmp	r2, r3
 800508a:	d864      	bhi.n	8005156 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800508c:	4b40      	ldr	r3, [pc, #256]	; (8005190 <pvPortMalloc+0x180>)
 800508e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005090:	4b3f      	ldr	r3, [pc, #252]	; (8005190 <pvPortMalloc+0x180>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005096:	e004      	b.n	80050a2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d903      	bls.n	80050b4 <pvPortMalloc+0xa4>
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1f1      	bne.n	8005098 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050b4:	4b33      	ldr	r3, [pc, #204]	; (8005184 <pvPortMalloc+0x174>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d04b      	beq.n	8005156 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2208      	movs	r2, #8
 80050c4:	4413      	add	r3, r2
 80050c6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	1ad2      	subs	r2, r2, r3
 80050d8:	2308      	movs	r3, #8
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	429a      	cmp	r2, r3
 80050de:	d91f      	bls.n	8005120 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4413      	add	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <pvPortMalloc+0xf8>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	613b      	str	r3, [r7, #16]
}
 8005104:	bf00      	nop
 8005106:	e7fe      	b.n	8005106 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	1ad2      	subs	r2, r2, r3
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800511a:	69b8      	ldr	r0, [r7, #24]
 800511c:	f000 f8f8 	bl	8005310 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005120:	4b1a      	ldr	r3, [pc, #104]	; (800518c <pvPortMalloc+0x17c>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	4a18      	ldr	r2, [pc, #96]	; (800518c <pvPortMalloc+0x17c>)
 800512c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800512e:	4b17      	ldr	r3, [pc, #92]	; (800518c <pvPortMalloc+0x17c>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4b18      	ldr	r3, [pc, #96]	; (8005194 <pvPortMalloc+0x184>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d203      	bcs.n	8005142 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800513a:	4b14      	ldr	r3, [pc, #80]	; (800518c <pvPortMalloc+0x17c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a15      	ldr	r2, [pc, #84]	; (8005194 <pvPortMalloc+0x184>)
 8005140:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	4b10      	ldr	r3, [pc, #64]	; (8005188 <pvPortMalloc+0x178>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	431a      	orrs	r2, r3
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005156:	f7ff faa5 	bl	80046a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <pvPortMalloc+0x16a>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	60fb      	str	r3, [r7, #12]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <pvPortMalloc+0x168>
	return pvReturn;
 800517a:	69fb      	ldr	r3, [r7, #28]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3728      	adds	r7, #40	; 0x28
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	20001178 	.word	0x20001178
 8005188:	20001184 	.word	0x20001184
 800518c:	2000117c 	.word	0x2000117c
 8005190:	20001170 	.word	0x20001170
 8005194:	20001180 	.word	0x20001180

08005198 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d048      	beq.n	800523c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051aa:	2308      	movs	r3, #8
 80051ac:	425b      	negs	r3, r3
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4413      	add	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	4b21      	ldr	r3, [pc, #132]	; (8005244 <vPortFree+0xac>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10a      	bne.n	80051dc <vPortFree+0x44>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	60fb      	str	r3, [r7, #12]
}
 80051d8:	bf00      	nop
 80051da:	e7fe      	b.n	80051da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <vPortFree+0x62>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	60bb      	str	r3, [r7, #8]
}
 80051f6:	bf00      	nop
 80051f8:	e7fe      	b.n	80051f8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	4b11      	ldr	r3, [pc, #68]	; (8005244 <vPortFree+0xac>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4013      	ands	r3, r2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d019      	beq.n	800523c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d115      	bne.n	800523c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <vPortFree+0xac>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	43db      	mvns	r3, r3
 800521a:	401a      	ands	r2, r3
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005220:	f7ff fa32 	bl	8004688 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	4b07      	ldr	r3, [pc, #28]	; (8005248 <vPortFree+0xb0>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4413      	add	r3, r2
 800522e:	4a06      	ldr	r2, [pc, #24]	; (8005248 <vPortFree+0xb0>)
 8005230:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005232:	6938      	ldr	r0, [r7, #16]
 8005234:	f000 f86c 	bl	8005310 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005238:	f7ff fa34 	bl	80046a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800523c:	bf00      	nop
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	20001184 	.word	0x20001184
 8005248:	2000117c 	.word	0x2000117c

0800524c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005252:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005256:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005258:	4b27      	ldr	r3, [pc, #156]	; (80052f8 <prvHeapInit+0xac>)
 800525a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00c      	beq.n	8005280 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3307      	adds	r3, #7
 800526a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0307 	bic.w	r3, r3, #7
 8005272:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	4a1f      	ldr	r2, [pc, #124]	; (80052f8 <prvHeapInit+0xac>)
 800527c:	4413      	add	r3, r2
 800527e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005284:	4a1d      	ldr	r2, [pc, #116]	; (80052fc <prvHeapInit+0xb0>)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800528a:	4b1c      	ldr	r3, [pc, #112]	; (80052fc <prvHeapInit+0xb0>)
 800528c:	2200      	movs	r2, #0
 800528e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	4413      	add	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005298:	2208      	movs	r2, #8
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1a9b      	subs	r3, r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0307 	bic.w	r3, r3, #7
 80052a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4a15      	ldr	r2, [pc, #84]	; (8005300 <prvHeapInit+0xb4>)
 80052ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052ae:	4b14      	ldr	r3, [pc, #80]	; (8005300 <prvHeapInit+0xb4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2200      	movs	r2, #0
 80052b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052b6:	4b12      	ldr	r3, [pc, #72]	; (8005300 <prvHeapInit+0xb4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	1ad2      	subs	r2, r2, r3
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052cc:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <prvHeapInit+0xb4>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	4a0a      	ldr	r2, [pc, #40]	; (8005304 <prvHeapInit+0xb8>)
 80052da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	4a09      	ldr	r2, [pc, #36]	; (8005308 <prvHeapInit+0xbc>)
 80052e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052e4:	4b09      	ldr	r3, [pc, #36]	; (800530c <prvHeapInit+0xc0>)
 80052e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052ea:	601a      	str	r2, [r3, #0]
}
 80052ec:	bf00      	nop
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	20000570 	.word	0x20000570
 80052fc:	20001170 	.word	0x20001170
 8005300:	20001178 	.word	0x20001178
 8005304:	20001180 	.word	0x20001180
 8005308:	2000117c 	.word	0x2000117c
 800530c:	20001184 	.word	0x20001184

08005310 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005318:	4b27      	ldr	r3, [pc, #156]	; (80053b8 <prvInsertBlockIntoFreeList+0xa8>)
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	e002      	b.n	8005324 <prvInsertBlockIntoFreeList+0x14>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	429a      	cmp	r2, r3
 800532c:	d8f7      	bhi.n	800531e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	4413      	add	r3, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	429a      	cmp	r2, r3
 800533e:	d108      	bne.n	8005352 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	441a      	add	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	441a      	add	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d118      	bne.n	8005398 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4b14      	ldr	r3, [pc, #80]	; (80053bc <prvInsertBlockIntoFreeList+0xac>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d00d      	beq.n	800538e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	441a      	add	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e008      	b.n	80053a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800538e:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <prvInsertBlockIntoFreeList+0xac>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	e003      	b.n	80053a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d002      	beq.n	80053ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ae:	bf00      	nop
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr
 80053b8:	20001170 	.word	0x20001170
 80053bc:	20001178 	.word	0x20001178

080053c0 <__errno>:
 80053c0:	4b01      	ldr	r3, [pc, #4]	; (80053c8 <__errno+0x8>)
 80053c2:	6818      	ldr	r0, [r3, #0]
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	20000024 	.word	0x20000024

080053cc <__libc_init_array>:
 80053cc:	b570      	push	{r4, r5, r6, lr}
 80053ce:	2600      	movs	r6, #0
 80053d0:	4d0c      	ldr	r5, [pc, #48]	; (8005404 <__libc_init_array+0x38>)
 80053d2:	4c0d      	ldr	r4, [pc, #52]	; (8005408 <__libc_init_array+0x3c>)
 80053d4:	1b64      	subs	r4, r4, r5
 80053d6:	10a4      	asrs	r4, r4, #2
 80053d8:	42a6      	cmp	r6, r4
 80053da:	d109      	bne.n	80053f0 <__libc_init_array+0x24>
 80053dc:	f000 fc9c 	bl	8005d18 <_init>
 80053e0:	2600      	movs	r6, #0
 80053e2:	4d0a      	ldr	r5, [pc, #40]	; (800540c <__libc_init_array+0x40>)
 80053e4:	4c0a      	ldr	r4, [pc, #40]	; (8005410 <__libc_init_array+0x44>)
 80053e6:	1b64      	subs	r4, r4, r5
 80053e8:	10a4      	asrs	r4, r4, #2
 80053ea:	42a6      	cmp	r6, r4
 80053ec:	d105      	bne.n	80053fa <__libc_init_array+0x2e>
 80053ee:	bd70      	pop	{r4, r5, r6, pc}
 80053f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f4:	4798      	blx	r3
 80053f6:	3601      	adds	r6, #1
 80053f8:	e7ee      	b.n	80053d8 <__libc_init_array+0xc>
 80053fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fe:	4798      	blx	r3
 8005400:	3601      	adds	r6, #1
 8005402:	e7f2      	b.n	80053ea <__libc_init_array+0x1e>
 8005404:	08005e80 	.word	0x08005e80
 8005408:	08005e80 	.word	0x08005e80
 800540c:	08005e80 	.word	0x08005e80
 8005410:	08005e84 	.word	0x08005e84

08005414 <memcpy>:
 8005414:	440a      	add	r2, r1
 8005416:	4291      	cmp	r1, r2
 8005418:	f100 33ff 	add.w	r3, r0, #4294967295
 800541c:	d100      	bne.n	8005420 <memcpy+0xc>
 800541e:	4770      	bx	lr
 8005420:	b510      	push	{r4, lr}
 8005422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005426:	4291      	cmp	r1, r2
 8005428:	f803 4f01 	strb.w	r4, [r3, #1]!
 800542c:	d1f9      	bne.n	8005422 <memcpy+0xe>
 800542e:	bd10      	pop	{r4, pc}

08005430 <memset>:
 8005430:	4603      	mov	r3, r0
 8005432:	4402      	add	r2, r0
 8005434:	4293      	cmp	r3, r2
 8005436:	d100      	bne.n	800543a <memset+0xa>
 8005438:	4770      	bx	lr
 800543a:	f803 1b01 	strb.w	r1, [r3], #1
 800543e:	e7f9      	b.n	8005434 <memset+0x4>

08005440 <siprintf>:
 8005440:	b40e      	push	{r1, r2, r3}
 8005442:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005446:	b500      	push	{lr}
 8005448:	b09c      	sub	sp, #112	; 0x70
 800544a:	ab1d      	add	r3, sp, #116	; 0x74
 800544c:	9002      	str	r0, [sp, #8]
 800544e:	9006      	str	r0, [sp, #24]
 8005450:	9107      	str	r1, [sp, #28]
 8005452:	9104      	str	r1, [sp, #16]
 8005454:	4808      	ldr	r0, [pc, #32]	; (8005478 <siprintf+0x38>)
 8005456:	4909      	ldr	r1, [pc, #36]	; (800547c <siprintf+0x3c>)
 8005458:	f853 2b04 	ldr.w	r2, [r3], #4
 800545c:	9105      	str	r1, [sp, #20]
 800545e:	6800      	ldr	r0, [r0, #0]
 8005460:	a902      	add	r1, sp, #8
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	f000 f868 	bl	8005538 <_svfiprintf_r>
 8005468:	2200      	movs	r2, #0
 800546a:	9b02      	ldr	r3, [sp, #8]
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	b01c      	add	sp, #112	; 0x70
 8005470:	f85d eb04 	ldr.w	lr, [sp], #4
 8005474:	b003      	add	sp, #12
 8005476:	4770      	bx	lr
 8005478:	20000024 	.word	0x20000024
 800547c:	ffff0208 	.word	0xffff0208

08005480 <__ssputs_r>:
 8005480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005484:	688e      	ldr	r6, [r1, #8]
 8005486:	4682      	mov	sl, r0
 8005488:	429e      	cmp	r6, r3
 800548a:	460c      	mov	r4, r1
 800548c:	4690      	mov	r8, r2
 800548e:	461f      	mov	r7, r3
 8005490:	d838      	bhi.n	8005504 <__ssputs_r+0x84>
 8005492:	898a      	ldrh	r2, [r1, #12]
 8005494:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005498:	d032      	beq.n	8005500 <__ssputs_r+0x80>
 800549a:	6825      	ldr	r5, [r4, #0]
 800549c:	6909      	ldr	r1, [r1, #16]
 800549e:	3301      	adds	r3, #1
 80054a0:	eba5 0901 	sub.w	r9, r5, r1
 80054a4:	6965      	ldr	r5, [r4, #20]
 80054a6:	444b      	add	r3, r9
 80054a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054b0:	106d      	asrs	r5, r5, #1
 80054b2:	429d      	cmp	r5, r3
 80054b4:	bf38      	it	cc
 80054b6:	461d      	movcc	r5, r3
 80054b8:	0553      	lsls	r3, r2, #21
 80054ba:	d531      	bpl.n	8005520 <__ssputs_r+0xa0>
 80054bc:	4629      	mov	r1, r5
 80054be:	f000 fb61 	bl	8005b84 <_malloc_r>
 80054c2:	4606      	mov	r6, r0
 80054c4:	b950      	cbnz	r0, 80054dc <__ssputs_r+0x5c>
 80054c6:	230c      	movs	r3, #12
 80054c8:	f04f 30ff 	mov.w	r0, #4294967295
 80054cc:	f8ca 3000 	str.w	r3, [sl]
 80054d0:	89a3      	ldrh	r3, [r4, #12]
 80054d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054d6:	81a3      	strh	r3, [r4, #12]
 80054d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054dc:	464a      	mov	r2, r9
 80054de:	6921      	ldr	r1, [r4, #16]
 80054e0:	f7ff ff98 	bl	8005414 <memcpy>
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ee:	81a3      	strh	r3, [r4, #12]
 80054f0:	6126      	str	r6, [r4, #16]
 80054f2:	444e      	add	r6, r9
 80054f4:	6026      	str	r6, [r4, #0]
 80054f6:	463e      	mov	r6, r7
 80054f8:	6165      	str	r5, [r4, #20]
 80054fa:	eba5 0509 	sub.w	r5, r5, r9
 80054fe:	60a5      	str	r5, [r4, #8]
 8005500:	42be      	cmp	r6, r7
 8005502:	d900      	bls.n	8005506 <__ssputs_r+0x86>
 8005504:	463e      	mov	r6, r7
 8005506:	4632      	mov	r2, r6
 8005508:	4641      	mov	r1, r8
 800550a:	6820      	ldr	r0, [r4, #0]
 800550c:	f000 fab8 	bl	8005a80 <memmove>
 8005510:	68a3      	ldr	r3, [r4, #8]
 8005512:	2000      	movs	r0, #0
 8005514:	1b9b      	subs	r3, r3, r6
 8005516:	60a3      	str	r3, [r4, #8]
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	4433      	add	r3, r6
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	e7db      	b.n	80054d8 <__ssputs_r+0x58>
 8005520:	462a      	mov	r2, r5
 8005522:	f000 fba3 	bl	8005c6c <_realloc_r>
 8005526:	4606      	mov	r6, r0
 8005528:	2800      	cmp	r0, #0
 800552a:	d1e1      	bne.n	80054f0 <__ssputs_r+0x70>
 800552c:	4650      	mov	r0, sl
 800552e:	6921      	ldr	r1, [r4, #16]
 8005530:	f000 fac0 	bl	8005ab4 <_free_r>
 8005534:	e7c7      	b.n	80054c6 <__ssputs_r+0x46>
	...

08005538 <_svfiprintf_r>:
 8005538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553c:	4698      	mov	r8, r3
 800553e:	898b      	ldrh	r3, [r1, #12]
 8005540:	4607      	mov	r7, r0
 8005542:	061b      	lsls	r3, r3, #24
 8005544:	460d      	mov	r5, r1
 8005546:	4614      	mov	r4, r2
 8005548:	b09d      	sub	sp, #116	; 0x74
 800554a:	d50e      	bpl.n	800556a <_svfiprintf_r+0x32>
 800554c:	690b      	ldr	r3, [r1, #16]
 800554e:	b963      	cbnz	r3, 800556a <_svfiprintf_r+0x32>
 8005550:	2140      	movs	r1, #64	; 0x40
 8005552:	f000 fb17 	bl	8005b84 <_malloc_r>
 8005556:	6028      	str	r0, [r5, #0]
 8005558:	6128      	str	r0, [r5, #16]
 800555a:	b920      	cbnz	r0, 8005566 <_svfiprintf_r+0x2e>
 800555c:	230c      	movs	r3, #12
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	f04f 30ff 	mov.w	r0, #4294967295
 8005564:	e0d1      	b.n	800570a <_svfiprintf_r+0x1d2>
 8005566:	2340      	movs	r3, #64	; 0x40
 8005568:	616b      	str	r3, [r5, #20]
 800556a:	2300      	movs	r3, #0
 800556c:	9309      	str	r3, [sp, #36]	; 0x24
 800556e:	2320      	movs	r3, #32
 8005570:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005574:	2330      	movs	r3, #48	; 0x30
 8005576:	f04f 0901 	mov.w	r9, #1
 800557a:	f8cd 800c 	str.w	r8, [sp, #12]
 800557e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005724 <_svfiprintf_r+0x1ec>
 8005582:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005586:	4623      	mov	r3, r4
 8005588:	469a      	mov	sl, r3
 800558a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800558e:	b10a      	cbz	r2, 8005594 <_svfiprintf_r+0x5c>
 8005590:	2a25      	cmp	r2, #37	; 0x25
 8005592:	d1f9      	bne.n	8005588 <_svfiprintf_r+0x50>
 8005594:	ebba 0b04 	subs.w	fp, sl, r4
 8005598:	d00b      	beq.n	80055b2 <_svfiprintf_r+0x7a>
 800559a:	465b      	mov	r3, fp
 800559c:	4622      	mov	r2, r4
 800559e:	4629      	mov	r1, r5
 80055a0:	4638      	mov	r0, r7
 80055a2:	f7ff ff6d 	bl	8005480 <__ssputs_r>
 80055a6:	3001      	adds	r0, #1
 80055a8:	f000 80aa 	beq.w	8005700 <_svfiprintf_r+0x1c8>
 80055ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055ae:	445a      	add	r2, fp
 80055b0:	9209      	str	r2, [sp, #36]	; 0x24
 80055b2:	f89a 3000 	ldrb.w	r3, [sl]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 80a2 	beq.w	8005700 <_svfiprintf_r+0x1c8>
 80055bc:	2300      	movs	r3, #0
 80055be:	f04f 32ff 	mov.w	r2, #4294967295
 80055c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055c6:	f10a 0a01 	add.w	sl, sl, #1
 80055ca:	9304      	str	r3, [sp, #16]
 80055cc:	9307      	str	r3, [sp, #28]
 80055ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055d2:	931a      	str	r3, [sp, #104]	; 0x68
 80055d4:	4654      	mov	r4, sl
 80055d6:	2205      	movs	r2, #5
 80055d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055dc:	4851      	ldr	r0, [pc, #324]	; (8005724 <_svfiprintf_r+0x1ec>)
 80055de:	f000 fa41 	bl	8005a64 <memchr>
 80055e2:	9a04      	ldr	r2, [sp, #16]
 80055e4:	b9d8      	cbnz	r0, 800561e <_svfiprintf_r+0xe6>
 80055e6:	06d0      	lsls	r0, r2, #27
 80055e8:	bf44      	itt	mi
 80055ea:	2320      	movmi	r3, #32
 80055ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055f0:	0711      	lsls	r1, r2, #28
 80055f2:	bf44      	itt	mi
 80055f4:	232b      	movmi	r3, #43	; 0x2b
 80055f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055fa:	f89a 3000 	ldrb.w	r3, [sl]
 80055fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005600:	d015      	beq.n	800562e <_svfiprintf_r+0xf6>
 8005602:	4654      	mov	r4, sl
 8005604:	2000      	movs	r0, #0
 8005606:	f04f 0c0a 	mov.w	ip, #10
 800560a:	9a07      	ldr	r2, [sp, #28]
 800560c:	4621      	mov	r1, r4
 800560e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005612:	3b30      	subs	r3, #48	; 0x30
 8005614:	2b09      	cmp	r3, #9
 8005616:	d94e      	bls.n	80056b6 <_svfiprintf_r+0x17e>
 8005618:	b1b0      	cbz	r0, 8005648 <_svfiprintf_r+0x110>
 800561a:	9207      	str	r2, [sp, #28]
 800561c:	e014      	b.n	8005648 <_svfiprintf_r+0x110>
 800561e:	eba0 0308 	sub.w	r3, r0, r8
 8005622:	fa09 f303 	lsl.w	r3, r9, r3
 8005626:	4313      	orrs	r3, r2
 8005628:	46a2      	mov	sl, r4
 800562a:	9304      	str	r3, [sp, #16]
 800562c:	e7d2      	b.n	80055d4 <_svfiprintf_r+0x9c>
 800562e:	9b03      	ldr	r3, [sp, #12]
 8005630:	1d19      	adds	r1, r3, #4
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	9103      	str	r1, [sp, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	bfbb      	ittet	lt
 800563a:	425b      	neglt	r3, r3
 800563c:	f042 0202 	orrlt.w	r2, r2, #2
 8005640:	9307      	strge	r3, [sp, #28]
 8005642:	9307      	strlt	r3, [sp, #28]
 8005644:	bfb8      	it	lt
 8005646:	9204      	strlt	r2, [sp, #16]
 8005648:	7823      	ldrb	r3, [r4, #0]
 800564a:	2b2e      	cmp	r3, #46	; 0x2e
 800564c:	d10c      	bne.n	8005668 <_svfiprintf_r+0x130>
 800564e:	7863      	ldrb	r3, [r4, #1]
 8005650:	2b2a      	cmp	r3, #42	; 0x2a
 8005652:	d135      	bne.n	80056c0 <_svfiprintf_r+0x188>
 8005654:	9b03      	ldr	r3, [sp, #12]
 8005656:	3402      	adds	r4, #2
 8005658:	1d1a      	adds	r2, r3, #4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	9203      	str	r2, [sp, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	bfb8      	it	lt
 8005662:	f04f 33ff 	movlt.w	r3, #4294967295
 8005666:	9305      	str	r3, [sp, #20]
 8005668:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005728 <_svfiprintf_r+0x1f0>
 800566c:	2203      	movs	r2, #3
 800566e:	4650      	mov	r0, sl
 8005670:	7821      	ldrb	r1, [r4, #0]
 8005672:	f000 f9f7 	bl	8005a64 <memchr>
 8005676:	b140      	cbz	r0, 800568a <_svfiprintf_r+0x152>
 8005678:	2340      	movs	r3, #64	; 0x40
 800567a:	eba0 000a 	sub.w	r0, r0, sl
 800567e:	fa03 f000 	lsl.w	r0, r3, r0
 8005682:	9b04      	ldr	r3, [sp, #16]
 8005684:	3401      	adds	r4, #1
 8005686:	4303      	orrs	r3, r0
 8005688:	9304      	str	r3, [sp, #16]
 800568a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800568e:	2206      	movs	r2, #6
 8005690:	4826      	ldr	r0, [pc, #152]	; (800572c <_svfiprintf_r+0x1f4>)
 8005692:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005696:	f000 f9e5 	bl	8005a64 <memchr>
 800569a:	2800      	cmp	r0, #0
 800569c:	d038      	beq.n	8005710 <_svfiprintf_r+0x1d8>
 800569e:	4b24      	ldr	r3, [pc, #144]	; (8005730 <_svfiprintf_r+0x1f8>)
 80056a0:	bb1b      	cbnz	r3, 80056ea <_svfiprintf_r+0x1b2>
 80056a2:	9b03      	ldr	r3, [sp, #12]
 80056a4:	3307      	adds	r3, #7
 80056a6:	f023 0307 	bic.w	r3, r3, #7
 80056aa:	3308      	adds	r3, #8
 80056ac:	9303      	str	r3, [sp, #12]
 80056ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b0:	4433      	add	r3, r6
 80056b2:	9309      	str	r3, [sp, #36]	; 0x24
 80056b4:	e767      	b.n	8005586 <_svfiprintf_r+0x4e>
 80056b6:	460c      	mov	r4, r1
 80056b8:	2001      	movs	r0, #1
 80056ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80056be:	e7a5      	b.n	800560c <_svfiprintf_r+0xd4>
 80056c0:	2300      	movs	r3, #0
 80056c2:	f04f 0c0a 	mov.w	ip, #10
 80056c6:	4619      	mov	r1, r3
 80056c8:	3401      	adds	r4, #1
 80056ca:	9305      	str	r3, [sp, #20]
 80056cc:	4620      	mov	r0, r4
 80056ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056d2:	3a30      	subs	r2, #48	; 0x30
 80056d4:	2a09      	cmp	r2, #9
 80056d6:	d903      	bls.n	80056e0 <_svfiprintf_r+0x1a8>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0c5      	beq.n	8005668 <_svfiprintf_r+0x130>
 80056dc:	9105      	str	r1, [sp, #20]
 80056de:	e7c3      	b.n	8005668 <_svfiprintf_r+0x130>
 80056e0:	4604      	mov	r4, r0
 80056e2:	2301      	movs	r3, #1
 80056e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80056e8:	e7f0      	b.n	80056cc <_svfiprintf_r+0x194>
 80056ea:	ab03      	add	r3, sp, #12
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	462a      	mov	r2, r5
 80056f0:	4638      	mov	r0, r7
 80056f2:	4b10      	ldr	r3, [pc, #64]	; (8005734 <_svfiprintf_r+0x1fc>)
 80056f4:	a904      	add	r1, sp, #16
 80056f6:	f3af 8000 	nop.w
 80056fa:	1c42      	adds	r2, r0, #1
 80056fc:	4606      	mov	r6, r0
 80056fe:	d1d6      	bne.n	80056ae <_svfiprintf_r+0x176>
 8005700:	89ab      	ldrh	r3, [r5, #12]
 8005702:	065b      	lsls	r3, r3, #25
 8005704:	f53f af2c 	bmi.w	8005560 <_svfiprintf_r+0x28>
 8005708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800570a:	b01d      	add	sp, #116	; 0x74
 800570c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005710:	ab03      	add	r3, sp, #12
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	462a      	mov	r2, r5
 8005716:	4638      	mov	r0, r7
 8005718:	4b06      	ldr	r3, [pc, #24]	; (8005734 <_svfiprintf_r+0x1fc>)
 800571a:	a904      	add	r1, sp, #16
 800571c:	f000 f87c 	bl	8005818 <_printf_i>
 8005720:	e7eb      	b.n	80056fa <_svfiprintf_r+0x1c2>
 8005722:	bf00      	nop
 8005724:	08005e4c 	.word	0x08005e4c
 8005728:	08005e52 	.word	0x08005e52
 800572c:	08005e56 	.word	0x08005e56
 8005730:	00000000 	.word	0x00000000
 8005734:	08005481 	.word	0x08005481

08005738 <_printf_common>:
 8005738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800573c:	4616      	mov	r6, r2
 800573e:	4699      	mov	r9, r3
 8005740:	688a      	ldr	r2, [r1, #8]
 8005742:	690b      	ldr	r3, [r1, #16]
 8005744:	4607      	mov	r7, r0
 8005746:	4293      	cmp	r3, r2
 8005748:	bfb8      	it	lt
 800574a:	4613      	movlt	r3, r2
 800574c:	6033      	str	r3, [r6, #0]
 800574e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005752:	460c      	mov	r4, r1
 8005754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005758:	b10a      	cbz	r2, 800575e <_printf_common+0x26>
 800575a:	3301      	adds	r3, #1
 800575c:	6033      	str	r3, [r6, #0]
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	0699      	lsls	r1, r3, #26
 8005762:	bf42      	ittt	mi
 8005764:	6833      	ldrmi	r3, [r6, #0]
 8005766:	3302      	addmi	r3, #2
 8005768:	6033      	strmi	r3, [r6, #0]
 800576a:	6825      	ldr	r5, [r4, #0]
 800576c:	f015 0506 	ands.w	r5, r5, #6
 8005770:	d106      	bne.n	8005780 <_printf_common+0x48>
 8005772:	f104 0a19 	add.w	sl, r4, #25
 8005776:	68e3      	ldr	r3, [r4, #12]
 8005778:	6832      	ldr	r2, [r6, #0]
 800577a:	1a9b      	subs	r3, r3, r2
 800577c:	42ab      	cmp	r3, r5
 800577e:	dc28      	bgt.n	80057d2 <_printf_common+0x9a>
 8005780:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005784:	1e13      	subs	r3, r2, #0
 8005786:	6822      	ldr	r2, [r4, #0]
 8005788:	bf18      	it	ne
 800578a:	2301      	movne	r3, #1
 800578c:	0692      	lsls	r2, r2, #26
 800578e:	d42d      	bmi.n	80057ec <_printf_common+0xb4>
 8005790:	4649      	mov	r1, r9
 8005792:	4638      	mov	r0, r7
 8005794:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005798:	47c0      	blx	r8
 800579a:	3001      	adds	r0, #1
 800579c:	d020      	beq.n	80057e0 <_printf_common+0xa8>
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	68e5      	ldr	r5, [r4, #12]
 80057a2:	f003 0306 	and.w	r3, r3, #6
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	bf18      	it	ne
 80057aa:	2500      	movne	r5, #0
 80057ac:	6832      	ldr	r2, [r6, #0]
 80057ae:	f04f 0600 	mov.w	r6, #0
 80057b2:	68a3      	ldr	r3, [r4, #8]
 80057b4:	bf08      	it	eq
 80057b6:	1aad      	subeq	r5, r5, r2
 80057b8:	6922      	ldr	r2, [r4, #16]
 80057ba:	bf08      	it	eq
 80057bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057c0:	4293      	cmp	r3, r2
 80057c2:	bfc4      	itt	gt
 80057c4:	1a9b      	subgt	r3, r3, r2
 80057c6:	18ed      	addgt	r5, r5, r3
 80057c8:	341a      	adds	r4, #26
 80057ca:	42b5      	cmp	r5, r6
 80057cc:	d11a      	bne.n	8005804 <_printf_common+0xcc>
 80057ce:	2000      	movs	r0, #0
 80057d0:	e008      	b.n	80057e4 <_printf_common+0xac>
 80057d2:	2301      	movs	r3, #1
 80057d4:	4652      	mov	r2, sl
 80057d6:	4649      	mov	r1, r9
 80057d8:	4638      	mov	r0, r7
 80057da:	47c0      	blx	r8
 80057dc:	3001      	adds	r0, #1
 80057de:	d103      	bne.n	80057e8 <_printf_common+0xb0>
 80057e0:	f04f 30ff 	mov.w	r0, #4294967295
 80057e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e8:	3501      	adds	r5, #1
 80057ea:	e7c4      	b.n	8005776 <_printf_common+0x3e>
 80057ec:	2030      	movs	r0, #48	; 0x30
 80057ee:	18e1      	adds	r1, r4, r3
 80057f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057fa:	4422      	add	r2, r4
 80057fc:	3302      	adds	r3, #2
 80057fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005802:	e7c5      	b.n	8005790 <_printf_common+0x58>
 8005804:	2301      	movs	r3, #1
 8005806:	4622      	mov	r2, r4
 8005808:	4649      	mov	r1, r9
 800580a:	4638      	mov	r0, r7
 800580c:	47c0      	blx	r8
 800580e:	3001      	adds	r0, #1
 8005810:	d0e6      	beq.n	80057e0 <_printf_common+0xa8>
 8005812:	3601      	adds	r6, #1
 8005814:	e7d9      	b.n	80057ca <_printf_common+0x92>
	...

08005818 <_printf_i>:
 8005818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800581c:	7e0f      	ldrb	r7, [r1, #24]
 800581e:	4691      	mov	r9, r2
 8005820:	2f78      	cmp	r7, #120	; 0x78
 8005822:	4680      	mov	r8, r0
 8005824:	460c      	mov	r4, r1
 8005826:	469a      	mov	sl, r3
 8005828:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800582a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800582e:	d807      	bhi.n	8005840 <_printf_i+0x28>
 8005830:	2f62      	cmp	r7, #98	; 0x62
 8005832:	d80a      	bhi.n	800584a <_printf_i+0x32>
 8005834:	2f00      	cmp	r7, #0
 8005836:	f000 80d9 	beq.w	80059ec <_printf_i+0x1d4>
 800583a:	2f58      	cmp	r7, #88	; 0x58
 800583c:	f000 80a4 	beq.w	8005988 <_printf_i+0x170>
 8005840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005844:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005848:	e03a      	b.n	80058c0 <_printf_i+0xa8>
 800584a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800584e:	2b15      	cmp	r3, #21
 8005850:	d8f6      	bhi.n	8005840 <_printf_i+0x28>
 8005852:	a101      	add	r1, pc, #4	; (adr r1, 8005858 <_printf_i+0x40>)
 8005854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005858:	080058b1 	.word	0x080058b1
 800585c:	080058c5 	.word	0x080058c5
 8005860:	08005841 	.word	0x08005841
 8005864:	08005841 	.word	0x08005841
 8005868:	08005841 	.word	0x08005841
 800586c:	08005841 	.word	0x08005841
 8005870:	080058c5 	.word	0x080058c5
 8005874:	08005841 	.word	0x08005841
 8005878:	08005841 	.word	0x08005841
 800587c:	08005841 	.word	0x08005841
 8005880:	08005841 	.word	0x08005841
 8005884:	080059d3 	.word	0x080059d3
 8005888:	080058f5 	.word	0x080058f5
 800588c:	080059b5 	.word	0x080059b5
 8005890:	08005841 	.word	0x08005841
 8005894:	08005841 	.word	0x08005841
 8005898:	080059f5 	.word	0x080059f5
 800589c:	08005841 	.word	0x08005841
 80058a0:	080058f5 	.word	0x080058f5
 80058a4:	08005841 	.word	0x08005841
 80058a8:	08005841 	.word	0x08005841
 80058ac:	080059bd 	.word	0x080059bd
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	1d1a      	adds	r2, r3, #4
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	602a      	str	r2, [r5, #0]
 80058b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0a4      	b.n	8005a0e <_printf_i+0x1f6>
 80058c4:	6820      	ldr	r0, [r4, #0]
 80058c6:	6829      	ldr	r1, [r5, #0]
 80058c8:	0606      	lsls	r6, r0, #24
 80058ca:	f101 0304 	add.w	r3, r1, #4
 80058ce:	d50a      	bpl.n	80058e6 <_printf_i+0xce>
 80058d0:	680e      	ldr	r6, [r1, #0]
 80058d2:	602b      	str	r3, [r5, #0]
 80058d4:	2e00      	cmp	r6, #0
 80058d6:	da03      	bge.n	80058e0 <_printf_i+0xc8>
 80058d8:	232d      	movs	r3, #45	; 0x2d
 80058da:	4276      	negs	r6, r6
 80058dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058e0:	230a      	movs	r3, #10
 80058e2:	485e      	ldr	r0, [pc, #376]	; (8005a5c <_printf_i+0x244>)
 80058e4:	e019      	b.n	800591a <_printf_i+0x102>
 80058e6:	680e      	ldr	r6, [r1, #0]
 80058e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058ec:	602b      	str	r3, [r5, #0]
 80058ee:	bf18      	it	ne
 80058f0:	b236      	sxthne	r6, r6
 80058f2:	e7ef      	b.n	80058d4 <_printf_i+0xbc>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	6820      	ldr	r0, [r4, #0]
 80058f8:	1d19      	adds	r1, r3, #4
 80058fa:	6029      	str	r1, [r5, #0]
 80058fc:	0601      	lsls	r1, r0, #24
 80058fe:	d501      	bpl.n	8005904 <_printf_i+0xec>
 8005900:	681e      	ldr	r6, [r3, #0]
 8005902:	e002      	b.n	800590a <_printf_i+0xf2>
 8005904:	0646      	lsls	r6, r0, #25
 8005906:	d5fb      	bpl.n	8005900 <_printf_i+0xe8>
 8005908:	881e      	ldrh	r6, [r3, #0]
 800590a:	2f6f      	cmp	r7, #111	; 0x6f
 800590c:	bf0c      	ite	eq
 800590e:	2308      	moveq	r3, #8
 8005910:	230a      	movne	r3, #10
 8005912:	4852      	ldr	r0, [pc, #328]	; (8005a5c <_printf_i+0x244>)
 8005914:	2100      	movs	r1, #0
 8005916:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800591a:	6865      	ldr	r5, [r4, #4]
 800591c:	2d00      	cmp	r5, #0
 800591e:	bfa8      	it	ge
 8005920:	6821      	ldrge	r1, [r4, #0]
 8005922:	60a5      	str	r5, [r4, #8]
 8005924:	bfa4      	itt	ge
 8005926:	f021 0104 	bicge.w	r1, r1, #4
 800592a:	6021      	strge	r1, [r4, #0]
 800592c:	b90e      	cbnz	r6, 8005932 <_printf_i+0x11a>
 800592e:	2d00      	cmp	r5, #0
 8005930:	d04d      	beq.n	80059ce <_printf_i+0x1b6>
 8005932:	4615      	mov	r5, r2
 8005934:	fbb6 f1f3 	udiv	r1, r6, r3
 8005938:	fb03 6711 	mls	r7, r3, r1, r6
 800593c:	5dc7      	ldrb	r7, [r0, r7]
 800593e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005942:	4637      	mov	r7, r6
 8005944:	42bb      	cmp	r3, r7
 8005946:	460e      	mov	r6, r1
 8005948:	d9f4      	bls.n	8005934 <_printf_i+0x11c>
 800594a:	2b08      	cmp	r3, #8
 800594c:	d10b      	bne.n	8005966 <_printf_i+0x14e>
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	07de      	lsls	r6, r3, #31
 8005952:	d508      	bpl.n	8005966 <_printf_i+0x14e>
 8005954:	6923      	ldr	r3, [r4, #16]
 8005956:	6861      	ldr	r1, [r4, #4]
 8005958:	4299      	cmp	r1, r3
 800595a:	bfde      	ittt	le
 800595c:	2330      	movle	r3, #48	; 0x30
 800595e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005962:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005966:	1b52      	subs	r2, r2, r5
 8005968:	6122      	str	r2, [r4, #16]
 800596a:	464b      	mov	r3, r9
 800596c:	4621      	mov	r1, r4
 800596e:	4640      	mov	r0, r8
 8005970:	f8cd a000 	str.w	sl, [sp]
 8005974:	aa03      	add	r2, sp, #12
 8005976:	f7ff fedf 	bl	8005738 <_printf_common>
 800597a:	3001      	adds	r0, #1
 800597c:	d14c      	bne.n	8005a18 <_printf_i+0x200>
 800597e:	f04f 30ff 	mov.w	r0, #4294967295
 8005982:	b004      	add	sp, #16
 8005984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005988:	4834      	ldr	r0, [pc, #208]	; (8005a5c <_printf_i+0x244>)
 800598a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800598e:	6829      	ldr	r1, [r5, #0]
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	f851 6b04 	ldr.w	r6, [r1], #4
 8005996:	6029      	str	r1, [r5, #0]
 8005998:	061d      	lsls	r5, r3, #24
 800599a:	d514      	bpl.n	80059c6 <_printf_i+0x1ae>
 800599c:	07df      	lsls	r7, r3, #31
 800599e:	bf44      	itt	mi
 80059a0:	f043 0320 	orrmi.w	r3, r3, #32
 80059a4:	6023      	strmi	r3, [r4, #0]
 80059a6:	b91e      	cbnz	r6, 80059b0 <_printf_i+0x198>
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	f023 0320 	bic.w	r3, r3, #32
 80059ae:	6023      	str	r3, [r4, #0]
 80059b0:	2310      	movs	r3, #16
 80059b2:	e7af      	b.n	8005914 <_printf_i+0xfc>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	f043 0320 	orr.w	r3, r3, #32
 80059ba:	6023      	str	r3, [r4, #0]
 80059bc:	2378      	movs	r3, #120	; 0x78
 80059be:	4828      	ldr	r0, [pc, #160]	; (8005a60 <_printf_i+0x248>)
 80059c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059c4:	e7e3      	b.n	800598e <_printf_i+0x176>
 80059c6:	0659      	lsls	r1, r3, #25
 80059c8:	bf48      	it	mi
 80059ca:	b2b6      	uxthmi	r6, r6
 80059cc:	e7e6      	b.n	800599c <_printf_i+0x184>
 80059ce:	4615      	mov	r5, r2
 80059d0:	e7bb      	b.n	800594a <_printf_i+0x132>
 80059d2:	682b      	ldr	r3, [r5, #0]
 80059d4:	6826      	ldr	r6, [r4, #0]
 80059d6:	1d18      	adds	r0, r3, #4
 80059d8:	6961      	ldr	r1, [r4, #20]
 80059da:	6028      	str	r0, [r5, #0]
 80059dc:	0635      	lsls	r5, r6, #24
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	d501      	bpl.n	80059e6 <_printf_i+0x1ce>
 80059e2:	6019      	str	r1, [r3, #0]
 80059e4:	e002      	b.n	80059ec <_printf_i+0x1d4>
 80059e6:	0670      	lsls	r0, r6, #25
 80059e8:	d5fb      	bpl.n	80059e2 <_printf_i+0x1ca>
 80059ea:	8019      	strh	r1, [r3, #0]
 80059ec:	2300      	movs	r3, #0
 80059ee:	4615      	mov	r5, r2
 80059f0:	6123      	str	r3, [r4, #16]
 80059f2:	e7ba      	b.n	800596a <_printf_i+0x152>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	2100      	movs	r1, #0
 80059f8:	1d1a      	adds	r2, r3, #4
 80059fa:	602a      	str	r2, [r5, #0]
 80059fc:	681d      	ldr	r5, [r3, #0]
 80059fe:	6862      	ldr	r2, [r4, #4]
 8005a00:	4628      	mov	r0, r5
 8005a02:	f000 f82f 	bl	8005a64 <memchr>
 8005a06:	b108      	cbz	r0, 8005a0c <_printf_i+0x1f4>
 8005a08:	1b40      	subs	r0, r0, r5
 8005a0a:	6060      	str	r0, [r4, #4]
 8005a0c:	6863      	ldr	r3, [r4, #4]
 8005a0e:	6123      	str	r3, [r4, #16]
 8005a10:	2300      	movs	r3, #0
 8005a12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a16:	e7a8      	b.n	800596a <_printf_i+0x152>
 8005a18:	462a      	mov	r2, r5
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	6923      	ldr	r3, [r4, #16]
 8005a20:	47d0      	blx	sl
 8005a22:	3001      	adds	r0, #1
 8005a24:	d0ab      	beq.n	800597e <_printf_i+0x166>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	079b      	lsls	r3, r3, #30
 8005a2a:	d413      	bmi.n	8005a54 <_printf_i+0x23c>
 8005a2c:	68e0      	ldr	r0, [r4, #12]
 8005a2e:	9b03      	ldr	r3, [sp, #12]
 8005a30:	4298      	cmp	r0, r3
 8005a32:	bfb8      	it	lt
 8005a34:	4618      	movlt	r0, r3
 8005a36:	e7a4      	b.n	8005982 <_printf_i+0x16a>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	4632      	mov	r2, r6
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	4640      	mov	r0, r8
 8005a40:	47d0      	blx	sl
 8005a42:	3001      	adds	r0, #1
 8005a44:	d09b      	beq.n	800597e <_printf_i+0x166>
 8005a46:	3501      	adds	r5, #1
 8005a48:	68e3      	ldr	r3, [r4, #12]
 8005a4a:	9903      	ldr	r1, [sp, #12]
 8005a4c:	1a5b      	subs	r3, r3, r1
 8005a4e:	42ab      	cmp	r3, r5
 8005a50:	dcf2      	bgt.n	8005a38 <_printf_i+0x220>
 8005a52:	e7eb      	b.n	8005a2c <_printf_i+0x214>
 8005a54:	2500      	movs	r5, #0
 8005a56:	f104 0619 	add.w	r6, r4, #25
 8005a5a:	e7f5      	b.n	8005a48 <_printf_i+0x230>
 8005a5c:	08005e5d 	.word	0x08005e5d
 8005a60:	08005e6e 	.word	0x08005e6e

08005a64 <memchr>:
 8005a64:	4603      	mov	r3, r0
 8005a66:	b510      	push	{r4, lr}
 8005a68:	b2c9      	uxtb	r1, r1
 8005a6a:	4402      	add	r2, r0
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	d101      	bne.n	8005a76 <memchr+0x12>
 8005a72:	2000      	movs	r0, #0
 8005a74:	e003      	b.n	8005a7e <memchr+0x1a>
 8005a76:	7804      	ldrb	r4, [r0, #0]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	428c      	cmp	r4, r1
 8005a7c:	d1f6      	bne.n	8005a6c <memchr+0x8>
 8005a7e:	bd10      	pop	{r4, pc}

08005a80 <memmove>:
 8005a80:	4288      	cmp	r0, r1
 8005a82:	b510      	push	{r4, lr}
 8005a84:	eb01 0402 	add.w	r4, r1, r2
 8005a88:	d902      	bls.n	8005a90 <memmove+0x10>
 8005a8a:	4284      	cmp	r4, r0
 8005a8c:	4623      	mov	r3, r4
 8005a8e:	d807      	bhi.n	8005aa0 <memmove+0x20>
 8005a90:	1e43      	subs	r3, r0, #1
 8005a92:	42a1      	cmp	r1, r4
 8005a94:	d008      	beq.n	8005aa8 <memmove+0x28>
 8005a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a9e:	e7f8      	b.n	8005a92 <memmove+0x12>
 8005aa0:	4601      	mov	r1, r0
 8005aa2:	4402      	add	r2, r0
 8005aa4:	428a      	cmp	r2, r1
 8005aa6:	d100      	bne.n	8005aaa <memmove+0x2a>
 8005aa8:	bd10      	pop	{r4, pc}
 8005aaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005aae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ab2:	e7f7      	b.n	8005aa4 <memmove+0x24>

08005ab4 <_free_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	2900      	cmp	r1, #0
 8005aba:	d040      	beq.n	8005b3e <_free_r+0x8a>
 8005abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ac0:	1f0c      	subs	r4, r1, #4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	bfb8      	it	lt
 8005ac6:	18e4      	addlt	r4, r4, r3
 8005ac8:	f000 f910 	bl	8005cec <__malloc_lock>
 8005acc:	4a1c      	ldr	r2, [pc, #112]	; (8005b40 <_free_r+0x8c>)
 8005ace:	6813      	ldr	r3, [r2, #0]
 8005ad0:	b933      	cbnz	r3, 8005ae0 <_free_r+0x2c>
 8005ad2:	6063      	str	r3, [r4, #4]
 8005ad4:	6014      	str	r4, [r2, #0]
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005adc:	f000 b90c 	b.w	8005cf8 <__malloc_unlock>
 8005ae0:	42a3      	cmp	r3, r4
 8005ae2:	d908      	bls.n	8005af6 <_free_r+0x42>
 8005ae4:	6820      	ldr	r0, [r4, #0]
 8005ae6:	1821      	adds	r1, r4, r0
 8005ae8:	428b      	cmp	r3, r1
 8005aea:	bf01      	itttt	eq
 8005aec:	6819      	ldreq	r1, [r3, #0]
 8005aee:	685b      	ldreq	r3, [r3, #4]
 8005af0:	1809      	addeq	r1, r1, r0
 8005af2:	6021      	streq	r1, [r4, #0]
 8005af4:	e7ed      	b.n	8005ad2 <_free_r+0x1e>
 8005af6:	461a      	mov	r2, r3
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	b10b      	cbz	r3, 8005b00 <_free_r+0x4c>
 8005afc:	42a3      	cmp	r3, r4
 8005afe:	d9fa      	bls.n	8005af6 <_free_r+0x42>
 8005b00:	6811      	ldr	r1, [r2, #0]
 8005b02:	1850      	adds	r0, r2, r1
 8005b04:	42a0      	cmp	r0, r4
 8005b06:	d10b      	bne.n	8005b20 <_free_r+0x6c>
 8005b08:	6820      	ldr	r0, [r4, #0]
 8005b0a:	4401      	add	r1, r0
 8005b0c:	1850      	adds	r0, r2, r1
 8005b0e:	4283      	cmp	r3, r0
 8005b10:	6011      	str	r1, [r2, #0]
 8005b12:	d1e0      	bne.n	8005ad6 <_free_r+0x22>
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4401      	add	r1, r0
 8005b1a:	6011      	str	r1, [r2, #0]
 8005b1c:	6053      	str	r3, [r2, #4]
 8005b1e:	e7da      	b.n	8005ad6 <_free_r+0x22>
 8005b20:	d902      	bls.n	8005b28 <_free_r+0x74>
 8005b22:	230c      	movs	r3, #12
 8005b24:	602b      	str	r3, [r5, #0]
 8005b26:	e7d6      	b.n	8005ad6 <_free_r+0x22>
 8005b28:	6820      	ldr	r0, [r4, #0]
 8005b2a:	1821      	adds	r1, r4, r0
 8005b2c:	428b      	cmp	r3, r1
 8005b2e:	bf01      	itttt	eq
 8005b30:	6819      	ldreq	r1, [r3, #0]
 8005b32:	685b      	ldreq	r3, [r3, #4]
 8005b34:	1809      	addeq	r1, r1, r0
 8005b36:	6021      	streq	r1, [r4, #0]
 8005b38:	6063      	str	r3, [r4, #4]
 8005b3a:	6054      	str	r4, [r2, #4]
 8005b3c:	e7cb      	b.n	8005ad6 <_free_r+0x22>
 8005b3e:	bd38      	pop	{r3, r4, r5, pc}
 8005b40:	20001188 	.word	0x20001188

08005b44 <sbrk_aligned>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	4e0e      	ldr	r6, [pc, #56]	; (8005b80 <sbrk_aligned+0x3c>)
 8005b48:	460c      	mov	r4, r1
 8005b4a:	6831      	ldr	r1, [r6, #0]
 8005b4c:	4605      	mov	r5, r0
 8005b4e:	b911      	cbnz	r1, 8005b56 <sbrk_aligned+0x12>
 8005b50:	f000 f8bc 	bl	8005ccc <_sbrk_r>
 8005b54:	6030      	str	r0, [r6, #0]
 8005b56:	4621      	mov	r1, r4
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f000 f8b7 	bl	8005ccc <_sbrk_r>
 8005b5e:	1c43      	adds	r3, r0, #1
 8005b60:	d00a      	beq.n	8005b78 <sbrk_aligned+0x34>
 8005b62:	1cc4      	adds	r4, r0, #3
 8005b64:	f024 0403 	bic.w	r4, r4, #3
 8005b68:	42a0      	cmp	r0, r4
 8005b6a:	d007      	beq.n	8005b7c <sbrk_aligned+0x38>
 8005b6c:	1a21      	subs	r1, r4, r0
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f000 f8ac 	bl	8005ccc <_sbrk_r>
 8005b74:	3001      	adds	r0, #1
 8005b76:	d101      	bne.n	8005b7c <sbrk_aligned+0x38>
 8005b78:	f04f 34ff 	mov.w	r4, #4294967295
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	2000118c 	.word	0x2000118c

08005b84 <_malloc_r>:
 8005b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b88:	1ccd      	adds	r5, r1, #3
 8005b8a:	f025 0503 	bic.w	r5, r5, #3
 8005b8e:	3508      	adds	r5, #8
 8005b90:	2d0c      	cmp	r5, #12
 8005b92:	bf38      	it	cc
 8005b94:	250c      	movcc	r5, #12
 8005b96:	2d00      	cmp	r5, #0
 8005b98:	4607      	mov	r7, r0
 8005b9a:	db01      	blt.n	8005ba0 <_malloc_r+0x1c>
 8005b9c:	42a9      	cmp	r1, r5
 8005b9e:	d905      	bls.n	8005bac <_malloc_r+0x28>
 8005ba0:	230c      	movs	r3, #12
 8005ba2:	2600      	movs	r6, #0
 8005ba4:	603b      	str	r3, [r7, #0]
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bac:	4e2e      	ldr	r6, [pc, #184]	; (8005c68 <_malloc_r+0xe4>)
 8005bae:	f000 f89d 	bl	8005cec <__malloc_lock>
 8005bb2:	6833      	ldr	r3, [r6, #0]
 8005bb4:	461c      	mov	r4, r3
 8005bb6:	bb34      	cbnz	r4, 8005c06 <_malloc_r+0x82>
 8005bb8:	4629      	mov	r1, r5
 8005bba:	4638      	mov	r0, r7
 8005bbc:	f7ff ffc2 	bl	8005b44 <sbrk_aligned>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	d14d      	bne.n	8005c62 <_malloc_r+0xde>
 8005bc6:	6834      	ldr	r4, [r6, #0]
 8005bc8:	4626      	mov	r6, r4
 8005bca:	2e00      	cmp	r6, #0
 8005bcc:	d140      	bne.n	8005c50 <_malloc_r+0xcc>
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	4631      	mov	r1, r6
 8005bd2:	4638      	mov	r0, r7
 8005bd4:	eb04 0803 	add.w	r8, r4, r3
 8005bd8:	f000 f878 	bl	8005ccc <_sbrk_r>
 8005bdc:	4580      	cmp	r8, r0
 8005bde:	d13a      	bne.n	8005c56 <_malloc_r+0xd2>
 8005be0:	6821      	ldr	r1, [r4, #0]
 8005be2:	3503      	adds	r5, #3
 8005be4:	1a6d      	subs	r5, r5, r1
 8005be6:	f025 0503 	bic.w	r5, r5, #3
 8005bea:	3508      	adds	r5, #8
 8005bec:	2d0c      	cmp	r5, #12
 8005bee:	bf38      	it	cc
 8005bf0:	250c      	movcc	r5, #12
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	f7ff ffa5 	bl	8005b44 <sbrk_aligned>
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d02b      	beq.n	8005c56 <_malloc_r+0xd2>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	442b      	add	r3, r5
 8005c02:	6023      	str	r3, [r4, #0]
 8005c04:	e00e      	b.n	8005c24 <_malloc_r+0xa0>
 8005c06:	6822      	ldr	r2, [r4, #0]
 8005c08:	1b52      	subs	r2, r2, r5
 8005c0a:	d41e      	bmi.n	8005c4a <_malloc_r+0xc6>
 8005c0c:	2a0b      	cmp	r2, #11
 8005c0e:	d916      	bls.n	8005c3e <_malloc_r+0xba>
 8005c10:	1961      	adds	r1, r4, r5
 8005c12:	42a3      	cmp	r3, r4
 8005c14:	6025      	str	r5, [r4, #0]
 8005c16:	bf18      	it	ne
 8005c18:	6059      	strne	r1, [r3, #4]
 8005c1a:	6863      	ldr	r3, [r4, #4]
 8005c1c:	bf08      	it	eq
 8005c1e:	6031      	streq	r1, [r6, #0]
 8005c20:	5162      	str	r2, [r4, r5]
 8005c22:	604b      	str	r3, [r1, #4]
 8005c24:	4638      	mov	r0, r7
 8005c26:	f104 060b 	add.w	r6, r4, #11
 8005c2a:	f000 f865 	bl	8005cf8 <__malloc_unlock>
 8005c2e:	f026 0607 	bic.w	r6, r6, #7
 8005c32:	1d23      	adds	r3, r4, #4
 8005c34:	1af2      	subs	r2, r6, r3
 8005c36:	d0b6      	beq.n	8005ba6 <_malloc_r+0x22>
 8005c38:	1b9b      	subs	r3, r3, r6
 8005c3a:	50a3      	str	r3, [r4, r2]
 8005c3c:	e7b3      	b.n	8005ba6 <_malloc_r+0x22>
 8005c3e:	6862      	ldr	r2, [r4, #4]
 8005c40:	42a3      	cmp	r3, r4
 8005c42:	bf0c      	ite	eq
 8005c44:	6032      	streq	r2, [r6, #0]
 8005c46:	605a      	strne	r2, [r3, #4]
 8005c48:	e7ec      	b.n	8005c24 <_malloc_r+0xa0>
 8005c4a:	4623      	mov	r3, r4
 8005c4c:	6864      	ldr	r4, [r4, #4]
 8005c4e:	e7b2      	b.n	8005bb6 <_malloc_r+0x32>
 8005c50:	4634      	mov	r4, r6
 8005c52:	6876      	ldr	r6, [r6, #4]
 8005c54:	e7b9      	b.n	8005bca <_malloc_r+0x46>
 8005c56:	230c      	movs	r3, #12
 8005c58:	4638      	mov	r0, r7
 8005c5a:	603b      	str	r3, [r7, #0]
 8005c5c:	f000 f84c 	bl	8005cf8 <__malloc_unlock>
 8005c60:	e7a1      	b.n	8005ba6 <_malloc_r+0x22>
 8005c62:	6025      	str	r5, [r4, #0]
 8005c64:	e7de      	b.n	8005c24 <_malloc_r+0xa0>
 8005c66:	bf00      	nop
 8005c68:	20001188 	.word	0x20001188

08005c6c <_realloc_r>:
 8005c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c70:	4680      	mov	r8, r0
 8005c72:	4614      	mov	r4, r2
 8005c74:	460e      	mov	r6, r1
 8005c76:	b921      	cbnz	r1, 8005c82 <_realloc_r+0x16>
 8005c78:	4611      	mov	r1, r2
 8005c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c7e:	f7ff bf81 	b.w	8005b84 <_malloc_r>
 8005c82:	b92a      	cbnz	r2, 8005c90 <_realloc_r+0x24>
 8005c84:	f7ff ff16 	bl	8005ab4 <_free_r>
 8005c88:	4625      	mov	r5, r4
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c90:	f000 f838 	bl	8005d04 <_malloc_usable_size_r>
 8005c94:	4284      	cmp	r4, r0
 8005c96:	4607      	mov	r7, r0
 8005c98:	d802      	bhi.n	8005ca0 <_realloc_r+0x34>
 8005c9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c9e:	d812      	bhi.n	8005cc6 <_realloc_r+0x5a>
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	f7ff ff6e 	bl	8005b84 <_malloc_r>
 8005ca8:	4605      	mov	r5, r0
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d0ed      	beq.n	8005c8a <_realloc_r+0x1e>
 8005cae:	42bc      	cmp	r4, r7
 8005cb0:	4622      	mov	r2, r4
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	bf28      	it	cs
 8005cb6:	463a      	movcs	r2, r7
 8005cb8:	f7ff fbac 	bl	8005414 <memcpy>
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	4640      	mov	r0, r8
 8005cc0:	f7ff fef8 	bl	8005ab4 <_free_r>
 8005cc4:	e7e1      	b.n	8005c8a <_realloc_r+0x1e>
 8005cc6:	4635      	mov	r5, r6
 8005cc8:	e7df      	b.n	8005c8a <_realloc_r+0x1e>
	...

08005ccc <_sbrk_r>:
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	2300      	movs	r3, #0
 8005cd0:	4d05      	ldr	r5, [pc, #20]	; (8005ce8 <_sbrk_r+0x1c>)
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	4608      	mov	r0, r1
 8005cd6:	602b      	str	r3, [r5, #0]
 8005cd8:	f7fb ff6a 	bl	8001bb0 <_sbrk>
 8005cdc:	1c43      	adds	r3, r0, #1
 8005cde:	d102      	bne.n	8005ce6 <_sbrk_r+0x1a>
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	b103      	cbz	r3, 8005ce6 <_sbrk_r+0x1a>
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	bd38      	pop	{r3, r4, r5, pc}
 8005ce8:	20001190 	.word	0x20001190

08005cec <__malloc_lock>:
 8005cec:	4801      	ldr	r0, [pc, #4]	; (8005cf4 <__malloc_lock+0x8>)
 8005cee:	f000 b811 	b.w	8005d14 <__retarget_lock_acquire_recursive>
 8005cf2:	bf00      	nop
 8005cf4:	20001194 	.word	0x20001194

08005cf8 <__malloc_unlock>:
 8005cf8:	4801      	ldr	r0, [pc, #4]	; (8005d00 <__malloc_unlock+0x8>)
 8005cfa:	f000 b80c 	b.w	8005d16 <__retarget_lock_release_recursive>
 8005cfe:	bf00      	nop
 8005d00:	20001194 	.word	0x20001194

08005d04 <_malloc_usable_size_r>:
 8005d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d08:	1f18      	subs	r0, r3, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	bfbc      	itt	lt
 8005d0e:	580b      	ldrlt	r3, [r1, r0]
 8005d10:	18c0      	addlt	r0, r0, r3
 8005d12:	4770      	bx	lr

08005d14 <__retarget_lock_acquire_recursive>:
 8005d14:	4770      	bx	lr

08005d16 <__retarget_lock_release_recursive>:
 8005d16:	4770      	bx	lr

08005d18 <_init>:
 8005d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1a:	bf00      	nop
 8005d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1e:	bc08      	pop	{r3}
 8005d20:	469e      	mov	lr, r3
 8005d22:	4770      	bx	lr

08005d24 <_fini>:
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d26:	bf00      	nop
 8005d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2a:	bc08      	pop	{r3}
 8005d2c:	469e      	mov	lr, r3
 8005d2e:	4770      	bx	lr
