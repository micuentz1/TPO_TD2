
LCDconSENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08005c00  08005c00  00015c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d10  08005d10  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08005d10  08005d10  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d10  08005d10  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d14  08005d14  00015d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000084  08005d9c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08005d9c  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a754  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ecf  00000000  00000000  0002a801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002c6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0002d248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e11  00000000  00000000  0002dd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cefb  00000000  00000000  00045b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d35  00000000  00000000  00052a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8761  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037ac  00000000  00000000  000d87b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	08005be4 	.word	0x08005be4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	08005be4 	.word	0x08005be4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	3c01      	subs	r4, #1
 80002a0:	bf28      	it	cs
 80002a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a6:	d2e9      	bcs.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__gedf2>:
 8000900:	f04f 3cff 	mov.w	ip, #4294967295
 8000904:	e006      	b.n	8000914 <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__ledf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	e002      	b.n	8000914 <__cmpdf2+0x4>
 800090e:	bf00      	nop

08000910 <__cmpdf2>:
 8000910:	f04f 0c01 	mov.w	ip, #1
 8000914:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000918:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800091c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800092a:	d01b      	beq.n	8000964 <__cmpdf2+0x54>
 800092c:	b001      	add	sp, #4
 800092e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000932:	bf0c      	ite	eq
 8000934:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000938:	ea91 0f03 	teqne	r1, r3
 800093c:	bf02      	ittt	eq
 800093e:	ea90 0f02 	teqeq	r0, r2
 8000942:	2000      	moveq	r0, #0
 8000944:	4770      	bxeq	lr
 8000946:	f110 0f00 	cmn.w	r0, #0
 800094a:	ea91 0f03 	teq	r1, r3
 800094e:	bf58      	it	pl
 8000950:	4299      	cmppl	r1, r3
 8000952:	bf08      	it	eq
 8000954:	4290      	cmpeq	r0, r2
 8000956:	bf2c      	ite	cs
 8000958:	17d8      	asrcs	r0, r3, #31
 800095a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095e:	f040 0001 	orr.w	r0, r0, #1
 8000962:	4770      	bx	lr
 8000964:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800096c:	d102      	bne.n	8000974 <__cmpdf2+0x64>
 800096e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000972:	d107      	bne.n	8000984 <__cmpdf2+0x74>
 8000974:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d1d6      	bne.n	800092c <__cmpdf2+0x1c>
 800097e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000982:	d0d3      	beq.n	800092c <__cmpdf2+0x1c>
 8000984:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_cdrcmple>:
 800098c:	4684      	mov	ip, r0
 800098e:	4610      	mov	r0, r2
 8000990:	4662      	mov	r2, ip
 8000992:	468c      	mov	ip, r1
 8000994:	4619      	mov	r1, r3
 8000996:	4663      	mov	r3, ip
 8000998:	e000      	b.n	800099c <__aeabi_cdcmpeq>
 800099a:	bf00      	nop

0800099c <__aeabi_cdcmpeq>:
 800099c:	b501      	push	{r0, lr}
 800099e:	f7ff ffb7 	bl	8000910 <__cmpdf2>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	bf48      	it	mi
 80009a6:	f110 0f00 	cmnmi.w	r0, #0
 80009aa:	bd01      	pop	{r0, pc}

080009ac <__aeabi_dcmpeq>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff fff4 	bl	800099c <__aeabi_cdcmpeq>
 80009b4:	bf0c      	ite	eq
 80009b6:	2001      	moveq	r0, #1
 80009b8:	2000      	movne	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmplt>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffea 	bl	800099c <__aeabi_cdcmpeq>
 80009c8:	bf34      	ite	cc
 80009ca:	2001      	movcc	r0, #1
 80009cc:	2000      	movcs	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmple>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffe0 	bl	800099c <__aeabi_cdcmpeq>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpge>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffce 	bl	800098c <__aeabi_cdrcmple>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpgt>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffc4 	bl	800098c <__aeabi_cdrcmple>
 8000a04:	bf34      	ite	cc
 8000a06:	2001      	movcc	r0, #1
 8000a08:	2000      	movcs	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpun>:
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__aeabi_dcmpun+0x10>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d10a      	bne.n	8000a36 <__aeabi_dcmpun+0x26>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x20>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_dcmpun+0x26>
 8000a30:	f04f 0000 	mov.w	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0001 	mov.w	r0, #1
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_frsub>:
 8000adc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ae0:	e002      	b.n	8000ae8 <__addsf3>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_fsub>:
 8000ae4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae8 <__addsf3>:
 8000ae8:	0042      	lsls	r2, r0, #1
 8000aea:	bf1f      	itttt	ne
 8000aec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af0:	ea92 0f03 	teqne	r2, r3
 8000af4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afc:	d06a      	beq.n	8000bd4 <__addsf3+0xec>
 8000afe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b06:	bfc1      	itttt	gt
 8000b08:	18d2      	addgt	r2, r2, r3
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	4048      	eorgt	r0, r1
 8000b0e:	4041      	eorgt	r1, r0
 8000b10:	bfb8      	it	lt
 8000b12:	425b      	neglt	r3, r3
 8000b14:	2b19      	cmp	r3, #25
 8000b16:	bf88      	it	hi
 8000b18:	4770      	bxhi	lr
 8000b1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4240      	negne	r0, r0
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4249      	negne	r1, r1
 8000b3a:	ea92 0f03 	teq	r2, r3
 8000b3e:	d03f      	beq.n	8000bc0 <__addsf3+0xd8>
 8000b40:	f1a2 0201 	sub.w	r2, r2, #1
 8000b44:	fa41 fc03 	asr.w	ip, r1, r3
 8000b48:	eb10 000c 	adds.w	r0, r0, ip
 8000b4c:	f1c3 0320 	rsb	r3, r3, #32
 8000b50:	fa01 f103 	lsl.w	r1, r1, r3
 8000b54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__addsf3+0x78>
 8000b5a:	4249      	negs	r1, r1
 8000b5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b64:	d313      	bcc.n	8000b8e <__addsf3+0xa6>
 8000b66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b6a:	d306      	bcc.n	8000b7a <__addsf3+0x92>
 8000b6c:	0840      	lsrs	r0, r0, #1
 8000b6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b72:	f102 0201 	add.w	r2, r2, #1
 8000b76:	2afe      	cmp	r2, #254	; 0xfe
 8000b78:	d251      	bcs.n	8000c1e <__addsf3+0x136>
 8000b7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b82:	bf08      	it	eq
 8000b84:	f020 0001 	biceq.w	r0, r0, #1
 8000b88:	ea40 0003 	orr.w	r0, r0, r3
 8000b8c:	4770      	bx	lr
 8000b8e:	0049      	lsls	r1, r1, #1
 8000b90:	eb40 0000 	adc.w	r0, r0, r0
 8000b94:	3a01      	subs	r2, #1
 8000b96:	bf28      	it	cs
 8000b98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b9c:	d2ed      	bcs.n	8000b7a <__addsf3+0x92>
 8000b9e:	fab0 fc80 	clz	ip, r0
 8000ba2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba6:	ebb2 020c 	subs.w	r2, r2, ip
 8000baa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bae:	bfaa      	itet	ge
 8000bb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb4:	4252      	neglt	r2, r2
 8000bb6:	4318      	orrge	r0, r3
 8000bb8:	bfbc      	itt	lt
 8000bba:	40d0      	lsrlt	r0, r2
 8000bbc:	4318      	orrlt	r0, r3
 8000bbe:	4770      	bx	lr
 8000bc0:	f092 0f00 	teq	r2, #0
 8000bc4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc8:	bf06      	itte	eq
 8000bca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bce:	3201      	addeq	r2, #1
 8000bd0:	3b01      	subne	r3, #1
 8000bd2:	e7b5      	b.n	8000b40 <__addsf3+0x58>
 8000bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bdc:	bf18      	it	ne
 8000bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be2:	d021      	beq.n	8000c28 <__addsf3+0x140>
 8000be4:	ea92 0f03 	teq	r2, r3
 8000be8:	d004      	beq.n	8000bf4 <__addsf3+0x10c>
 8000bea:	f092 0f00 	teq	r2, #0
 8000bee:	bf08      	it	eq
 8000bf0:	4608      	moveq	r0, r1
 8000bf2:	4770      	bx	lr
 8000bf4:	ea90 0f01 	teq	r0, r1
 8000bf8:	bf1c      	itt	ne
 8000bfa:	2000      	movne	r0, #0
 8000bfc:	4770      	bxne	lr
 8000bfe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c02:	d104      	bne.n	8000c0e <__addsf3+0x126>
 8000c04:	0040      	lsls	r0, r0, #1
 8000c06:	bf28      	it	cs
 8000c08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c0c:	4770      	bx	lr
 8000c0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c12:	bf3c      	itt	cc
 8000c14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bxcc	lr
 8000c1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	4770      	bx	lr
 8000c28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c2c:	bf16      	itet	ne
 8000c2e:	4608      	movne	r0, r1
 8000c30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c34:	4601      	movne	r1, r0
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	bf06      	itte	eq
 8000c3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3e:	ea90 0f01 	teqeq	r0, r1
 8000c42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_ui2f>:
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e004      	b.n	8000c58 <__aeabi_i2f+0x8>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_i2f>:
 8000c50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	bf48      	it	mi
 8000c56:	4240      	negmi	r0, r0
 8000c58:	ea5f 0c00 	movs.w	ip, r0
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c64:	4601      	mov	r1, r0
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	e01c      	b.n	8000ca6 <__aeabi_l2f+0x2a>

08000c6c <__aeabi_ul2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e00a      	b.n	8000c90 <__aeabi_l2f+0x14>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_l2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c88:	d502      	bpl.n	8000c90 <__aeabi_l2f+0x14>
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	ea5f 0c01 	movs.w	ip, r1
 8000c94:	bf02      	ittt	eq
 8000c96:	4684      	moveq	ip, r0
 8000c98:	4601      	moveq	r1, r0
 8000c9a:	2000      	moveq	r0, #0
 8000c9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ca0:	bf08      	it	eq
 8000ca2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000caa:	fabc f28c 	clz	r2, ip
 8000cae:	3a08      	subs	r2, #8
 8000cb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb4:	db10      	blt.n	8000cd8 <__aeabi_l2f+0x5c>
 8000cb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cba:	4463      	add	r3, ip
 8000cbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f102 0220 	add.w	r2, r2, #32
 8000cdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_fmul>:
 8000cf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d00:	bf1e      	ittt	ne
 8000d02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d06:	ea92 0f0c 	teqne	r2, ip
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d06f      	beq.n	8000df0 <__aeabi_fmul+0xf8>
 8000d10:	441a      	add	r2, r3
 8000d12:	ea80 0c01 	eor.w	ip, r0, r1
 8000d16:	0240      	lsls	r0, r0, #9
 8000d18:	bf18      	it	ne
 8000d1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1e:	d01e      	beq.n	8000d5e <__aeabi_fmul+0x66>
 8000d20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d38:	bf3e      	ittt	cc
 8000d3a:	0049      	lslcc	r1, r1, #1
 8000d3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d40:	005b      	lslcc	r3, r3, #1
 8000d42:	ea40 0001 	orr.w	r0, r0, r1
 8000d46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d4a:	2afd      	cmp	r2, #253	; 0xfd
 8000d4c:	d81d      	bhi.n	8000d8a <__aeabi_fmul+0x92>
 8000d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d56:	bf08      	it	eq
 8000d58:	f020 0001 	biceq.w	r0, r0, #1
 8000d5c:	4770      	bx	lr
 8000d5e:	f090 0f00 	teq	r0, #0
 8000d62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d66:	bf08      	it	eq
 8000d68:	0249      	lsleq	r1, r1, #9
 8000d6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d72:	3a7f      	subs	r2, #127	; 0x7f
 8000d74:	bfc2      	ittt	gt
 8000d76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7e:	4770      	bxgt	lr
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	dc5d      	bgt.n	8000e48 <__aeabi_fmul+0x150>
 8000d8c:	f112 0f19 	cmn.w	r2, #25
 8000d90:	bfdc      	itt	le
 8000d92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d96:	4770      	bxle	lr
 8000d98:	f1c2 0200 	rsb	r2, r2, #0
 8000d9c:	0041      	lsls	r1, r0, #1
 8000d9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000da2:	f1c2 0220 	rsb	r2, r2, #32
 8000da6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000daa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dae:	f140 0000 	adc.w	r0, r0, #0
 8000db2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db6:	bf08      	it	eq
 8000db8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbc:	4770      	bx	lr
 8000dbe:	f092 0f00 	teq	r2, #0
 8000dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0040      	lsleq	r0, r0, #1
 8000dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dce:	3a01      	subeq	r2, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xce>
 8000dd2:	ea40 000c 	orr.w	r0, r0, ip
 8000dd6:	f093 0f00 	teq	r3, #0
 8000dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0049      	lsleq	r1, r1, #1
 8000de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de6:	3b01      	subeq	r3, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fmul+0xe6>
 8000dea:	ea41 010c 	orr.w	r1, r1, ip
 8000dee:	e78f      	b.n	8000d10 <__aeabi_fmul+0x18>
 8000df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df4:	ea92 0f0c 	teq	r2, ip
 8000df8:	bf18      	it	ne
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d00a      	beq.n	8000e16 <__aeabi_fmul+0x11e>
 8000e00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e04:	bf18      	it	ne
 8000e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	d1d8      	bne.n	8000dbe <__aeabi_fmul+0xc6>
 8000e0c:	ea80 0001 	eor.w	r0, r0, r1
 8000e10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f090 0f00 	teq	r0, #0
 8000e1a:	bf17      	itett	ne
 8000e1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e20:	4608      	moveq	r0, r1
 8000e22:	f091 0f00 	teqne	r1, #0
 8000e26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e2a:	d014      	beq.n	8000e56 <__aeabi_fmul+0x15e>
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	d101      	bne.n	8000e36 <__aeabi_fmul+0x13e>
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	d10f      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e36:	ea93 0f0c 	teq	r3, ip
 8000e3a:	d103      	bne.n	8000e44 <__aeabi_fmul+0x14c>
 8000e3c:	024b      	lsls	r3, r1, #9
 8000e3e:	bf18      	it	ne
 8000e40:	4608      	movne	r0, r1
 8000e42:	d108      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	4770      	bx	lr
 8000e56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5e:	4770      	bx	lr

08000e60 <__aeabi_fdiv>:
 8000e60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e68:	bf1e      	ittt	ne
 8000e6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6e:	ea92 0f0c 	teqne	r2, ip
 8000e72:	ea93 0f0c 	teqne	r3, ip
 8000e76:	d069      	beq.n	8000f4c <__aeabi_fdiv+0xec>
 8000e78:	eba2 0203 	sub.w	r2, r2, r3
 8000e7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e86:	d037      	beq.n	8000ef8 <__aeabi_fdiv+0x98>
 8000e88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	bf38      	it	cc
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ea2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	bf24      	itt	cs
 8000eaa:	1a5b      	subcs	r3, r3, r1
 8000eac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ebe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ec2:	bf24      	itt	cs
 8000ec4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ecc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ed0:	bf24      	itt	cs
 8000ed2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	bf18      	it	ne
 8000ede:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ee2:	d1e0      	bne.n	8000ea6 <__aeabi_fdiv+0x46>
 8000ee4:	2afd      	cmp	r2, #253	; 0xfd
 8000ee6:	f63f af50 	bhi.w	8000d8a <__aeabi_fmul+0x92>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ef0:	bf08      	it	eq
 8000ef2:	f020 0001 	biceq.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000efc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f00:	327f      	adds	r2, #127	; 0x7f
 8000f02:	bfc2      	ittt	gt
 8000f04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f0c:	4770      	bxgt	lr
 8000f0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	3a01      	subs	r2, #1
 8000f18:	e737      	b.n	8000d8a <__aeabi_fmul+0x92>
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xc2>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fdiv+0xda>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e795      	b.n	8000e78 <__aeabi_fdiv+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d108      	bne.n	8000f68 <__aeabi_fdiv+0x108>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	f47f af7d 	bne.w	8000e56 <__aeabi_fmul+0x15e>
 8000f5c:	ea93 0f0c 	teq	r3, ip
 8000f60:	f47f af70 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f64:	4608      	mov	r0, r1
 8000f66:	e776      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	d104      	bne.n	8000f78 <__aeabi_fdiv+0x118>
 8000f6e:	024b      	lsls	r3, r1, #9
 8000f70:	f43f af4c 	beq.w	8000e0c <__aeabi_fmul+0x114>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e76e      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f7c:	bf18      	it	ne
 8000f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	d1ca      	bne.n	8000f1a <__aeabi_fdiv+0xba>
 8000f84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f88:	f47f af5c 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f90:	f47f af3c 	bne.w	8000e0c <__aeabi_fmul+0x114>
 8000f94:	e75f      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f96:	bf00      	nop

08000f98 <__aeabi_f2iz>:
 8000f98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa0:	d30f      	bcc.n	8000fc2 <__aeabi_f2iz+0x2a>
 8000fa2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000faa:	d90d      	bls.n	8000fc8 <__aeabi_f2iz+0x30>
 8000fac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fb8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fbc:	bf18      	it	ne
 8000fbe:	4240      	negne	r0, r0
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	4770      	bx	lr
 8000fc8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fcc:	d101      	bne.n	8000fd2 <__aeabi_f2iz+0x3a>
 8000fce:	0242      	lsls	r2, r0, #9
 8000fd0:	d105      	bne.n	8000fde <__aeabi_f2iz+0x46>
 8000fd2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fd6:	bf08      	it	eq
 8000fd8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fdc:	4770      	bx	lr
 8000fde:	f04f 0000 	mov.w	r0, #0
 8000fe2:	4770      	bx	lr

08000fe4 <USART_ReceiveData>:


char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ff6:	b29b      	uxth	r3, r3
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	460b      	mov	r3, r1
 800100c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	605a      	str	r2, [r3, #4]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
	...

08001024 <usart_setup>:


uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <usart_setup+0x60>)
 800102e:	4a16      	ldr	r2, [pc, #88]	; (8001088 <usart_setup+0x64>)
 8001030:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 8001032:	4a14      	ldr	r2, [pc, #80]	; (8001084 <usart_setup+0x60>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <usart_setup+0x60>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <usart_setup+0x60>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <usart_setup+0x60>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <usart_setup+0x60>)
 800104c:	220c      	movs	r2, #12
 800104e:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <usart_setup+0x60>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <usart_setup+0x60>)
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <usart_setup+0x60>)
 800105e:	f002 fe2f 	bl	8003cc0 <HAL_HalfDuplex_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d000      	beq.n	800106a <usart_setup+0x46>
	{
		//	    Error_Handler();
		__asm__("NOP");
 8001068:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <usart_setup+0x60>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <usart_setup+0x60>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0220 	orr.w	r2, r2, #32
 8001078:	60da      	str	r2, [r3, #12]
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000158 	.word	0x20000158
 8001088:	40013800 	.word	0x40013800

0800108c <owInit>:

void owInit(OneWire *ow) {
 800108c:	b480      	push	{r7}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 800109c:	e015      	b.n	80010ca <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];      
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
    k=0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 80010ac:	e007      	b.n	80010be <owInit+0x32>
    r[k] = 0;
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	3301      	adds	r3, #1
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	2b07      	cmp	r3, #7
 80010c2:	ddf4      	ble.n	80010ae <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	3301      	adds	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	dde6      	ble.n	800109e <owInit+0x12>
  }
  k=0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 80010d4:	e008      	b.n	80010e8 <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4413      	add	r3, r2
 80010dc:	330c      	adds	r3, #12
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	3301      	adds	r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	ddf3      	ble.n	80010d6 <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2240      	movs	r2, #64	; 0x40
 80010f2:	609a      	str	r2, [r3, #8]

}
 80010f4:	bf00      	nop
 80010f6:	371c      	adds	r7, #28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
	...

08001100 <owReadHandler>:

void owReadHandler() { //обработчик прерыания USART
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 8001106:	f000 f850 	bl	80011aa <getUsartIndex>
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  /* Проверяем, что мы вызвали прерывание из-за RXNE. */
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <owReadHandler+0x70>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f003 0320 	and.w	r3, r3, #32
 8001116:	2b00      	cmp	r3, #0
 8001118:	d025      	beq.n	8001166 <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <owReadHandler+0x70>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8001122:	2b00      	cmp	r3, #0
 8001124:	d01f      	beq.n	8001166 <owReadHandler+0x66>

    /* Получаем данные из периферии и сбрасываем флаг*/
		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 8001126:	bf00      	nop
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <owReadHandler+0x70>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0320 	and.w	r3, r3, #32
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f9      	beq.n	8001128 <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);              
 8001134:	79fc      	ldrb	r4, [r7, #7]
 8001136:	480e      	ldr	r0, [pc, #56]	; (8001170 <owReadHandler+0x70>)
 8001138:	f7ff ff54 	bl	8000fe4 <USART_ReceiveData>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <owReadHandler+0x74>)
 8001142:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);//сбрасываем флаг ответ получен после 
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2201      	movs	r2, #1
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	b25b      	sxtb	r3, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	b25a      	sxtb	r2, r3
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <owReadHandler+0x78>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	b25b      	sxtb	r3, r3
 800115c:	4013      	ands	r3, r2
 800115e:	b25b      	sxtb	r3, r3
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b05      	ldr	r3, [pc, #20]	; (8001178 <owReadHandler+0x78>)
 8001164:	701a      	strb	r2, [r3, #0]
  }
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bd90      	pop	{r4, r7, pc}
 800116e:	bf00      	nop
 8001170:	40013800 	.word	0x40013800
 8001174:	200000a4 	.word	0x200000a4
 8001178:	200000a0 	.word	0x200000a0

0800117c <owResetCmd>:
 *
 * @param N usart -- выбранный для реализации 1wire usart
 * @return Возвращает 1 если на шине кто-то есть и 0 в противном случае
 */

  uint16_t owResetCmd() {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
	uint16_t owPresence;
	
	usart_setup(9600);
 8001182:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001186:	f7ff ff4d 	bl	8001024 <usart_setup>

  owSend(0xF0); // Send RESET отправляем импуль сброса
 800118a:	20f0      	movs	r0, #240	; 0xf0
 800118c:	f000 f814 	bl	80011b8 <owSend>
  owPresence = owEchoRead(); // Ждём PRESENCE на шине и вовзращаем, что есть
 8001190:	f000 f850 	bl	8001234 <owEchoRead>
 8001194:	4603      	mov	r3, r0
 8001196:	80fb      	strh	r3, [r7, #6]

	usart_setup(115200);// перенастраиваем скорость UART
 8001198:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800119c:	f7ff ff42 	bl	8001024 <usart_setup>
  return owPresence;
 80011a0:	88fb      	ldrh	r3, [r7, #6]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <getUsartIndex>:

uint8_t getUsartIndex() {// смотрит по номеру UART c каким будет идти работа
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <owSend>:

void owSend(uint16_t data) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());//устанавливаем флаг если попадем в обработчик прерывания там он сбросится
 80011c2:	f7ff fff2 	bl	80011aa <getUsartIndex>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	2301      	movs	r3, #1
 80011cc:	4093      	lsls	r3, r2
 80011ce:	b25a      	sxtb	r2, r3
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <owSend+0x50>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <owSend+0x50>)
 80011e0:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);//отправляем данные
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	4619      	mov	r1, r3
 80011e6:	4809      	ldr	r0, [pc, #36]	; (800120c <owSend+0x54>)
 80011e8:	f7ff ff0b 	bl	8001002 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);//ждем пока передача закончится
 80011ec:	bf00      	nop
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <owSend+0x58>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f8:	2b40      	cmp	r3, #64	; 0x40
 80011fa:	d1f8      	bne.n	80011ee <owSend+0x36>
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200000a0 	.word	0x200000a0
 800120c:	40013800 	.word	0x40013800
 8001210:	20000158 	.word	0x20000158

08001214 <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {//читаем у нас пришла единица или ноль в ответ
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0; //если пришло 0xFF, то бит = 1, что то другое бит = 0
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	2bff      	cmp	r3, #255	; 0xff
 8001222:	bf0c      	ite	eq
 8001224:	2301      	moveq	r3, #1
 8001226:	2300      	movne	r3, #0
 8001228:	b2db      	uxtb	r3, r3
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <owEchoRead>:

uint16_t owEchoRead() {//
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();//получаем номер USART
 800123a:	f7ff ffb6 	bl	80011aa <getUsartIndex>
 800123e:	4603      	mov	r3, r0
 8001240:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);// ждем пока кто-то не ответит но не больше паузы
 8001248:	bf00      	nop
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <owEchoRead+0x48>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	797b      	ldrb	r3, [r7, #5]
 8001254:	fa42 f303 	asr.w	r3, r2, r3
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <owEchoRead+0x36>
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	1e5a      	subs	r2, r3, #1
 8001264:	80fa      	strh	r2, [r7, #6]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1ef      	bne.n	800124a <owEchoRead+0x16>
  return rc_buffer[i];//в зависимости от используемого номера UART 
 800126a:	797b      	ldrb	r3, [r7, #5]
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <owEchoRead+0x4c>)
 800126e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001272:	b29b      	uxth	r3, r3
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200000a0 	.word	0x200000a0
 8001280:	200000a4 	.word	0x200000a4

08001284 <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {//разлагаем 1 байт на 8 байт ,кодируем так скасказать в посылку для 1wire
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e014      	b.n	80012c0 <byteToBits+0x3c>
    if (ow_byte & 0x01) {//если текущий бит в байте ==1 то
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <byteToBits+0x24>
      *bits = WIRE_1; //заменяем на число которое при передаче по USART для 1wire будет единцией t.e 0xFF
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	22ff      	movs	r2, #255	; 0xff
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	e002      	b.n	80012ae <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;// тоже самое только для 0
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1; //сдвигаем обработанный бит
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	085b      	lsrs	r3, r3, #1
 80012b8:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	3301      	adds	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b07      	cmp	r3, #7
 80012c4:	d9e7      	bls.n	8001296 <byteToBits+0x12>
  }
  return bits; //возвращае массив для передачи 
 80012c6:	683b      	ldr	r3, [r7, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <owSendByte>:
/**
 * Метод пересылает последовательно 8 байт по одному на каждый бит в data
 * @param usart -- выбранный для эмуляции 1wire UART
 * @param d -- данные
 */
void owSendByte(uint8_t d) {
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);//преобразовываем байт в биты "массив байт для  передачи UART и эмуляции 1WIRE"
 80012dc:	f107 020c 	add.w	r2, r7, #12
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ffcd 	bl	8001284 <byteToBits>
  for (i = 0; i < 8; ++i) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	e00b      	b.n	8001308 <owSendByte+0x36>
    owSend(data[i]);
 80012f0:	f107 020c 	add.w	r2, r7, #12
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	4413      	add	r3, r2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff5b 	bl	80011b8 <owSend>
  for (i = 0; i < 8; ++i) {
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2b07      	cmp	r3, #7
 800130c:	ddf0      	ble.n	80012f0 <owSendByte+0x1e>
  }
}
 800130e:	bf00      	nop
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <owCRC>:
  }
  return target_byte; //возвращаем полученный байт
}

/* Подсчет CRC8 массива mas длиной Len */
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	733b      	strb	r3, [r7, #12]
  crc = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 800132c:	7b3b      	ldrb	r3, [r7, #12]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	e018      	b.n	800136e <owCRC+0x56>
      fb = crc ^ dat;
 800133c:	7b7a      	ldrb	r2, [r7, #13]
 800133e:	7bbb      	ldrb	r3, [r7, #14]
 8001340:	4053      	eors	r3, r2
 8001342:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 8001344:	7afb      	ldrb	r3, [r7, #11]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 800134c:	7b7b      	ldrb	r3, [r7, #13]
 800134e:	085b      	lsrs	r3, r3, #1
 8001350:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 8001352:	7bbb      	ldrb	r3, [r7, #14]
 8001354:	085b      	lsrs	r3, r3, #1
 8001356:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c; // полином
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d104      	bne.n	8001368 <owCRC+0x50>
 800135e:	7b7b      	ldrb	r3, [r7, #13]
 8001360:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001364:	43db      	mvns	r3, r3
 8001366:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	3301      	adds	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	2b07      	cmp	r3, #7
 8001372:	d9e3      	bls.n	800133c <owCRC+0x24>
    }
    st_byt++;
 8001374:	7b3b      	ldrb	r3, [r7, #12]
 8001376:	3301      	adds	r3, #1
 8001378:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len); // счетчик байтов в массиве
 800137a:	7b3a      	ldrb	r2, [r7, #12]
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	429a      	cmp	r2, r3
 8001380:	d3d4      	bcc.n	800132c <owCRC+0x14>
  return crc;
 8001382:	7b7b      	ldrb	r3, [r7, #13]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);                        
 8001396:	2107      	movs	r1, #7
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ffbd 	bl	8001318 <owCRC>
 800139e:	4603      	mov	r3, r0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <hasNextRom>:
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 * переделать на функции обратного вызова для реакции на ошибки
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {//
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) { //есть ли кто на шине
 80013c0:	f7ff fedc 	bl	800117c <owResetCmd>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2bf0      	cmp	r3, #240	; 0xf0
 80013c8:	d101      	bne.n	80013ce <hasNextRom+0x26>
    return 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e097      	b.n	80014fe <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);//
 80013ce:	20f0      	movs	r0, #240	; 0xf0
 80013d0:	f7ff ff7f 	bl	80012d2 <owSendByte>
  do {
		uint8_t answerBit =0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 80013d8:	7ffb      	ldrb	r3, [r7, #31]
 80013da:	08db      	lsrs	r3, r3, #3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	4413      	add	r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ); // чтение прямого бита
 80013ec:	20ff      	movs	r0, #255	; 0xff
 80013ee:	f7ff fee3 	bl	80011b8 <owSend>
    cB = owReadSlot(owEchoRead());//ответ от датчика
 80013f2:	f7ff ff1f 	bl	8001234 <owEchoRead>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff0b 	bl	8001214 <owReadSlot>
 80013fe:	4603      	mov	r3, r0
 8001400:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ); // чтение инверсного бита
 8001402:	20ff      	movs	r0, #255	; 0xff
 8001404:	f7ff fed8 	bl	80011b8 <owSend>
    cmp_cB = owReadSlot(owEchoRead());//ответ от датчика
 8001408:	f7ff ff14 	bl	8001234 <owEchoRead>
 800140c:	4603      	mov	r3, r0
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff00 	bl	8001214 <owReadSlot>
 8001414:	4603      	mov	r3, r0
 8001416:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)//сравниваем два ответа
 8001418:	7afa      	ldrb	r2, [r7, #11]
 800141a:	7abb      	ldrb	r3, [r7, #10]
 800141c:	429a      	cmp	r2, r3
 800141e:	d105      	bne.n	800142c <hasNextRom+0x84>
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d102      	bne.n	800142c <hasNextRom+0x84>
      return -1;//ошибка никто не ответил 
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	e068      	b.n	80014fe <hasNextRom+0x156>
    if (cB != cmp_cB) { //нормальная ситуация пришло либо 10 либо 01
 800142c:	7afa      	ldrb	r2, [r7, #11]
 800142e:	7abb      	ldrb	r3, [r7, #10]
 8001430:	429a      	cmp	r2, r3
 8001432:	d002      	beq.n	800143a <hasNextRom+0x92>
      searchDirection = cB;//выбираем в каком направлении будем двигатся дальше
 8001434:	7afb      	ldrb	r3, [r7, #11]
 8001436:	75bb      	strb	r3, [r7, #22]
 8001438:	e023      	b.n	8001482 <hasNextRom+0xda>
			} else {//колизия пришло 00 т.е текущий бит у ROM-ов разный
				if (ui32BitNumber == ow->lastDiscrepancy)//если текущая позиция колизии равна прошлой
 800143a:	7ffa      	ldrb	r2, [r7, #31]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	429a      	cmp	r2, r3
 8001442:	d102      	bne.n	800144a <hasNextRom+0xa2>
        searchDirection = 1;//выбираем в каком направлении будем двигатся дальше
 8001444:	2301      	movs	r3, #1
 8001446:	75bb      	strb	r3, [r7, #22]
 8001448:	e01b      	b.n	8001482 <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {//если мы зашили дальше
 800144a:	7ffa      	ldrb	r2, [r7, #31]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	429a      	cmp	r2, r3
 8001452:	dd02      	ble.n	800145a <hasNextRom+0xb2>
          searchDirection = 0;//выбираем в каком направлении будем двигатся дальше 
 8001454:	2300      	movs	r3, #0
 8001456:	75bb      	strb	r3, [r7, #22]
 8001458:	e00e      	b.n	8001478 <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4413      	add	r3, r2
 8001460:	330c      	adds	r3, #12
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	7ffb      	ldrb	r3, [r7, #31]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	fa42 f303 	asr.w	r3, r2, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 8001478:	7dbb      	ldrb	r3, [r7, #22]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <hasNextRom+0xda>
          zeroFork = ui32BitNumber;//запоминаем развилку
 800147e:	7ffb      	ldrb	r3, [r7, #31]
 8001480:	61bb      	str	r3, [r7, #24]
      }
    }
    // сохраняем бит
    if (searchDirection)
 8001482:	7dbb      	ldrb	r3, [r7, #22]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00e      	beq.n	80014a6 <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;//выставляем бит в текущем байте байте
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b25a      	sxtb	r2, r3
 800148e:	7ffb      	ldrb	r3, [r7, #31]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	2101      	movs	r1, #1
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	b25b      	sxtb	r3, r3
 800149c:	4313      	orrs	r3, r2
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);// решаем кого отключить
 80014a6:	7dbb      	ldrb	r3, [r7, #22]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <hasNextRom+0x108>
 80014ac:	2300      	movs	r3, #0
 80014ae:	e000      	b.n	80014b2 <hasNextRom+0x10a>
 80014b0:	23ff      	movs	r3, #255	; 0xff
 80014b2:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);//вырубаем "мешающие" устройсва
 80014b4:	7d7b      	ldrb	r3, [r7, #21]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fe7d 	bl	80011b8 <owSend>
    ui32BitNumber++;//ищем следующий бит
 80014be:	7ffb      	ldrb	r3, [r7, #31]
 80014c0:	3301      	adds	r3, #1
 80014c2:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);//пока не найден весь ROM все биты
 80014c4:	7ffb      	ldrb	r3, [r7, #31]
 80014c6:	2b3f      	cmp	r3, #63	; 0x3f
 80014c8:	d984      	bls.n	80013d4 <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;//запоминаем развилку
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	609a      	str	r2, [r3, #8]
  for (; i < 7; i++)
 80014d0:	e00b      	b.n	80014ea <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];//запоминаем последний ROM
 80014d2:	7dfb      	ldrb	r3, [r7, #23]
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	441a      	add	r2, r3
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	7811      	ldrb	r1, [r2, #0]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	460a      	mov	r2, r1
 80014e2:	731a      	strb	r2, [r3, #12]
  for (; i < 7; i++)
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	3301      	adds	r3, #1
 80014e8:	75fb      	strb	r3, [r7, #23]
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	2b06      	cmp	r3, #6
 80014ee:	d9f0      	bls.n	80014d2 <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bfcc      	ite	gt
 80014f8:	2301      	movgt	r3, #1
 80014fa:	2300      	movle	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3720      	adds	r7, #32
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <owSearchCmd>:

// Возвращает количество устройств на шине или код ошибки, если значение меньше 0
int owSearchCmd(OneWire *ow) {
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff fdba 	bl	800108c <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //передаем указатель на структуру куда положить след.ROM
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	4619      	mov	r1, r3
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ff40 	bl	80013a8 <hasNextRom>
 8001528:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	da02      	bge.n	8001536 <owSearchCmd+0x30>
      return -1;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
 8001534:	e009      	b.n	800154a <owSearchCmd+0x44>
    device++;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	3301      	adds	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//ищем пока кто-то есть и этих кто-то не больше дефайна
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <owSearchCmd+0x42>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	dde7      	ble.n	8001518 <owSearchCmd+0x12>
		return device;//возвращаем порядковый номер датчика (устройства) на шине
 8001548:	68fb      	ldr	r3, [r7, #12]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {//отправляет команду пропуска ROM после этого следующая команда будет
  owResetCmd();                 //для всех устройств на шине
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {//позволяет мастеру обращаться к конкретному  ведомому устройству
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
	int i = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 800155e:	f7ff fe0d 	bl	800117c <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);//обращаемся к конкретному устройсву
 8001562:	2055      	movs	r0, #85	; 0x55
 8001564:	f7ff feb5 	bl	80012d2 <owSendByte>
  for (; i < 8; i++)
 8001568:	e009      	b.n	800157e <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));//"перебираемся по структуре как по массиву" первой звездочкой получаем i тый байт из структуры
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fead 	bl	80012d2 <owSendByte>
  for (; i < 8; i++)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	3301      	adds	r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2b07      	cmp	r3, #7
 8001582:	ddf2      	ble.n	800156a <owMatchRomCmd+0x18>
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);//позволяет мастеру обращаться к конкретному  ведомому устройству
 8001598:	6838      	ldr	r0, [r7, #0]
 800159a:	f7ff ffda 	bl	8001552 <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);//говорим датчику пора бы преобразовать температуру
 800159e:	2044      	movs	r0, #68	; 0x44
 80015a0:	f7ff fe97 	bl	80012d2 <owSendByte>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <owReadScratchpadCmd>:
 * @param ow -- OneWire pointer
 * @param rom -- selected device on the bus
 * @param data -- buffer for data
 * @return data
 */
uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {//читаем память датчика
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 80015b8:	2300      	movs	r3, #0
 80015ba:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b10      	cmp	r3, #16
 80015c2:	d001      	beq.n	80015c8 <owReadScratchpadCmd+0x1c>
 80015c4:	2b28      	cmp	r3, #40	; 0x28
 80015c6:	d109      	bne.n	80015dc <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;  //9*8 =72 == равняется 9 байт данных
 80015c8:	2348      	movs	r3, #72	; 0x48
 80015ca:	82bb      	strh	r3, [r7, #20]
      break;
 80015cc:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 80015ce:	68b8      	ldr	r0, [r7, #8]
 80015d0:	f7ff ffbf 	bl	8001552 <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);//отправляем команду на чтение памяти
 80015d4:	20be      	movs	r0, #190	; 0xbe
 80015d6:	f7ff fe7c 	bl	80012d2 <owSendByte>
  while (b < p) {// пока мы не обработали 9 байт 
 80015da:	e048      	b.n	800166e <owReadScratchpadCmd+0xc2>
      return data;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	e04b      	b.n	8001678 <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8)); //позиция обрабатываемого байта
 80015e0:	8abb      	ldrh	r3, [r7, #20]
 80015e2:	3b08      	subs	r3, #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da00      	bge.n	80015ea <owReadScratchpadCmd+0x3e>
 80015e8:	3307      	adds	r3, #7
 80015ea:	10db      	asrs	r3, r3, #3
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	8afb      	ldrh	r3, [r7, #22]
 80015f0:	08db      	lsrs	r3, r3, #3
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	74fb      	strb	r3, [r7, #19]
    uint8_t bt; 
		owSend(OW_READ);
 80015fa:	20ff      	movs	r0, #255	; 0xff
 80015fc:	f7ff fddc 	bl	80011b8 <owSend>
    bt = owReadSlot(owEchoRead());//читаем данные 
 8001600:	f7ff fe18 	bl	8001234 <owEchoRead>
 8001604:	4603      	mov	r3, r0
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fe04 	bl	8001214 <owReadSlot>
 800160c:	4603      	mov	r3, r0
 800160e:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 8001610:	7cbb      	ldrb	r3, [r7, #18]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d113      	bne.n	800163e <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;//выставляем бит в нужной позиции
 8001616:	7cfb      	ldrb	r3, [r7, #19]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	4413      	add	r3, r2
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b25a      	sxtb	r2, r3
 8001620:	8afb      	ldrh	r3, [r7, #22]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	b25b      	sxtb	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b259      	sxtb	r1, r3
 8001632:	7cfb      	ldrb	r3, [r7, #19]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	b2ca      	uxtb	r2, r1
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	e014      	b.n	8001668 <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);//сбрасываем бит в нужной позиции
 800163e:	7cfb      	ldrb	r3, [r7, #19]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	4413      	add	r3, r2
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b25a      	sxtb	r2, r3
 8001648:	8afb      	ldrh	r3, [r7, #22]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	2101      	movs	r1, #1
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	b25b      	sxtb	r3, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	b25b      	sxtb	r3, r3
 800165a:	4013      	ands	r3, r2
 800165c:	b259      	sxtb	r1, r3
 800165e:	7cfb      	ldrb	r3, [r7, #19]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	4413      	add	r3, r2
 8001664:	b2ca      	uxtb	r2, r1
 8001666:	701a      	strb	r2, [r3, #0]
    b++;//следующий бит
 8001668:	8afb      	ldrh	r3, [r7, #22]
 800166a:	3301      	adds	r3, #1
 800166c:	82fb      	strh	r3, [r7, #22]
  while (b < p) {// пока мы не обработали 9 байт 
 800166e:	8afa      	ldrh	r2, [r7, #22]
 8001670:	8abb      	ldrh	r3, [r7, #20]
 8001672:	429a      	cmp	r2, r3
 8001674:	d3b4      	bcc.n	80015e0 <owReadScratchpadCmd+0x34>
  }
  return data;
 8001676:	687b      	ldr	r3, [r7, #4]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <readTemperature>:
 * @param ow -- OneWire bus pointer
 * @param rom -- selected device
 * @param reSense -- do you want resense temp for next time?
 * @return struct with data
 */
Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b08c      	sub	sp, #48	; 0x30
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	4613      	mov	r3, r2
 800168c:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sp = (Scratchpad_DS18B20 *) &pad; 
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
  switch (rom->family) {
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d022      	beq.n	80016f4 <readTemperature+0x74>
 80016ae:	2b28      	cmp	r3, #40	; 0x28
 80016b0:	d13a      	bne.n	8001728 <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18B20
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	461a      	mov	r2, r3
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f7ff ff76 	bl	80015ac <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);//целая часть
 80016c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c2:	79db      	ldrb	r3, [r3, #7]
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	b25a      	sxtb	r2, r3
 80016c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ca:	7a1b      	ldrb	r3, [r3, #8]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	4313      	orrs	r3, r2
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);//дробная
 80016da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016dc:	7a1b      	ldrb	r3, [r3, #8]
 80016de:	f003 020f 	and.w	r2, r3, #15
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	111b      	asrs	r3, r3, #4
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 80016f2:	e01c      	b.n	800172e <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18S20
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	461a      	mov	r2, r3
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff ff55 	bl	80015ac <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 8001702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001704:	7a1b      	ldrb	r3, [r3, #8]
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	b25b      	sxtb	r3, r3
 800170c:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 8001710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001712:	7a1b      	ldrb	r3, [r3, #8]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	b2db      	uxtb	r3, r3
 800171a:	461a      	mov	r2, r3
 800171c:	0092      	lsls	r2, r2, #2
 800171e:	4413      	add	r3, r2
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 8001726:	e002      	b.n	800172e <readTemperature+0xae>
    default:
      return t;
 8001728:	8c3b      	ldrh	r3, [r7, #32]
 800172a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800172c:	e008      	b.n	8001740 <readTemperature+0xc0>
  }
  if (reSense) {
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);//можно сразу после как забрали данные отдаем датчику команду на преобразования температуры
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f7ff ff29 	bl	800158e <owConvertTemperatureCmd>
  }
  return t;
 800173c:	8c3b      	ldrh	r3, [r7, #32]
 800173e:	84bb      	strh	r3, [r7, #36]	; 0x24
}
 8001740:	2300      	movs	r3, #0
 8001742:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001746:	f362 0307 	bfi	r3, r2, #0, #8
 800174a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800174e:	f362 230f 	bfi	r3, r2, #8, #8
 8001752:	4618      	mov	r0, r3
 8001754:	3730      	adds	r7, #48	; 0x30
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <get_ROMid>:
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}


int get_ROMid (void){
 800175c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {    // is anybody on the bus?
 8001762:	f7ff fd0b 	bl	800117c <owResetCmd>
 8001766:	4603      	mov	r3, r0
 8001768:	2bf0      	cmp	r3, #240	; 0xf0
 800176a:	d079      	beq.n	8001860 <get_ROMid+0x104>
		devices = owSearchCmd(&ow);        // получить ROMid в�?ех у�?трой�?т на шине или вернуть код ошибки
 800176c:	484e      	ldr	r0, [pc, #312]	; (80018a8 <get_ROMid+0x14c>)
 800176e:	f7ff feca 	bl	8001506 <owSearchCmd>
 8001772:	4603      	mov	r3, r0
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b4d      	ldr	r3, [pc, #308]	; (80018ac <get_ROMid+0x150>)
 8001778:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 800177a:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <get_ROMid+0x150>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d113      	bne.n	80017aa <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 8001782:	4b4b      	ldr	r3, [pc, #300]	; (80018b0 <get_ROMid+0x154>)
 8001784:	4a4b      	ldr	r2, [pc, #300]	; (80018b4 <get_ROMid+0x158>)
 8001786:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 8001788:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <get_ROMid+0x15c>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e005      	b.n	800179c <get_ROMid+0x40>
					__asm__("nop");
 8001790:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 8001792:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <get_ROMid+0x15c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	4a47      	ldr	r2, [pc, #284]	; (80018b8 <get_ROMid+0x15c>)
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	4b46      	ldr	r3, [pc, #280]	; (80018b8 <get_ROMid+0x15c>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b43      	ldr	r3, [pc, #268]	; (80018b0 <get_ROMid+0x154>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d3f3      	bcc.n	8001790 <get_ROMid+0x34>
				pDelay = 1000000;
 80017a8:	e7eb      	b.n	8001782 <get_ROMid+0x26>
			}

		}
		i = 0;
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <get_ROMid+0x15c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 80017b0:	e04f      	b.n	8001852 <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 80017b2:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <get_ROMid+0x15c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4a3b      	ldr	r2, [pc, #236]	; (80018a8 <get_ROMid+0x14c>)
 80017ba:	4413      	add	r3, r2
 80017bc:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fde5 	bl	800138e <owCRC8>
 80017c4:	4603      	mov	r3, r0
 80017c6:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	79db      	ldrb	r3, [r3, #7]
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d101      	bne.n	80017d6 <get_ROMid+0x7a>
 80017d2:	4b3a      	ldr	r3, [pc, #232]	; (80018bc <get_ROMid+0x160>)
 80017d4:	e000      	b.n	80017d8 <get_ROMid+0x7c>
 80017d6:	4b3a      	ldr	r3, [pc, #232]	; (80018c0 <get_ROMid+0x164>)
 80017d8:	4a3a      	ldr	r2, [pc, #232]	; (80018c4 <get_ROMid+0x168>)
 80017da:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 80017dc:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <get_ROMid+0x15c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <get_ROMid+0x16c>)
 80017e4:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461e      	mov	r6, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	799b      	ldrb	r3, [r3, #6]
 80017f0:	469c      	mov	ip, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	795b      	ldrb	r3, [r3, #5]
 80017f6:	461a      	mov	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	791b      	ldrb	r3, [r3, #4]
 80017fc:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001802:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001808:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800180e:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001814:	9305      	str	r3, [sp, #20]
 8001816:	9504      	str	r5, [sp, #16]
 8001818:	9403      	str	r4, [sp, #12]
 800181a:	9002      	str	r0, [sp, #8]
 800181c:	9101      	str	r1, [sp, #4]
 800181e:	9200      	str	r2, [sp, #0]
 8001820:	4663      	mov	r3, ip
 8001822:	4632      	mov	r2, r6
 8001824:	4929      	ldr	r1, [pc, #164]	; (80018cc <get_ROMid+0x170>)
 8001826:	482a      	ldr	r0, [pc, #168]	; (80018d0 <get_ROMid+0x174>)
 8001828:	f002 fe80 	bl	800452c <siprintf>

			if (crc != r->crc) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	79db      	ldrb	r3, [r3, #7]
 8001830:	78fa      	ldrb	r2, [r7, #3]
 8001832:	429a      	cmp	r2, r3
 8001834:	d008      	beq.n	8001848 <get_ROMid+0xec>
				devInfo.device = i;
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <get_ROMid+0x15c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <get_ROMid+0x16c>)
 800183e:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 8001840:	4924      	ldr	r1, [pc, #144]	; (80018d4 <get_ROMid+0x178>)
 8001842:	4823      	ldr	r0, [pc, #140]	; (80018d0 <get_ROMid+0x174>)
 8001844:	f002 fe72 	bl	800452c <siprintf>
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <get_ROMid+0x15c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <get_ROMid+0x15c>)
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <get_ROMid+0x150>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <get_ROMid+0x15c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8a8      	bhi.n	80017b2 <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <get_ROMid+0x154>)
 8001862:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <get_ROMid+0x158>)
 8001864:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <get_ROMid+0x15c>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e005      	b.n	800187a <get_ROMid+0x11e>
		__asm__("nop");
 800186e:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <get_ROMid+0x15c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <get_ROMid+0x15c>)
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <get_ROMid+0x15c>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <get_ROMid+0x154>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d3f3      	bcc.n	800186e <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <get_ROMid+0x168>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	490c      	ldr	r1, [pc, #48]	; (80018bc <get_ROMid+0x160>)
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fc5f 	bl	8000150 <strcmp>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <get_ROMid+0x140>
 8001898:	2300      	movs	r3, #0
 800189a:	e001      	b.n	80018a0 <get_ROMid+0x144>
	else return -1;
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a8:	200000dc 	.word	0x200000dc
 80018ac:	200000d8 	.word	0x200000d8
 80018b0:	20000000 	.word	0x20000000
 80018b4:	000f4240 	.word	0x000f4240
 80018b8:	200000f0 	.word	0x200000f0
 80018bc:	08005c00 	.word	0x08005c00
 80018c0:	08005c08 	.word	0x08005c08
 80018c4:	200000f8 	.word	0x200000f8
 80018c8:	200000b4 	.word	0x200000b4
 80018cc:	08005c14 	.word	0x08005c14
 80018d0:	200000b8 	.word	0x200000b8
 80018d4:	08005c3c 	.word	0x08005c3c

080018d8 <get_Temperature>:

void get_Temperature (void)
{
 80018d8:	b598      	push	{r3, r4, r7, lr}
 80018da:	af00      	add	r7, sp, #0
	i=0;
 80018dc:	4b3a      	ldr	r3, [pc, #232]	; (80019c8 <get_Temperature+0xf0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 80018e2:	e067      	b.n	80019b4 <get_Temperature+0xdc>
		switch ((ow.ids[i]).family) {//че у нас за датчик
 80018e4:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <get_Temperature+0xf0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a38      	ldr	r2, [pc, #224]	; (80019cc <get_Temperature+0xf4>)
 80018ea:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80018ee:	2b28      	cmp	r3, #40	; 0x28
 80018f0:	d006      	beq.n	8001900 <get_Temperature+0x28>
 80018f2:	2b28      	cmp	r3, #40	; 0x28
 80018f4:	dc56      	bgt.n	80019a4 <get_Temperature+0xcc>
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d056      	beq.n	80019a8 <get_Temperature+0xd0>
 80018fa:	2b10      	cmp	r3, #16
 80018fc:	d029      	beq.n	8001952 <get_Temperature+0x7a>
			break;
		case 0x00:
			break;
		default:
			// error handler
			break;
 80018fe:	e051      	b.n	80019a4 <get_Temperature+0xcc>
			t = readTemperature(&ow, &ow.ids[i], 1);
 8001900:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <get_Temperature+0xf0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4a31      	ldr	r2, [pc, #196]	; (80019cc <get_Temperature+0xf4>)
 8001908:	4413      	add	r3, r2
 800190a:	2201      	movs	r2, #1
 800190c:	4619      	mov	r1, r3
 800190e:	482f      	ldr	r0, [pc, #188]	; (80019cc <get_Temperature+0xf4>)
 8001910:	f7ff feb6 	bl	8001680 <readTemperature>
 8001914:	4603      	mov	r3, r0
 8001916:	4a2e      	ldr	r2, [pc, #184]	; (80019d0 <get_Temperature+0xf8>)
 8001918:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <get_Temperature+0xf8>)
 800191c:	f993 3000 	ldrsb.w	r3, [r3]
 8001920:	461a      	mov	r2, r3
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	461a      	mov	r2, r3
 800192c:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <get_Temperature+0xf8>)
 800192e:	785b      	ldrb	r3, [r3, #1]
 8001930:	4413      	add	r3, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f98c 	bl	8000c50 <__aeabi_i2f>
 8001938:	4603      	mov	r3, r0
 800193a:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <get_Temperature+0xf0>)
 800193c:	6814      	ldr	r4, [r2, #0]
 800193e:	4925      	ldr	r1, [pc, #148]	; (80019d4 <get_Temperature+0xfc>)
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fa8d 	bl	8000e60 <__aeabi_fdiv>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <get_Temperature+0x100>)
 800194c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 8001950:	e02b      	b.n	80019aa <get_Temperature+0xd2>
			t = readTemperature(&ow, &ow.ids[i], 1);
 8001952:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <get_Temperature+0xf0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <get_Temperature+0xf4>)
 800195a:	4413      	add	r3, r2
 800195c:	2201      	movs	r2, #1
 800195e:	4619      	mov	r1, r3
 8001960:	481a      	ldr	r0, [pc, #104]	; (80019cc <get_Temperature+0xf4>)
 8001962:	f7ff fe8d 	bl	8001680 <readTemperature>
 8001966:	4603      	mov	r3, r0
 8001968:	4a19      	ldr	r2, [pc, #100]	; (80019d0 <get_Temperature+0xf8>)
 800196a:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <get_Temperature+0xf8>)
 800196e:	f993 3000 	ldrsb.w	r3, [r3]
 8001972:	461a      	mov	r2, r3
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	461a      	mov	r2, r3
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <get_Temperature+0xf8>)
 8001980:	785b      	ldrb	r3, [r3, #1]
 8001982:	4413      	add	r3, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f963 	bl	8000c50 <__aeabi_i2f>
 800198a:	4603      	mov	r3, r0
 800198c:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <get_Temperature+0xf0>)
 800198e:	6814      	ldr	r4, [r2, #0]
 8001990:	4910      	ldr	r1, [pc, #64]	; (80019d4 <get_Temperature+0xfc>)
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fa64 	bl	8000e60 <__aeabi_fdiv>
 8001998:	4603      	mov	r3, r0
 800199a:	461a      	mov	r2, r3
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <get_Temperature+0x100>)
 800199e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 80019a2:	e002      	b.n	80019aa <get_Temperature+0xd2>
			break;
 80019a4:	bf00      	nop
 80019a6:	e000      	b.n	80019aa <get_Temperature+0xd2>
			break;
 80019a8:	bf00      	nop
	for (; i < devices; i++) {
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <get_Temperature+0xf0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <get_Temperature+0xf0>)
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <get_Temperature+0x104>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <get_Temperature+0xf0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d890      	bhi.n	80018e4 <get_Temperature+0xc>
		}
	}
//	pDelay = 4000000;
//	for (i = 0; i < pDelay * 1; i++){}   /* Wait a bit. */
}
 80019c2:	bf00      	nop
 80019c4:	bf00      	nop
 80019c6:	bd98      	pop	{r3, r4, r7, pc}
 80019c8:	200000f0 	.word	0x200000f0
 80019cc:	200000dc 	.word	0x200000dc
 80019d0:	200000f4 	.word	0x200000f4
 80019d4:	41200000 	.word	0x41200000
 80019d8:	200000b0 	.word	0x200000b0
 80019dc:	200000d8 	.word	0x200000d8

080019e0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80019ea:	4a38      	ldr	r2, [pc, #224]	; (8001acc <HD44780_Init+0xec>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80019f0:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <HD44780_Init+0xf0>)
 80019f2:	2208      	movs	r2, #8
 80019f4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80019f6:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <HD44780_Init+0xf4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80019fc:	4b33      	ldr	r3, [pc, #204]	; (8001acc <HD44780_Init+0xec>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d907      	bls.n	8001a14 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001a04:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <HD44780_Init+0xf4>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	f043 0308 	orr.w	r3, r3, #8
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <HD44780_Init+0xf4>)
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	e006      	b.n	8001a22 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001a14:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HD44780_Init+0xf4>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <HD44780_Init+0xf4>)
 8001a20:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8001a22:	f000 f99b 	bl	8001d5c <DelayInit>
  HAL_Delay(50);
 8001a26:	2032      	movs	r0, #50	; 0x32
 8001a28:	f000 fd80 	bl	800252c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001a2c:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <HD44780_Init+0xf0>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 f959 	bl	8001ce8 <ExpanderWrite>
  HAL_Delay(1000);
 8001a36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a3a:	f000 fd77 	bl	800252c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8001a3e:	2030      	movs	r0, #48	; 0x30
 8001a40:	f000 f941 	bl	8001cc6 <Write4Bits>
  DelayUS(4500);
 8001a44:	f241 1094 	movw	r0, #4500	; 0x1194
 8001a48:	f000 f9b0 	bl	8001dac <DelayUS>

  Write4Bits(0x03 << 4);
 8001a4c:	2030      	movs	r0, #48	; 0x30
 8001a4e:	f000 f93a 	bl	8001cc6 <Write4Bits>
  DelayUS(4500);
 8001a52:	f241 1094 	movw	r0, #4500	; 0x1194
 8001a56:	f000 f9a9 	bl	8001dac <DelayUS>

  Write4Bits(0x03 << 4);
 8001a5a:	2030      	movs	r0, #48	; 0x30
 8001a5c:	f000 f933 	bl	8001cc6 <Write4Bits>
  DelayUS(4500);
 8001a60:	f241 1094 	movw	r0, #4500	; 0x1194
 8001a64:	f000 f9a2 	bl	8001dac <DelayUS>

  Write4Bits(0x02 << 4);
 8001a68:	2020      	movs	r0, #32
 8001a6a:	f000 f92c 	bl	8001cc6 <Write4Bits>
  DelayUS(100);
 8001a6e:	2064      	movs	r0, #100	; 0x64
 8001a70:	f000 f99c 	bl	8001dac <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HD44780_Init+0xf4>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	f043 0320 	orr.w	r3, r3, #32
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f8e4 	bl	8001c4c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HD44780_Init+0xf8>)
 8001a86:	2204      	movs	r2, #4
 8001a88:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001a8a:	f000 f875 	bl	8001b78 <HD44780_Display>
  HD44780_Clear();
 8001a8e:	f000 f82b 	bl	8001ae8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HD44780_Init+0xfc>)
 8001a94:	2202      	movs	r2, #2
 8001a96:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <HD44780_Init+0xfc>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f8d2 	bl	8001c4c <SendCommand>
  DelayUS(4500);
 8001aa8:	f241 1094 	movw	r0, #4500	; 0x1194
 8001aac:	f000 f97e 	bl	8001dac <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001ab0:	490b      	ldr	r1, [pc, #44]	; (8001ae0 <HD44780_Init+0x100>)
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f000 f88c 	bl	8001bd0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001ab8:	490a      	ldr	r1, [pc, #40]	; (8001ae4 <HD44780_Init+0x104>)
 8001aba:	2001      	movs	r0, #1
 8001abc:	f000 f888 	bl	8001bd0 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001ac0:	f000 f81d 	bl	8001afe <HD44780_Home>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200000ff 	.word	0x200000ff
 8001ad0:	20000100 	.word	0x20000100
 8001ad4:	200000fc 	.word	0x200000fc
 8001ad8:	200000fd 	.word	0x200000fd
 8001adc:	200000fe 	.word	0x200000fe
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	2000000c 	.word	0x2000000c

08001ae8 <HD44780_Clear>:

void HD44780_Clear()
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001aec:	2001      	movs	r0, #1
 8001aee:	f000 f8ad 	bl	8001c4c <SendCommand>
  DelayUS(2000);
 8001af2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001af6:	f000 f959 	bl	8001dac <DelayUS>
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HD44780_Home>:

void HD44780_Home()
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001b02:	2002      	movs	r0, #2
 8001b04:	f000 f8a2 	bl	8001c4c <SendCommand>
  DelayUS(2000);
 8001b08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b0c:	f000 f94e 	bl	8001dac <DelayUS>
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460a      	mov	r2, r1
 8001b1e:	71fb      	strb	r3, [r7, #7]
 8001b20:	4613      	mov	r3, r2
 8001b22:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HD44780_SetCursor+0x5c>)
 8001b26:	f107 0408 	add.w	r4, r7, #8
 8001b2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <HD44780_SetCursor+0x60>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	79ba      	ldrb	r2, [r7, #6]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d303      	bcc.n	8001b42 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HD44780_SetCursor+0x60>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001b42:	79bb      	ldrb	r3, [r7, #6]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	3318      	adds	r3, #24
 8001b48:	443b      	add	r3, r7
 8001b4a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	4413      	add	r3, r2
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	b25b      	sxtb	r3, r3
 8001b58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b5c:	b25b      	sxtb	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 f873 	bl	8001c4c <SendCommand>
}
 8001b66:	bf00      	nop
 8001b68:	371c      	adds	r7, #28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	08005c5c 	.word	0x08005c5c
 8001b74:	200000ff 	.word	0x200000ff

08001b78 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HD44780_Display+0x28>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HD44780_Display+0x28>)
 8001b88:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HD44780_Display+0x28>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 f859 	bl	8001c4c <SendCommand>
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200000fd 	.word	0x200000fd

08001ba4 <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HD44780_NoCursor+0x28>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f023 0302 	bic.w	r3, r3, #2
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HD44780_NoCursor+0x28>)
 8001bb4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HD44780_NoCursor+0x28>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	f043 0308 	orr.w	r3, r3, #8
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 f843 	bl	8001c4c <SendCommand>
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200000fd 	.word	0x200000fd

08001bd0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	b25b      	sxtb	r3, r3
 8001bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bee:	b25b      	sxtb	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f82a 	bl	8001c4c <SendCommand>
  for (int i=0; i<8; i++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e009      	b.n	8001c12 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f82e 	bl	8001c68 <SendChar>
  for (int i=0; i<8; i++)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b07      	cmp	r3, #7
 8001c16:	ddf2      	ble.n	8001bfe <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8001c2a:	e006      	b.n	8001c3a <HD44780_PrintStr+0x18>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f817 	bl	8001c68 <SendChar>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f4      	bne.n	8001c2c <HD44780_PrintStr+0xa>
}
 8001c42:	bf00      	nop
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f812 	bl	8001c84 <Send>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	2101      	movs	r1, #1
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f804 	bl	8001c84 <Send>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	71fb      	strb	r3, [r7, #7]
 8001c90:	4613      	mov	r3, r2
 8001c92:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f023 030f 	bic.w	r3, r3, #15
 8001c9a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	79bb      	ldrb	r3, [r7, #6]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 f80b 	bl	8001cc6 <Write4Bits>
  Write4Bits((lownib)|mode);
 8001cb0:	7bba      	ldrb	r2, [r7, #14]
 8001cb2:	79bb      	ldrb	r3, [r7, #6]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f804 	bl	8001cc6 <Write4Bits>
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 f808 	bl	8001ce8 <ExpanderWrite>
  PulseEnable(value);
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f820 	bl	8001d20 <PulseEnable>
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <ExpanderWrite+0x30>)
 8001cf4:	781a      	ldrb	r2, [r3, #0]
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001cfe:	f107 020f 	add.w	r2, r7, #15
 8001d02:	230a      	movs	r3, #10
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2301      	movs	r3, #1
 8001d08:	217e      	movs	r1, #126	; 0x7e
 8001d0a:	4804      	ldr	r0, [pc, #16]	; (8001d1c <ExpanderWrite+0x34>)
 8001d0c:	f001 f8b8 	bl	8002e80 <HAL_I2C_Master_Transmit>
}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000100 	.word	0x20000100
 8001d1c:	20000104 	.word	0x20000104

08001d20 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ffd8 	bl	8001ce8 <ExpanderWrite>
  DelayUS(20);
 8001d38:	2014      	movs	r0, #20
 8001d3a:	f000 f837 	bl	8001dac <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f023 0304 	bic.w	r3, r3, #4
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ffce 	bl	8001ce8 <ExpanderWrite>
  DelayUS(20);
 8001d4c:	2014      	movs	r0, #20
 8001d4e:	f000 f82d 	bl	8001dac <DelayUS>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <DelayInit>:

static void DelayInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <DelayInit+0x48>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4a0f      	ldr	r2, [pc, #60]	; (8001da4 <DelayInit+0x48>)
 8001d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d6a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <DelayInit+0x48>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <DelayInit+0x48>)
 8001d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d76:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <DelayInit+0x4c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <DelayInit+0x4c>)
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <DelayInit+0x4c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <DelayInit+0x4c>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <DelayInit+0x4c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001d96:	bf00      	nop
  __ASM volatile ("NOP");
 8001d98:	bf00      	nop
  __ASM volatile ("NOP");
 8001d9a:	bf00      	nop
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	e000edf0 	.word	0xe000edf0
 8001da8:	e0001000 	.word	0xe0001000

08001dac <DelayUS>:

static void DelayUS(uint32_t us) {
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001db4:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <DelayUS+0x40>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0d      	ldr	r2, [pc, #52]	; (8001df0 <DelayUS+0x44>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	0c9a      	lsrs	r2, r3, #18
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <DelayUS+0x48>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <DelayUS+0x48>)
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d8f6      	bhi.n	8001dce <DelayUS+0x22>
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	371c      	adds	r7, #28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	20000014 	.word	0x20000014
 8001df0:	431bde83 	.word	0x431bde83
 8001df4:	e0001000 	.word	0xe0001000

08001df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dfe:	f000 fb33 	bl	8002468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e02:	f000 f849 	bl	8001e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e06:	f000 f8e5 	bl	8001fd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e0a:	f000 f88b 	bl	8001f24 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001e0e:	f000 f8b7 	bl	8001f80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  get_ROMid();
 8001e12:	f7ff fca3 	bl	800175c <get_ROMid>

  HD44780_Init(2);
 8001e16:	2002      	movs	r0, #2
 8001e18:	f7ff fde2 	bl	80019e0 <HD44780_Init>
  HD44780_NoCursor();
 8001e1c:	f7ff fec2 	bl	8001ba4 <HD44780_NoCursor>
    HD44780_Clear();
 8001e20:	f7ff fe62 	bl	8001ae8 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8001e24:	2100      	movs	r1, #0
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7ff fe74 	bl	8001b14 <HD44780_SetCursor>
    HD44780_PrintStr("HELLO");
 8001e2c:	4816      	ldr	r0, [pc, #88]	; (8001e88 <main+0x90>)
 8001e2e:	f7ff fef8 	bl	8001c22 <HD44780_PrintStr>
    HD44780_SetCursor(10,1);
 8001e32:	2101      	movs	r1, #1
 8001e34:	200a      	movs	r0, #10
 8001e36:	f7ff fe6d 	bl	8001b14 <HD44780_SetCursor>
    HD44780_PrintStr("WORLD");
 8001e3a:	4814      	ldr	r0, [pc, #80]	; (8001e8c <main+0x94>)
 8001e3c:	f7ff fef1 	bl	8001c22 <HD44780_PrintStr>
    HAL_Delay(2000);
 8001e40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e44:	f000 fb72 	bl	800252c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	get_Temperature();
 8001e48:	f7ff fd46 	bl	80018d8 <get_Temperature>
	my_ftoa(Temp[0], temp_dis, 2);
 8001e4c:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <main+0x98>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4639      	mov	r1, r7
 8001e52:	2202      	movs	r2, #2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 f967 	bl	8002128 <my_ftoa>

	HD44780_Clear();
 8001e5a:	f7ff fe45 	bl	8001ae8 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 8001e5e:	2100      	movs	r1, #0
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7ff fe57 	bl	8001b14 <HD44780_SetCursor>
	HD44780_PrintStr("Temp: ");
 8001e66:	480b      	ldr	r0, [pc, #44]	; (8001e94 <main+0x9c>)
 8001e68:	f7ff fedb 	bl	8001c22 <HD44780_PrintStr>
	HD44780_SetCursor(6,0);
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2006      	movs	r0, #6
 8001e70:	f7ff fe50 	bl	8001b14 <HD44780_SetCursor>
	HD44780_PrintStr(temp_dis);
 8001e74:	463b      	mov	r3, r7
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fed3 	bl	8001c22 <HD44780_PrintStr>

	HAL_Delay(1000);
 8001e7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e80:	f000 fb54 	bl	800252c <HAL_Delay>
	get_Temperature();
 8001e84:	e7e0      	b.n	8001e48 <main+0x50>
 8001e86:	bf00      	nop
 8001e88:	08005c6c 	.word	0x08005c6c
 8001e8c:	08005c74 	.word	0x08005c74
 8001e90:	200000b0 	.word	0x200000b0
 8001e94:	08005c7c 	.word	0x08005c7c

08001e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b090      	sub	sp, #64	; 0x40
 8001e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e9e:	f107 0318 	add.w	r3, r7, #24
 8001ea2:	2228      	movs	r2, #40	; 0x28
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f002 fb38 	bl	800451c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ec2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ed6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001edc:	f107 0318 	add.w	r3, r7, #24
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 fad3 	bl	800348c <HAL_RCC_OscConfig>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001eec:	f000 f8a0 	bl	8002030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef0:	230f      	movs	r3, #15
 8001ef2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2102      	movs	r1, #2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 fd40 	bl	8003990 <HAL_RCC_ClockConfig>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f16:	f000 f88b 	bl	8002030 <Error_Handler>
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	3740      	adds	r7, #64	; 0x40
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f2a:	4a13      	ldr	r2, [pc, #76]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f30:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <MX_I2C1_Init+0x58>)
 8001f32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f60:	4804      	ldr	r0, [pc, #16]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f62:	f000 fe49 	bl	8002bf8 <HAL_I2C_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f6c:	f000 f860 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000104 	.word	0x20000104
 8001f78:	40005400 	.word	0x40005400
 8001f7c:	000186a0 	.word	0x000186a0

08001f80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <MX_USART1_UART_Init+0x4c>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <MX_USART1_UART_Init+0x50>)
 8001f88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <MX_USART1_UART_Init+0x4c>)
 8001f8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <MX_USART1_UART_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <MX_USART1_UART_Init+0x4c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <MX_USART1_UART_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <MX_USART1_UART_Init+0x4c>)
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <MX_USART1_UART_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <MX_USART1_UART_Init+0x4c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001fb6:	4805      	ldr	r0, [pc, #20]	; (8001fcc <MX_USART1_UART_Init+0x4c>)
 8001fb8:	f001 fe82 	bl	8003cc0 <HAL_HalfDuplex_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fc2:	f000 f835 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000158 	.word	0x20000158
 8001fd0:	40013800 	.word	0x40013800

08001fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <MX_GPIO_Init+0x58>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	4a13      	ldr	r2, [pc, #76]	; (800202c <MX_GPIO_Init+0x58>)
 8001fe0:	f043 0320 	orr.w	r3, r3, #32
 8001fe4:	6193      	str	r3, [r2, #24]
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <MX_GPIO_Init+0x58>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <MX_GPIO_Init+0x58>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	4a0d      	ldr	r2, [pc, #52]	; (800202c <MX_GPIO_Init+0x58>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	6193      	str	r3, [r2, #24]
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <MX_GPIO_Init+0x58>)
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <MX_GPIO_Init+0x58>)
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	4a07      	ldr	r2, [pc, #28]	; (800202c <MX_GPIO_Init+0x58>)
 8002010:	f043 0308 	orr.w	r3, r3, #8
 8002014:	6193      	str	r3, [r2, #24]
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <MX_GPIO_Init+0x58>)
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]

}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	40021000 	.word	0x40021000

08002030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002034:	b672      	cpsid	i
}
 8002036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002038:	e7fe      	b.n	8002038 <Error_Handler+0x8>

0800203a <reverse>:


 
// Reverses a string 'str' of length 'len'
void reverse(char* str, int len)
{
 800203a:	b480      	push	{r7}
 800203c:	b087      	sub	sp, #28
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	3b01      	subs	r3, #1
 800204c:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800204e:	e018      	b.n	8002082 <reverse+0x48>
        temp = str[i];
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	441a      	add	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	440b      	add	r3, r1
 8002066:	7812      	ldrb	r2, [r2, #0]
 8002068:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4413      	add	r3, r2
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]
        i++;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
        j--;
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	3b01      	subs	r3, #1
 8002080:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	429a      	cmp	r2, r3
 8002088:	dbe2      	blt.n	8002050 <reverse+0x16>
    }
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
	...

08002098 <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
    int i = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
    while (x) {
 80020a8:	e01d      	b.n	80020e6 <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <intToStr+0x8c>)
 80020ae:	fb83 1302 	smull	r1, r3, r3, r2
 80020b2:	1099      	asrs	r1, r3, #2
 80020b4:	17d3      	asrs	r3, r2, #31
 80020b6:	1ac9      	subs	r1, r1, r3
 80020b8:	460b      	mov	r3, r1
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	1ad1      	subs	r1, r2, r3
 80020c2:	b2ca      	uxtb	r2, r1
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	1c59      	adds	r1, r3, #1
 80020c8:	6179      	str	r1, [r7, #20]
 80020ca:	4619      	mov	r1, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	440b      	add	r3, r1
 80020d0:	3230      	adds	r2, #48	; 0x30
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4a12      	ldr	r2, [pc, #72]	; (8002124 <intToStr+0x8c>)
 80020da:	fb82 1203 	smull	r1, r2, r2, r3
 80020de:	1092      	asrs	r2, r2, #2
 80020e0:	17db      	asrs	r3, r3, #31
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	60fb      	str	r3, [r7, #12]
    while (x) {
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1de      	bne.n	80020aa <intToStr+0x12>
    }
 
    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80020ec:	e007      	b.n	80020fe <intToStr+0x66>
        str[i++] = '0';
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	617a      	str	r2, [r7, #20]
 80020f4:	461a      	mov	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4413      	add	r3, r2
 80020fa:	2230      	movs	r2, #48	; 0x30
 80020fc:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	dbf3      	blt.n	80020ee <intToStr+0x56>
 
    reverse(str, i);
 8002106:	6979      	ldr	r1, [r7, #20]
 8002108:	68b8      	ldr	r0, [r7, #8]
 800210a:	f7ff ff96 	bl	800203a <reverse>
    str[i] = '\0';
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	4413      	add	r3, r2
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
    return i;
 8002118:	697b      	ldr	r3, [r7, #20]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	66666667 	.word	0x66666667

08002128 <my_ftoa>:
 
// Converts a floating-point/double number to a string.
void my_ftoa(float n, char* res, int afterpoint)
{
 8002128:	b5b0      	push	{r4, r5, r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7fe ff2f 	bl	8000f98 <__aeabi_f2iz>
 800213a:	4603      	mov	r3, r0
 800213c:	61fb      	str	r3, [r7, #28]
 
    // Extract floating part
    float fpart = n - (float)ipart;
 800213e:	69f8      	ldr	r0, [r7, #28]
 8002140:	f7fe fd86 	bl	8000c50 <__aeabi_i2f>
 8002144:	4603      	mov	r3, r0
 8002146:	4619      	mov	r1, r3
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7fe fccb 	bl	8000ae4 <__aeabi_fsub>
 800214e:	4603      	mov	r3, r0
 8002150:	61bb      	str	r3, [r7, #24]
 
    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	69f8      	ldr	r0, [r7, #28]
 8002158:	f7ff ff9e 	bl	8002098 <intToStr>
 800215c:	6178      	str	r0, [r7, #20]
 
    // check for display option after point
    if (afterpoint != 0) {
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d02c      	beq.n	80021be <my_ftoa+0x96>
        res[i] = '.'; // add dot
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	4413      	add	r3, r2
 800216a:	222e      	movs	r2, #46	; 0x2e
 800216c:	701a      	strb	r2, [r3, #0]
 
        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 800216e:	69b8      	ldr	r0, [r7, #24]
 8002170:	f7fe f95c 	bl	800042c <__aeabi_f2d>
 8002174:	4604      	mov	r4, r0
 8002176:	460d      	mov	r5, r1
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7fe f945 	bl	8000408 <__aeabi_i2d>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	f04f 0000 	mov.w	r0, #0
 8002186:	4910      	ldr	r1, [pc, #64]	; (80021c8 <my_ftoa+0xa0>)
 8002188:	f002 fe4a 	bl	8004e20 <pow>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4620      	mov	r0, r4
 8002192:	4629      	mov	r1, r5
 8002194:	f7fe f9a2 	bl	80004dc <__aeabi_dmul>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	f7fe fc4c 	bl	8000a3c <__aeabi_d2f>
 80021a4:	4603      	mov	r3, r0
 80021a6:	61bb      	str	r3, [r7, #24]
 
        intToStr((int)fpart, res + i + 1, afterpoint);
 80021a8:	69b8      	ldr	r0, [r7, #24]
 80021aa:	f7fe fef5 	bl	8000f98 <__aeabi_f2iz>
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3301      	adds	r3, #1
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	4413      	add	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7ff ff6d 	bl	8002098 <intToStr>
    }
}
 80021be:	bf00      	nop
 80021c0:	3720      	adds	r7, #32
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bdb0      	pop	{r4, r5, r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40240000 	.word	0x40240000

080021cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <HAL_MspInit+0x5c>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	4a14      	ldr	r2, [pc, #80]	; (8002228 <HAL_MspInit+0x5c>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6193      	str	r3, [r2, #24]
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_MspInit+0x5c>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_MspInit+0x5c>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4a0e      	ldr	r2, [pc, #56]	; (8002228 <HAL_MspInit+0x5c>)
 80021f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f4:	61d3      	str	r3, [r2, #28]
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <HAL_MspInit+0x5c>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_MspInit+0x60>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_MspInit+0x60>)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	40021000 	.word	0x40021000
 800222c:	40010000 	.word	0x40010000

08002230 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <HAL_I2C_MspInit+0x70>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d123      	bne.n	8002298 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 8002256:	f043 0308 	orr.w	r3, r3, #8
 800225a:	6193      	str	r3, [r2, #24]
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002268:	23c0      	movs	r3, #192	; 0xc0
 800226a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800226c:	2312      	movs	r3, #18
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	4619      	mov	r1, r3
 800227a:	480b      	ldr	r0, [pc, #44]	; (80022a8 <HAL_I2C_MspInit+0x78>)
 800227c:	f000 fb38 	bl	80028f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 8002286:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800228a:	61d3      	str	r3, [r2, #28]
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_I2C_MspInit+0x74>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002298:	bf00      	nop
 800229a:	3720      	adds	r7, #32
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40005400 	.word	0x40005400
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40010c00 	.word	0x40010c00

080022ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0310 	add.w	r3, r7, #16
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1a      	ldr	r2, [pc, #104]	; (8002330 <HAL_UART_MspInit+0x84>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d12c      	bne.n	8002326 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_UART_MspInit+0x88>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	4a18      	ldr	r2, [pc, #96]	; (8002334 <HAL_UART_MspInit+0x88>)
 80022d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_UART_MspInit+0x88>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_UART_MspInit+0x88>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a12      	ldr	r2, [pc, #72]	; (8002334 <HAL_UART_MspInit+0x88>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_UART_MspInit+0x88>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002300:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002302:	2312      	movs	r3, #18
 8002304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002306:	2303      	movs	r3, #3
 8002308:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f107 0310 	add.w	r3, r7, #16
 800230e:	4619      	mov	r1, r3
 8002310:	4809      	ldr	r0, [pc, #36]	; (8002338 <HAL_UART_MspInit+0x8c>)
 8002312:	f000 faed 	bl	80028f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2100      	movs	r1, #0
 800231a:	2025      	movs	r0, #37	; 0x25
 800231c:	f000 fa01 	bl	8002722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002320:	2025      	movs	r0, #37	; 0x25
 8002322:	f000 fa1a 	bl	800275a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002326:	bf00      	nop
 8002328:	3720      	adds	r7, #32
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40013800 	.word	0x40013800
 8002334:	40021000 	.word	0x40021000
 8002338:	40010800 	.word	0x40010800

0800233c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <NMI_Handler+0x4>

08002342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002346:	e7fe      	b.n	8002346 <HardFault_Handler+0x4>

08002348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800234c:	e7fe      	b.n	800234c <MemManage_Handler+0x4>

0800234e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002352:	e7fe      	b.n	8002352 <BusFault_Handler+0x4>

08002354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <UsageFault_Handler+0x4>

0800235a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr

08002372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002382:	f000 f8b7 	bl	80024f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  owReadHandler();
 8002390:	f7fe feb6 	bl	8001100 <owReadHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <USART1_IRQHandler+0x14>)
 8002396:	f001 fce9 	bl	8003d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000158 	.word	0x20000158

080023a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ac:	4a14      	ldr	r2, [pc, #80]	; (8002400 <_sbrk+0x5c>)
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <_sbrk+0x60>)
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <_sbrk+0x64>)
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <_sbrk+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d207      	bcs.n	80023e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d4:	f002 f878 	bl	80044c8 <__errno>
 80023d8:	4603      	mov	r3, r0
 80023da:	220c      	movs	r2, #12
 80023dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	e009      	b.n	80023f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a05      	ldr	r2, [pc, #20]	; (8002408 <_sbrk+0x64>)
 80023f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20005000 	.word	0x20005000
 8002404:	00000400 	.word	0x00000400
 8002408:	2000019c 	.word	0x2000019c
 800240c:	200001b8 	.word	0x200001b8

08002410 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800241c:	480c      	ldr	r0, [pc, #48]	; (8002450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800241e:	490d      	ldr	r1, [pc, #52]	; (8002454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002420:	4a0d      	ldr	r2, [pc, #52]	; (8002458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002424:	e002      	b.n	800242c <LoopCopyDataInit>

08002426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242a:	3304      	adds	r3, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002430:	d3f9      	bcc.n	8002426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002434:	4c0a      	ldr	r4, [pc, #40]	; (8002460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002438:	e001      	b.n	800243e <LoopFillZerobss>

0800243a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800243c:	3204      	adds	r2, #4

0800243e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002440:	d3fb      	bcc.n	800243a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002442:	f7ff ffe5 	bl	8002410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002446:	f002 f845 	bl	80044d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800244a:	f7ff fcd5 	bl	8001df8 <main>
  bx lr
 800244e:	4770      	bx	lr
  ldr r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002454:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002458:	08005d18 	.word	0x08005d18
  ldr r2, =_sbss
 800245c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002460:	200001b4 	.word	0x200001b4

08002464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <ADC1_2_IRQHandler>
	...

08002468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <HAL_Init+0x28>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a07      	ldr	r2, [pc, #28]	; (8002490 <HAL_Init+0x28>)
 8002472:	f043 0310 	orr.w	r3, r3, #16
 8002476:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002478:	2003      	movs	r0, #3
 800247a:	f000 f947 	bl	800270c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247e:	200f      	movs	r0, #15
 8002480:	f000 f808 	bl	8002494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002484:	f7ff fea2 	bl	80021cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40022000 	.word	0x40022000

08002494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800249c:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_InitTick+0x54>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_InitTick+0x58>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f95f 	bl	8002776 <HAL_SYSTICK_Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e00e      	b.n	80024e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b0f      	cmp	r3, #15
 80024c6:	d80a      	bhi.n	80024de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c8:	2200      	movs	r2, #0
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295
 80024d0:	f000 f927 	bl	8002722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d4:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <HAL_InitTick+0x5c>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000014 	.word	0x20000014
 80024ec:	2000001c 	.word	0x2000001c
 80024f0:	20000018 	.word	0x20000018

080024f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_IncTick+0x1c>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_IncTick+0x20>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4413      	add	r3, r2
 8002504:	4a03      	ldr	r2, [pc, #12]	; (8002514 <HAL_IncTick+0x20>)
 8002506:	6013      	str	r3, [r2, #0]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	2000001c 	.word	0x2000001c
 8002514:	200001a0 	.word	0x200001a0

08002518 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b02      	ldr	r3, [pc, #8]	; (8002528 <HAL_GetTick+0x10>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	200001a0 	.word	0x200001a0

0800252c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002534:	f7ff fff0 	bl	8002518 <HAL_GetTick>
 8002538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d005      	beq.n	8002552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <HAL_Delay+0x44>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002552:	bf00      	nop
 8002554:	f7ff ffe0 	bl	8002518 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	429a      	cmp	r2, r3
 8002562:	d8f7      	bhi.n	8002554 <HAL_Delay+0x28>
  {
  }
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	2000001c 	.word	0x2000001c

08002574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800259c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a6:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	60d3      	str	r3, [r2, #12]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <__NVIC_GetPriorityGrouping+0x18>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	f003 0307 	and.w	r3, r3, #7
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	db0b      	blt.n	8002602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	4906      	ldr	r1, [pc, #24]	; (800260c <__NVIC_EnableIRQ+0x34>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2001      	movs	r0, #1
 80025fa:	fa00 f202 	lsl.w	r2, r0, r2
 80025fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100

08002610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	2b00      	cmp	r3, #0
 8002622:	db0a      	blt.n	800263a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	490c      	ldr	r1, [pc, #48]	; (800265c <__NVIC_SetPriority+0x4c>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	440b      	add	r3, r1
 8002634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002638:	e00a      	b.n	8002650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4908      	ldr	r1, [pc, #32]	; (8002660 <__NVIC_SetPriority+0x50>)
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	3b04      	subs	r3, #4
 8002648:	0112      	lsls	r2, r2, #4
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	440b      	add	r3, r1
 800264e:	761a      	strb	r2, [r3, #24]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000e100 	.word	0xe000e100
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f1c3 0307 	rsb	r3, r3, #7
 800267e:	2b04      	cmp	r3, #4
 8002680:	bf28      	it	cs
 8002682:	2304      	movcs	r3, #4
 8002684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3304      	adds	r3, #4
 800268a:	2b06      	cmp	r3, #6
 800268c:	d902      	bls.n	8002694 <NVIC_EncodePriority+0x30>
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3b03      	subs	r3, #3
 8002692:	e000      	b.n	8002696 <NVIC_EncodePriority+0x32>
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	f04f 32ff 	mov.w	r2, #4294967295
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	401a      	ands	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43d9      	mvns	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	4313      	orrs	r3, r2
         );
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3724      	adds	r7, #36	; 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d8:	d301      	bcc.n	80026de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026da:	2301      	movs	r3, #1
 80026dc:	e00f      	b.n	80026fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <SysTick_Config+0x40>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e6:	210f      	movs	r1, #15
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f7ff ff90 	bl	8002610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <SysTick_Config+0x40>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f6:	4b04      	ldr	r3, [pc, #16]	; (8002708 <SysTick_Config+0x40>)
 80026f8:	2207      	movs	r2, #7
 80026fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	e000e010 	.word	0xe000e010

0800270c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff2d 	bl	8002574 <__NVIC_SetPriorityGrouping>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002734:	f7ff ff42 	bl	80025bc <__NVIC_GetPriorityGrouping>
 8002738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	6978      	ldr	r0, [r7, #20]
 8002740:	f7ff ff90 	bl	8002664 <NVIC_EncodePriority>
 8002744:	4602      	mov	r2, r0
 8002746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff5f 	bl	8002610 <__NVIC_SetPriority>
}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff35 	bl	80025d8 <__NVIC_EnableIRQ>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ffa2 	bl	80026c8 <SysTick_Config>
 8002784:	4603      	mov	r3, r0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800278e:	b480      	push	{r7}
 8002790:	b085      	sub	sp, #20
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d008      	beq.n	80027b6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2204      	movs	r2, #4
 80027a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e020      	b.n	80027f8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 020e 	bic.w	r2, r2, #14
 80027c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027de:	2101      	movs	r1, #1
 80027e0:	fa01 f202 	lsl.w	r2, r1, r2
 80027e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
	...

08002804 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002816:	2b02      	cmp	r3, #2
 8002818:	d005      	beq.n	8002826 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2204      	movs	r2, #4
 800281e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
 8002824:	e051      	b.n	80028ca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 020e 	bic.w	r2, r2, #14
 8002834:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a22      	ldr	r2, [pc, #136]	; (80028d4 <HAL_DMA_Abort_IT+0xd0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d029      	beq.n	80028a4 <HAL_DMA_Abort_IT+0xa0>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a20      	ldr	r2, [pc, #128]	; (80028d8 <HAL_DMA_Abort_IT+0xd4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d022      	beq.n	80028a0 <HAL_DMA_Abort_IT+0x9c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <HAL_DMA_Abort_IT+0xd8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d01a      	beq.n	800289a <HAL_DMA_Abort_IT+0x96>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1d      	ldr	r2, [pc, #116]	; (80028e0 <HAL_DMA_Abort_IT+0xdc>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d012      	beq.n	8002894 <HAL_DMA_Abort_IT+0x90>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <HAL_DMA_Abort_IT+0xe0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00a      	beq.n	800288e <HAL_DMA_Abort_IT+0x8a>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1a      	ldr	r2, [pc, #104]	; (80028e8 <HAL_DMA_Abort_IT+0xe4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d102      	bne.n	8002888 <HAL_DMA_Abort_IT+0x84>
 8002882:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002886:	e00e      	b.n	80028a6 <HAL_DMA_Abort_IT+0xa2>
 8002888:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800288c:	e00b      	b.n	80028a6 <HAL_DMA_Abort_IT+0xa2>
 800288e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002892:	e008      	b.n	80028a6 <HAL_DMA_Abort_IT+0xa2>
 8002894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002898:	e005      	b.n	80028a6 <HAL_DMA_Abort_IT+0xa2>
 800289a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800289e:	e002      	b.n	80028a6 <HAL_DMA_Abort_IT+0xa2>
 80028a0:	2310      	movs	r3, #16
 80028a2:	e000      	b.n	80028a6 <HAL_DMA_Abort_IT+0xa2>
 80028a4:	2301      	movs	r3, #1
 80028a6:	4a11      	ldr	r2, [pc, #68]	; (80028ec <HAL_DMA_Abort_IT+0xe8>)
 80028a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4798      	blx	r3
    } 
  }
  return status;
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40020008 	.word	0x40020008
 80028d8:	4002001c 	.word	0x4002001c
 80028dc:	40020030 	.word	0x40020030
 80028e0:	40020044 	.word	0x40020044
 80028e4:	40020058 	.word	0x40020058
 80028e8:	4002006c 	.word	0x4002006c
 80028ec:	40020000 	.word	0x40020000

080028f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b08b      	sub	sp, #44	; 0x2c
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002902:	e169      	b.n	8002bd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002904:	2201      	movs	r2, #1
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	429a      	cmp	r2, r3
 800291e:	f040 8158 	bne.w	8002bd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a9a      	ldr	r2, [pc, #616]	; (8002b90 <HAL_GPIO_Init+0x2a0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d05e      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
 800292c:	4a98      	ldr	r2, [pc, #608]	; (8002b90 <HAL_GPIO_Init+0x2a0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d875      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 8002932:	4a98      	ldr	r2, [pc, #608]	; (8002b94 <HAL_GPIO_Init+0x2a4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d058      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
 8002938:	4a96      	ldr	r2, [pc, #600]	; (8002b94 <HAL_GPIO_Init+0x2a4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d86f      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 800293e:	4a96      	ldr	r2, [pc, #600]	; (8002b98 <HAL_GPIO_Init+0x2a8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d052      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
 8002944:	4a94      	ldr	r2, [pc, #592]	; (8002b98 <HAL_GPIO_Init+0x2a8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d869      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 800294a:	4a94      	ldr	r2, [pc, #592]	; (8002b9c <HAL_GPIO_Init+0x2ac>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d04c      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
 8002950:	4a92      	ldr	r2, [pc, #584]	; (8002b9c <HAL_GPIO_Init+0x2ac>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d863      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 8002956:	4a92      	ldr	r2, [pc, #584]	; (8002ba0 <HAL_GPIO_Init+0x2b0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d046      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
 800295c:	4a90      	ldr	r2, [pc, #576]	; (8002ba0 <HAL_GPIO_Init+0x2b0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d85d      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 8002962:	2b12      	cmp	r3, #18
 8002964:	d82a      	bhi.n	80029bc <HAL_GPIO_Init+0xcc>
 8002966:	2b12      	cmp	r3, #18
 8002968:	d859      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 800296a:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <HAL_GPIO_Init+0x80>)
 800296c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002970:	080029eb 	.word	0x080029eb
 8002974:	080029c5 	.word	0x080029c5
 8002978:	080029d7 	.word	0x080029d7
 800297c:	08002a19 	.word	0x08002a19
 8002980:	08002a1f 	.word	0x08002a1f
 8002984:	08002a1f 	.word	0x08002a1f
 8002988:	08002a1f 	.word	0x08002a1f
 800298c:	08002a1f 	.word	0x08002a1f
 8002990:	08002a1f 	.word	0x08002a1f
 8002994:	08002a1f 	.word	0x08002a1f
 8002998:	08002a1f 	.word	0x08002a1f
 800299c:	08002a1f 	.word	0x08002a1f
 80029a0:	08002a1f 	.word	0x08002a1f
 80029a4:	08002a1f 	.word	0x08002a1f
 80029a8:	08002a1f 	.word	0x08002a1f
 80029ac:	08002a1f 	.word	0x08002a1f
 80029b0:	08002a1f 	.word	0x08002a1f
 80029b4:	080029cd 	.word	0x080029cd
 80029b8:	080029e1 	.word	0x080029e1
 80029bc:	4a79      	ldr	r2, [pc, #484]	; (8002ba4 <HAL_GPIO_Init+0x2b4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029c2:	e02c      	b.n	8002a1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	623b      	str	r3, [r7, #32]
          break;
 80029ca:	e029      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	3304      	adds	r3, #4
 80029d2:	623b      	str	r3, [r7, #32]
          break;
 80029d4:	e024      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	3308      	adds	r3, #8
 80029dc:	623b      	str	r3, [r7, #32]
          break;
 80029de:	e01f      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	330c      	adds	r3, #12
 80029e6:	623b      	str	r3, [r7, #32]
          break;
 80029e8:	e01a      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d102      	bne.n	80029f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029f2:	2304      	movs	r3, #4
 80029f4:	623b      	str	r3, [r7, #32]
          break;
 80029f6:	e013      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d105      	bne.n	8002a0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a00:	2308      	movs	r3, #8
 8002a02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	611a      	str	r2, [r3, #16]
          break;
 8002a0a:	e009      	b.n	8002a20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a0c:	2308      	movs	r3, #8
 8002a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	615a      	str	r2, [r3, #20]
          break;
 8002a16:	e003      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	623b      	str	r3, [r7, #32]
          break;
 8002a1c:	e000      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          break;
 8002a1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2bff      	cmp	r3, #255	; 0xff
 8002a24:	d801      	bhi.n	8002a2a <HAL_GPIO_Init+0x13a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	e001      	b.n	8002a2e <HAL_GPIO_Init+0x13e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2bff      	cmp	r3, #255	; 0xff
 8002a34:	d802      	bhi.n	8002a3c <HAL_GPIO_Init+0x14c>
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	e002      	b.n	8002a42 <HAL_GPIO_Init+0x152>
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	3b08      	subs	r3, #8
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	210f      	movs	r1, #15
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	401a      	ands	r2, r3
 8002a54:	6a39      	ldr	r1, [r7, #32]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80b1 	beq.w	8002bd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a70:	4b4d      	ldr	r3, [pc, #308]	; (8002ba8 <HAL_GPIO_Init+0x2b8>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	4a4c      	ldr	r2, [pc, #304]	; (8002ba8 <HAL_GPIO_Init+0x2b8>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6193      	str	r3, [r2, #24]
 8002a7c:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <HAL_GPIO_Init+0x2b8>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a88:	4a48      	ldr	r2, [pc, #288]	; (8002bac <HAL_GPIO_Init+0x2bc>)
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	3302      	adds	r3, #2
 8002a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	220f      	movs	r2, #15
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a40      	ldr	r2, [pc, #256]	; (8002bb0 <HAL_GPIO_Init+0x2c0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d013      	beq.n	8002adc <HAL_GPIO_Init+0x1ec>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a3f      	ldr	r2, [pc, #252]	; (8002bb4 <HAL_GPIO_Init+0x2c4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d00d      	beq.n	8002ad8 <HAL_GPIO_Init+0x1e8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a3e      	ldr	r2, [pc, #248]	; (8002bb8 <HAL_GPIO_Init+0x2c8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d007      	beq.n	8002ad4 <HAL_GPIO_Init+0x1e4>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a3d      	ldr	r2, [pc, #244]	; (8002bbc <HAL_GPIO_Init+0x2cc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d101      	bne.n	8002ad0 <HAL_GPIO_Init+0x1e0>
 8002acc:	2303      	movs	r3, #3
 8002ace:	e006      	b.n	8002ade <HAL_GPIO_Init+0x1ee>
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	e004      	b.n	8002ade <HAL_GPIO_Init+0x1ee>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e002      	b.n	8002ade <HAL_GPIO_Init+0x1ee>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <HAL_GPIO_Init+0x1ee>
 8002adc:	2300      	movs	r3, #0
 8002ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae0:	f002 0203 	and.w	r2, r2, #3
 8002ae4:	0092      	lsls	r2, r2, #2
 8002ae6:	4093      	lsls	r3, r2
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aee:	492f      	ldr	r1, [pc, #188]	; (8002bac <HAL_GPIO_Init+0x2bc>)
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	3302      	adds	r3, #2
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d006      	beq.n	8002b16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b08:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	492c      	ldr	r1, [pc, #176]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]
 8002b14:	e006      	b.n	8002b24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b16:	4b2a      	ldr	r3, [pc, #168]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	4928      	ldr	r1, [pc, #160]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d006      	beq.n	8002b3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b30:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	4922      	ldr	r1, [pc, #136]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
 8002b3c:	e006      	b.n	8002b4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	491e      	ldr	r1, [pc, #120]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d006      	beq.n	8002b66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	4918      	ldr	r1, [pc, #96]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	4914      	ldr	r1, [pc, #80]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d021      	beq.n	8002bc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b80:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	490e      	ldr	r1, [pc, #56]	; (8002bc0 <HAL_GPIO_Init+0x2d0>)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60cb      	str	r3, [r1, #12]
 8002b8c:	e021      	b.n	8002bd2 <HAL_GPIO_Init+0x2e2>
 8002b8e:	bf00      	nop
 8002b90:	10320000 	.word	0x10320000
 8002b94:	10310000 	.word	0x10310000
 8002b98:	10220000 	.word	0x10220000
 8002b9c:	10210000 	.word	0x10210000
 8002ba0:	10120000 	.word	0x10120000
 8002ba4:	10110000 	.word	0x10110000
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40010000 	.word	0x40010000
 8002bb0:	40010800 	.word	0x40010800
 8002bb4:	40010c00 	.word	0x40010c00
 8002bb8:	40011000 	.word	0x40011000
 8002bbc:	40011400 	.word	0x40011400
 8002bc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_GPIO_Init+0x304>)
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	4909      	ldr	r1, [pc, #36]	; (8002bf4 <HAL_GPIO_Init+0x304>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	fa22 f303 	lsr.w	r3, r2, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f47f ae8e 	bne.w	8002904 <HAL_GPIO_Init+0x14>
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	372c      	adds	r7, #44	; 0x2c
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	40010400 	.word	0x40010400

08002bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e12b      	b.n	8002e62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff fb06 	bl	8002230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2224      	movs	r2, #36	; 0x24
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c5c:	f000 ffea 	bl	8003c34 <HAL_RCC_GetPCLK1Freq>
 8002c60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4a81      	ldr	r2, [pc, #516]	; (8002e6c <HAL_I2C_Init+0x274>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d807      	bhi.n	8002c7c <HAL_I2C_Init+0x84>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a80      	ldr	r2, [pc, #512]	; (8002e70 <HAL_I2C_Init+0x278>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	bf94      	ite	ls
 8002c74:	2301      	movls	r3, #1
 8002c76:	2300      	movhi	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e006      	b.n	8002c8a <HAL_I2C_Init+0x92>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a7d      	ldr	r2, [pc, #500]	; (8002e74 <HAL_I2C_Init+0x27c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	bf94      	ite	ls
 8002c84:	2301      	movls	r3, #1
 8002c86:	2300      	movhi	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0e7      	b.n	8002e62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a78      	ldr	r2, [pc, #480]	; (8002e78 <HAL_I2C_Init+0x280>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	0c9b      	lsrs	r3, r3, #18
 8002c9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a6a      	ldr	r2, [pc, #424]	; (8002e6c <HAL_I2C_Init+0x274>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d802      	bhi.n	8002ccc <HAL_I2C_Init+0xd4>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	e009      	b.n	8002ce0 <HAL_I2C_Init+0xe8>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cd2:	fb02 f303 	mul.w	r3, r2, r3
 8002cd6:	4a69      	ldr	r2, [pc, #420]	; (8002e7c <HAL_I2C_Init+0x284>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	3301      	adds	r3, #1
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	495c      	ldr	r1, [pc, #368]	; (8002e6c <HAL_I2C_Init+0x274>)
 8002cfc:	428b      	cmp	r3, r1
 8002cfe:	d819      	bhi.n	8002d34 <HAL_I2C_Init+0x13c>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1e59      	subs	r1, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d0e:	1c59      	adds	r1, r3, #1
 8002d10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d14:	400b      	ands	r3, r1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_I2C_Init+0x138>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1e59      	subs	r1, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2e:	e051      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d30:	2304      	movs	r3, #4
 8002d32:	e04f      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d111      	bne.n	8002d60 <HAL_I2C_Init+0x168>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1e58      	subs	r0, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	440b      	add	r3, r1
 8002d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e012      	b.n	8002d86 <HAL_I2C_Init+0x18e>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1e58      	subs	r0, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	0099      	lsls	r1, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Init+0x196>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e022      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10e      	bne.n	8002db4 <HAL_I2C_Init+0x1bc>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1e58      	subs	r0, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	440b      	add	r3, r1
 8002da4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db2:	e00f      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1e58      	subs	r0, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	0099      	lsls	r1, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	6809      	ldr	r1, [r1, #0]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6911      	ldr	r1, [r2, #16]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68d2      	ldr	r2, [r2, #12]
 8002e0e:	4311      	orrs	r1, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	430b      	orrs	r3, r1
 8002e16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	000186a0 	.word	0x000186a0
 8002e70:	001e847f 	.word	0x001e847f
 8002e74:	003d08ff 	.word	0x003d08ff
 8002e78:	431bde83 	.word	0x431bde83
 8002e7c:	10624dd3 	.word	0x10624dd3

08002e80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	817b      	strh	r3, [r7, #10]
 8002e90:	4613      	mov	r3, r2
 8002e92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e94:	f7ff fb40 	bl	8002518 <HAL_GetTick>
 8002e98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	f040 80e0 	bne.w	8003068 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2319      	movs	r3, #25
 8002eae:	2201      	movs	r2, #1
 8002eb0:	4970      	ldr	r1, [pc, #448]	; (8003074 <HAL_I2C_Master_Transmit+0x1f4>)
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f964 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e0d3      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_I2C_Master_Transmit+0x50>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e0cc      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d007      	beq.n	8002ef6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2221      	movs	r2, #33	; 0x21
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2210      	movs	r2, #16
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	893a      	ldrh	r2, [r7, #8]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4a50      	ldr	r2, [pc, #320]	; (8003078 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f38:	8979      	ldrh	r1, [r7, #10]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	6a3a      	ldr	r2, [r7, #32]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f89c 	bl	800307c <I2C_MasterRequestWrite>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e08d      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f64:	e066      	b.n	8003034 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	6a39      	ldr	r1, [r7, #32]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f9de 	bl	800332c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d107      	bne.n	8002f8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e06b      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	781a      	ldrb	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d11b      	bne.n	8003008 <HAL_I2C_Master_Transmit+0x188>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d017      	beq.n	8003008 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	6a39      	ldr	r1, [r7, #32]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f9ce 	bl	80033ae <I2C_WaitOnBTFFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00d      	beq.n	8003034 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	2b04      	cmp	r3, #4
 800301e:	d107      	bne.n	8003030 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e01a      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d194      	bne.n	8002f66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	e000      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003068:	2302      	movs	r3, #2
  }
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	00100002 	.word	0x00100002
 8003078:	ffff0000 	.word	0xffff0000

0800307c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af02      	add	r7, sp, #8
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	460b      	mov	r3, r1
 800308a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d006      	beq.n	80030a6 <I2C_MasterRequestWrite+0x2a>
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d003      	beq.n	80030a6 <I2C_MasterRequestWrite+0x2a>
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030a4:	d108      	bne.n	80030b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e00b      	b.n	80030d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	2b12      	cmp	r3, #18
 80030be:	d107      	bne.n	80030d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f84f 	bl	8003180 <I2C_WaitOnFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00d      	beq.n	8003104 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f6:	d103      	bne.n	8003100 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e035      	b.n	8003170 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800310c:	d108      	bne.n	8003120 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800310e:	897b      	ldrh	r3, [r7, #10]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800311c:	611a      	str	r2, [r3, #16]
 800311e:	e01b      	b.n	8003158 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003120:	897b      	ldrh	r3, [r7, #10]
 8003122:	11db      	asrs	r3, r3, #7
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f003 0306 	and.w	r3, r3, #6
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f063 030f 	orn	r3, r3, #15
 8003130:	b2da      	uxtb	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	490e      	ldr	r1, [pc, #56]	; (8003178 <I2C_MasterRequestWrite+0xfc>)
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f875 	bl	800322e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e010      	b.n	8003170 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800314e:	897b      	ldrh	r3, [r7, #10]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4907      	ldr	r1, [pc, #28]	; (800317c <I2C_MasterRequestWrite+0x100>)
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f865 	bl	800322e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	00010008 	.word	0x00010008
 800317c:	00010002 	.word	0x00010002

08003180 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003190:	e025      	b.n	80031de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d021      	beq.n	80031de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7ff f9bd 	bl	8002518 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d116      	bne.n	80031de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f043 0220 	orr.w	r2, r3, #32
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e023      	b.n	8003226 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	0c1b      	lsrs	r3, r3, #16
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d10d      	bne.n	8003204 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	43da      	mvns	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4013      	ands	r3, r2
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	bf0c      	ite	eq
 80031fa:	2301      	moveq	r3, #1
 80031fc:	2300      	movne	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	e00c      	b.n	800321e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	43da      	mvns	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4013      	ands	r3, r2
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	bf0c      	ite	eq
 8003216:	2301      	moveq	r3, #1
 8003218:	2300      	movne	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	429a      	cmp	r2, r3
 8003222:	d0b6      	beq.n	8003192 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800323c:	e051      	b.n	80032e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324c:	d123      	bne.n	8003296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003266:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f043 0204 	orr.w	r2, r3, #4
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e046      	b.n	8003324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329c:	d021      	beq.n	80032e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329e:	f7ff f93b 	bl	8002518 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d302      	bcc.n	80032b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d116      	bne.n	80032e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f043 0220 	orr.w	r2, r3, #32
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e020      	b.n	8003324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	0c1b      	lsrs	r3, r3, #16
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d10c      	bne.n	8003306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	43da      	mvns	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4013      	ands	r3, r2
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	bf14      	ite	ne
 80032fe:	2301      	movne	r3, #1
 8003300:	2300      	moveq	r3, #0
 8003302:	b2db      	uxtb	r3, r3
 8003304:	e00b      	b.n	800331e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	43da      	mvns	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4013      	ands	r3, r2
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	bf14      	ite	ne
 8003318:	2301      	movne	r3, #1
 800331a:	2300      	moveq	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d18d      	bne.n	800323e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003338:	e02d      	b.n	8003396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f878 	bl	8003430 <I2C_IsAcknowledgeFailed>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e02d      	b.n	80033a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d021      	beq.n	8003396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003352:	f7ff f8e1 	bl	8002518 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	429a      	cmp	r2, r3
 8003360:	d302      	bcc.n	8003368 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d116      	bne.n	8003396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f043 0220 	orr.w	r2, r3, #32
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e007      	b.n	80033a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a0:	2b80      	cmp	r3, #128	; 0x80
 80033a2:	d1ca      	bne.n	800333a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033ba:	e02d      	b.n	8003418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f837 	bl	8003430 <I2C_IsAcknowledgeFailed>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e02d      	b.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d2:	d021      	beq.n	8003418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d4:	f7ff f8a0 	bl	8002518 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d302      	bcc.n	80033ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d116      	bne.n	8003418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e007      	b.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b04      	cmp	r3, #4
 8003424:	d1ca      	bne.n	80033bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003446:	d11b      	bne.n	8003480 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003450:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	f043 0204 	orr.w	r2, r3, #4
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e272      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 8087 	beq.w	80035ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034ac:	4b92      	ldr	r3, [pc, #584]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d00c      	beq.n	80034d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034b8:	4b8f      	ldr	r3, [pc, #572]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d112      	bne.n	80034ea <HAL_RCC_OscConfig+0x5e>
 80034c4:	4b8c      	ldr	r3, [pc, #560]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d0:	d10b      	bne.n	80034ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d2:	4b89      	ldr	r3, [pc, #548]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d06c      	beq.n	80035b8 <HAL_RCC_OscConfig+0x12c>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d168      	bne.n	80035b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e24c      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f2:	d106      	bne.n	8003502 <HAL_RCC_OscConfig+0x76>
 80034f4:	4b80      	ldr	r3, [pc, #512]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a7f      	ldr	r2, [pc, #508]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80034fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	e02e      	b.n	8003560 <HAL_RCC_OscConfig+0xd4>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10c      	bne.n	8003524 <HAL_RCC_OscConfig+0x98>
 800350a:	4b7b      	ldr	r3, [pc, #492]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a7a      	ldr	r2, [pc, #488]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	4b78      	ldr	r3, [pc, #480]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a77      	ldr	r2, [pc, #476]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 800351c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e01d      	b.n	8003560 <HAL_RCC_OscConfig+0xd4>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800352c:	d10c      	bne.n	8003548 <HAL_RCC_OscConfig+0xbc>
 800352e:	4b72      	ldr	r3, [pc, #456]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a71      	ldr	r2, [pc, #452]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4b6f      	ldr	r3, [pc, #444]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a6e      	ldr	r2, [pc, #440]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e00b      	b.n	8003560 <HAL_RCC_OscConfig+0xd4>
 8003548:	4b6b      	ldr	r3, [pc, #428]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a6a      	ldr	r2, [pc, #424]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 800354e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	4b68      	ldr	r3, [pc, #416]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a67      	ldr	r2, [pc, #412]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 800355a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800355e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d013      	beq.n	8003590 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe ffd6 	bl	8002518 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003570:	f7fe ffd2 	bl	8002518 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	; 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e200      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	4b5d      	ldr	r3, [pc, #372]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0xe4>
 800358e:	e014      	b.n	80035ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fe ffc2 	bl	8002518 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003598:	f7fe ffbe 	bl	8002518 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e1ec      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035aa:	4b53      	ldr	r3, [pc, #332]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x10c>
 80035b6:	e000      	b.n	80035ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d063      	beq.n	800368e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035c6:	4b4c      	ldr	r3, [pc, #304]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035d2:	4b49      	ldr	r3, [pc, #292]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d11c      	bne.n	8003618 <HAL_RCC_OscConfig+0x18c>
 80035de:	4b46      	ldr	r3, [pc, #280]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d116      	bne.n	8003618 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ea:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <HAL_RCC_OscConfig+0x176>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d001      	beq.n	8003602 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e1c0      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003602:	4b3d      	ldr	r3, [pc, #244]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4939      	ldr	r1, [pc, #228]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003612:	4313      	orrs	r3, r2
 8003614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003616:	e03a      	b.n	800368e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d020      	beq.n	8003662 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003620:	4b36      	ldr	r3, [pc, #216]	; (80036fc <HAL_RCC_OscConfig+0x270>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7fe ff77 	bl	8002518 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800362e:	f7fe ff73 	bl	8002518 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e1a1      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003640:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364c:	4b2a      	ldr	r3, [pc, #168]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4927      	ldr	r1, [pc, #156]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 800365c:	4313      	orrs	r3, r2
 800365e:	600b      	str	r3, [r1, #0]
 8003660:	e015      	b.n	800368e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003662:	4b26      	ldr	r3, [pc, #152]	; (80036fc <HAL_RCC_OscConfig+0x270>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fe ff56 	bl	8002518 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003670:	f7fe ff52 	bl	8002518 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e180      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003682:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d03a      	beq.n	8003710 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d019      	beq.n	80036d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a2:	4b17      	ldr	r3, [pc, #92]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a8:	f7fe ff36 	bl	8002518 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b0:	f7fe ff32 	bl	8002518 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e160      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c2:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036ce:	2001      	movs	r0, #1
 80036d0:	f000 fad8 	bl	8003c84 <RCC_Delay>
 80036d4:	e01c      	b.n	8003710 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d6:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036dc:	f7fe ff1c 	bl	8002518 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e2:	e00f      	b.n	8003704 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e4:	f7fe ff18 	bl	8002518 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d908      	bls.n	8003704 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e146      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000
 80036fc:	42420000 	.word	0x42420000
 8003700:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003704:	4b92      	ldr	r3, [pc, #584]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e9      	bne.n	80036e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a6 	beq.w	800386a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800371e:	2300      	movs	r3, #0
 8003720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003722:	4b8b      	ldr	r3, [pc, #556]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10d      	bne.n	800374a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	4b88      	ldr	r3, [pc, #544]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	4a87      	ldr	r2, [pc, #540]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 8003734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003738:	61d3      	str	r3, [r2, #28]
 800373a:	4b85      	ldr	r3, [pc, #532]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003746:	2301      	movs	r3, #1
 8003748:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374a:	4b82      	ldr	r3, [pc, #520]	; (8003954 <HAL_RCC_OscConfig+0x4c8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d118      	bne.n	8003788 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003756:	4b7f      	ldr	r3, [pc, #508]	; (8003954 <HAL_RCC_OscConfig+0x4c8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a7e      	ldr	r2, [pc, #504]	; (8003954 <HAL_RCC_OscConfig+0x4c8>)
 800375c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003762:	f7fe fed9 	bl	8002518 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376a:	f7fe fed5 	bl	8002518 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b64      	cmp	r3, #100	; 0x64
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e103      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	4b75      	ldr	r3, [pc, #468]	; (8003954 <HAL_RCC_OscConfig+0x4c8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d106      	bne.n	800379e <HAL_RCC_OscConfig+0x312>
 8003790:	4b6f      	ldr	r3, [pc, #444]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	4a6e      	ldr	r2, [pc, #440]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6213      	str	r3, [r2, #32]
 800379c:	e02d      	b.n	80037fa <HAL_RCC_OscConfig+0x36e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCC_OscConfig+0x334>
 80037a6:	4b6a      	ldr	r3, [pc, #424]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	4a69      	ldr	r2, [pc, #420]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	6213      	str	r3, [r2, #32]
 80037b2:	4b67      	ldr	r3, [pc, #412]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	4a66      	ldr	r2, [pc, #408]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80037b8:	f023 0304 	bic.w	r3, r3, #4
 80037bc:	6213      	str	r3, [r2, #32]
 80037be:	e01c      	b.n	80037fa <HAL_RCC_OscConfig+0x36e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	d10c      	bne.n	80037e2 <HAL_RCC_OscConfig+0x356>
 80037c8:	4b61      	ldr	r3, [pc, #388]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	4a60      	ldr	r2, [pc, #384]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80037ce:	f043 0304 	orr.w	r3, r3, #4
 80037d2:	6213      	str	r3, [r2, #32]
 80037d4:	4b5e      	ldr	r3, [pc, #376]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	4a5d      	ldr	r2, [pc, #372]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6213      	str	r3, [r2, #32]
 80037e0:	e00b      	b.n	80037fa <HAL_RCC_OscConfig+0x36e>
 80037e2:	4b5b      	ldr	r3, [pc, #364]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	4a5a      	ldr	r2, [pc, #360]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	6213      	str	r3, [r2, #32]
 80037ee:	4b58      	ldr	r3, [pc, #352]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	4a57      	ldr	r2, [pc, #348]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80037f4:	f023 0304 	bic.w	r3, r3, #4
 80037f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d015      	beq.n	800382e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003802:	f7fe fe89 	bl	8002518 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003808:	e00a      	b.n	8003820 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380a:	f7fe fe85 	bl	8002518 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	f241 3288 	movw	r2, #5000	; 0x1388
 8003818:	4293      	cmp	r3, r2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e0b1      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003820:	4b4b      	ldr	r3, [pc, #300]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0ee      	beq.n	800380a <HAL_RCC_OscConfig+0x37e>
 800382c:	e014      	b.n	8003858 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382e:	f7fe fe73 	bl	8002518 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003834:	e00a      	b.n	800384c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f7fe fe6f 	bl	8002518 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f241 3288 	movw	r2, #5000	; 0x1388
 8003844:	4293      	cmp	r3, r2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e09b      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384c:	4b40      	ldr	r3, [pc, #256]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ee      	bne.n	8003836 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003858:	7dfb      	ldrb	r3, [r7, #23]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d105      	bne.n	800386a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385e:	4b3c      	ldr	r3, [pc, #240]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	4a3b      	ldr	r2, [pc, #236]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 8003864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003868:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8087 	beq.w	8003982 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003874:	4b36      	ldr	r3, [pc, #216]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b08      	cmp	r3, #8
 800387e:	d061      	beq.n	8003944 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d146      	bne.n	8003916 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003888:	4b33      	ldr	r3, [pc, #204]	; (8003958 <HAL_RCC_OscConfig+0x4cc>)
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388e:	f7fe fe43 	bl	8002518 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003896:	f7fe fe3f 	bl	8002518 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e06d      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038a8:	4b29      	ldr	r3, [pc, #164]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f0      	bne.n	8003896 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038bc:	d108      	bne.n	80038d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038be:	4b24      	ldr	r3, [pc, #144]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	4921      	ldr	r1, [pc, #132]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d0:	4b1f      	ldr	r3, [pc, #124]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a19      	ldr	r1, [r3, #32]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	430b      	orrs	r3, r1
 80038e2:	491b      	ldr	r1, [pc, #108]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e8:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <HAL_RCC_OscConfig+0x4cc>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7fe fe13 	bl	8002518 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f6:	f7fe fe0f 	bl	8002518 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e03d      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x46a>
 8003914:	e035      	b.n	8003982 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <HAL_RCC_OscConfig+0x4cc>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7fe fdfc 	bl	8002518 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003924:	f7fe fdf8 	bl	8002518 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e026      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x498>
 8003942:	e01e      	b.n	8003982 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d107      	bne.n	800395c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e019      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>
 8003950:	40021000 	.word	0x40021000
 8003954:	40007000 	.word	0x40007000
 8003958:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_OscConfig+0x500>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	429a      	cmp	r2, r3
 800396e:	d106      	bne.n	800397e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397a:	429a      	cmp	r2, r3
 800397c:	d001      	beq.n	8003982 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40021000 	.word	0x40021000

08003990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0d0      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039a4:	4b6a      	ldr	r3, [pc, #424]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d910      	bls.n	80039d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b67      	ldr	r3, [pc, #412]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 0207 	bic.w	r2, r3, #7
 80039ba:	4965      	ldr	r1, [pc, #404]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b63      	ldr	r3, [pc, #396]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0b8      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d020      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039ec:	4b59      	ldr	r3, [pc, #356]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4a58      	ldr	r2, [pc, #352]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 80039f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a04:	4b53      	ldr	r3, [pc, #332]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4a52      	ldr	r2, [pc, #328]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a10:	4b50      	ldr	r3, [pc, #320]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	494d      	ldr	r1, [pc, #308]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d040      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	4b47      	ldr	r3, [pc, #284]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d115      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e07f      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4e:	4b41      	ldr	r3, [pc, #260]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e073      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5e:	4b3d      	ldr	r3, [pc, #244]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e06b      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a6e:	4b39      	ldr	r3, [pc, #228]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f023 0203 	bic.w	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4936      	ldr	r1, [pc, #216]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a80:	f7fe fd4a 	bl	8002518 <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a88:	f7fe fd46 	bl	8002518 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e053      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9e:	4b2d      	ldr	r3, [pc, #180]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 020c 	and.w	r2, r3, #12
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d1eb      	bne.n	8003a88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab0:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d210      	bcs.n	8003ae0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003abe:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 0207 	bic.w	r2, r3, #7
 8003ac6:	4922      	ldr	r1, [pc, #136]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e032      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aec:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4916      	ldr	r1, [pc, #88]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d009      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b0a:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	490e      	ldr	r1, [pc, #56]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b1e:	f000 f821 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 8003b22:	4602      	mov	r2, r0
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	490a      	ldr	r1, [pc, #40]	; (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003b30:	5ccb      	ldrb	r3, [r1, r3]
 8003b32:	fa22 f303 	lsr.w	r3, r2, r3
 8003b36:	4a09      	ldr	r2, [pc, #36]	; (8003b5c <HAL_RCC_ClockConfig+0x1cc>)
 8003b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <HAL_RCC_ClockConfig+0x1d0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe fca8 	bl	8002494 <HAL_InitTick>

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40022000 	.word	0x40022000
 8003b54:	40021000 	.word	0x40021000
 8003b58:	08005c94 	.word	0x08005c94
 8003b5c:	20000014 	.word	0x20000014
 8003b60:	20000018 	.word	0x20000018

08003b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b64:	b490      	push	{r4, r7}
 8003b66:	b08a      	sub	sp, #40	; 0x28
 8003b68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b6a:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xac>)
 8003b6c:	1d3c      	adds	r4, r7, #4
 8003b6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b74:	f240 2301 	movw	r3, #513	; 0x201
 8003b78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	2300      	movs	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b8e:	4b21      	ldr	r3, [pc, #132]	; (8003c14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d002      	beq.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d003      	beq.n	8003baa <HAL_RCC_GetSysClockFreq+0x46>
 8003ba2:	e02b      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ba4:	4b1c      	ldr	r3, [pc, #112]	; (8003c18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ba6:	623b      	str	r3, [r7, #32]
      break;
 8003ba8:	e02b      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	0c9b      	lsrs	r3, r3, #18
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	3328      	adds	r3, #40	; 0x28
 8003bb4:	443b      	add	r3, r7
 8003bb6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003bba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d012      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	0c5b      	lsrs	r3, r3, #17
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	3328      	adds	r3, #40	; 0x28
 8003bd2:	443b      	add	r3, r7
 8003bd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	4a0e      	ldr	r2, [pc, #56]	; (8003c18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bde:	fb03 f202 	mul.w	r2, r3, r2
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bea:	e004      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	4a0b      	ldr	r2, [pc, #44]	; (8003c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf0:	fb02 f303 	mul.w	r3, r2, r3
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	623b      	str	r3, [r7, #32]
      break;
 8003bfa:	e002      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bfe:	623b      	str	r3, [r7, #32]
      break;
 8003c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c02:	6a3b      	ldr	r3, [r7, #32]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3728      	adds	r7, #40	; 0x28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc90      	pop	{r4, r7}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	08005c84 	.word	0x08005c84
 8003c14:	40021000 	.word	0x40021000
 8003c18:	007a1200 	.word	0x007a1200
 8003c1c:	003d0900 	.word	0x003d0900

08003c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c24:	4b02      	ldr	r3, [pc, #8]	; (8003c30 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c26:	681b      	ldr	r3, [r3, #0]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	20000014 	.word	0x20000014

08003c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c38:	f7ff fff2 	bl	8003c20 <HAL_RCC_GetHCLKFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	0a1b      	lsrs	r3, r3, #8
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	4903      	ldr	r1, [pc, #12]	; (8003c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40021000 	.word	0x40021000
 8003c58:	08005ca4 	.word	0x08005ca4

08003c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c60:	f7ff ffde 	bl	8003c20 <HAL_RCC_GetHCLKFreq>
 8003c64:	4602      	mov	r2, r0
 8003c66:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	0adb      	lsrs	r3, r3, #11
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	4903      	ldr	r1, [pc, #12]	; (8003c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c72:	5ccb      	ldrb	r3, [r1, r3]
 8003c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	08005ca4 	.word	0x08005ca4

08003c84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <RCC_Delay+0x34>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a0a      	ldr	r2, [pc, #40]	; (8003cbc <RCC_Delay+0x38>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	0a5b      	lsrs	r3, r3, #9
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	fb02 f303 	mul.w	r3, r2, r3
 8003c9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ca0:	bf00      	nop
  }
  while (Delay --);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1e5a      	subs	r2, r3, #1
 8003ca6:	60fa      	str	r2, [r7, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1f9      	bne.n	8003ca0 <RCC_Delay+0x1c>
}
 8003cac:	bf00      	nop
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr
 8003cb8:	20000014 	.word	0x20000014
 8003cbc:	10624dd3 	.word	0x10624dd3

08003cc0 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e047      	b.n	8003d62 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fe fae0 	bl	80022ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2224      	movs	r2, #36	; 0x24
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fb51 	bl	80043ac <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695a      	ldr	r2, [r3, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003d28:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0208 	orr.w	r2, r2, #8
 8003d38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08a      	sub	sp, #40	; 0x28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10d      	bne.n	8003dbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_UART_IRQHandler+0x52>
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fa4f 	bl	800425a <UART_Receive_IT>
      return;
 8003dbc:	e17b      	b.n	80040b6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80b1 	beq.w	8003f28 <HAL_UART_IRQHandler+0x1bc>
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d105      	bne.n	8003ddc <HAL_UART_IRQHandler+0x70>
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 80a6 	beq.w	8003f28 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_UART_IRQHandler+0x90>
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	f043 0201 	orr.w	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_UART_IRQHandler+0xb0>
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f043 0202 	orr.w	r2, r3, #2
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_UART_IRQHandler+0xd0>
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	f043 0204 	orr.w	r2, r3, #4
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00f      	beq.n	8003e66 <HAL_UART_IRQHandler+0xfa>
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <HAL_UART_IRQHandler+0xee>
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f043 0208 	orr.w	r2, r3, #8
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 811e 	beq.w	80040ac <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <HAL_UART_IRQHandler+0x11e>
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f9e8 	bl	800425a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bf14      	ite	ne
 8003e98:	2301      	movne	r3, #1
 8003e9a:	2300      	moveq	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x146>
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d031      	beq.n	8003f16 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f92a 	bl	800410c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d023      	beq.n	8003f0e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d013      	beq.n	8003f06 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	4a76      	ldr	r2, [pc, #472]	; (80040bc <HAL_UART_IRQHandler+0x350>)
 8003ee4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe fc8a 	bl	8002804 <HAL_DMA_Abort_IT>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d016      	beq.n	8003f24 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f00:	4610      	mov	r0, r2
 8003f02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f04:	e00e      	b.n	8003f24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f8ec 	bl	80040e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0c:	e00a      	b.n	8003f24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f8e8 	bl	80040e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f14:	e006      	b.n	8003f24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f8e4 	bl	80040e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f22:	e0c3      	b.n	80040ac <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f24:	bf00      	nop
    return;
 8003f26:	e0c1      	b.n	80040ac <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	f040 80a1 	bne.w	8004074 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 809b 	beq.w	8004074 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8095 	beq.w	8004074 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d04e      	beq.n	800400c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f78:	8a3b      	ldrh	r3, [r7, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8098 	beq.w	80040b0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f84:	8a3a      	ldrh	r2, [r7, #16]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	f080 8092 	bcs.w	80040b0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8a3a      	ldrh	r2, [r7, #16]
 8003f90:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d02b      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003faa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fca:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0210 	bic.w	r2, r2, #16
 8003fe8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe fbcd 	bl	800278e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	b29b      	uxth	r3, r3
 8004002:	4619      	mov	r1, r3
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f876 	bl	80040f6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800400a:	e051      	b.n	80040b0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004014:	b29b      	uxth	r3, r3
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d047      	beq.n	80040b4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004024:	8a7b      	ldrh	r3, [r7, #18]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d044      	beq.n	80040b4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004038:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0201 	bic.w	r2, r2, #1
 8004048:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0210 	bic.w	r2, r2, #16
 8004066:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004068:	8a7b      	ldrh	r3, [r7, #18]
 800406a:	4619      	mov	r1, r3
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f842 	bl	80040f6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004072:	e01f      	b.n	80040b4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407a:	2b00      	cmp	r3, #0
 800407c:	d008      	beq.n	8004090 <HAL_UART_IRQHandler+0x324>
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f87f 	bl	800418c <UART_Transmit_IT>
    return;
 800408e:	e012      	b.n	80040b6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00d      	beq.n	80040b6 <HAL_UART_IRQHandler+0x34a>
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f8c0 	bl	800422a <UART_EndTransmit_IT>
    return;
 80040aa:	e004      	b.n	80040b6 <HAL_UART_IRQHandler+0x34a>
    return;
 80040ac:	bf00      	nop
 80040ae:	e002      	b.n	80040b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80040b0:	bf00      	nop
 80040b2:	e000      	b.n	80040b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80040b4:	bf00      	nop
  }
}
 80040b6:	3728      	adds	r7, #40	; 0x28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	08004165 	.word	0x08004165

080040c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr

080040d2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	460b      	mov	r3, r1
 8004100:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004122:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	2b01      	cmp	r3, #1
 800413a:	d107      	bne.n	800414c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0210 	bic.w	r2, r2, #16
 800414a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	631a      	str	r2, [r3, #48]	; 0x30
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f7ff ffb0 	bl	80040e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b21      	cmp	r3, #33	; 0x21
 800419e:	d13e      	bne.n	800421e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a8:	d114      	bne.n	80041d4 <UART_Transmit_IT+0x48>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d110      	bne.n	80041d4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	1c9a      	adds	r2, r3, #2
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	621a      	str	r2, [r3, #32]
 80041d2:	e008      	b.n	80041e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	1c59      	adds	r1, r3, #1
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6211      	str	r1, [r2, #32]
 80041de:	781a      	ldrb	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	4619      	mov	r1, r3
 80041f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10f      	bne.n	800421a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004208:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004218:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	e000      	b.n	8004220 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800421e:	2302      	movs	r3, #2
  }
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr

0800422a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004240:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff ff38 	bl	80040c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b086      	sub	sp, #24
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b22      	cmp	r3, #34	; 0x22
 800426c:	f040 8099 	bne.w	80043a2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004278:	d117      	bne.n	80042aa <UART_Receive_IT+0x50>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d113      	bne.n	80042aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	b29b      	uxth	r3, r3
 8004294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004298:	b29a      	uxth	r2, r3
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a2:	1c9a      	adds	r2, r3, #2
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28
 80042a8:	e026      	b.n	80042f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042bc:	d007      	beq.n	80042ce <UART_Receive_IT+0x74>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10a      	bne.n	80042dc <UART_Receive_IT+0x82>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	e008      	b.n	80042ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29b      	uxth	r3, r3
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	4619      	mov	r1, r3
 8004306:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004308:	2b00      	cmp	r3, #0
 800430a:	d148      	bne.n	800439e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0220 	bic.w	r2, r2, #32
 800431a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800432a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0201 	bic.w	r2, r2, #1
 800433a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004348:	2b01      	cmp	r3, #1
 800434a:	d123      	bne.n	8004394 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0210 	bic.w	r2, r2, #16
 8004360:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b10      	cmp	r3, #16
 800436e:	d10a      	bne.n	8004386 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff feb2 	bl	80040f6 <HAL_UARTEx_RxEventCallback>
 8004392:	e002      	b.n	800439a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff fe9c 	bl	80040d2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e002      	b.n	80043a4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
  }
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043e6:	f023 030c 	bic.w	r3, r3, #12
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6812      	ldr	r2, [r2, #0]
 80043ee:	68b9      	ldr	r1, [r7, #8]
 80043f0:	430b      	orrs	r3, r1
 80043f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a2c      	ldr	r2, [pc, #176]	; (80044c0 <UART_SetConfig+0x114>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d103      	bne.n	800441c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004414:	f7ff fc22 	bl	8003c5c <HAL_RCC_GetPCLK2Freq>
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	e002      	b.n	8004422 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800441c:	f7ff fc0a 	bl	8003c34 <HAL_RCC_GetPCLK1Freq>
 8004420:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	009a      	lsls	r2, r3, #2
 800442c:	441a      	add	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <UART_SetConfig+0x118>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	0119      	lsls	r1, r3, #4
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	009a      	lsls	r2, r3, #2
 800444c:	441a      	add	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	fbb2 f2f3 	udiv	r2, r2, r3
 8004458:	4b1a      	ldr	r3, [pc, #104]	; (80044c4 <UART_SetConfig+0x118>)
 800445a:	fba3 0302 	umull	r0, r3, r3, r2
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	2064      	movs	r0, #100	; 0x64
 8004462:	fb00 f303 	mul.w	r3, r0, r3
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	3332      	adds	r3, #50	; 0x32
 800446c:	4a15      	ldr	r2, [pc, #84]	; (80044c4 <UART_SetConfig+0x118>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004478:	4419      	add	r1, r3
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	009a      	lsls	r2, r3, #2
 8004484:	441a      	add	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004490:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <UART_SetConfig+0x118>)
 8004492:	fba3 0302 	umull	r0, r3, r3, r2
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	2064      	movs	r0, #100	; 0x64
 800449a:	fb00 f303 	mul.w	r3, r0, r3
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	3332      	adds	r3, #50	; 0x32
 80044a4:	4a07      	ldr	r2, [pc, #28]	; (80044c4 <UART_SetConfig+0x118>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	f003 020f 	and.w	r2, r3, #15
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	440a      	add	r2, r1
 80044b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044b8:	bf00      	nop
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40013800 	.word	0x40013800
 80044c4:	51eb851f 	.word	0x51eb851f

080044c8 <__errno>:
 80044c8:	4b01      	ldr	r3, [pc, #4]	; (80044d0 <__errno+0x8>)
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	20000020 	.word	0x20000020

080044d4 <__libc_init_array>:
 80044d4:	b570      	push	{r4, r5, r6, lr}
 80044d6:	2600      	movs	r6, #0
 80044d8:	4d0c      	ldr	r5, [pc, #48]	; (800450c <__libc_init_array+0x38>)
 80044da:	4c0d      	ldr	r4, [pc, #52]	; (8004510 <__libc_init_array+0x3c>)
 80044dc:	1b64      	subs	r4, r4, r5
 80044de:	10a4      	asrs	r4, r4, #2
 80044e0:	42a6      	cmp	r6, r4
 80044e2:	d109      	bne.n	80044f8 <__libc_init_array+0x24>
 80044e4:	f001 fb7e 	bl	8005be4 <_init>
 80044e8:	2600      	movs	r6, #0
 80044ea:	4d0a      	ldr	r5, [pc, #40]	; (8004514 <__libc_init_array+0x40>)
 80044ec:	4c0a      	ldr	r4, [pc, #40]	; (8004518 <__libc_init_array+0x44>)
 80044ee:	1b64      	subs	r4, r4, r5
 80044f0:	10a4      	asrs	r4, r4, #2
 80044f2:	42a6      	cmp	r6, r4
 80044f4:	d105      	bne.n	8004502 <__libc_init_array+0x2e>
 80044f6:	bd70      	pop	{r4, r5, r6, pc}
 80044f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044fc:	4798      	blx	r3
 80044fe:	3601      	adds	r6, #1
 8004500:	e7ee      	b.n	80044e0 <__libc_init_array+0xc>
 8004502:	f855 3b04 	ldr.w	r3, [r5], #4
 8004506:	4798      	blx	r3
 8004508:	3601      	adds	r6, #1
 800450a:	e7f2      	b.n	80044f2 <__libc_init_array+0x1e>
 800450c:	08005d10 	.word	0x08005d10
 8004510:	08005d10 	.word	0x08005d10
 8004514:	08005d10 	.word	0x08005d10
 8004518:	08005d14 	.word	0x08005d14

0800451c <memset>:
 800451c:	4603      	mov	r3, r0
 800451e:	4402      	add	r2, r0
 8004520:	4293      	cmp	r3, r2
 8004522:	d100      	bne.n	8004526 <memset+0xa>
 8004524:	4770      	bx	lr
 8004526:	f803 1b01 	strb.w	r1, [r3], #1
 800452a:	e7f9      	b.n	8004520 <memset+0x4>

0800452c <siprintf>:
 800452c:	b40e      	push	{r1, r2, r3}
 800452e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004532:	b500      	push	{lr}
 8004534:	b09c      	sub	sp, #112	; 0x70
 8004536:	ab1d      	add	r3, sp, #116	; 0x74
 8004538:	9002      	str	r0, [sp, #8]
 800453a:	9006      	str	r0, [sp, #24]
 800453c:	9107      	str	r1, [sp, #28]
 800453e:	9104      	str	r1, [sp, #16]
 8004540:	4808      	ldr	r0, [pc, #32]	; (8004564 <siprintf+0x38>)
 8004542:	4909      	ldr	r1, [pc, #36]	; (8004568 <siprintf+0x3c>)
 8004544:	f853 2b04 	ldr.w	r2, [r3], #4
 8004548:	9105      	str	r1, [sp, #20]
 800454a:	6800      	ldr	r0, [r0, #0]
 800454c:	a902      	add	r1, sp, #8
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	f000 f868 	bl	8004624 <_svfiprintf_r>
 8004554:	2200      	movs	r2, #0
 8004556:	9b02      	ldr	r3, [sp, #8]
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	b01c      	add	sp, #112	; 0x70
 800455c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004560:	b003      	add	sp, #12
 8004562:	4770      	bx	lr
 8004564:	20000020 	.word	0x20000020
 8004568:	ffff0208 	.word	0xffff0208

0800456c <__ssputs_r>:
 800456c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004570:	688e      	ldr	r6, [r1, #8]
 8004572:	4682      	mov	sl, r0
 8004574:	429e      	cmp	r6, r3
 8004576:	460c      	mov	r4, r1
 8004578:	4690      	mov	r8, r2
 800457a:	461f      	mov	r7, r3
 800457c:	d838      	bhi.n	80045f0 <__ssputs_r+0x84>
 800457e:	898a      	ldrh	r2, [r1, #12]
 8004580:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004584:	d032      	beq.n	80045ec <__ssputs_r+0x80>
 8004586:	6825      	ldr	r5, [r4, #0]
 8004588:	6909      	ldr	r1, [r1, #16]
 800458a:	3301      	adds	r3, #1
 800458c:	eba5 0901 	sub.w	r9, r5, r1
 8004590:	6965      	ldr	r5, [r4, #20]
 8004592:	444b      	add	r3, r9
 8004594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004598:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800459c:	106d      	asrs	r5, r5, #1
 800459e:	429d      	cmp	r5, r3
 80045a0:	bf38      	it	cc
 80045a2:	461d      	movcc	r5, r3
 80045a4:	0553      	lsls	r3, r2, #21
 80045a6:	d531      	bpl.n	800460c <__ssputs_r+0xa0>
 80045a8:	4629      	mov	r1, r5
 80045aa:	f000 fb6f 	bl	8004c8c <_malloc_r>
 80045ae:	4606      	mov	r6, r0
 80045b0:	b950      	cbnz	r0, 80045c8 <__ssputs_r+0x5c>
 80045b2:	230c      	movs	r3, #12
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295
 80045b8:	f8ca 3000 	str.w	r3, [sl]
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c2:	81a3      	strh	r3, [r4, #12]
 80045c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c8:	464a      	mov	r2, r9
 80045ca:	6921      	ldr	r1, [r4, #16]
 80045cc:	f000 face 	bl	8004b6c <memcpy>
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045da:	81a3      	strh	r3, [r4, #12]
 80045dc:	6126      	str	r6, [r4, #16]
 80045de:	444e      	add	r6, r9
 80045e0:	6026      	str	r6, [r4, #0]
 80045e2:	463e      	mov	r6, r7
 80045e4:	6165      	str	r5, [r4, #20]
 80045e6:	eba5 0509 	sub.w	r5, r5, r9
 80045ea:	60a5      	str	r5, [r4, #8]
 80045ec:	42be      	cmp	r6, r7
 80045ee:	d900      	bls.n	80045f2 <__ssputs_r+0x86>
 80045f0:	463e      	mov	r6, r7
 80045f2:	4632      	mov	r2, r6
 80045f4:	4641      	mov	r1, r8
 80045f6:	6820      	ldr	r0, [r4, #0]
 80045f8:	f000 fac6 	bl	8004b88 <memmove>
 80045fc:	68a3      	ldr	r3, [r4, #8]
 80045fe:	2000      	movs	r0, #0
 8004600:	1b9b      	subs	r3, r3, r6
 8004602:	60a3      	str	r3, [r4, #8]
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	4433      	add	r3, r6
 8004608:	6023      	str	r3, [r4, #0]
 800460a:	e7db      	b.n	80045c4 <__ssputs_r+0x58>
 800460c:	462a      	mov	r2, r5
 800460e:	f000 fbb1 	bl	8004d74 <_realloc_r>
 8004612:	4606      	mov	r6, r0
 8004614:	2800      	cmp	r0, #0
 8004616:	d1e1      	bne.n	80045dc <__ssputs_r+0x70>
 8004618:	4650      	mov	r0, sl
 800461a:	6921      	ldr	r1, [r4, #16]
 800461c:	f000 face 	bl	8004bbc <_free_r>
 8004620:	e7c7      	b.n	80045b2 <__ssputs_r+0x46>
	...

08004624 <_svfiprintf_r>:
 8004624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004628:	4698      	mov	r8, r3
 800462a:	898b      	ldrh	r3, [r1, #12]
 800462c:	4607      	mov	r7, r0
 800462e:	061b      	lsls	r3, r3, #24
 8004630:	460d      	mov	r5, r1
 8004632:	4614      	mov	r4, r2
 8004634:	b09d      	sub	sp, #116	; 0x74
 8004636:	d50e      	bpl.n	8004656 <_svfiprintf_r+0x32>
 8004638:	690b      	ldr	r3, [r1, #16]
 800463a:	b963      	cbnz	r3, 8004656 <_svfiprintf_r+0x32>
 800463c:	2140      	movs	r1, #64	; 0x40
 800463e:	f000 fb25 	bl	8004c8c <_malloc_r>
 8004642:	6028      	str	r0, [r5, #0]
 8004644:	6128      	str	r0, [r5, #16]
 8004646:	b920      	cbnz	r0, 8004652 <_svfiprintf_r+0x2e>
 8004648:	230c      	movs	r3, #12
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	f04f 30ff 	mov.w	r0, #4294967295
 8004650:	e0d1      	b.n	80047f6 <_svfiprintf_r+0x1d2>
 8004652:	2340      	movs	r3, #64	; 0x40
 8004654:	616b      	str	r3, [r5, #20]
 8004656:	2300      	movs	r3, #0
 8004658:	9309      	str	r3, [sp, #36]	; 0x24
 800465a:	2320      	movs	r3, #32
 800465c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004660:	2330      	movs	r3, #48	; 0x30
 8004662:	f04f 0901 	mov.w	r9, #1
 8004666:	f8cd 800c 	str.w	r8, [sp, #12]
 800466a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004810 <_svfiprintf_r+0x1ec>
 800466e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004672:	4623      	mov	r3, r4
 8004674:	469a      	mov	sl, r3
 8004676:	f813 2b01 	ldrb.w	r2, [r3], #1
 800467a:	b10a      	cbz	r2, 8004680 <_svfiprintf_r+0x5c>
 800467c:	2a25      	cmp	r2, #37	; 0x25
 800467e:	d1f9      	bne.n	8004674 <_svfiprintf_r+0x50>
 8004680:	ebba 0b04 	subs.w	fp, sl, r4
 8004684:	d00b      	beq.n	800469e <_svfiprintf_r+0x7a>
 8004686:	465b      	mov	r3, fp
 8004688:	4622      	mov	r2, r4
 800468a:	4629      	mov	r1, r5
 800468c:	4638      	mov	r0, r7
 800468e:	f7ff ff6d 	bl	800456c <__ssputs_r>
 8004692:	3001      	adds	r0, #1
 8004694:	f000 80aa 	beq.w	80047ec <_svfiprintf_r+0x1c8>
 8004698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800469a:	445a      	add	r2, fp
 800469c:	9209      	str	r2, [sp, #36]	; 0x24
 800469e:	f89a 3000 	ldrb.w	r3, [sl]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80a2 	beq.w	80047ec <_svfiprintf_r+0x1c8>
 80046a8:	2300      	movs	r3, #0
 80046aa:	f04f 32ff 	mov.w	r2, #4294967295
 80046ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046b2:	f10a 0a01 	add.w	sl, sl, #1
 80046b6:	9304      	str	r3, [sp, #16]
 80046b8:	9307      	str	r3, [sp, #28]
 80046ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046be:	931a      	str	r3, [sp, #104]	; 0x68
 80046c0:	4654      	mov	r4, sl
 80046c2:	2205      	movs	r2, #5
 80046c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046c8:	4851      	ldr	r0, [pc, #324]	; (8004810 <_svfiprintf_r+0x1ec>)
 80046ca:	f000 fa41 	bl	8004b50 <memchr>
 80046ce:	9a04      	ldr	r2, [sp, #16]
 80046d0:	b9d8      	cbnz	r0, 800470a <_svfiprintf_r+0xe6>
 80046d2:	06d0      	lsls	r0, r2, #27
 80046d4:	bf44      	itt	mi
 80046d6:	2320      	movmi	r3, #32
 80046d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046dc:	0711      	lsls	r1, r2, #28
 80046de:	bf44      	itt	mi
 80046e0:	232b      	movmi	r3, #43	; 0x2b
 80046e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046e6:	f89a 3000 	ldrb.w	r3, [sl]
 80046ea:	2b2a      	cmp	r3, #42	; 0x2a
 80046ec:	d015      	beq.n	800471a <_svfiprintf_r+0xf6>
 80046ee:	4654      	mov	r4, sl
 80046f0:	2000      	movs	r0, #0
 80046f2:	f04f 0c0a 	mov.w	ip, #10
 80046f6:	9a07      	ldr	r2, [sp, #28]
 80046f8:	4621      	mov	r1, r4
 80046fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046fe:	3b30      	subs	r3, #48	; 0x30
 8004700:	2b09      	cmp	r3, #9
 8004702:	d94e      	bls.n	80047a2 <_svfiprintf_r+0x17e>
 8004704:	b1b0      	cbz	r0, 8004734 <_svfiprintf_r+0x110>
 8004706:	9207      	str	r2, [sp, #28]
 8004708:	e014      	b.n	8004734 <_svfiprintf_r+0x110>
 800470a:	eba0 0308 	sub.w	r3, r0, r8
 800470e:	fa09 f303 	lsl.w	r3, r9, r3
 8004712:	4313      	orrs	r3, r2
 8004714:	46a2      	mov	sl, r4
 8004716:	9304      	str	r3, [sp, #16]
 8004718:	e7d2      	b.n	80046c0 <_svfiprintf_r+0x9c>
 800471a:	9b03      	ldr	r3, [sp, #12]
 800471c:	1d19      	adds	r1, r3, #4
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	9103      	str	r1, [sp, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	bfbb      	ittet	lt
 8004726:	425b      	neglt	r3, r3
 8004728:	f042 0202 	orrlt.w	r2, r2, #2
 800472c:	9307      	strge	r3, [sp, #28]
 800472e:	9307      	strlt	r3, [sp, #28]
 8004730:	bfb8      	it	lt
 8004732:	9204      	strlt	r2, [sp, #16]
 8004734:	7823      	ldrb	r3, [r4, #0]
 8004736:	2b2e      	cmp	r3, #46	; 0x2e
 8004738:	d10c      	bne.n	8004754 <_svfiprintf_r+0x130>
 800473a:	7863      	ldrb	r3, [r4, #1]
 800473c:	2b2a      	cmp	r3, #42	; 0x2a
 800473e:	d135      	bne.n	80047ac <_svfiprintf_r+0x188>
 8004740:	9b03      	ldr	r3, [sp, #12]
 8004742:	3402      	adds	r4, #2
 8004744:	1d1a      	adds	r2, r3, #4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	9203      	str	r2, [sp, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	bfb8      	it	lt
 800474e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004752:	9305      	str	r3, [sp, #20]
 8004754:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004814 <_svfiprintf_r+0x1f0>
 8004758:	2203      	movs	r2, #3
 800475a:	4650      	mov	r0, sl
 800475c:	7821      	ldrb	r1, [r4, #0]
 800475e:	f000 f9f7 	bl	8004b50 <memchr>
 8004762:	b140      	cbz	r0, 8004776 <_svfiprintf_r+0x152>
 8004764:	2340      	movs	r3, #64	; 0x40
 8004766:	eba0 000a 	sub.w	r0, r0, sl
 800476a:	fa03 f000 	lsl.w	r0, r3, r0
 800476e:	9b04      	ldr	r3, [sp, #16]
 8004770:	3401      	adds	r4, #1
 8004772:	4303      	orrs	r3, r0
 8004774:	9304      	str	r3, [sp, #16]
 8004776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800477a:	2206      	movs	r2, #6
 800477c:	4826      	ldr	r0, [pc, #152]	; (8004818 <_svfiprintf_r+0x1f4>)
 800477e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004782:	f000 f9e5 	bl	8004b50 <memchr>
 8004786:	2800      	cmp	r0, #0
 8004788:	d038      	beq.n	80047fc <_svfiprintf_r+0x1d8>
 800478a:	4b24      	ldr	r3, [pc, #144]	; (800481c <_svfiprintf_r+0x1f8>)
 800478c:	bb1b      	cbnz	r3, 80047d6 <_svfiprintf_r+0x1b2>
 800478e:	9b03      	ldr	r3, [sp, #12]
 8004790:	3307      	adds	r3, #7
 8004792:	f023 0307 	bic.w	r3, r3, #7
 8004796:	3308      	adds	r3, #8
 8004798:	9303      	str	r3, [sp, #12]
 800479a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800479c:	4433      	add	r3, r6
 800479e:	9309      	str	r3, [sp, #36]	; 0x24
 80047a0:	e767      	b.n	8004672 <_svfiprintf_r+0x4e>
 80047a2:	460c      	mov	r4, r1
 80047a4:	2001      	movs	r0, #1
 80047a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80047aa:	e7a5      	b.n	80046f8 <_svfiprintf_r+0xd4>
 80047ac:	2300      	movs	r3, #0
 80047ae:	f04f 0c0a 	mov.w	ip, #10
 80047b2:	4619      	mov	r1, r3
 80047b4:	3401      	adds	r4, #1
 80047b6:	9305      	str	r3, [sp, #20]
 80047b8:	4620      	mov	r0, r4
 80047ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047be:	3a30      	subs	r2, #48	; 0x30
 80047c0:	2a09      	cmp	r2, #9
 80047c2:	d903      	bls.n	80047cc <_svfiprintf_r+0x1a8>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0c5      	beq.n	8004754 <_svfiprintf_r+0x130>
 80047c8:	9105      	str	r1, [sp, #20]
 80047ca:	e7c3      	b.n	8004754 <_svfiprintf_r+0x130>
 80047cc:	4604      	mov	r4, r0
 80047ce:	2301      	movs	r3, #1
 80047d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80047d4:	e7f0      	b.n	80047b8 <_svfiprintf_r+0x194>
 80047d6:	ab03      	add	r3, sp, #12
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	462a      	mov	r2, r5
 80047dc:	4638      	mov	r0, r7
 80047de:	4b10      	ldr	r3, [pc, #64]	; (8004820 <_svfiprintf_r+0x1fc>)
 80047e0:	a904      	add	r1, sp, #16
 80047e2:	f3af 8000 	nop.w
 80047e6:	1c42      	adds	r2, r0, #1
 80047e8:	4606      	mov	r6, r0
 80047ea:	d1d6      	bne.n	800479a <_svfiprintf_r+0x176>
 80047ec:	89ab      	ldrh	r3, [r5, #12]
 80047ee:	065b      	lsls	r3, r3, #25
 80047f0:	f53f af2c 	bmi.w	800464c <_svfiprintf_r+0x28>
 80047f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047f6:	b01d      	add	sp, #116	; 0x74
 80047f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fc:	ab03      	add	r3, sp, #12
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	462a      	mov	r2, r5
 8004802:	4638      	mov	r0, r7
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <_svfiprintf_r+0x1fc>)
 8004806:	a904      	add	r1, sp, #16
 8004808:	f000 f87c 	bl	8004904 <_printf_i>
 800480c:	e7eb      	b.n	80047e6 <_svfiprintf_r+0x1c2>
 800480e:	bf00      	nop
 8004810:	08005cac 	.word	0x08005cac
 8004814:	08005cb2 	.word	0x08005cb2
 8004818:	08005cb6 	.word	0x08005cb6
 800481c:	00000000 	.word	0x00000000
 8004820:	0800456d 	.word	0x0800456d

08004824 <_printf_common>:
 8004824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004828:	4616      	mov	r6, r2
 800482a:	4699      	mov	r9, r3
 800482c:	688a      	ldr	r2, [r1, #8]
 800482e:	690b      	ldr	r3, [r1, #16]
 8004830:	4607      	mov	r7, r0
 8004832:	4293      	cmp	r3, r2
 8004834:	bfb8      	it	lt
 8004836:	4613      	movlt	r3, r2
 8004838:	6033      	str	r3, [r6, #0]
 800483a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800483e:	460c      	mov	r4, r1
 8004840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004844:	b10a      	cbz	r2, 800484a <_printf_common+0x26>
 8004846:	3301      	adds	r3, #1
 8004848:	6033      	str	r3, [r6, #0]
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	0699      	lsls	r1, r3, #26
 800484e:	bf42      	ittt	mi
 8004850:	6833      	ldrmi	r3, [r6, #0]
 8004852:	3302      	addmi	r3, #2
 8004854:	6033      	strmi	r3, [r6, #0]
 8004856:	6825      	ldr	r5, [r4, #0]
 8004858:	f015 0506 	ands.w	r5, r5, #6
 800485c:	d106      	bne.n	800486c <_printf_common+0x48>
 800485e:	f104 0a19 	add.w	sl, r4, #25
 8004862:	68e3      	ldr	r3, [r4, #12]
 8004864:	6832      	ldr	r2, [r6, #0]
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	42ab      	cmp	r3, r5
 800486a:	dc28      	bgt.n	80048be <_printf_common+0x9a>
 800486c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004870:	1e13      	subs	r3, r2, #0
 8004872:	6822      	ldr	r2, [r4, #0]
 8004874:	bf18      	it	ne
 8004876:	2301      	movne	r3, #1
 8004878:	0692      	lsls	r2, r2, #26
 800487a:	d42d      	bmi.n	80048d8 <_printf_common+0xb4>
 800487c:	4649      	mov	r1, r9
 800487e:	4638      	mov	r0, r7
 8004880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004884:	47c0      	blx	r8
 8004886:	3001      	adds	r0, #1
 8004888:	d020      	beq.n	80048cc <_printf_common+0xa8>
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	68e5      	ldr	r5, [r4, #12]
 800488e:	f003 0306 	and.w	r3, r3, #6
 8004892:	2b04      	cmp	r3, #4
 8004894:	bf18      	it	ne
 8004896:	2500      	movne	r5, #0
 8004898:	6832      	ldr	r2, [r6, #0]
 800489a:	f04f 0600 	mov.w	r6, #0
 800489e:	68a3      	ldr	r3, [r4, #8]
 80048a0:	bf08      	it	eq
 80048a2:	1aad      	subeq	r5, r5, r2
 80048a4:	6922      	ldr	r2, [r4, #16]
 80048a6:	bf08      	it	eq
 80048a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048ac:	4293      	cmp	r3, r2
 80048ae:	bfc4      	itt	gt
 80048b0:	1a9b      	subgt	r3, r3, r2
 80048b2:	18ed      	addgt	r5, r5, r3
 80048b4:	341a      	adds	r4, #26
 80048b6:	42b5      	cmp	r5, r6
 80048b8:	d11a      	bne.n	80048f0 <_printf_common+0xcc>
 80048ba:	2000      	movs	r0, #0
 80048bc:	e008      	b.n	80048d0 <_printf_common+0xac>
 80048be:	2301      	movs	r3, #1
 80048c0:	4652      	mov	r2, sl
 80048c2:	4649      	mov	r1, r9
 80048c4:	4638      	mov	r0, r7
 80048c6:	47c0      	blx	r8
 80048c8:	3001      	adds	r0, #1
 80048ca:	d103      	bne.n	80048d4 <_printf_common+0xb0>
 80048cc:	f04f 30ff 	mov.w	r0, #4294967295
 80048d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d4:	3501      	adds	r5, #1
 80048d6:	e7c4      	b.n	8004862 <_printf_common+0x3e>
 80048d8:	2030      	movs	r0, #48	; 0x30
 80048da:	18e1      	adds	r1, r4, r3
 80048dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048e6:	4422      	add	r2, r4
 80048e8:	3302      	adds	r3, #2
 80048ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048ee:	e7c5      	b.n	800487c <_printf_common+0x58>
 80048f0:	2301      	movs	r3, #1
 80048f2:	4622      	mov	r2, r4
 80048f4:	4649      	mov	r1, r9
 80048f6:	4638      	mov	r0, r7
 80048f8:	47c0      	blx	r8
 80048fa:	3001      	adds	r0, #1
 80048fc:	d0e6      	beq.n	80048cc <_printf_common+0xa8>
 80048fe:	3601      	adds	r6, #1
 8004900:	e7d9      	b.n	80048b6 <_printf_common+0x92>
	...

08004904 <_printf_i>:
 8004904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004908:	7e0f      	ldrb	r7, [r1, #24]
 800490a:	4691      	mov	r9, r2
 800490c:	2f78      	cmp	r7, #120	; 0x78
 800490e:	4680      	mov	r8, r0
 8004910:	460c      	mov	r4, r1
 8004912:	469a      	mov	sl, r3
 8004914:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004916:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800491a:	d807      	bhi.n	800492c <_printf_i+0x28>
 800491c:	2f62      	cmp	r7, #98	; 0x62
 800491e:	d80a      	bhi.n	8004936 <_printf_i+0x32>
 8004920:	2f00      	cmp	r7, #0
 8004922:	f000 80d9 	beq.w	8004ad8 <_printf_i+0x1d4>
 8004926:	2f58      	cmp	r7, #88	; 0x58
 8004928:	f000 80a4 	beq.w	8004a74 <_printf_i+0x170>
 800492c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004934:	e03a      	b.n	80049ac <_printf_i+0xa8>
 8004936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800493a:	2b15      	cmp	r3, #21
 800493c:	d8f6      	bhi.n	800492c <_printf_i+0x28>
 800493e:	a101      	add	r1, pc, #4	; (adr r1, 8004944 <_printf_i+0x40>)
 8004940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004944:	0800499d 	.word	0x0800499d
 8004948:	080049b1 	.word	0x080049b1
 800494c:	0800492d 	.word	0x0800492d
 8004950:	0800492d 	.word	0x0800492d
 8004954:	0800492d 	.word	0x0800492d
 8004958:	0800492d 	.word	0x0800492d
 800495c:	080049b1 	.word	0x080049b1
 8004960:	0800492d 	.word	0x0800492d
 8004964:	0800492d 	.word	0x0800492d
 8004968:	0800492d 	.word	0x0800492d
 800496c:	0800492d 	.word	0x0800492d
 8004970:	08004abf 	.word	0x08004abf
 8004974:	080049e1 	.word	0x080049e1
 8004978:	08004aa1 	.word	0x08004aa1
 800497c:	0800492d 	.word	0x0800492d
 8004980:	0800492d 	.word	0x0800492d
 8004984:	08004ae1 	.word	0x08004ae1
 8004988:	0800492d 	.word	0x0800492d
 800498c:	080049e1 	.word	0x080049e1
 8004990:	0800492d 	.word	0x0800492d
 8004994:	0800492d 	.word	0x0800492d
 8004998:	08004aa9 	.word	0x08004aa9
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	1d1a      	adds	r2, r3, #4
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	602a      	str	r2, [r5, #0]
 80049a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0a4      	b.n	8004afa <_printf_i+0x1f6>
 80049b0:	6820      	ldr	r0, [r4, #0]
 80049b2:	6829      	ldr	r1, [r5, #0]
 80049b4:	0606      	lsls	r6, r0, #24
 80049b6:	f101 0304 	add.w	r3, r1, #4
 80049ba:	d50a      	bpl.n	80049d2 <_printf_i+0xce>
 80049bc:	680e      	ldr	r6, [r1, #0]
 80049be:	602b      	str	r3, [r5, #0]
 80049c0:	2e00      	cmp	r6, #0
 80049c2:	da03      	bge.n	80049cc <_printf_i+0xc8>
 80049c4:	232d      	movs	r3, #45	; 0x2d
 80049c6:	4276      	negs	r6, r6
 80049c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049cc:	230a      	movs	r3, #10
 80049ce:	485e      	ldr	r0, [pc, #376]	; (8004b48 <_printf_i+0x244>)
 80049d0:	e019      	b.n	8004a06 <_printf_i+0x102>
 80049d2:	680e      	ldr	r6, [r1, #0]
 80049d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049d8:	602b      	str	r3, [r5, #0]
 80049da:	bf18      	it	ne
 80049dc:	b236      	sxthne	r6, r6
 80049de:	e7ef      	b.n	80049c0 <_printf_i+0xbc>
 80049e0:	682b      	ldr	r3, [r5, #0]
 80049e2:	6820      	ldr	r0, [r4, #0]
 80049e4:	1d19      	adds	r1, r3, #4
 80049e6:	6029      	str	r1, [r5, #0]
 80049e8:	0601      	lsls	r1, r0, #24
 80049ea:	d501      	bpl.n	80049f0 <_printf_i+0xec>
 80049ec:	681e      	ldr	r6, [r3, #0]
 80049ee:	e002      	b.n	80049f6 <_printf_i+0xf2>
 80049f0:	0646      	lsls	r6, r0, #25
 80049f2:	d5fb      	bpl.n	80049ec <_printf_i+0xe8>
 80049f4:	881e      	ldrh	r6, [r3, #0]
 80049f6:	2f6f      	cmp	r7, #111	; 0x6f
 80049f8:	bf0c      	ite	eq
 80049fa:	2308      	moveq	r3, #8
 80049fc:	230a      	movne	r3, #10
 80049fe:	4852      	ldr	r0, [pc, #328]	; (8004b48 <_printf_i+0x244>)
 8004a00:	2100      	movs	r1, #0
 8004a02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a06:	6865      	ldr	r5, [r4, #4]
 8004a08:	2d00      	cmp	r5, #0
 8004a0a:	bfa8      	it	ge
 8004a0c:	6821      	ldrge	r1, [r4, #0]
 8004a0e:	60a5      	str	r5, [r4, #8]
 8004a10:	bfa4      	itt	ge
 8004a12:	f021 0104 	bicge.w	r1, r1, #4
 8004a16:	6021      	strge	r1, [r4, #0]
 8004a18:	b90e      	cbnz	r6, 8004a1e <_printf_i+0x11a>
 8004a1a:	2d00      	cmp	r5, #0
 8004a1c:	d04d      	beq.n	8004aba <_printf_i+0x1b6>
 8004a1e:	4615      	mov	r5, r2
 8004a20:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a24:	fb03 6711 	mls	r7, r3, r1, r6
 8004a28:	5dc7      	ldrb	r7, [r0, r7]
 8004a2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a2e:	4637      	mov	r7, r6
 8004a30:	42bb      	cmp	r3, r7
 8004a32:	460e      	mov	r6, r1
 8004a34:	d9f4      	bls.n	8004a20 <_printf_i+0x11c>
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d10b      	bne.n	8004a52 <_printf_i+0x14e>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	07de      	lsls	r6, r3, #31
 8004a3e:	d508      	bpl.n	8004a52 <_printf_i+0x14e>
 8004a40:	6923      	ldr	r3, [r4, #16]
 8004a42:	6861      	ldr	r1, [r4, #4]
 8004a44:	4299      	cmp	r1, r3
 8004a46:	bfde      	ittt	le
 8004a48:	2330      	movle	r3, #48	; 0x30
 8004a4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a52:	1b52      	subs	r2, r2, r5
 8004a54:	6122      	str	r2, [r4, #16]
 8004a56:	464b      	mov	r3, r9
 8004a58:	4621      	mov	r1, r4
 8004a5a:	4640      	mov	r0, r8
 8004a5c:	f8cd a000 	str.w	sl, [sp]
 8004a60:	aa03      	add	r2, sp, #12
 8004a62:	f7ff fedf 	bl	8004824 <_printf_common>
 8004a66:	3001      	adds	r0, #1
 8004a68:	d14c      	bne.n	8004b04 <_printf_i+0x200>
 8004a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6e:	b004      	add	sp, #16
 8004a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a74:	4834      	ldr	r0, [pc, #208]	; (8004b48 <_printf_i+0x244>)
 8004a76:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a7a:	6829      	ldr	r1, [r5, #0]
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a82:	6029      	str	r1, [r5, #0]
 8004a84:	061d      	lsls	r5, r3, #24
 8004a86:	d514      	bpl.n	8004ab2 <_printf_i+0x1ae>
 8004a88:	07df      	lsls	r7, r3, #31
 8004a8a:	bf44      	itt	mi
 8004a8c:	f043 0320 	orrmi.w	r3, r3, #32
 8004a90:	6023      	strmi	r3, [r4, #0]
 8004a92:	b91e      	cbnz	r6, 8004a9c <_printf_i+0x198>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	f023 0320 	bic.w	r3, r3, #32
 8004a9a:	6023      	str	r3, [r4, #0]
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	e7af      	b.n	8004a00 <_printf_i+0xfc>
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	f043 0320 	orr.w	r3, r3, #32
 8004aa6:	6023      	str	r3, [r4, #0]
 8004aa8:	2378      	movs	r3, #120	; 0x78
 8004aaa:	4828      	ldr	r0, [pc, #160]	; (8004b4c <_printf_i+0x248>)
 8004aac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ab0:	e7e3      	b.n	8004a7a <_printf_i+0x176>
 8004ab2:	0659      	lsls	r1, r3, #25
 8004ab4:	bf48      	it	mi
 8004ab6:	b2b6      	uxthmi	r6, r6
 8004ab8:	e7e6      	b.n	8004a88 <_printf_i+0x184>
 8004aba:	4615      	mov	r5, r2
 8004abc:	e7bb      	b.n	8004a36 <_printf_i+0x132>
 8004abe:	682b      	ldr	r3, [r5, #0]
 8004ac0:	6826      	ldr	r6, [r4, #0]
 8004ac2:	1d18      	adds	r0, r3, #4
 8004ac4:	6961      	ldr	r1, [r4, #20]
 8004ac6:	6028      	str	r0, [r5, #0]
 8004ac8:	0635      	lsls	r5, r6, #24
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	d501      	bpl.n	8004ad2 <_printf_i+0x1ce>
 8004ace:	6019      	str	r1, [r3, #0]
 8004ad0:	e002      	b.n	8004ad8 <_printf_i+0x1d4>
 8004ad2:	0670      	lsls	r0, r6, #25
 8004ad4:	d5fb      	bpl.n	8004ace <_printf_i+0x1ca>
 8004ad6:	8019      	strh	r1, [r3, #0]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	4615      	mov	r5, r2
 8004adc:	6123      	str	r3, [r4, #16]
 8004ade:	e7ba      	b.n	8004a56 <_printf_i+0x152>
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	1d1a      	adds	r2, r3, #4
 8004ae6:	602a      	str	r2, [r5, #0]
 8004ae8:	681d      	ldr	r5, [r3, #0]
 8004aea:	6862      	ldr	r2, [r4, #4]
 8004aec:	4628      	mov	r0, r5
 8004aee:	f000 f82f 	bl	8004b50 <memchr>
 8004af2:	b108      	cbz	r0, 8004af8 <_printf_i+0x1f4>
 8004af4:	1b40      	subs	r0, r0, r5
 8004af6:	6060      	str	r0, [r4, #4]
 8004af8:	6863      	ldr	r3, [r4, #4]
 8004afa:	6123      	str	r3, [r4, #16]
 8004afc:	2300      	movs	r3, #0
 8004afe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b02:	e7a8      	b.n	8004a56 <_printf_i+0x152>
 8004b04:	462a      	mov	r2, r5
 8004b06:	4649      	mov	r1, r9
 8004b08:	4640      	mov	r0, r8
 8004b0a:	6923      	ldr	r3, [r4, #16]
 8004b0c:	47d0      	blx	sl
 8004b0e:	3001      	adds	r0, #1
 8004b10:	d0ab      	beq.n	8004a6a <_printf_i+0x166>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	079b      	lsls	r3, r3, #30
 8004b16:	d413      	bmi.n	8004b40 <_printf_i+0x23c>
 8004b18:	68e0      	ldr	r0, [r4, #12]
 8004b1a:	9b03      	ldr	r3, [sp, #12]
 8004b1c:	4298      	cmp	r0, r3
 8004b1e:	bfb8      	it	lt
 8004b20:	4618      	movlt	r0, r3
 8004b22:	e7a4      	b.n	8004a6e <_printf_i+0x16a>
 8004b24:	2301      	movs	r3, #1
 8004b26:	4632      	mov	r2, r6
 8004b28:	4649      	mov	r1, r9
 8004b2a:	4640      	mov	r0, r8
 8004b2c:	47d0      	blx	sl
 8004b2e:	3001      	adds	r0, #1
 8004b30:	d09b      	beq.n	8004a6a <_printf_i+0x166>
 8004b32:	3501      	adds	r5, #1
 8004b34:	68e3      	ldr	r3, [r4, #12]
 8004b36:	9903      	ldr	r1, [sp, #12]
 8004b38:	1a5b      	subs	r3, r3, r1
 8004b3a:	42ab      	cmp	r3, r5
 8004b3c:	dcf2      	bgt.n	8004b24 <_printf_i+0x220>
 8004b3e:	e7eb      	b.n	8004b18 <_printf_i+0x214>
 8004b40:	2500      	movs	r5, #0
 8004b42:	f104 0619 	add.w	r6, r4, #25
 8004b46:	e7f5      	b.n	8004b34 <_printf_i+0x230>
 8004b48:	08005cbd 	.word	0x08005cbd
 8004b4c:	08005cce 	.word	0x08005cce

08004b50 <memchr>:
 8004b50:	4603      	mov	r3, r0
 8004b52:	b510      	push	{r4, lr}
 8004b54:	b2c9      	uxtb	r1, r1
 8004b56:	4402      	add	r2, r0
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	d101      	bne.n	8004b62 <memchr+0x12>
 8004b5e:	2000      	movs	r0, #0
 8004b60:	e003      	b.n	8004b6a <memchr+0x1a>
 8004b62:	7804      	ldrb	r4, [r0, #0]
 8004b64:	3301      	adds	r3, #1
 8004b66:	428c      	cmp	r4, r1
 8004b68:	d1f6      	bne.n	8004b58 <memchr+0x8>
 8004b6a:	bd10      	pop	{r4, pc}

08004b6c <memcpy>:
 8004b6c:	440a      	add	r2, r1
 8004b6e:	4291      	cmp	r1, r2
 8004b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b74:	d100      	bne.n	8004b78 <memcpy+0xc>
 8004b76:	4770      	bx	lr
 8004b78:	b510      	push	{r4, lr}
 8004b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b7e:	4291      	cmp	r1, r2
 8004b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b84:	d1f9      	bne.n	8004b7a <memcpy+0xe>
 8004b86:	bd10      	pop	{r4, pc}

08004b88 <memmove>:
 8004b88:	4288      	cmp	r0, r1
 8004b8a:	b510      	push	{r4, lr}
 8004b8c:	eb01 0402 	add.w	r4, r1, r2
 8004b90:	d902      	bls.n	8004b98 <memmove+0x10>
 8004b92:	4284      	cmp	r4, r0
 8004b94:	4623      	mov	r3, r4
 8004b96:	d807      	bhi.n	8004ba8 <memmove+0x20>
 8004b98:	1e43      	subs	r3, r0, #1
 8004b9a:	42a1      	cmp	r1, r4
 8004b9c:	d008      	beq.n	8004bb0 <memmove+0x28>
 8004b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ba2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ba6:	e7f8      	b.n	8004b9a <memmove+0x12>
 8004ba8:	4601      	mov	r1, r0
 8004baa:	4402      	add	r2, r0
 8004bac:	428a      	cmp	r2, r1
 8004bae:	d100      	bne.n	8004bb2 <memmove+0x2a>
 8004bb0:	bd10      	pop	{r4, pc}
 8004bb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bba:	e7f7      	b.n	8004bac <memmove+0x24>

08004bbc <_free_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	4605      	mov	r5, r0
 8004bc0:	2900      	cmp	r1, #0
 8004bc2:	d040      	beq.n	8004c46 <_free_r+0x8a>
 8004bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bc8:	1f0c      	subs	r4, r1, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bfb8      	it	lt
 8004bce:	18e4      	addlt	r4, r4, r3
 8004bd0:	f000 f910 	bl	8004df4 <__malloc_lock>
 8004bd4:	4a1c      	ldr	r2, [pc, #112]	; (8004c48 <_free_r+0x8c>)
 8004bd6:	6813      	ldr	r3, [r2, #0]
 8004bd8:	b933      	cbnz	r3, 8004be8 <_free_r+0x2c>
 8004bda:	6063      	str	r3, [r4, #4]
 8004bdc:	6014      	str	r4, [r2, #0]
 8004bde:	4628      	mov	r0, r5
 8004be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004be4:	f000 b90c 	b.w	8004e00 <__malloc_unlock>
 8004be8:	42a3      	cmp	r3, r4
 8004bea:	d908      	bls.n	8004bfe <_free_r+0x42>
 8004bec:	6820      	ldr	r0, [r4, #0]
 8004bee:	1821      	adds	r1, r4, r0
 8004bf0:	428b      	cmp	r3, r1
 8004bf2:	bf01      	itttt	eq
 8004bf4:	6819      	ldreq	r1, [r3, #0]
 8004bf6:	685b      	ldreq	r3, [r3, #4]
 8004bf8:	1809      	addeq	r1, r1, r0
 8004bfa:	6021      	streq	r1, [r4, #0]
 8004bfc:	e7ed      	b.n	8004bda <_free_r+0x1e>
 8004bfe:	461a      	mov	r2, r3
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	b10b      	cbz	r3, 8004c08 <_free_r+0x4c>
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	d9fa      	bls.n	8004bfe <_free_r+0x42>
 8004c08:	6811      	ldr	r1, [r2, #0]
 8004c0a:	1850      	adds	r0, r2, r1
 8004c0c:	42a0      	cmp	r0, r4
 8004c0e:	d10b      	bne.n	8004c28 <_free_r+0x6c>
 8004c10:	6820      	ldr	r0, [r4, #0]
 8004c12:	4401      	add	r1, r0
 8004c14:	1850      	adds	r0, r2, r1
 8004c16:	4283      	cmp	r3, r0
 8004c18:	6011      	str	r1, [r2, #0]
 8004c1a:	d1e0      	bne.n	8004bde <_free_r+0x22>
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4401      	add	r1, r0
 8004c22:	6011      	str	r1, [r2, #0]
 8004c24:	6053      	str	r3, [r2, #4]
 8004c26:	e7da      	b.n	8004bde <_free_r+0x22>
 8004c28:	d902      	bls.n	8004c30 <_free_r+0x74>
 8004c2a:	230c      	movs	r3, #12
 8004c2c:	602b      	str	r3, [r5, #0]
 8004c2e:	e7d6      	b.n	8004bde <_free_r+0x22>
 8004c30:	6820      	ldr	r0, [r4, #0]
 8004c32:	1821      	adds	r1, r4, r0
 8004c34:	428b      	cmp	r3, r1
 8004c36:	bf01      	itttt	eq
 8004c38:	6819      	ldreq	r1, [r3, #0]
 8004c3a:	685b      	ldreq	r3, [r3, #4]
 8004c3c:	1809      	addeq	r1, r1, r0
 8004c3e:	6021      	streq	r1, [r4, #0]
 8004c40:	6063      	str	r3, [r4, #4]
 8004c42:	6054      	str	r4, [r2, #4]
 8004c44:	e7cb      	b.n	8004bde <_free_r+0x22>
 8004c46:	bd38      	pop	{r3, r4, r5, pc}
 8004c48:	200001a4 	.word	0x200001a4

08004c4c <sbrk_aligned>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	4e0e      	ldr	r6, [pc, #56]	; (8004c88 <sbrk_aligned+0x3c>)
 8004c50:	460c      	mov	r4, r1
 8004c52:	6831      	ldr	r1, [r6, #0]
 8004c54:	4605      	mov	r5, r0
 8004c56:	b911      	cbnz	r1, 8004c5e <sbrk_aligned+0x12>
 8004c58:	f000 f8bc 	bl	8004dd4 <_sbrk_r>
 8004c5c:	6030      	str	r0, [r6, #0]
 8004c5e:	4621      	mov	r1, r4
 8004c60:	4628      	mov	r0, r5
 8004c62:	f000 f8b7 	bl	8004dd4 <_sbrk_r>
 8004c66:	1c43      	adds	r3, r0, #1
 8004c68:	d00a      	beq.n	8004c80 <sbrk_aligned+0x34>
 8004c6a:	1cc4      	adds	r4, r0, #3
 8004c6c:	f024 0403 	bic.w	r4, r4, #3
 8004c70:	42a0      	cmp	r0, r4
 8004c72:	d007      	beq.n	8004c84 <sbrk_aligned+0x38>
 8004c74:	1a21      	subs	r1, r4, r0
 8004c76:	4628      	mov	r0, r5
 8004c78:	f000 f8ac 	bl	8004dd4 <_sbrk_r>
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d101      	bne.n	8004c84 <sbrk_aligned+0x38>
 8004c80:	f04f 34ff 	mov.w	r4, #4294967295
 8004c84:	4620      	mov	r0, r4
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
 8004c88:	200001a8 	.word	0x200001a8

08004c8c <_malloc_r>:
 8004c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c90:	1ccd      	adds	r5, r1, #3
 8004c92:	f025 0503 	bic.w	r5, r5, #3
 8004c96:	3508      	adds	r5, #8
 8004c98:	2d0c      	cmp	r5, #12
 8004c9a:	bf38      	it	cc
 8004c9c:	250c      	movcc	r5, #12
 8004c9e:	2d00      	cmp	r5, #0
 8004ca0:	4607      	mov	r7, r0
 8004ca2:	db01      	blt.n	8004ca8 <_malloc_r+0x1c>
 8004ca4:	42a9      	cmp	r1, r5
 8004ca6:	d905      	bls.n	8004cb4 <_malloc_r+0x28>
 8004ca8:	230c      	movs	r3, #12
 8004caa:	2600      	movs	r6, #0
 8004cac:	603b      	str	r3, [r7, #0]
 8004cae:	4630      	mov	r0, r6
 8004cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb4:	4e2e      	ldr	r6, [pc, #184]	; (8004d70 <_malloc_r+0xe4>)
 8004cb6:	f000 f89d 	bl	8004df4 <__malloc_lock>
 8004cba:	6833      	ldr	r3, [r6, #0]
 8004cbc:	461c      	mov	r4, r3
 8004cbe:	bb34      	cbnz	r4, 8004d0e <_malloc_r+0x82>
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	f7ff ffc2 	bl	8004c4c <sbrk_aligned>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	4604      	mov	r4, r0
 8004ccc:	d14d      	bne.n	8004d6a <_malloc_r+0xde>
 8004cce:	6834      	ldr	r4, [r6, #0]
 8004cd0:	4626      	mov	r6, r4
 8004cd2:	2e00      	cmp	r6, #0
 8004cd4:	d140      	bne.n	8004d58 <_malloc_r+0xcc>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	4631      	mov	r1, r6
 8004cda:	4638      	mov	r0, r7
 8004cdc:	eb04 0803 	add.w	r8, r4, r3
 8004ce0:	f000 f878 	bl	8004dd4 <_sbrk_r>
 8004ce4:	4580      	cmp	r8, r0
 8004ce6:	d13a      	bne.n	8004d5e <_malloc_r+0xd2>
 8004ce8:	6821      	ldr	r1, [r4, #0]
 8004cea:	3503      	adds	r5, #3
 8004cec:	1a6d      	subs	r5, r5, r1
 8004cee:	f025 0503 	bic.w	r5, r5, #3
 8004cf2:	3508      	adds	r5, #8
 8004cf4:	2d0c      	cmp	r5, #12
 8004cf6:	bf38      	it	cc
 8004cf8:	250c      	movcc	r5, #12
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	f7ff ffa5 	bl	8004c4c <sbrk_aligned>
 8004d02:	3001      	adds	r0, #1
 8004d04:	d02b      	beq.n	8004d5e <_malloc_r+0xd2>
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	442b      	add	r3, r5
 8004d0a:	6023      	str	r3, [r4, #0]
 8004d0c:	e00e      	b.n	8004d2c <_malloc_r+0xa0>
 8004d0e:	6822      	ldr	r2, [r4, #0]
 8004d10:	1b52      	subs	r2, r2, r5
 8004d12:	d41e      	bmi.n	8004d52 <_malloc_r+0xc6>
 8004d14:	2a0b      	cmp	r2, #11
 8004d16:	d916      	bls.n	8004d46 <_malloc_r+0xba>
 8004d18:	1961      	adds	r1, r4, r5
 8004d1a:	42a3      	cmp	r3, r4
 8004d1c:	6025      	str	r5, [r4, #0]
 8004d1e:	bf18      	it	ne
 8004d20:	6059      	strne	r1, [r3, #4]
 8004d22:	6863      	ldr	r3, [r4, #4]
 8004d24:	bf08      	it	eq
 8004d26:	6031      	streq	r1, [r6, #0]
 8004d28:	5162      	str	r2, [r4, r5]
 8004d2a:	604b      	str	r3, [r1, #4]
 8004d2c:	4638      	mov	r0, r7
 8004d2e:	f104 060b 	add.w	r6, r4, #11
 8004d32:	f000 f865 	bl	8004e00 <__malloc_unlock>
 8004d36:	f026 0607 	bic.w	r6, r6, #7
 8004d3a:	1d23      	adds	r3, r4, #4
 8004d3c:	1af2      	subs	r2, r6, r3
 8004d3e:	d0b6      	beq.n	8004cae <_malloc_r+0x22>
 8004d40:	1b9b      	subs	r3, r3, r6
 8004d42:	50a3      	str	r3, [r4, r2]
 8004d44:	e7b3      	b.n	8004cae <_malloc_r+0x22>
 8004d46:	6862      	ldr	r2, [r4, #4]
 8004d48:	42a3      	cmp	r3, r4
 8004d4a:	bf0c      	ite	eq
 8004d4c:	6032      	streq	r2, [r6, #0]
 8004d4e:	605a      	strne	r2, [r3, #4]
 8004d50:	e7ec      	b.n	8004d2c <_malloc_r+0xa0>
 8004d52:	4623      	mov	r3, r4
 8004d54:	6864      	ldr	r4, [r4, #4]
 8004d56:	e7b2      	b.n	8004cbe <_malloc_r+0x32>
 8004d58:	4634      	mov	r4, r6
 8004d5a:	6876      	ldr	r6, [r6, #4]
 8004d5c:	e7b9      	b.n	8004cd2 <_malloc_r+0x46>
 8004d5e:	230c      	movs	r3, #12
 8004d60:	4638      	mov	r0, r7
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	f000 f84c 	bl	8004e00 <__malloc_unlock>
 8004d68:	e7a1      	b.n	8004cae <_malloc_r+0x22>
 8004d6a:	6025      	str	r5, [r4, #0]
 8004d6c:	e7de      	b.n	8004d2c <_malloc_r+0xa0>
 8004d6e:	bf00      	nop
 8004d70:	200001a4 	.word	0x200001a4

08004d74 <_realloc_r>:
 8004d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d78:	4680      	mov	r8, r0
 8004d7a:	4614      	mov	r4, r2
 8004d7c:	460e      	mov	r6, r1
 8004d7e:	b921      	cbnz	r1, 8004d8a <_realloc_r+0x16>
 8004d80:	4611      	mov	r1, r2
 8004d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d86:	f7ff bf81 	b.w	8004c8c <_malloc_r>
 8004d8a:	b92a      	cbnz	r2, 8004d98 <_realloc_r+0x24>
 8004d8c:	f7ff ff16 	bl	8004bbc <_free_r>
 8004d90:	4625      	mov	r5, r4
 8004d92:	4628      	mov	r0, r5
 8004d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d98:	f000 f838 	bl	8004e0c <_malloc_usable_size_r>
 8004d9c:	4284      	cmp	r4, r0
 8004d9e:	4607      	mov	r7, r0
 8004da0:	d802      	bhi.n	8004da8 <_realloc_r+0x34>
 8004da2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004da6:	d812      	bhi.n	8004dce <_realloc_r+0x5a>
 8004da8:	4621      	mov	r1, r4
 8004daa:	4640      	mov	r0, r8
 8004dac:	f7ff ff6e 	bl	8004c8c <_malloc_r>
 8004db0:	4605      	mov	r5, r0
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d0ed      	beq.n	8004d92 <_realloc_r+0x1e>
 8004db6:	42bc      	cmp	r4, r7
 8004db8:	4622      	mov	r2, r4
 8004dba:	4631      	mov	r1, r6
 8004dbc:	bf28      	it	cs
 8004dbe:	463a      	movcs	r2, r7
 8004dc0:	f7ff fed4 	bl	8004b6c <memcpy>
 8004dc4:	4631      	mov	r1, r6
 8004dc6:	4640      	mov	r0, r8
 8004dc8:	f7ff fef8 	bl	8004bbc <_free_r>
 8004dcc:	e7e1      	b.n	8004d92 <_realloc_r+0x1e>
 8004dce:	4635      	mov	r5, r6
 8004dd0:	e7df      	b.n	8004d92 <_realloc_r+0x1e>
	...

08004dd4 <_sbrk_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	4d05      	ldr	r5, [pc, #20]	; (8004df0 <_sbrk_r+0x1c>)
 8004dda:	4604      	mov	r4, r0
 8004ddc:	4608      	mov	r0, r1
 8004dde:	602b      	str	r3, [r5, #0]
 8004de0:	f7fd fae0 	bl	80023a4 <_sbrk>
 8004de4:	1c43      	adds	r3, r0, #1
 8004de6:	d102      	bne.n	8004dee <_sbrk_r+0x1a>
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	b103      	cbz	r3, 8004dee <_sbrk_r+0x1a>
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
 8004df0:	200001ac 	.word	0x200001ac

08004df4 <__malloc_lock>:
 8004df4:	4801      	ldr	r0, [pc, #4]	; (8004dfc <__malloc_lock+0x8>)
 8004df6:	f000 b811 	b.w	8004e1c <__retarget_lock_acquire_recursive>
 8004dfa:	bf00      	nop
 8004dfc:	200001b0 	.word	0x200001b0

08004e00 <__malloc_unlock>:
 8004e00:	4801      	ldr	r0, [pc, #4]	; (8004e08 <__malloc_unlock+0x8>)
 8004e02:	f000 b80c 	b.w	8004e1e <__retarget_lock_release_recursive>
 8004e06:	bf00      	nop
 8004e08:	200001b0 	.word	0x200001b0

08004e0c <_malloc_usable_size_r>:
 8004e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e10:	1f18      	subs	r0, r3, #4
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	bfbc      	itt	lt
 8004e16:	580b      	ldrlt	r3, [r1, r0]
 8004e18:	18c0      	addlt	r0, r0, r3
 8004e1a:	4770      	bx	lr

08004e1c <__retarget_lock_acquire_recursive>:
 8004e1c:	4770      	bx	lr

08004e1e <__retarget_lock_release_recursive>:
 8004e1e:	4770      	bx	lr

08004e20 <pow>:
 8004e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e24:	4614      	mov	r4, r2
 8004e26:	461d      	mov	r5, r3
 8004e28:	4680      	mov	r8, r0
 8004e2a:	4689      	mov	r9, r1
 8004e2c:	f000 f860 	bl	8004ef0 <__ieee754_pow>
 8004e30:	4622      	mov	r2, r4
 8004e32:	4606      	mov	r6, r0
 8004e34:	460f      	mov	r7, r1
 8004e36:	462b      	mov	r3, r5
 8004e38:	4620      	mov	r0, r4
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	f7fb fde8 	bl	8000a10 <__aeabi_dcmpun>
 8004e40:	bbc8      	cbnz	r0, 8004eb6 <pow+0x96>
 8004e42:	2200      	movs	r2, #0
 8004e44:	2300      	movs	r3, #0
 8004e46:	4640      	mov	r0, r8
 8004e48:	4649      	mov	r1, r9
 8004e4a:	f7fb fdaf 	bl	80009ac <__aeabi_dcmpeq>
 8004e4e:	b1b8      	cbz	r0, 8004e80 <pow+0x60>
 8004e50:	2200      	movs	r2, #0
 8004e52:	2300      	movs	r3, #0
 8004e54:	4620      	mov	r0, r4
 8004e56:	4629      	mov	r1, r5
 8004e58:	f7fb fda8 	bl	80009ac <__aeabi_dcmpeq>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d141      	bne.n	8004ee4 <pow+0xc4>
 8004e60:	4620      	mov	r0, r4
 8004e62:	4629      	mov	r1, r5
 8004e64:	f000 fe39 	bl	8005ada <finite>
 8004e68:	b328      	cbz	r0, 8004eb6 <pow+0x96>
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	4620      	mov	r0, r4
 8004e70:	4629      	mov	r1, r5
 8004e72:	f7fb fda5 	bl	80009c0 <__aeabi_dcmplt>
 8004e76:	b1f0      	cbz	r0, 8004eb6 <pow+0x96>
 8004e78:	f7ff fb26 	bl	80044c8 <__errno>
 8004e7c:	2322      	movs	r3, #34	; 0x22
 8004e7e:	e019      	b.n	8004eb4 <pow+0x94>
 8004e80:	4630      	mov	r0, r6
 8004e82:	4639      	mov	r1, r7
 8004e84:	f000 fe29 	bl	8005ada <finite>
 8004e88:	b9c8      	cbnz	r0, 8004ebe <pow+0x9e>
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	f000 fe24 	bl	8005ada <finite>
 8004e92:	b1a0      	cbz	r0, 8004ebe <pow+0x9e>
 8004e94:	4620      	mov	r0, r4
 8004e96:	4629      	mov	r1, r5
 8004e98:	f000 fe1f 	bl	8005ada <finite>
 8004e9c:	b178      	cbz	r0, 8004ebe <pow+0x9e>
 8004e9e:	4632      	mov	r2, r6
 8004ea0:	463b      	mov	r3, r7
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	4639      	mov	r1, r7
 8004ea6:	f7fb fdb3 	bl	8000a10 <__aeabi_dcmpun>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d0e4      	beq.n	8004e78 <pow+0x58>
 8004eae:	f7ff fb0b 	bl	80044c8 <__errno>
 8004eb2:	2321      	movs	r3, #33	; 0x21
 8004eb4:	6003      	str	r3, [r0, #0]
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	4639      	mov	r1, r7
 8004eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	4639      	mov	r1, r7
 8004ec6:	f7fb fd71 	bl	80009ac <__aeabi_dcmpeq>
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	d0f3      	beq.n	8004eb6 <pow+0x96>
 8004ece:	4640      	mov	r0, r8
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	f000 fe02 	bl	8005ada <finite>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	d0ed      	beq.n	8004eb6 <pow+0x96>
 8004eda:	4620      	mov	r0, r4
 8004edc:	4629      	mov	r1, r5
 8004ede:	f000 fdfc 	bl	8005ada <finite>
 8004ee2:	e7c8      	b.n	8004e76 <pow+0x56>
 8004ee4:	2600      	movs	r6, #0
 8004ee6:	4f01      	ldr	r7, [pc, #4]	; (8004eec <pow+0xcc>)
 8004ee8:	e7e5      	b.n	8004eb6 <pow+0x96>
 8004eea:	bf00      	nop
 8004eec:	3ff00000 	.word	0x3ff00000

08004ef0 <__ieee754_pow>:
 8004ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef4:	b093      	sub	sp, #76	; 0x4c
 8004ef6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004efa:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8004efe:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8004f02:	4689      	mov	r9, r1
 8004f04:	ea56 0102 	orrs.w	r1, r6, r2
 8004f08:	4680      	mov	r8, r0
 8004f0a:	d111      	bne.n	8004f30 <__ieee754_pow+0x40>
 8004f0c:	1803      	adds	r3, r0, r0
 8004f0e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8004f12:	4152      	adcs	r2, r2
 8004f14:	4299      	cmp	r1, r3
 8004f16:	4b82      	ldr	r3, [pc, #520]	; (8005120 <__ieee754_pow+0x230>)
 8004f18:	4193      	sbcs	r3, r2
 8004f1a:	f080 84b9 	bcs.w	8005890 <__ieee754_pow+0x9a0>
 8004f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f22:	4640      	mov	r0, r8
 8004f24:	4649      	mov	r1, r9
 8004f26:	f7fb f923 	bl	8000170 <__adddf3>
 8004f2a:	4683      	mov	fp, r0
 8004f2c:	468c      	mov	ip, r1
 8004f2e:	e06f      	b.n	8005010 <__ieee754_pow+0x120>
 8004f30:	4b7c      	ldr	r3, [pc, #496]	; (8005124 <__ieee754_pow+0x234>)
 8004f32:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8004f36:	429c      	cmp	r4, r3
 8004f38:	464d      	mov	r5, r9
 8004f3a:	4682      	mov	sl, r0
 8004f3c:	dc06      	bgt.n	8004f4c <__ieee754_pow+0x5c>
 8004f3e:	d101      	bne.n	8004f44 <__ieee754_pow+0x54>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d1ec      	bne.n	8004f1e <__ieee754_pow+0x2e>
 8004f44:	429e      	cmp	r6, r3
 8004f46:	dc01      	bgt.n	8004f4c <__ieee754_pow+0x5c>
 8004f48:	d10f      	bne.n	8004f6a <__ieee754_pow+0x7a>
 8004f4a:	b172      	cbz	r2, 8004f6a <__ieee754_pow+0x7a>
 8004f4c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004f50:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004f54:	ea55 050a 	orrs.w	r5, r5, sl
 8004f58:	d1e1      	bne.n	8004f1e <__ieee754_pow+0x2e>
 8004f5a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004f5e:	18db      	adds	r3, r3, r3
 8004f60:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004f64:	4152      	adcs	r2, r2
 8004f66:	429d      	cmp	r5, r3
 8004f68:	e7d5      	b.n	8004f16 <__ieee754_pow+0x26>
 8004f6a:	2d00      	cmp	r5, #0
 8004f6c:	da39      	bge.n	8004fe2 <__ieee754_pow+0xf2>
 8004f6e:	4b6e      	ldr	r3, [pc, #440]	; (8005128 <__ieee754_pow+0x238>)
 8004f70:	429e      	cmp	r6, r3
 8004f72:	dc52      	bgt.n	800501a <__ieee754_pow+0x12a>
 8004f74:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004f78:	429e      	cmp	r6, r3
 8004f7a:	f340 849c 	ble.w	80058b6 <__ieee754_pow+0x9c6>
 8004f7e:	1533      	asrs	r3, r6, #20
 8004f80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004f84:	2b14      	cmp	r3, #20
 8004f86:	dd0f      	ble.n	8004fa8 <__ieee754_pow+0xb8>
 8004f88:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004f8c:	fa22 f103 	lsr.w	r1, r2, r3
 8004f90:	fa01 f303 	lsl.w	r3, r1, r3
 8004f94:	4293      	cmp	r3, r2
 8004f96:	f040 848e 	bne.w	80058b6 <__ieee754_pow+0x9c6>
 8004f9a:	f001 0101 	and.w	r1, r1, #1
 8004f9e:	f1c1 0302 	rsb	r3, r1, #2
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	b182      	cbz	r2, 8004fc8 <__ieee754_pow+0xd8>
 8004fa6:	e05d      	b.n	8005064 <__ieee754_pow+0x174>
 8004fa8:	2a00      	cmp	r2, #0
 8004faa:	d159      	bne.n	8005060 <__ieee754_pow+0x170>
 8004fac:	f1c3 0314 	rsb	r3, r3, #20
 8004fb0:	fa46 f103 	asr.w	r1, r6, r3
 8004fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb8:	42b3      	cmp	r3, r6
 8004fba:	f040 8479 	bne.w	80058b0 <__ieee754_pow+0x9c0>
 8004fbe:	f001 0101 	and.w	r1, r1, #1
 8004fc2:	f1c1 0302 	rsb	r3, r1, #2
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	4b58      	ldr	r3, [pc, #352]	; (800512c <__ieee754_pow+0x23c>)
 8004fca:	429e      	cmp	r6, r3
 8004fcc:	d132      	bne.n	8005034 <__ieee754_pow+0x144>
 8004fce:	2f00      	cmp	r7, #0
 8004fd0:	f280 846a 	bge.w	80058a8 <__ieee754_pow+0x9b8>
 8004fd4:	4642      	mov	r2, r8
 8004fd6:	464b      	mov	r3, r9
 8004fd8:	2000      	movs	r0, #0
 8004fda:	4954      	ldr	r1, [pc, #336]	; (800512c <__ieee754_pow+0x23c>)
 8004fdc:	f7fb fba8 	bl	8000730 <__aeabi_ddiv>
 8004fe0:	e7a3      	b.n	8004f2a <__ieee754_pow+0x3a>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	2a00      	cmp	r2, #0
 8004fe8:	d13c      	bne.n	8005064 <__ieee754_pow+0x174>
 8004fea:	4b4e      	ldr	r3, [pc, #312]	; (8005124 <__ieee754_pow+0x234>)
 8004fec:	429e      	cmp	r6, r3
 8004fee:	d1eb      	bne.n	8004fc8 <__ieee754_pow+0xd8>
 8004ff0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004ff4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004ff8:	ea53 030a 	orrs.w	r3, r3, sl
 8004ffc:	f000 8448 	beq.w	8005890 <__ieee754_pow+0x9a0>
 8005000:	4b4b      	ldr	r3, [pc, #300]	; (8005130 <__ieee754_pow+0x240>)
 8005002:	429c      	cmp	r4, r3
 8005004:	dd0b      	ble.n	800501e <__ieee754_pow+0x12e>
 8005006:	2f00      	cmp	r7, #0
 8005008:	f2c0 8448 	blt.w	800589c <__ieee754_pow+0x9ac>
 800500c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005010:	4658      	mov	r0, fp
 8005012:	4661      	mov	r1, ip
 8005014:	b013      	add	sp, #76	; 0x4c
 8005016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800501a:	2302      	movs	r3, #2
 800501c:	e7e2      	b.n	8004fe4 <__ieee754_pow+0xf4>
 800501e:	2f00      	cmp	r7, #0
 8005020:	f04f 0b00 	mov.w	fp, #0
 8005024:	f04f 0c00 	mov.w	ip, #0
 8005028:	daf2      	bge.n	8005010 <__ieee754_pow+0x120>
 800502a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800502e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005032:	e7ed      	b.n	8005010 <__ieee754_pow+0x120>
 8005034:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005038:	d106      	bne.n	8005048 <__ieee754_pow+0x158>
 800503a:	4642      	mov	r2, r8
 800503c:	464b      	mov	r3, r9
 800503e:	4640      	mov	r0, r8
 8005040:	4649      	mov	r1, r9
 8005042:	f7fb fa4b 	bl	80004dc <__aeabi_dmul>
 8005046:	e770      	b.n	8004f2a <__ieee754_pow+0x3a>
 8005048:	4b3a      	ldr	r3, [pc, #232]	; (8005134 <__ieee754_pow+0x244>)
 800504a:	429f      	cmp	r7, r3
 800504c:	d10a      	bne.n	8005064 <__ieee754_pow+0x174>
 800504e:	2d00      	cmp	r5, #0
 8005050:	db08      	blt.n	8005064 <__ieee754_pow+0x174>
 8005052:	4640      	mov	r0, r8
 8005054:	4649      	mov	r1, r9
 8005056:	b013      	add	sp, #76	; 0x4c
 8005058:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505c:	f000 bc5e 	b.w	800591c <__ieee754_sqrt>
 8005060:	2300      	movs	r3, #0
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	4640      	mov	r0, r8
 8005066:	4649      	mov	r1, r9
 8005068:	f000 fd34 	bl	8005ad4 <fabs>
 800506c:	4683      	mov	fp, r0
 800506e:	468c      	mov	ip, r1
 8005070:	f1ba 0f00 	cmp.w	sl, #0
 8005074:	d128      	bne.n	80050c8 <__ieee754_pow+0x1d8>
 8005076:	b124      	cbz	r4, 8005082 <__ieee754_pow+0x192>
 8005078:	4b2c      	ldr	r3, [pc, #176]	; (800512c <__ieee754_pow+0x23c>)
 800507a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800507e:	429a      	cmp	r2, r3
 8005080:	d122      	bne.n	80050c8 <__ieee754_pow+0x1d8>
 8005082:	2f00      	cmp	r7, #0
 8005084:	da07      	bge.n	8005096 <__ieee754_pow+0x1a6>
 8005086:	465a      	mov	r2, fp
 8005088:	4663      	mov	r3, ip
 800508a:	2000      	movs	r0, #0
 800508c:	4927      	ldr	r1, [pc, #156]	; (800512c <__ieee754_pow+0x23c>)
 800508e:	f7fb fb4f 	bl	8000730 <__aeabi_ddiv>
 8005092:	4683      	mov	fp, r0
 8005094:	468c      	mov	ip, r1
 8005096:	2d00      	cmp	r5, #0
 8005098:	daba      	bge.n	8005010 <__ieee754_pow+0x120>
 800509a:	9b00      	ldr	r3, [sp, #0]
 800509c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80050a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80050a4:	4323      	orrs	r3, r4
 80050a6:	d108      	bne.n	80050ba <__ieee754_pow+0x1ca>
 80050a8:	465a      	mov	r2, fp
 80050aa:	4663      	mov	r3, ip
 80050ac:	4658      	mov	r0, fp
 80050ae:	4661      	mov	r1, ip
 80050b0:	f7fb f85c 	bl	800016c <__aeabi_dsub>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	e790      	b.n	8004fdc <__ieee754_pow+0xec>
 80050ba:	9b00      	ldr	r3, [sp, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d1a7      	bne.n	8005010 <__ieee754_pow+0x120>
 80050c0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80050c4:	469c      	mov	ip, r3
 80050c6:	e7a3      	b.n	8005010 <__ieee754_pow+0x120>
 80050c8:	0feb      	lsrs	r3, r5, #31
 80050ca:	3b01      	subs	r3, #1
 80050cc:	930c      	str	r3, [sp, #48]	; 0x30
 80050ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050d0:	9b00      	ldr	r3, [sp, #0]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	d104      	bne.n	80050e0 <__ieee754_pow+0x1f0>
 80050d6:	4642      	mov	r2, r8
 80050d8:	464b      	mov	r3, r9
 80050da:	4640      	mov	r0, r8
 80050dc:	4649      	mov	r1, r9
 80050de:	e7e7      	b.n	80050b0 <__ieee754_pow+0x1c0>
 80050e0:	4b15      	ldr	r3, [pc, #84]	; (8005138 <__ieee754_pow+0x248>)
 80050e2:	429e      	cmp	r6, r3
 80050e4:	f340 80f6 	ble.w	80052d4 <__ieee754_pow+0x3e4>
 80050e8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80050ec:	429e      	cmp	r6, r3
 80050ee:	4b10      	ldr	r3, [pc, #64]	; (8005130 <__ieee754_pow+0x240>)
 80050f0:	dd09      	ble.n	8005106 <__ieee754_pow+0x216>
 80050f2:	429c      	cmp	r4, r3
 80050f4:	dc0c      	bgt.n	8005110 <__ieee754_pow+0x220>
 80050f6:	2f00      	cmp	r7, #0
 80050f8:	da0c      	bge.n	8005114 <__ieee754_pow+0x224>
 80050fa:	2000      	movs	r0, #0
 80050fc:	b013      	add	sp, #76	; 0x4c
 80050fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005102:	f000 bce2 	b.w	8005aca <__math_oflow>
 8005106:	429c      	cmp	r4, r3
 8005108:	dbf5      	blt.n	80050f6 <__ieee754_pow+0x206>
 800510a:	4b08      	ldr	r3, [pc, #32]	; (800512c <__ieee754_pow+0x23c>)
 800510c:	429c      	cmp	r4, r3
 800510e:	dd15      	ble.n	800513c <__ieee754_pow+0x24c>
 8005110:	2f00      	cmp	r7, #0
 8005112:	dcf2      	bgt.n	80050fa <__ieee754_pow+0x20a>
 8005114:	2000      	movs	r0, #0
 8005116:	b013      	add	sp, #76	; 0x4c
 8005118:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511c:	f000 bcd0 	b.w	8005ac0 <__math_uflow>
 8005120:	fff00000 	.word	0xfff00000
 8005124:	7ff00000 	.word	0x7ff00000
 8005128:	433fffff 	.word	0x433fffff
 800512c:	3ff00000 	.word	0x3ff00000
 8005130:	3fefffff 	.word	0x3fefffff
 8005134:	3fe00000 	.word	0x3fe00000
 8005138:	41e00000 	.word	0x41e00000
 800513c:	4661      	mov	r1, ip
 800513e:	2200      	movs	r2, #0
 8005140:	4658      	mov	r0, fp
 8005142:	4b5f      	ldr	r3, [pc, #380]	; (80052c0 <__ieee754_pow+0x3d0>)
 8005144:	f7fb f812 	bl	800016c <__aeabi_dsub>
 8005148:	a355      	add	r3, pc, #340	; (adr r3, 80052a0 <__ieee754_pow+0x3b0>)
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	4604      	mov	r4, r0
 8005150:	460d      	mov	r5, r1
 8005152:	f7fb f9c3 	bl	80004dc <__aeabi_dmul>
 8005156:	a354      	add	r3, pc, #336	; (adr r3, 80052a8 <__ieee754_pow+0x3b8>)
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	4606      	mov	r6, r0
 800515e:	460f      	mov	r7, r1
 8005160:	4620      	mov	r0, r4
 8005162:	4629      	mov	r1, r5
 8005164:	f7fb f9ba 	bl	80004dc <__aeabi_dmul>
 8005168:	2200      	movs	r2, #0
 800516a:	4682      	mov	sl, r0
 800516c:	468b      	mov	fp, r1
 800516e:	4620      	mov	r0, r4
 8005170:	4629      	mov	r1, r5
 8005172:	4b54      	ldr	r3, [pc, #336]	; (80052c4 <__ieee754_pow+0x3d4>)
 8005174:	f7fb f9b2 	bl	80004dc <__aeabi_dmul>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	a14c      	add	r1, pc, #304	; (adr r1, 80052b0 <__ieee754_pow+0x3c0>)
 800517e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005182:	f7fa fff3 	bl	800016c <__aeabi_dsub>
 8005186:	4622      	mov	r2, r4
 8005188:	462b      	mov	r3, r5
 800518a:	f7fb f9a7 	bl	80004dc <__aeabi_dmul>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	2000      	movs	r0, #0
 8005194:	494c      	ldr	r1, [pc, #304]	; (80052c8 <__ieee754_pow+0x3d8>)
 8005196:	f7fa ffe9 	bl	800016c <__aeabi_dsub>
 800519a:	4622      	mov	r2, r4
 800519c:	462b      	mov	r3, r5
 800519e:	4680      	mov	r8, r0
 80051a0:	4689      	mov	r9, r1
 80051a2:	4620      	mov	r0, r4
 80051a4:	4629      	mov	r1, r5
 80051a6:	f7fb f999 	bl	80004dc <__aeabi_dmul>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4640      	mov	r0, r8
 80051b0:	4649      	mov	r1, r9
 80051b2:	f7fb f993 	bl	80004dc <__aeabi_dmul>
 80051b6:	a340      	add	r3, pc, #256	; (adr r3, 80052b8 <__ieee754_pow+0x3c8>)
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	f7fb f98e 	bl	80004dc <__aeabi_dmul>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4650      	mov	r0, sl
 80051c6:	4659      	mov	r1, fp
 80051c8:	f7fa ffd0 	bl	800016c <__aeabi_dsub>
 80051cc:	f04f 0a00 	mov.w	sl, #0
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4604      	mov	r4, r0
 80051d6:	460d      	mov	r5, r1
 80051d8:	4630      	mov	r0, r6
 80051da:	4639      	mov	r1, r7
 80051dc:	f7fa ffc8 	bl	8000170 <__adddf3>
 80051e0:	4632      	mov	r2, r6
 80051e2:	463b      	mov	r3, r7
 80051e4:	4650      	mov	r0, sl
 80051e6:	468b      	mov	fp, r1
 80051e8:	f7fa ffc0 	bl	800016c <__aeabi_dsub>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4620      	mov	r0, r4
 80051f2:	4629      	mov	r1, r5
 80051f4:	f7fa ffba 	bl	800016c <__aeabi_dsub>
 80051f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80051fc:	9b00      	ldr	r3, [sp, #0]
 80051fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005200:	3b01      	subs	r3, #1
 8005202:	4313      	orrs	r3, r2
 8005204:	f04f 0600 	mov.w	r6, #0
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	bf0c      	ite	eq
 800520e:	4b2f      	ldreq	r3, [pc, #188]	; (80052cc <__ieee754_pow+0x3dc>)
 8005210:	4b2b      	ldrne	r3, [pc, #172]	; (80052c0 <__ieee754_pow+0x3d0>)
 8005212:	4604      	mov	r4, r0
 8005214:	460d      	mov	r5, r1
 8005216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800521a:	e9cd 2300 	strd	r2, r3, [sp]
 800521e:	4632      	mov	r2, r6
 8005220:	463b      	mov	r3, r7
 8005222:	f7fa ffa3 	bl	800016c <__aeabi_dsub>
 8005226:	4652      	mov	r2, sl
 8005228:	465b      	mov	r3, fp
 800522a:	f7fb f957 	bl	80004dc <__aeabi_dmul>
 800522e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005232:	4680      	mov	r8, r0
 8005234:	4689      	mov	r9, r1
 8005236:	4620      	mov	r0, r4
 8005238:	4629      	mov	r1, r5
 800523a:	f7fb f94f 	bl	80004dc <__aeabi_dmul>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4640      	mov	r0, r8
 8005244:	4649      	mov	r1, r9
 8005246:	f7fa ff93 	bl	8000170 <__adddf3>
 800524a:	4632      	mov	r2, r6
 800524c:	463b      	mov	r3, r7
 800524e:	4680      	mov	r8, r0
 8005250:	4689      	mov	r9, r1
 8005252:	4650      	mov	r0, sl
 8005254:	4659      	mov	r1, fp
 8005256:	f7fb f941 	bl	80004dc <__aeabi_dmul>
 800525a:	4604      	mov	r4, r0
 800525c:	460d      	mov	r5, r1
 800525e:	460b      	mov	r3, r1
 8005260:	4602      	mov	r2, r0
 8005262:	4649      	mov	r1, r9
 8005264:	4640      	mov	r0, r8
 8005266:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800526a:	f7fa ff81 	bl	8000170 <__adddf3>
 800526e:	4b18      	ldr	r3, [pc, #96]	; (80052d0 <__ieee754_pow+0x3e0>)
 8005270:	4682      	mov	sl, r0
 8005272:	4299      	cmp	r1, r3
 8005274:	460f      	mov	r7, r1
 8005276:	460e      	mov	r6, r1
 8005278:	f340 82e5 	ble.w	8005846 <__ieee754_pow+0x956>
 800527c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005280:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005284:	4303      	orrs	r3, r0
 8005286:	f000 81df 	beq.w	8005648 <__ieee754_pow+0x758>
 800528a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800528e:	2200      	movs	r2, #0
 8005290:	2300      	movs	r3, #0
 8005292:	f7fb fb95 	bl	80009c0 <__aeabi_dcmplt>
 8005296:	3800      	subs	r0, #0
 8005298:	bf18      	it	ne
 800529a:	2001      	movne	r0, #1
 800529c:	e72e      	b.n	80050fc <__ieee754_pow+0x20c>
 800529e:	bf00      	nop
 80052a0:	60000000 	.word	0x60000000
 80052a4:	3ff71547 	.word	0x3ff71547
 80052a8:	f85ddf44 	.word	0xf85ddf44
 80052ac:	3e54ae0b 	.word	0x3e54ae0b
 80052b0:	55555555 	.word	0x55555555
 80052b4:	3fd55555 	.word	0x3fd55555
 80052b8:	652b82fe 	.word	0x652b82fe
 80052bc:	3ff71547 	.word	0x3ff71547
 80052c0:	3ff00000 	.word	0x3ff00000
 80052c4:	3fd00000 	.word	0x3fd00000
 80052c8:	3fe00000 	.word	0x3fe00000
 80052cc:	bff00000 	.word	0xbff00000
 80052d0:	408fffff 	.word	0x408fffff
 80052d4:	4bd2      	ldr	r3, [pc, #840]	; (8005620 <__ieee754_pow+0x730>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	402b      	ands	r3, r5
 80052da:	b943      	cbnz	r3, 80052ee <__ieee754_pow+0x3fe>
 80052dc:	4658      	mov	r0, fp
 80052de:	4661      	mov	r1, ip
 80052e0:	4bd0      	ldr	r3, [pc, #832]	; (8005624 <__ieee754_pow+0x734>)
 80052e2:	f7fb f8fb 	bl	80004dc <__aeabi_dmul>
 80052e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80052ea:	4683      	mov	fp, r0
 80052ec:	460c      	mov	r4, r1
 80052ee:	1523      	asrs	r3, r4, #20
 80052f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80052f4:	4413      	add	r3, r2
 80052f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80052f8:	4bcb      	ldr	r3, [pc, #812]	; (8005628 <__ieee754_pow+0x738>)
 80052fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80052fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005302:	429c      	cmp	r4, r3
 8005304:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005308:	dd08      	ble.n	800531c <__ieee754_pow+0x42c>
 800530a:	4bc8      	ldr	r3, [pc, #800]	; (800562c <__ieee754_pow+0x73c>)
 800530c:	429c      	cmp	r4, r3
 800530e:	f340 8199 	ble.w	8005644 <__ieee754_pow+0x754>
 8005312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005314:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005318:	3301      	adds	r3, #1
 800531a:	930b      	str	r3, [sp, #44]	; 0x2c
 800531c:	2600      	movs	r6, #0
 800531e:	00f3      	lsls	r3, r6, #3
 8005320:	930d      	str	r3, [sp, #52]	; 0x34
 8005322:	4bc3      	ldr	r3, [pc, #780]	; (8005630 <__ieee754_pow+0x740>)
 8005324:	4658      	mov	r0, fp
 8005326:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800532a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800532e:	4629      	mov	r1, r5
 8005330:	461a      	mov	r2, r3
 8005332:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005336:	4623      	mov	r3, r4
 8005338:	f7fa ff18 	bl	800016c <__aeabi_dsub>
 800533c:	46da      	mov	sl, fp
 800533e:	462b      	mov	r3, r5
 8005340:	4652      	mov	r2, sl
 8005342:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005346:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800534a:	f7fa ff11 	bl	8000170 <__adddf3>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	2000      	movs	r0, #0
 8005354:	49b7      	ldr	r1, [pc, #732]	; (8005634 <__ieee754_pow+0x744>)
 8005356:	f7fb f9eb 	bl	8000730 <__aeabi_ddiv>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005362:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005366:	f7fb f8b9 	bl	80004dc <__aeabi_dmul>
 800536a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800536e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005372:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005376:	2300      	movs	r3, #0
 8005378:	2200      	movs	r2, #0
 800537a:	46ab      	mov	fp, r5
 800537c:	106d      	asrs	r5, r5, #1
 800537e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005382:	9304      	str	r3, [sp, #16]
 8005384:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005388:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800538c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005390:	4640      	mov	r0, r8
 8005392:	4649      	mov	r1, r9
 8005394:	4614      	mov	r4, r2
 8005396:	461d      	mov	r5, r3
 8005398:	f7fb f8a0 	bl	80004dc <__aeabi_dmul>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80053a4:	f7fa fee2 	bl	800016c <__aeabi_dsub>
 80053a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053ac:	4606      	mov	r6, r0
 80053ae:	460f      	mov	r7, r1
 80053b0:	4620      	mov	r0, r4
 80053b2:	4629      	mov	r1, r5
 80053b4:	f7fa feda 	bl	800016c <__aeabi_dsub>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4650      	mov	r0, sl
 80053be:	4659      	mov	r1, fp
 80053c0:	f7fa fed4 	bl	800016c <__aeabi_dsub>
 80053c4:	4642      	mov	r2, r8
 80053c6:	464b      	mov	r3, r9
 80053c8:	f7fb f888 	bl	80004dc <__aeabi_dmul>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4630      	mov	r0, r6
 80053d2:	4639      	mov	r1, r7
 80053d4:	f7fa feca 	bl	800016c <__aeabi_dsub>
 80053d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053dc:	f7fb f87e 	bl	80004dc <__aeabi_dmul>
 80053e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053e4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80053e8:	4610      	mov	r0, r2
 80053ea:	4619      	mov	r1, r3
 80053ec:	f7fb f876 	bl	80004dc <__aeabi_dmul>
 80053f0:	a379      	add	r3, pc, #484	; (adr r3, 80055d8 <__ieee754_pow+0x6e8>)
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	4604      	mov	r4, r0
 80053f8:	460d      	mov	r5, r1
 80053fa:	f7fb f86f 	bl	80004dc <__aeabi_dmul>
 80053fe:	a378      	add	r3, pc, #480	; (adr r3, 80055e0 <__ieee754_pow+0x6f0>)
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f7fa feb4 	bl	8000170 <__adddf3>
 8005408:	4622      	mov	r2, r4
 800540a:	462b      	mov	r3, r5
 800540c:	f7fb f866 	bl	80004dc <__aeabi_dmul>
 8005410:	a375      	add	r3, pc, #468	; (adr r3, 80055e8 <__ieee754_pow+0x6f8>)
 8005412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005416:	f7fa feab 	bl	8000170 <__adddf3>
 800541a:	4622      	mov	r2, r4
 800541c:	462b      	mov	r3, r5
 800541e:	f7fb f85d 	bl	80004dc <__aeabi_dmul>
 8005422:	a373      	add	r3, pc, #460	; (adr r3, 80055f0 <__ieee754_pow+0x700>)
 8005424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005428:	f7fa fea2 	bl	8000170 <__adddf3>
 800542c:	4622      	mov	r2, r4
 800542e:	462b      	mov	r3, r5
 8005430:	f7fb f854 	bl	80004dc <__aeabi_dmul>
 8005434:	a370      	add	r3, pc, #448	; (adr r3, 80055f8 <__ieee754_pow+0x708>)
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	f7fa fe99 	bl	8000170 <__adddf3>
 800543e:	4622      	mov	r2, r4
 8005440:	462b      	mov	r3, r5
 8005442:	f7fb f84b 	bl	80004dc <__aeabi_dmul>
 8005446:	a36e      	add	r3, pc, #440	; (adr r3, 8005600 <__ieee754_pow+0x710>)
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f7fa fe90 	bl	8000170 <__adddf3>
 8005450:	4622      	mov	r2, r4
 8005452:	4606      	mov	r6, r0
 8005454:	460f      	mov	r7, r1
 8005456:	462b      	mov	r3, r5
 8005458:	4620      	mov	r0, r4
 800545a:	4629      	mov	r1, r5
 800545c:	f7fb f83e 	bl	80004dc <__aeabi_dmul>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4630      	mov	r0, r6
 8005466:	4639      	mov	r1, r7
 8005468:	f7fb f838 	bl	80004dc <__aeabi_dmul>
 800546c:	4604      	mov	r4, r0
 800546e:	460d      	mov	r5, r1
 8005470:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005474:	4642      	mov	r2, r8
 8005476:	464b      	mov	r3, r9
 8005478:	f7fa fe7a 	bl	8000170 <__adddf3>
 800547c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005480:	f7fb f82c 	bl	80004dc <__aeabi_dmul>
 8005484:	4622      	mov	r2, r4
 8005486:	462b      	mov	r3, r5
 8005488:	f7fa fe72 	bl	8000170 <__adddf3>
 800548c:	4642      	mov	r2, r8
 800548e:	4606      	mov	r6, r0
 8005490:	460f      	mov	r7, r1
 8005492:	464b      	mov	r3, r9
 8005494:	4640      	mov	r0, r8
 8005496:	4649      	mov	r1, r9
 8005498:	f7fb f820 	bl	80004dc <__aeabi_dmul>
 800549c:	2200      	movs	r2, #0
 800549e:	4b66      	ldr	r3, [pc, #408]	; (8005638 <__ieee754_pow+0x748>)
 80054a0:	4682      	mov	sl, r0
 80054a2:	468b      	mov	fp, r1
 80054a4:	f7fa fe64 	bl	8000170 <__adddf3>
 80054a8:	4632      	mov	r2, r6
 80054aa:	463b      	mov	r3, r7
 80054ac:	f7fa fe60 	bl	8000170 <__adddf3>
 80054b0:	2400      	movs	r4, #0
 80054b2:	460d      	mov	r5, r1
 80054b4:	4622      	mov	r2, r4
 80054b6:	460b      	mov	r3, r1
 80054b8:	4640      	mov	r0, r8
 80054ba:	4649      	mov	r1, r9
 80054bc:	f7fb f80e 	bl	80004dc <__aeabi_dmul>
 80054c0:	2200      	movs	r2, #0
 80054c2:	4680      	mov	r8, r0
 80054c4:	4689      	mov	r9, r1
 80054c6:	4620      	mov	r0, r4
 80054c8:	4629      	mov	r1, r5
 80054ca:	4b5b      	ldr	r3, [pc, #364]	; (8005638 <__ieee754_pow+0x748>)
 80054cc:	f7fa fe4e 	bl	800016c <__aeabi_dsub>
 80054d0:	4652      	mov	r2, sl
 80054d2:	465b      	mov	r3, fp
 80054d4:	f7fa fe4a 	bl	800016c <__aeabi_dsub>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4630      	mov	r0, r6
 80054de:	4639      	mov	r1, r7
 80054e0:	f7fa fe44 	bl	800016c <__aeabi_dsub>
 80054e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054e8:	f7fa fff8 	bl	80004dc <__aeabi_dmul>
 80054ec:	4622      	mov	r2, r4
 80054ee:	4606      	mov	r6, r0
 80054f0:	460f      	mov	r7, r1
 80054f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80054f6:	462b      	mov	r3, r5
 80054f8:	f7fa fff0 	bl	80004dc <__aeabi_dmul>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4630      	mov	r0, r6
 8005502:	4639      	mov	r1, r7
 8005504:	f7fa fe34 	bl	8000170 <__adddf3>
 8005508:	2400      	movs	r4, #0
 800550a:	4606      	mov	r6, r0
 800550c:	460f      	mov	r7, r1
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4640      	mov	r0, r8
 8005514:	4649      	mov	r1, r9
 8005516:	f7fa fe2b 	bl	8000170 <__adddf3>
 800551a:	a33b      	add	r3, pc, #236	; (adr r3, 8005608 <__ieee754_pow+0x718>)
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	4620      	mov	r0, r4
 8005522:	460d      	mov	r5, r1
 8005524:	f7fa ffda 	bl	80004dc <__aeabi_dmul>
 8005528:	4642      	mov	r2, r8
 800552a:	464b      	mov	r3, r9
 800552c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005530:	4620      	mov	r0, r4
 8005532:	4629      	mov	r1, r5
 8005534:	f7fa fe1a 	bl	800016c <__aeabi_dsub>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4630      	mov	r0, r6
 800553e:	4639      	mov	r1, r7
 8005540:	f7fa fe14 	bl	800016c <__aeabi_dsub>
 8005544:	a332      	add	r3, pc, #200	; (adr r3, 8005610 <__ieee754_pow+0x720>)
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	f7fa ffc7 	bl	80004dc <__aeabi_dmul>
 800554e:	a332      	add	r3, pc, #200	; (adr r3, 8005618 <__ieee754_pow+0x728>)
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	4606      	mov	r6, r0
 8005556:	460f      	mov	r7, r1
 8005558:	4620      	mov	r0, r4
 800555a:	4629      	mov	r1, r5
 800555c:	f7fa ffbe 	bl	80004dc <__aeabi_dmul>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4630      	mov	r0, r6
 8005566:	4639      	mov	r1, r7
 8005568:	f7fa fe02 	bl	8000170 <__adddf3>
 800556c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800556e:	4b33      	ldr	r3, [pc, #204]	; (800563c <__ieee754_pow+0x74c>)
 8005570:	f04f 0a00 	mov.w	sl, #0
 8005574:	4413      	add	r3, r2
 8005576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557a:	f7fa fdf9 	bl	8000170 <__adddf3>
 800557e:	4680      	mov	r8, r0
 8005580:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005582:	4689      	mov	r9, r1
 8005584:	f7fa ff40 	bl	8000408 <__aeabi_i2d>
 8005588:	4604      	mov	r4, r0
 800558a:	460d      	mov	r5, r1
 800558c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800558e:	4b2c      	ldr	r3, [pc, #176]	; (8005640 <__ieee754_pow+0x750>)
 8005590:	4413      	add	r3, r2
 8005592:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005596:	4642      	mov	r2, r8
 8005598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800559c:	464b      	mov	r3, r9
 800559e:	f7fa fde7 	bl	8000170 <__adddf3>
 80055a2:	4632      	mov	r2, r6
 80055a4:	463b      	mov	r3, r7
 80055a6:	f7fa fde3 	bl	8000170 <__adddf3>
 80055aa:	4622      	mov	r2, r4
 80055ac:	462b      	mov	r3, r5
 80055ae:	f7fa fddf 	bl	8000170 <__adddf3>
 80055b2:	4622      	mov	r2, r4
 80055b4:	462b      	mov	r3, r5
 80055b6:	4650      	mov	r0, sl
 80055b8:	468b      	mov	fp, r1
 80055ba:	f7fa fdd7 	bl	800016c <__aeabi_dsub>
 80055be:	4632      	mov	r2, r6
 80055c0:	463b      	mov	r3, r7
 80055c2:	f7fa fdd3 	bl	800016c <__aeabi_dsub>
 80055c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055ca:	f7fa fdcf 	bl	800016c <__aeabi_dsub>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4640      	mov	r0, r8
 80055d4:	4649      	mov	r1, r9
 80055d6:	e60d      	b.n	80051f4 <__ieee754_pow+0x304>
 80055d8:	4a454eef 	.word	0x4a454eef
 80055dc:	3fca7e28 	.word	0x3fca7e28
 80055e0:	93c9db65 	.word	0x93c9db65
 80055e4:	3fcd864a 	.word	0x3fcd864a
 80055e8:	a91d4101 	.word	0xa91d4101
 80055ec:	3fd17460 	.word	0x3fd17460
 80055f0:	518f264d 	.word	0x518f264d
 80055f4:	3fd55555 	.word	0x3fd55555
 80055f8:	db6fabff 	.word	0xdb6fabff
 80055fc:	3fdb6db6 	.word	0x3fdb6db6
 8005600:	33333303 	.word	0x33333303
 8005604:	3fe33333 	.word	0x3fe33333
 8005608:	e0000000 	.word	0xe0000000
 800560c:	3feec709 	.word	0x3feec709
 8005610:	dc3a03fd 	.word	0xdc3a03fd
 8005614:	3feec709 	.word	0x3feec709
 8005618:	145b01f5 	.word	0x145b01f5
 800561c:	be3e2fe0 	.word	0xbe3e2fe0
 8005620:	7ff00000 	.word	0x7ff00000
 8005624:	43400000 	.word	0x43400000
 8005628:	0003988e 	.word	0x0003988e
 800562c:	000bb679 	.word	0x000bb679
 8005630:	08005ce0 	.word	0x08005ce0
 8005634:	3ff00000 	.word	0x3ff00000
 8005638:	40080000 	.word	0x40080000
 800563c:	08005d00 	.word	0x08005d00
 8005640:	08005cf0 	.word	0x08005cf0
 8005644:	2601      	movs	r6, #1
 8005646:	e66a      	b.n	800531e <__ieee754_pow+0x42e>
 8005648:	a39d      	add	r3, pc, #628	; (adr r3, 80058c0 <__ieee754_pow+0x9d0>)
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	4640      	mov	r0, r8
 8005650:	4649      	mov	r1, r9
 8005652:	f7fa fd8d 	bl	8000170 <__adddf3>
 8005656:	4622      	mov	r2, r4
 8005658:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800565c:	462b      	mov	r3, r5
 800565e:	4650      	mov	r0, sl
 8005660:	4639      	mov	r1, r7
 8005662:	f7fa fd83 	bl	800016c <__aeabi_dsub>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800566e:	f7fb f9c5 	bl	80009fc <__aeabi_dcmpgt>
 8005672:	2800      	cmp	r0, #0
 8005674:	f47f ae09 	bne.w	800528a <__ieee754_pow+0x39a>
 8005678:	4aa3      	ldr	r2, [pc, #652]	; (8005908 <__ieee754_pow+0xa18>)
 800567a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800567e:	4293      	cmp	r3, r2
 8005680:	f340 8101 	ble.w	8005886 <__ieee754_pow+0x996>
 8005684:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005688:	2000      	movs	r0, #0
 800568a:	151b      	asrs	r3, r3, #20
 800568c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005690:	fa4a f303 	asr.w	r3, sl, r3
 8005694:	4433      	add	r3, r6
 8005696:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800569a:	4f9c      	ldr	r7, [pc, #624]	; (800590c <__ieee754_pow+0xa1c>)
 800569c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80056a0:	4117      	asrs	r7, r2
 80056a2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80056a6:	ea23 0107 	bic.w	r1, r3, r7
 80056aa:	f1c2 0214 	rsb	r2, r2, #20
 80056ae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80056b2:	460b      	mov	r3, r1
 80056b4:	fa4a fa02 	asr.w	sl, sl, r2
 80056b8:	2e00      	cmp	r6, #0
 80056ba:	4602      	mov	r2, r0
 80056bc:	4629      	mov	r1, r5
 80056be:	4620      	mov	r0, r4
 80056c0:	bfb8      	it	lt
 80056c2:	f1ca 0a00 	rsblt	sl, sl, #0
 80056c6:	f7fa fd51 	bl	800016c <__aeabi_dsub>
 80056ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056d2:	2400      	movs	r4, #0
 80056d4:	4642      	mov	r2, r8
 80056d6:	464b      	mov	r3, r9
 80056d8:	f7fa fd4a 	bl	8000170 <__adddf3>
 80056dc:	a37a      	add	r3, pc, #488	; (adr r3, 80058c8 <__ieee754_pow+0x9d8>)
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	4620      	mov	r0, r4
 80056e4:	460d      	mov	r5, r1
 80056e6:	f7fa fef9 	bl	80004dc <__aeabi_dmul>
 80056ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056ee:	4606      	mov	r6, r0
 80056f0:	460f      	mov	r7, r1
 80056f2:	4620      	mov	r0, r4
 80056f4:	4629      	mov	r1, r5
 80056f6:	f7fa fd39 	bl	800016c <__aeabi_dsub>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4640      	mov	r0, r8
 8005700:	4649      	mov	r1, r9
 8005702:	f7fa fd33 	bl	800016c <__aeabi_dsub>
 8005706:	a372      	add	r3, pc, #456	; (adr r3, 80058d0 <__ieee754_pow+0x9e0>)
 8005708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570c:	f7fa fee6 	bl	80004dc <__aeabi_dmul>
 8005710:	a371      	add	r3, pc, #452	; (adr r3, 80058d8 <__ieee754_pow+0x9e8>)
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	4680      	mov	r8, r0
 8005718:	4689      	mov	r9, r1
 800571a:	4620      	mov	r0, r4
 800571c:	4629      	mov	r1, r5
 800571e:	f7fa fedd 	bl	80004dc <__aeabi_dmul>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4640      	mov	r0, r8
 8005728:	4649      	mov	r1, r9
 800572a:	f7fa fd21 	bl	8000170 <__adddf3>
 800572e:	4604      	mov	r4, r0
 8005730:	460d      	mov	r5, r1
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4630      	mov	r0, r6
 8005738:	4639      	mov	r1, r7
 800573a:	f7fa fd19 	bl	8000170 <__adddf3>
 800573e:	4632      	mov	r2, r6
 8005740:	463b      	mov	r3, r7
 8005742:	4680      	mov	r8, r0
 8005744:	4689      	mov	r9, r1
 8005746:	f7fa fd11 	bl	800016c <__aeabi_dsub>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4620      	mov	r0, r4
 8005750:	4629      	mov	r1, r5
 8005752:	f7fa fd0b 	bl	800016c <__aeabi_dsub>
 8005756:	4642      	mov	r2, r8
 8005758:	4606      	mov	r6, r0
 800575a:	460f      	mov	r7, r1
 800575c:	464b      	mov	r3, r9
 800575e:	4640      	mov	r0, r8
 8005760:	4649      	mov	r1, r9
 8005762:	f7fa febb 	bl	80004dc <__aeabi_dmul>
 8005766:	a35e      	add	r3, pc, #376	; (adr r3, 80058e0 <__ieee754_pow+0x9f0>)
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	4604      	mov	r4, r0
 800576e:	460d      	mov	r5, r1
 8005770:	f7fa feb4 	bl	80004dc <__aeabi_dmul>
 8005774:	a35c      	add	r3, pc, #368	; (adr r3, 80058e8 <__ieee754_pow+0x9f8>)
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	f7fa fcf7 	bl	800016c <__aeabi_dsub>
 800577e:	4622      	mov	r2, r4
 8005780:	462b      	mov	r3, r5
 8005782:	f7fa feab 	bl	80004dc <__aeabi_dmul>
 8005786:	a35a      	add	r3, pc, #360	; (adr r3, 80058f0 <__ieee754_pow+0xa00>)
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f7fa fcf0 	bl	8000170 <__adddf3>
 8005790:	4622      	mov	r2, r4
 8005792:	462b      	mov	r3, r5
 8005794:	f7fa fea2 	bl	80004dc <__aeabi_dmul>
 8005798:	a357      	add	r3, pc, #348	; (adr r3, 80058f8 <__ieee754_pow+0xa08>)
 800579a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579e:	f7fa fce5 	bl	800016c <__aeabi_dsub>
 80057a2:	4622      	mov	r2, r4
 80057a4:	462b      	mov	r3, r5
 80057a6:	f7fa fe99 	bl	80004dc <__aeabi_dmul>
 80057aa:	a355      	add	r3, pc, #340	; (adr r3, 8005900 <__ieee754_pow+0xa10>)
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	f7fa fcde 	bl	8000170 <__adddf3>
 80057b4:	4622      	mov	r2, r4
 80057b6:	462b      	mov	r3, r5
 80057b8:	f7fa fe90 	bl	80004dc <__aeabi_dmul>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4640      	mov	r0, r8
 80057c2:	4649      	mov	r1, r9
 80057c4:	f7fa fcd2 	bl	800016c <__aeabi_dsub>
 80057c8:	4604      	mov	r4, r0
 80057ca:	460d      	mov	r5, r1
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4640      	mov	r0, r8
 80057d2:	4649      	mov	r1, r9
 80057d4:	f7fa fe82 	bl	80004dc <__aeabi_dmul>
 80057d8:	2200      	movs	r2, #0
 80057da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057e2:	4620      	mov	r0, r4
 80057e4:	4629      	mov	r1, r5
 80057e6:	f7fa fcc1 	bl	800016c <__aeabi_dsub>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057f2:	f7fa ff9d 	bl	8000730 <__aeabi_ddiv>
 80057f6:	4632      	mov	r2, r6
 80057f8:	4604      	mov	r4, r0
 80057fa:	460d      	mov	r5, r1
 80057fc:	463b      	mov	r3, r7
 80057fe:	4640      	mov	r0, r8
 8005800:	4649      	mov	r1, r9
 8005802:	f7fa fe6b 	bl	80004dc <__aeabi_dmul>
 8005806:	4632      	mov	r2, r6
 8005808:	463b      	mov	r3, r7
 800580a:	f7fa fcb1 	bl	8000170 <__adddf3>
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	4620      	mov	r0, r4
 8005814:	4629      	mov	r1, r5
 8005816:	f7fa fca9 	bl	800016c <__aeabi_dsub>
 800581a:	4642      	mov	r2, r8
 800581c:	464b      	mov	r3, r9
 800581e:	f7fa fca5 	bl	800016c <__aeabi_dsub>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	2000      	movs	r0, #0
 8005828:	4939      	ldr	r1, [pc, #228]	; (8005910 <__ieee754_pow+0xa20>)
 800582a:	f7fa fc9f 	bl	800016c <__aeabi_dsub>
 800582e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005832:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005836:	da29      	bge.n	800588c <__ieee754_pow+0x99c>
 8005838:	4652      	mov	r2, sl
 800583a:	f000 f955 	bl	8005ae8 <scalbn>
 800583e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005842:	f7ff bbfe 	b.w	8005042 <__ieee754_pow+0x152>
 8005846:	4b33      	ldr	r3, [pc, #204]	; (8005914 <__ieee754_pow+0xa24>)
 8005848:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800584c:	429f      	cmp	r7, r3
 800584e:	f77f af13 	ble.w	8005678 <__ieee754_pow+0x788>
 8005852:	4b31      	ldr	r3, [pc, #196]	; (8005918 <__ieee754_pow+0xa28>)
 8005854:	440b      	add	r3, r1
 8005856:	4303      	orrs	r3, r0
 8005858:	d009      	beq.n	800586e <__ieee754_pow+0x97e>
 800585a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800585e:	2200      	movs	r2, #0
 8005860:	2300      	movs	r3, #0
 8005862:	f7fb f8ad 	bl	80009c0 <__aeabi_dcmplt>
 8005866:	3800      	subs	r0, #0
 8005868:	bf18      	it	ne
 800586a:	2001      	movne	r0, #1
 800586c:	e453      	b.n	8005116 <__ieee754_pow+0x226>
 800586e:	4622      	mov	r2, r4
 8005870:	462b      	mov	r3, r5
 8005872:	f7fa fc7b 	bl	800016c <__aeabi_dsub>
 8005876:	4642      	mov	r2, r8
 8005878:	464b      	mov	r3, r9
 800587a:	f7fb f8b5 	bl	80009e8 <__aeabi_dcmpge>
 800587e:	2800      	cmp	r0, #0
 8005880:	f43f aefa 	beq.w	8005678 <__ieee754_pow+0x788>
 8005884:	e7e9      	b.n	800585a <__ieee754_pow+0x96a>
 8005886:	f04f 0a00 	mov.w	sl, #0
 800588a:	e720      	b.n	80056ce <__ieee754_pow+0x7de>
 800588c:	4621      	mov	r1, r4
 800588e:	e7d6      	b.n	800583e <__ieee754_pow+0x94e>
 8005890:	f04f 0b00 	mov.w	fp, #0
 8005894:	f8df c078 	ldr.w	ip, [pc, #120]	; 8005910 <__ieee754_pow+0xa20>
 8005898:	f7ff bbba 	b.w	8005010 <__ieee754_pow+0x120>
 800589c:	f04f 0b00 	mov.w	fp, #0
 80058a0:	f04f 0c00 	mov.w	ip, #0
 80058a4:	f7ff bbb4 	b.w	8005010 <__ieee754_pow+0x120>
 80058a8:	4640      	mov	r0, r8
 80058aa:	4649      	mov	r1, r9
 80058ac:	f7ff bb3d 	b.w	8004f2a <__ieee754_pow+0x3a>
 80058b0:	9200      	str	r2, [sp, #0]
 80058b2:	f7ff bb89 	b.w	8004fc8 <__ieee754_pow+0xd8>
 80058b6:	2300      	movs	r3, #0
 80058b8:	f7ff bb73 	b.w	8004fa2 <__ieee754_pow+0xb2>
 80058bc:	f3af 8000 	nop.w
 80058c0:	652b82fe 	.word	0x652b82fe
 80058c4:	3c971547 	.word	0x3c971547
 80058c8:	00000000 	.word	0x00000000
 80058cc:	3fe62e43 	.word	0x3fe62e43
 80058d0:	fefa39ef 	.word	0xfefa39ef
 80058d4:	3fe62e42 	.word	0x3fe62e42
 80058d8:	0ca86c39 	.word	0x0ca86c39
 80058dc:	be205c61 	.word	0xbe205c61
 80058e0:	72bea4d0 	.word	0x72bea4d0
 80058e4:	3e663769 	.word	0x3e663769
 80058e8:	c5d26bf1 	.word	0xc5d26bf1
 80058ec:	3ebbbd41 	.word	0x3ebbbd41
 80058f0:	af25de2c 	.word	0xaf25de2c
 80058f4:	3f11566a 	.word	0x3f11566a
 80058f8:	16bebd93 	.word	0x16bebd93
 80058fc:	3f66c16c 	.word	0x3f66c16c
 8005900:	5555553e 	.word	0x5555553e
 8005904:	3fc55555 	.word	0x3fc55555
 8005908:	3fe00000 	.word	0x3fe00000
 800590c:	000fffff 	.word	0x000fffff
 8005910:	3ff00000 	.word	0x3ff00000
 8005914:	4090cbff 	.word	0x4090cbff
 8005918:	3f6f3400 	.word	0x3f6f3400

0800591c <__ieee754_sqrt>:
 800591c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8005a78 <__ieee754_sqrt+0x15c>
 8005920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005924:	ea3c 0c01 	bics.w	ip, ip, r1
 8005928:	4606      	mov	r6, r0
 800592a:	460d      	mov	r5, r1
 800592c:	460c      	mov	r4, r1
 800592e:	460a      	mov	r2, r1
 8005930:	4607      	mov	r7, r0
 8005932:	4603      	mov	r3, r0
 8005934:	d10f      	bne.n	8005956 <__ieee754_sqrt+0x3a>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	f7fa fdcf 	bl	80004dc <__aeabi_dmul>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	4630      	mov	r0, r6
 8005944:	4629      	mov	r1, r5
 8005946:	f7fa fc13 	bl	8000170 <__adddf3>
 800594a:	4606      	mov	r6, r0
 800594c:	460d      	mov	r5, r1
 800594e:	4630      	mov	r0, r6
 8005950:	4629      	mov	r1, r5
 8005952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005956:	2900      	cmp	r1, #0
 8005958:	dc0e      	bgt.n	8005978 <__ieee754_sqrt+0x5c>
 800595a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800595e:	ea5c 0707 	orrs.w	r7, ip, r7
 8005962:	d0f4      	beq.n	800594e <__ieee754_sqrt+0x32>
 8005964:	b141      	cbz	r1, 8005978 <__ieee754_sqrt+0x5c>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	f7fa fbff 	bl	800016c <__aeabi_dsub>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	f7fa fedd 	bl	8000730 <__aeabi_ddiv>
 8005976:	e7e8      	b.n	800594a <__ieee754_sqrt+0x2e>
 8005978:	1521      	asrs	r1, r4, #20
 800597a:	d075      	beq.n	8005a68 <__ieee754_sqrt+0x14c>
 800597c:	07cc      	lsls	r4, r1, #31
 800597e:	f04f 0400 	mov.w	r4, #0
 8005982:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005986:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800598a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800598e:	bf5e      	ittt	pl
 8005990:	0fd9      	lsrpl	r1, r3, #31
 8005992:	005b      	lslpl	r3, r3, #1
 8005994:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8005998:	0fd9      	lsrs	r1, r3, #31
 800599a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800599e:	2516      	movs	r5, #22
 80059a0:	4620      	mov	r0, r4
 80059a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059a6:	107f      	asrs	r7, r7, #1
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	1846      	adds	r6, r0, r1
 80059ac:	4296      	cmp	r6, r2
 80059ae:	bfde      	ittt	le
 80059b0:	1b92      	suble	r2, r2, r6
 80059b2:	1870      	addle	r0, r6, r1
 80059b4:	1864      	addle	r4, r4, r1
 80059b6:	0052      	lsls	r2, r2, #1
 80059b8:	3d01      	subs	r5, #1
 80059ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80059be:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80059c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80059c6:	d1f0      	bne.n	80059aa <__ieee754_sqrt+0x8e>
 80059c8:	4629      	mov	r1, r5
 80059ca:	f04f 0e20 	mov.w	lr, #32
 80059ce:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80059d2:	4282      	cmp	r2, r0
 80059d4:	eb06 0c05 	add.w	ip, r6, r5
 80059d8:	dc02      	bgt.n	80059e0 <__ieee754_sqrt+0xc4>
 80059da:	d113      	bne.n	8005a04 <__ieee754_sqrt+0xe8>
 80059dc:	459c      	cmp	ip, r3
 80059de:	d811      	bhi.n	8005a04 <__ieee754_sqrt+0xe8>
 80059e0:	f1bc 0f00 	cmp.w	ip, #0
 80059e4:	eb0c 0506 	add.w	r5, ip, r6
 80059e8:	da43      	bge.n	8005a72 <__ieee754_sqrt+0x156>
 80059ea:	2d00      	cmp	r5, #0
 80059ec:	db41      	blt.n	8005a72 <__ieee754_sqrt+0x156>
 80059ee:	f100 0801 	add.w	r8, r0, #1
 80059f2:	1a12      	subs	r2, r2, r0
 80059f4:	4640      	mov	r0, r8
 80059f6:	459c      	cmp	ip, r3
 80059f8:	bf88      	it	hi
 80059fa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80059fe:	eba3 030c 	sub.w	r3, r3, ip
 8005a02:	4431      	add	r1, r6
 8005a04:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005a08:	f1be 0e01 	subs.w	lr, lr, #1
 8005a0c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8005a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a14:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005a18:	d1db      	bne.n	80059d2 <__ieee754_sqrt+0xb6>
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	d006      	beq.n	8005a2c <__ieee754_sqrt+0x110>
 8005a1e:	1c48      	adds	r0, r1, #1
 8005a20:	bf0b      	itete	eq
 8005a22:	4671      	moveq	r1, lr
 8005a24:	3101      	addne	r1, #1
 8005a26:	3401      	addeq	r4, #1
 8005a28:	f021 0101 	bicne.w	r1, r1, #1
 8005a2c:	1063      	asrs	r3, r4, #1
 8005a2e:	0849      	lsrs	r1, r1, #1
 8005a30:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005a34:	07e2      	lsls	r2, r4, #31
 8005a36:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005a3a:	bf48      	it	mi
 8005a3c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005a40:	460e      	mov	r6, r1
 8005a42:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005a46:	e782      	b.n	800594e <__ieee754_sqrt+0x32>
 8005a48:	0ada      	lsrs	r2, r3, #11
 8005a4a:	3815      	subs	r0, #21
 8005a4c:	055b      	lsls	r3, r3, #21
 8005a4e:	2a00      	cmp	r2, #0
 8005a50:	d0fa      	beq.n	8005a48 <__ieee754_sqrt+0x12c>
 8005a52:	02d5      	lsls	r5, r2, #11
 8005a54:	d50a      	bpl.n	8005a6c <__ieee754_sqrt+0x150>
 8005a56:	f1c1 0420 	rsb	r4, r1, #32
 8005a5a:	fa23 f404 	lsr.w	r4, r3, r4
 8005a5e:	1e4d      	subs	r5, r1, #1
 8005a60:	408b      	lsls	r3, r1
 8005a62:	4322      	orrs	r2, r4
 8005a64:	1b41      	subs	r1, r0, r5
 8005a66:	e789      	b.n	800597c <__ieee754_sqrt+0x60>
 8005a68:	4608      	mov	r0, r1
 8005a6a:	e7f0      	b.n	8005a4e <__ieee754_sqrt+0x132>
 8005a6c:	0052      	lsls	r2, r2, #1
 8005a6e:	3101      	adds	r1, #1
 8005a70:	e7ef      	b.n	8005a52 <__ieee754_sqrt+0x136>
 8005a72:	4680      	mov	r8, r0
 8005a74:	e7bd      	b.n	80059f2 <__ieee754_sqrt+0xd6>
 8005a76:	bf00      	nop
 8005a78:	7ff00000 	.word	0x7ff00000

08005a7c <with_errno>:
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	4604      	mov	r4, r0
 8005a80:	460d      	mov	r5, r1
 8005a82:	4616      	mov	r6, r2
 8005a84:	f7fe fd20 	bl	80044c8 <__errno>
 8005a88:	4629      	mov	r1, r5
 8005a8a:	6006      	str	r6, [r0, #0]
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}

08005a90 <xflow>:
 8005a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a92:	4615      	mov	r5, r2
 8005a94:	461c      	mov	r4, r3
 8005a96:	b180      	cbz	r0, 8005aba <xflow+0x2a>
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005a9e:	e9cd 0100 	strd	r0, r1, [sp]
 8005aa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	f7fa fd17 	bl	80004dc <__aeabi_dmul>
 8005aae:	2222      	movs	r2, #34	; 0x22
 8005ab0:	b003      	add	sp, #12
 8005ab2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ab6:	f7ff bfe1 	b.w	8005a7c <with_errno>
 8005aba:	4610      	mov	r0, r2
 8005abc:	4619      	mov	r1, r3
 8005abe:	e7ee      	b.n	8005a9e <xflow+0xe>

08005ac0 <__math_uflow>:
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ac6:	f7ff bfe3 	b.w	8005a90 <xflow>

08005aca <__math_oflow>:
 8005aca:	2200      	movs	r2, #0
 8005acc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005ad0:	f7ff bfde 	b.w	8005a90 <xflow>

08005ad4 <fabs>:
 8005ad4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005ad8:	4770      	bx	lr

08005ada <finite>:
 8005ada:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8005ade:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005ae2:	0fc0      	lsrs	r0, r0, #31
 8005ae4:	4770      	bx	lr
	...

08005ae8 <scalbn>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005aee:	4604      	mov	r4, r0
 8005af0:	460d      	mov	r5, r1
 8005af2:	4617      	mov	r7, r2
 8005af4:	460b      	mov	r3, r1
 8005af6:	b996      	cbnz	r6, 8005b1e <scalbn+0x36>
 8005af8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005afc:	4303      	orrs	r3, r0
 8005afe:	d039      	beq.n	8005b74 <scalbn+0x8c>
 8005b00:	4b33      	ldr	r3, [pc, #204]	; (8005bd0 <scalbn+0xe8>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	f7fa fcea 	bl	80004dc <__aeabi_dmul>
 8005b08:	4b32      	ldr	r3, [pc, #200]	; (8005bd4 <scalbn+0xec>)
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	429f      	cmp	r7, r3
 8005b0e:	460d      	mov	r5, r1
 8005b10:	da0f      	bge.n	8005b32 <scalbn+0x4a>
 8005b12:	a32b      	add	r3, pc, #172	; (adr r3, 8005bc0 <scalbn+0xd8>)
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f7fa fce0 	bl	80004dc <__aeabi_dmul>
 8005b1c:	e006      	b.n	8005b2c <scalbn+0x44>
 8005b1e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005b22:	4296      	cmp	r6, r2
 8005b24:	d10a      	bne.n	8005b3c <scalbn+0x54>
 8005b26:	4602      	mov	r2, r0
 8005b28:	f7fa fb22 	bl	8000170 <__adddf3>
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	460d      	mov	r5, r1
 8005b30:	e020      	b.n	8005b74 <scalbn+0x8c>
 8005b32:	460b      	mov	r3, r1
 8005b34:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005b38:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8005b3c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005b40:	19b9      	adds	r1, r7, r6
 8005b42:	4291      	cmp	r1, r2
 8005b44:	dd0e      	ble.n	8005b64 <scalbn+0x7c>
 8005b46:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005b4a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005b4e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005b52:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005b56:	4820      	ldr	r0, [pc, #128]	; (8005bd8 <scalbn+0xf0>)
 8005b58:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005b5c:	a31a      	add	r3, pc, #104	; (adr r3, 8005bc8 <scalbn+0xe0>)
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	e7d9      	b.n	8005b18 <scalbn+0x30>
 8005b64:	2900      	cmp	r1, #0
 8005b66:	dd08      	ble.n	8005b7a <scalbn+0x92>
 8005b68:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b70:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005b74:	4620      	mov	r0, r4
 8005b76:	4629      	mov	r1, r5
 8005b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b7a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8005b7e:	da12      	bge.n	8005ba6 <scalbn+0xbe>
 8005b80:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005b84:	429f      	cmp	r7, r3
 8005b86:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8005b8a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8005b8e:	dcdc      	bgt.n	8005b4a <scalbn+0x62>
 8005b90:	a30b      	add	r3, pc, #44	; (adr r3, 8005bc0 <scalbn+0xd8>)
 8005b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b96:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8005b9a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8005b9e:	480f      	ldr	r0, [pc, #60]	; (8005bdc <scalbn+0xf4>)
 8005ba0:	f041 011f 	orr.w	r1, r1, #31
 8005ba4:	e7b8      	b.n	8005b18 <scalbn+0x30>
 8005ba6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005baa:	3136      	adds	r1, #54	; 0x36
 8005bac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005bb0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	2200      	movs	r2, #0
 8005bba:	4b09      	ldr	r3, [pc, #36]	; (8005be0 <scalbn+0xf8>)
 8005bbc:	e7ac      	b.n	8005b18 <scalbn+0x30>
 8005bbe:	bf00      	nop
 8005bc0:	c2f8f359 	.word	0xc2f8f359
 8005bc4:	01a56e1f 	.word	0x01a56e1f
 8005bc8:	8800759c 	.word	0x8800759c
 8005bcc:	7e37e43c 	.word	0x7e37e43c
 8005bd0:	43500000 	.word	0x43500000
 8005bd4:	ffff3cb0 	.word	0xffff3cb0
 8005bd8:	8800759c 	.word	0x8800759c
 8005bdc:	c2f8f359 	.word	0xc2f8f359
 8005be0:	3c900000 	.word	0x3c900000

08005be4 <_init>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	bf00      	nop
 8005be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bea:	bc08      	pop	{r3}
 8005bec:	469e      	mov	lr, r3
 8005bee:	4770      	bx	lr

08005bf0 <_fini>:
 8005bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf2:	bf00      	nop
 8005bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf6:	bc08      	pop	{r3}
 8005bf8:	469e      	mov	lr, r3
 8005bfa:	4770      	bx	lr
